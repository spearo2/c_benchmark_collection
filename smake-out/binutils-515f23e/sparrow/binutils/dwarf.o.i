# 1 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
# 1 "/doner/binutils/binutils-515f23e/binutils//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
# 21 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
# 1 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 1
# 23 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h"
# 1 "/doner/binutils/binutils-515f23e/binutils/./config.h" 1
# 24 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4

# 209 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) __attribute__ ((__nothrow__ , __leaf__));







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 873 "/usr/include/stdio.h" 3 4

# 25 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 27 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2


# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__ , __leaf__));





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__ , __leaf__));




extern __mode_t getumask (void) __attribute__ ((__nothrow__ , __leaf__));



extern int mkdir (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) __attribute__ ((__nothrow__ , __leaf__));
# 395 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 5)));


# 1 "/usr/include/x86_64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4




# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 12 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4






# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4
# 24 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 47 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 6 "/usr/include/linux/stat.h" 2 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 32 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4



int statx (int __dirfd, const char *__restrict __path, int __flags,
           unsigned int __mask, struct statx *__restrict __buf)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 5)));


# 39 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4
# 447 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 534 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 30 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2

# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 321 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef int wchar_t;
# 32 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 272 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 273 "/usr/include/stdlib.h" 2 3 4

extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 401 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));







extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1014 "/usr/include/stdlib.h" 2 3 4
# 1023 "/usr/include/stdlib.h" 3 4

# 32 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 91 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 104 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 115 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 226 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 253 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 266 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 303 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 330 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 360 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 421 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 433 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 487 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 499 "/usr/include/string.h" 3 4

# 33 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 1 3 4
# 34 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2
# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4








extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4




# 35 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2

# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 334 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 345 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     __attribute__ ((__nothrow__ , __leaf__));






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 376 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pipe2 (int __pipedes[2], int __flags) __attribute__ ((__nothrow__ , __leaf__)) ;
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *get_current_dir_name (void) __attribute__ ((__nothrow__ , __leaf__));







extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));




extern int dup3 (int __fd, int __fd2, int __flags) __attribute__ ((__nothrow__ , __leaf__));



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;



extern int group_member (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));






extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     __attribute__ ((__nothrow__ , __leaf__)) ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     __attribute__ ((__nothrow__ , __leaf__)) ;






extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4








extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4


# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4

# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) __attribute__ ((__nothrow__ , __leaf__));






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 991 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1003 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1014 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1024 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1079 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1089 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1107 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;
# 1170 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) __attribute__ ((__nothrow__ , __leaf__));
# 1171 "/usr/include/unistd.h" 2 3 4


# 37 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2


# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 353 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 354 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 392 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4





extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    __attribute__ ((__nothrow__ , __leaf__));






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 447 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) __attribute__ ((__nothrow__ , __leaf__));





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);




# 61 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 79 "/usr/include/fcntl.h" 2 3 4
# 148 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 157 "/usr/include/fcntl.h" 3 4
extern int fcntl64 (int __fd, int __cmd, ...);
# 168 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 178 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 192 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 203 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 214 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) __attribute__ ((__nothrow__ , __leaf__));
# 272 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) __attribute__ ((__nothrow__ , __leaf__));
# 282 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 293 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
# 304 "/usr/include/fcntl.h" 3 4

# 40 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2






# 1 "./../include/ansidecl.h" 1
# 47 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2
# 1 "../bfd/bfdver.h" 1
# 48 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2




# 1 "./../include/fopen-same.h" 1
# 53 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2


# 1 "./../include/binary-io.h" 1
# 56 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2
# 92 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h"
# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4


# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) __attribute__ ((__nothrow__ , __leaf__));


extern struct lconv *localeconv (void) __attribute__ ((__nothrow__ , __leaf__));
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) __attribute__ ((__nothrow__ , __leaf__));
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));



extern void freelocale (locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));






extern locale_t uselocale (locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));








# 93 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2


# 1 "/usr/include/libintl.h" 1 3 4
# 34 "/usr/include/libintl.h" 3 4





extern char *gettext (const char *__msgid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (1)));



extern char *dgettext (const char *__domainname, const char *__msgid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2)));
extern char *__dgettext (const char *__domainname, const char *__msgid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2)));



extern char *dcgettext (const char *__domainname,
   const char *__msgid, int __category)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2)));
extern char *__dcgettext (const char *__domainname,
     const char *__msgid, int __category)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2)));




extern char *ngettext (const char *__msgid1, const char *__msgid2,
         unsigned long int __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (1))) __attribute__ ((__format_arg__ (2)));



extern char *dngettext (const char *__domainname, const char *__msgid1,
   const char *__msgid2, unsigned long int __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));



extern char *dcngettext (const char *__domainname, const char *__msgid1,
    const char *__msgid2, unsigned long int __n,
    int __category)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));





extern char *textdomain (const char *__domainname) __attribute__ ((__nothrow__ , __leaf__));



extern char *bindtextdomain (const char *__domainname,
        const char *__dirname) __attribute__ ((__nothrow__ , __leaf__));



extern char *bind_textdomain_codeset (const char *__domainname,
          const char *__codeset) __attribute__ ((__nothrow__ , __leaf__));
# 121 "/usr/include/libintl.h" 3 4

# 96 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2
# 121 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 1 3 4
# 194 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/9/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 2 3 4
# 122 "/doner/binutils/binutils-515f23e/binutils/./sysdep.h" 2
# 22 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2
# 1 "./../include/libiberty.h" 1
# 42 "./../include/libiberty.h"
# 1 "./../include/ansidecl.h" 1
# 43 "./../include/libiberty.h" 2


# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
} max_align_t;
# 46 "./../include/libiberty.h" 2
# 55 "./../include/libiberty.h"

# 55 "./../include/libiberty.h"
extern void unlock_stream (FILE *);





extern void unlock_std_streams (void);





extern FILE *fopen_unlocked (const char *, const char *);
extern FILE *fdopen_unlocked (int, const char *);
extern FILE *freopen_unlocked (const char *, const char *, FILE *);




extern char **buildargv (const char *) __attribute__ ((__malloc__));



extern void freeargv (char **);




extern char **dupargv (char * const *) __attribute__ ((__malloc__));



extern void expandargv (int *, char ***);



extern int writeargv (char * const *, FILE *);



extern int countargv (char * const *);
# 112 "./../include/libiberty.h"
extern char *basename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));
# 123 "./../include/libiberty.h"
extern const char *lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));




extern const char *dos_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));





extern const char *unix_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));



extern char *lrealpath (const char *);



extern int is_valid_fd (int fd);





extern char *concat (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));
# 157 "./../include/libiberty.h"
extern char *reconcat (char *, const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));





extern unsigned long concat_length (const char *, ...) __attribute__ ((__sentinel__));






extern char *concat_copy (char *, const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__sentinel__));






extern char *concat_copy2 (const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));



extern char *libiberty_concat_ptr;
# 193 "./../include/libiberty.h"
extern int fdmatch (int fd1, int fd2);
# 205 "./../include/libiberty.h"
extern char * getpwd (void);
# 218 "./../include/libiberty.h"
extern long get_run_time (void);




extern char *make_relative_prefix (const char *, const char *,
                                   const char *) __attribute__ ((__malloc__));





extern char *make_relative_prefix_ignore_links (const char *, const char *,
      const char *) __attribute__ ((__malloc__));




extern const char *choose_tmpdir (void) __attribute__ ((__returns_nonnull__));



extern char *choose_temp_base (void) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));



extern char *make_temp_file (const char *) __attribute__ ((__malloc__));




extern char *make_temp_file_with_prefix (const char *, const char *) __attribute__ ((__malloc__));



extern int unlink_if_ordinary (const char *);



extern const char *spaces (int count);




extern int errno_max (void);




extern const char *strerrno (int);



extern int strtoerrno (const char *);



extern char *xstrerror (int) __attribute__ ((__returns_nonnull__));




extern int signo_max (void);
# 292 "./../include/libiberty.h"
extern const char *strsigno (int);



extern int strtosigno (const char *);



extern int xatexit (void (*fn) (void));



extern void xexit (int status) __attribute__ ((__noreturn__));



extern void xmalloc_set_program_name (const char *);


extern void xmalloc_failed (size_t) __attribute__ ((__noreturn__));





extern void *xmalloc (size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1))) __attribute__ ((warn_unused_result));





extern void *xrealloc (void *, size_t) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (2))) __attribute__ ((warn_unused_result));




extern void *xcalloc (size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1, 2))) __attribute__ ((warn_unused_result));



extern char *xstrdup (const char *) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern char *xstrndup (const char *, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern void *xmemdup (const void *, size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));


extern double physmem_total (void);
extern double physmem_available (void);


extern unsigned int xcrc32 (const unsigned char *, int, unsigned int);
# 391 "./../include/libiberty.h"
extern const unsigned char _hex_value[256];
extern void hex_init (void);
# 428 "./../include/libiberty.h"
extern struct pex_obj *pex_init (int flags, const char *pname,
     const char *tempbase) __attribute__ ((__returns_nonnull__));
# 528 "./../include/libiberty.h"
extern const char *pex_run (struct pex_obj *obj, int flags,
       const char *executable, char * const *argv,
       const char *outname, const char *errname,
       int *err);
# 543 "./../include/libiberty.h"
extern const char *pex_run_in_environment (struct pex_obj *obj, int flags,
                      const char *executable,
                                           char * const *argv,
                                           char * const *env,
                              const char *outname,
        const char *errname, int *err);





extern FILE *pex_input_file (struct pex_obj *obj, int flags,
                             const char *in_name);






extern FILE *pex_input_pipe (struct pex_obj *obj, int binary);







extern FILE *pex_read_output (struct pex_obj *, int binary);







extern FILE *pex_read_err (struct pex_obj *, int binary);





extern int pex_get_status (struct pex_obj *, int count, int *vector);






struct pex_time
{
  unsigned long user_seconds;
  unsigned long user_microseconds;
  unsigned long system_seconds;
  unsigned long system_microseconds;
};

extern int pex_get_times (struct pex_obj *, int count,
     struct pex_time *vector);




extern void pex_free (struct pex_obj *);
# 618 "./../include/libiberty.h"
extern const char *pex_one (int flags, const char *executable,
       char * const *argv, const char *pname,
       const char *outname, const char *errname,
       int *status, int *err);
# 637 "./../include/libiberty.h"
extern int pexecute (const char *, char * const *, const char *,
                     const char *, char **, char **, int);



extern int pwait (int, int *, int);



extern void *bsearch_r (const void *, const void *,
   size_t, size_t,
   int (*)(const void *, const void *, void *),
   void *);
# 661 "./../include/libiberty.h"
extern char *xasprintf (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));
# 673 "./../include/libiberty.h"
extern char *xvasprintf (const char *, va_list) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 0))) __attribute__ ((__nonnull__ (1)));
# 717 "./../include/libiberty.h"
extern void setproctitle (const char *name, ...);


extern void stack_limit_increase (unsigned long);
# 730 "./../include/libiberty.h"
extern void *C_alloca (size_t) __attribute__ ((__malloc__));
# 23 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2
# 1 "../bfd/bfd.h" 1
# 44 "../bfd/bfd.h"
# 1 "./../include/symcat.h" 1
# 45 "../bfd/bfd.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4

# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 2 3 4
# 46 "../bfd/bfd.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdbool.h" 1 3 4
# 47 "../bfd/bfd.h" 2
# 1 "./../include/diagnostics.h" 1
# 48 "../bfd/bfd.h" 2
# 80 "../bfd/bfd.h"
# 1 "/usr/include/inttypes.h" 1 3 4
# 34 "/usr/include/inttypes.h" 3 4
typedef int __gwchar_t;
# 266 "/usr/include/inttypes.h" 3 4





typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,
      __gwchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,
       __gwchar_t ** __restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/inttypes.h" 3 4

# 81 "../bfd/bfd.h" 2
# 91 "../bfd/bfd.h"
        
# 110 "../bfd/bfd.h"

# 110 "../bfd/bfd.h"
typedef uint64_t bfd_vma;





typedef int64_t bfd_signed_vma;

typedef uint64_t bfd_size_type;
typedef uint64_t symvalue;
# 135 "../bfd/bfd.h"
typedef int64_t file_ptr;
typedef uint64_t ufile_ptr;

typedef uint32_t flagword;
typedef uint8_t bfd_byte;


typedef struct bfd bfd;
struct bfd_link_info;
struct bfd_link_hash_entry;
typedef struct bfd_section *sec_ptr;
typedef struct reloc_cache_entry arelent;
struct orl;
# 163 "../bfd/bfd.h"
static inline 
# 163 "../bfd/bfd.h" 3 4
             _Bool

# 164 "../bfd/bfd.h"
startswith (const char *str, const char *prefix)
{
  return strncmp (str, prefix, strlen (prefix)) == 0;
}


void *bfd_alloc (bfd *abfd, bfd_size_type wanted);

void *bfd_zalloc (bfd *abfd, bfd_size_type wanted);

void bfd_release (bfd *, void *);
# 205 "../bfd/bfd.h"
bfd_vma bfd_getb24 (const void *p);
bfd_vma bfd_getl24 (const void *p);
# 302 "../bfd/bfd.h"
uint64_t bfd_getb64 (const void *);
uint64_t bfd_getl64 (const void *);
int64_t bfd_getb_signed_64 (const void *);
int64_t bfd_getl_signed_64 (const void *);
bfd_vma bfd_getb32 (const void *);
bfd_vma bfd_getl32 (const void *);
bfd_signed_vma bfd_getb_signed_32 (const void *);
bfd_signed_vma bfd_getl_signed_32 (const void *);
bfd_vma bfd_getb16 (const void *);
bfd_vma bfd_getl16 (const void *);
bfd_signed_vma bfd_getb_signed_16 (const void *);
bfd_signed_vma bfd_getl_signed_16 (const void *);
void bfd_putb64 (uint64_t, void *);
void bfd_putl64 (uint64_t, void *);
void bfd_putb32 (bfd_vma, void *);
void bfd_putl32 (bfd_vma, void *);
void bfd_putb24 (bfd_vma, void *);
void bfd_putl24 (bfd_vma, void *);
void bfd_putb16 (bfd_vma, void *);
void bfd_putl16 (bfd_vma, void *);
uint64_t bfd_get_bits (const void *, int, 
# 322 "../bfd/bfd.h" 3 4
                                         _Bool
# 322 "../bfd/bfd.h"
                                             );
void bfd_put_bits (uint64_t, void *, int, 
# 323 "../bfd/bfd.h" 3 4
                                         _Bool
# 323 "../bfd/bfd.h"
                                             );





struct bfd_hash_entry
{

  struct bfd_hash_entry *next;

  const char *string;


  unsigned long hash;
};



struct bfd_hash_table
{

  struct bfd_hash_entry **table;







  struct bfd_hash_entry *(*newfunc)
    (struct bfd_hash_entry *, struct bfd_hash_table *, const char *);


  void *memory;

  unsigned int size;

  unsigned int count;

  unsigned int entsize;

  unsigned int frozen:1;
};


# 368 "../bfd/bfd.h" 3 4
_Bool 
# 368 "../bfd/bfd.h"
    bfd_hash_table_init_n
   (struct bfd_hash_table *,
    struct bfd_hash_entry *(* )
       (struct bfd_hash_entry *, struct bfd_hash_table *, const char *),
    unsigned int , unsigned int );


# 374 "../bfd/bfd.h" 3 4
_Bool 
# 374 "../bfd/bfd.h"
    bfd_hash_table_init
   (struct bfd_hash_table *,
    struct bfd_hash_entry *(* )
       (struct bfd_hash_entry *, struct bfd_hash_table *, const char *),
    unsigned int );

void bfd_hash_table_free (struct bfd_hash_table *);

struct bfd_hash_entry *bfd_hash_lookup
   (struct bfd_hash_table *, const char *,
    
# 384 "../bfd/bfd.h" 3 4
   _Bool 
# 384 "../bfd/bfd.h"
                  , 
# 384 "../bfd/bfd.h" 3 4
                    _Bool 
# 384 "../bfd/bfd.h"
                                 );

struct bfd_hash_entry *bfd_hash_insert
   (struct bfd_hash_table *,
    const char *,
    unsigned long );

void bfd_hash_rename (struct bfd_hash_table *,
    const char *,
    struct bfd_hash_entry *);

void bfd_hash_replace (struct bfd_hash_table *,
    struct bfd_hash_entry * ,
    struct bfd_hash_entry * );

void *bfd_hash_allocate (struct bfd_hash_table *,
    unsigned int );

struct bfd_hash_entry *bfd_hash_newfunc
   (struct bfd_hash_entry *,
    struct bfd_hash_table *,
    const char *);

void bfd_hash_traverse
   (struct bfd_hash_table *,
    
# 409 "../bfd/bfd.h" 3 4
   _Bool 
# 409 "../bfd/bfd.h"
        (*) (struct bfd_hash_entry *, void *),
    void *);

unsigned int bfd_hash_set_default_size (unsigned int);



typedef struct lineno_cache_entry
{
  unsigned int line_number;
  union
  {
    struct bfd_symbol *sym;
    bfd_vma offset;
  } u;
}
alent;

typedef struct bfd_section
{


  const char *name;


  struct bfd_section *next;


  struct bfd_section *prev;


  unsigned int id;



  unsigned int section_id;


  unsigned int index;




  flagword flags;
# 653 "../bfd/bfd.h"
  unsigned int user_set_vma : 1;


  unsigned int linker_mark : 1;



  unsigned int linker_has_input : 1;


  unsigned int gc_mark : 1;


  unsigned int compress_status : 2;
# 675 "../bfd/bfd.h"
  unsigned int segment_mark : 1;


  unsigned int sec_info_type:3;
# 689 "../bfd/bfd.h"
  unsigned int use_rela_p:1;




  unsigned int sec_flg0:1;
  unsigned int sec_flg1:1;
  unsigned int sec_flg2:1;
  unsigned int sec_flg3:1;
  unsigned int sec_flg4:1;
  unsigned int sec_flg5:1;
# 709 "../bfd/bfd.h"
  bfd_vma vma;




  bfd_vma lma;




  bfd_size_type size;
# 729 "../bfd/bfd.h"
  bfd_size_type rawsize;


  bfd_size_type compressed_size;
# 741 "../bfd/bfd.h"
  bfd_vma output_offset;


  struct bfd_section *output_section;



  struct reloc_cache_entry *relocation;



  struct reloc_cache_entry **orelocation;


  unsigned reloc_count;



  unsigned int alignment_power;





  file_ptr filepos;


  file_ptr rel_filepos;


  file_ptr line_filepos;


  void *userdata;



  bfd_byte *contents;


  alent *lineno;


  unsigned int lineno_count;


  unsigned int entsize;



  struct bfd_section *kept_section;



  file_ptr moving_line_filepos;


  int target_index;

  void *used_by_bfd;



  struct relent_chain *constructor_chain;


  bfd *owner;


  struct bfd_symbol *symbol;
  struct bfd_symbol **symbol_ptr_ptr;






  union {
    struct bfd_link_order *link_order;
    struct bfd_section *s;
    const char *linked_to_symbol_name;
  } map_head, map_tail;




  struct bfd_section *already_assigned;


  unsigned int type;

} asection;

static inline const char *
bfd_section_name (const asection *sec)
{
  return sec->name;
}

static inline bfd_size_type
bfd_section_size (const asection *sec)
{
  return sec->size;
}

static inline bfd_vma
bfd_section_vma (const asection *sec)
{
  return sec->vma;
}

static inline bfd_vma
bfd_section_lma (const asection *sec)
{
  return sec->lma;
}

static inline unsigned int
bfd_section_alignment (const asection *sec)
{
  return sec->alignment_power;
}

static inline flagword
bfd_section_flags (const asection *sec)
{
  return sec->flags;
}

static inline void *
bfd_section_userdata (const asection *sec)
{
  return sec->userdata;
}
static inline 
# 875 "../bfd/bfd.h" 3 4
             _Bool

# 876 "../bfd/bfd.h"
bfd_is_com_section (const asection *sec)
{
  return (sec->flags & 0x1000) != 0;
}





static inline 
# 885 "../bfd/bfd.h" 3 4
             _Bool

# 886 "../bfd/bfd.h"
bfd_set_section_userdata (asection *sec, void *val)
{
  sec->userdata = val;
  return 
# 889 "../bfd/bfd.h" 3 4
        1
# 889 "../bfd/bfd.h"
            ;
}

static inline 
# 892 "../bfd/bfd.h" 3 4
             _Bool

# 893 "../bfd/bfd.h"
bfd_set_section_vma (asection *sec, bfd_vma val)
{
  sec->vma = sec->lma = val;
  sec->user_set_vma = 
# 896 "../bfd/bfd.h" 3 4
                     1
# 896 "../bfd/bfd.h"
                         ;
  return 
# 897 "../bfd/bfd.h" 3 4
        1
# 897 "../bfd/bfd.h"
            ;
}

static inline 
# 900 "../bfd/bfd.h" 3 4
             _Bool

# 901 "../bfd/bfd.h"
bfd_set_section_lma (asection *sec, bfd_vma val)
{
  sec->lma = val;
  return 
# 904 "../bfd/bfd.h" 3 4
        1
# 904 "../bfd/bfd.h"
            ;
}

static inline 
# 907 "../bfd/bfd.h" 3 4
             _Bool

# 908 "../bfd/bfd.h"
bfd_set_section_alignment (asection *sec, unsigned int val)
{
  if (val >= sizeof (bfd_vma) * 8 - 1)
    return 
# 911 "../bfd/bfd.h" 3 4
          0
# 911 "../bfd/bfd.h"
               ;
  sec->alignment_power = val;
  return 
# 913 "../bfd/bfd.h" 3 4
        1
# 913 "../bfd/bfd.h"
            ;
}




extern asection _bfd_std_section[4];
# 935 "../bfd/bfd.h"
static inline 
# 935 "../bfd/bfd.h" 3 4
             _Bool

# 936 "../bfd/bfd.h"
bfd_is_und_section (const asection *sec)
{
  return sec == (&_bfd_std_section[1]);
}

static inline 
# 941 "../bfd/bfd.h" 3 4
             _Bool

# 942 "../bfd/bfd.h"
bfd_is_abs_section (const asection *sec)
{
  return sec == (&_bfd_std_section[2]);
}

static inline 
# 947 "../bfd/bfd.h" 3 4
             _Bool

# 948 "../bfd/bfd.h"
bfd_is_ind_section (const asection *sec)
{
  return sec == (&_bfd_std_section[3]);
}

static inline 
# 953 "../bfd/bfd.h" 3 4
             _Bool

# 954 "../bfd/bfd.h"
bfd_is_const_section (const asection *sec)
{
  return (sec >= _bfd_std_section
   && sec < _bfd_std_section + (sizeof (_bfd_std_section)
           / sizeof (_bfd_std_section[0])));
}


static inline 
# 962 "../bfd/bfd.h" 3 4
             _Bool

# 963 "../bfd/bfd.h"
discarded_section (const asection *sec)
{
  return (!bfd_is_abs_section (sec)
   && bfd_is_abs_section (sec->output_section)
   && sec->sec_info_type != 2
   && sec->sec_info_type != 4);
}
# 1022 "../bfd/bfd.h"
void bfd_section_list_clear (bfd *);

asection *bfd_get_section_by_name (bfd *abfd, const char *name);

asection *bfd_get_next_section_by_name (bfd *ibfd, asection *sec);

asection *bfd_get_linker_section (bfd *abfd, const char *name);

asection *bfd_get_section_by_name_if
   (bfd *abfd,
    const char *name,
    
# 1033 "../bfd/bfd.h" 3 4
   _Bool 
# 1033 "../bfd/bfd.h"
        (*func) (bfd *abfd, asection *sect, void *obj),
    void *obj);

char *bfd_get_unique_section_name
   (bfd *abfd, const char *templat, int *count);

asection *bfd_make_section_old_way (bfd *abfd, const char *name);

asection *bfd_make_section_anyway_with_flags
   (bfd *abfd, const char *name, flagword flags);

asection *bfd_make_section_anyway (bfd *abfd, const char *name);

asection *bfd_make_section_with_flags
   (bfd *, const char *name, flagword flags);

asection *bfd_make_section (bfd *, const char *name);


# 1051 "../bfd/bfd.h" 3 4
_Bool 
# 1051 "../bfd/bfd.h"
    bfd_set_section_flags (asection *sec, flagword flags);

void bfd_rename_section
   (asection *sec, const char *newname);

void bfd_map_over_sections
   (bfd *abfd,
    void (*func) (bfd *abfd, asection *sect, void *obj),
    void *obj);

asection *bfd_sections_find_if
   (bfd *abfd,
    
# 1063 "../bfd/bfd.h" 3 4
   _Bool 
# 1063 "../bfd/bfd.h"
        (*operation) (bfd *abfd, asection *sect, void *obj),
    void *obj);


# 1066 "../bfd/bfd.h" 3 4
_Bool 
# 1066 "../bfd/bfd.h"
    bfd_set_section_size (asection *sec, bfd_size_type val);


# 1068 "../bfd/bfd.h" 3 4
_Bool 
# 1068 "../bfd/bfd.h"
    bfd_set_section_contents
   (bfd *abfd, asection *section, const void *data,
    file_ptr offset, bfd_size_type count);


# 1072 "../bfd/bfd.h" 3 4
_Bool 
# 1072 "../bfd/bfd.h"
    bfd_get_section_contents
   (bfd *abfd, asection *section, void *location, file_ptr offset,
    bfd_size_type count);


# 1076 "../bfd/bfd.h" 3 4
_Bool 
# 1076 "../bfd/bfd.h"
    bfd_malloc_and_get_section
   (bfd *abfd, asection *section, bfd_byte **buf);


# 1079 "../bfd/bfd.h" 3 4
_Bool 
# 1079 "../bfd/bfd.h"
    bfd_copy_private_section_data
   (bfd *ibfd, asection *isec, bfd *obfd, asection *osec);





# 1085 "../bfd/bfd.h" 3 4
_Bool 
# 1085 "../bfd/bfd.h"
    bfd_generic_is_group_section (bfd *, const asection *sec);

const char *bfd_generic_group_name (bfd *, const asection *sec);


# 1089 "../bfd/bfd.h" 3 4
_Bool 
# 1089 "../bfd/bfd.h"
    bfd_generic_discard_group (bfd *abfd, asection *group);


typedef struct bfd_symbol
{
# 1103 "../bfd/bfd.h"
  struct bfd *the_bfd;



  const char *name;




  symvalue value;
# 1221 "../bfd/bfd.h"
  flagword flags;




  struct bfd_section *section;


  union
    {
      void *p;
      bfd_vma i;
    }
  udata;
}
asymbol;

typedef enum bfd_print_symbol
{
  bfd_print_symbol_name,
  bfd_print_symbol_more,
  bfd_print_symbol_all
} bfd_print_symbol_type;



typedef struct _symbol_info
{
  symvalue value;
  char type;
  const char *name;
  unsigned char stab_type;
  char stab_other;
  short stab_desc;
  const char *stab_name;
} symbol_info;





# 1261 "../bfd/bfd.h" 3 4
_Bool 
# 1261 "../bfd/bfd.h"
    bfd_is_local_label (bfd *abfd, asymbol *sym);


# 1263 "../bfd/bfd.h" 3 4
_Bool 
# 1263 "../bfd/bfd.h"
    bfd_is_local_label_name (bfd *abfd, const char *name);





# 1268 "../bfd/bfd.h" 3 4
_Bool 
# 1268 "../bfd/bfd.h"
    bfd_is_target_special_symbol (bfd *abfd, asymbol *sym);








# 1276 "../bfd/bfd.h" 3 4
_Bool 
# 1276 "../bfd/bfd.h"
    bfd_set_symtab
   (bfd *abfd, asymbol **location, unsigned int count);

void bfd_print_symbol_vandf (bfd *abfd, void *file, asymbol *symbol);




asymbol *_bfd_generic_make_empty_symbol (bfd *);




int bfd_decode_symclass (asymbol *symbol);


# 1291 "../bfd/bfd.h" 3 4
_Bool 
# 1291 "../bfd/bfd.h"
    bfd_is_undefined_symclass (int symclass);

void bfd_symbol_info (asymbol *symbol, symbol_info *ret);


# 1295 "../bfd/bfd.h" 3 4
_Bool 
# 1295 "../bfd/bfd.h"
    bfd_copy_private_symbol_data
   (bfd *ibfd, asymbol *isym, bfd *obfd, asymbol *osym);
# 1305 "../bfd/bfd.h"
typedef struct carsym
{
  const char *name;
  file_ptr file_offset;
}
carsym;


 typedef unsigned long symindex;


symindex bfd_get_next_mapent
   (bfd *abfd, symindex previous, carsym **sym);


# 1319 "../bfd/bfd.h" 3 4
_Bool 
# 1319 "../bfd/bfd.h"
    bfd_set_archive_head (bfd *output, bfd *new_head);

bfd *bfd_openr_next_archived_file (bfd *archive, bfd *previous);


enum bfd_architecture
{
  bfd_arch_unknown,
  bfd_arch_obscure,
  bfd_arch_m68k,
# 1360 "../bfd/bfd.h"
  bfd_arch_vax,

  bfd_arch_or1k,



  bfd_arch_sparc,
# 1404 "../bfd/bfd.h"
  bfd_arch_spu,

  bfd_arch_mips,
# 1456 "../bfd/bfd.h"
  bfd_arch_i386,
# 1465 "../bfd/bfd.h"
  bfd_arch_iamcu,



  bfd_arch_romp,
  bfd_arch_convex,
  bfd_arch_m98k,
  bfd_arch_pyramid,
  bfd_arch_h8300,







  bfd_arch_pdp11,
  bfd_arch_powerpc,
# 1509 "../bfd/bfd.h"
  bfd_arch_rs6000,




  bfd_arch_hppa,




  bfd_arch_d10v,



  bfd_arch_d30v,
  bfd_arch_dlx,
  bfd_arch_m68hc11,
  bfd_arch_m68hc12,



  bfd_arch_m9s12x,
  bfd_arch_m9s12xg,
  bfd_arch_s12z,

  bfd_arch_z8k,


  bfd_arch_sh,
# 1558 "../bfd/bfd.h"
  bfd_arch_alpha,



  bfd_arch_arm,
# 1592 "../bfd/bfd.h"
  bfd_arch_nds32,





  bfd_arch_ns32k,
  bfd_arch_tic30,
  bfd_arch_tic4x,


  bfd_arch_tic54x,
  bfd_arch_tic6x,
  bfd_arch_v850,
  bfd_arch_v850_rh850,






  bfd_arch_arc,






 bfd_arch_m32c,


  bfd_arch_m32r,



  bfd_arch_mn10200,
  bfd_arch_mn10300,



  bfd_arch_fr30,

  bfd_arch_frv,
# 1643 "../bfd/bfd.h"
  bfd_arch_moxie,

  bfd_arch_ft32,


  bfd_arch_mcore,
  bfd_arch_mep,



  bfd_arch_metag,

  bfd_arch_ia64,


  bfd_arch_ip2k,


 bfd_arch_iq2000,


  bfd_arch_bpf,


  bfd_arch_epiphany,


  bfd_arch_mt,



  bfd_arch_pj,
  bfd_arch_avr,
# 1694 "../bfd/bfd.h"
  bfd_arch_bfin,

  bfd_arch_cr16,

  bfd_arch_crx,

  bfd_arch_cris,



  bfd_arch_riscv,


  bfd_arch_rl78,

  bfd_arch_rx,



  bfd_arch_s390,


  bfd_arch_score,


  bfd_arch_mmix,
  bfd_arch_xstormy16,

  bfd_arch_msp430,
# 1747 "../bfd/bfd.h"
  bfd_arch_xgate,

  bfd_arch_xtensa,

  bfd_arch_z80,
# 1771 "../bfd/bfd.h"
  bfd_arch_lm32,

  bfd_arch_microblaze,
  bfd_arch_tilepro,
  bfd_arch_tilegx,



  bfd_arch_aarch64,




  bfd_arch_nios2,



  bfd_arch_visium,

  bfd_arch_wasm32,

  bfd_arch_pru,

  bfd_arch_nfp,


  bfd_arch_csky,
# 1807 "../bfd/bfd.h"
  bfd_arch_loongarch,


  bfd_arch_amdgcn,
# 1823 "../bfd/bfd.h"
  bfd_arch_last
  };

typedef struct bfd_arch_info
{
  int bits_per_word;
  int bits_per_address;
  int bits_per_byte;
  enum bfd_architecture arch;
  unsigned long mach;
  const char *arch_name;
  const char *printable_name;
  unsigned int section_align_power;



  
# 1839 "../bfd/bfd.h" 3 4
 _Bool 
# 1839 "../bfd/bfd.h"
      the_default;
  const struct bfd_arch_info * (*compatible) (const struct bfd_arch_info *,
           const struct bfd_arch_info *);

  
# 1843 "../bfd/bfd.h" 3 4
 _Bool 
# 1843 "../bfd/bfd.h"
      (*scan) (const struct bfd_arch_info *, const char *);




  void *(*fill) (bfd_size_type count, 
# 1848 "../bfd/bfd.h" 3 4
                                     _Bool 
# 1848 "../bfd/bfd.h"
                                          is_bigendian, 
# 1848 "../bfd/bfd.h" 3 4
                                                        _Bool 
# 1848 "../bfd/bfd.h"
                                                             code);

  const struct bfd_arch_info *next;
# 1860 "../bfd/bfd.h"
  signed int max_reloc_offset_into_insn;
}
bfd_arch_info_type;

const char *bfd_printable_name (bfd *abfd);

const bfd_arch_info_type *bfd_scan_arch (const char *string);

const char **bfd_arch_list (void);

const bfd_arch_info_type *bfd_arch_get_compatible
   (const bfd *abfd, const bfd *bbfd, 
# 1871 "../bfd/bfd.h" 3 4
                                     _Bool 
# 1871 "../bfd/bfd.h"
                                          accept_unknowns);

void bfd_set_arch_info (bfd *abfd, const bfd_arch_info_type *arg);


# 1875 "../bfd/bfd.h" 3 4
_Bool 
# 1875 "../bfd/bfd.h"
    bfd_default_set_arch_mach
   (bfd *abfd, enum bfd_architecture arch, unsigned long mach);

enum bfd_architecture bfd_get_arch (const bfd *abfd);

unsigned long bfd_get_mach (const bfd *abfd);

unsigned int bfd_arch_bits_per_byte (const bfd *abfd);

unsigned int bfd_arch_bits_per_address (const bfd *abfd);

const bfd_arch_info_type *bfd_get_arch_info (bfd *abfd);

const bfd_arch_info_type *bfd_lookup_arch
   (enum bfd_architecture arch, unsigned long machine);

const char *bfd_printable_arch_mach
   (enum bfd_architecture arch, unsigned long machine);

unsigned int bfd_octets_per_byte (const bfd *abfd,
    const asection *sec);

unsigned int bfd_arch_mach_octets_per_byte
   (enum bfd_architecture arch, unsigned long machine);


typedef enum bfd_format
  {
    bfd_unknown = 0,
    bfd_object,
    bfd_archive,
    bfd_core,
    bfd_type_end
  }
bfd_format;

enum bfd_direction
  {
    no_direction = 0,
    read_direction = 1,
    write_direction = 2,
    both_direction = 3
  };

enum bfd_plugin_format
  {
    bfd_plugin_unknown = 0,
    bfd_plugin_yes = 1,
    bfd_plugin_no = 2
  };

struct bfd_build_id
  {
    bfd_size_type size;
    bfd_byte data[1];
  };

struct bfd
{

  const char *filename;


  const struct bfd_target *xvec;



  void *iostream;
  const struct bfd_iovec *iovec;



  struct bfd *lru_prev, *lru_next;




  ufile_ptr where;


  long mtime;


  unsigned int id;


  flagword flags;
# 2066 "../bfd/bfd.h"
  __extension__ enum bfd_format format : 3;


  __extension__ enum bfd_direction direction : 2;



  unsigned int cacheable : 1;




  unsigned int target_defaulted : 1;


  unsigned int opened_once : 1;



  unsigned int mtime_set : 1;


  unsigned int no_export : 1;



  unsigned int output_has_begun : 1;


  unsigned int has_armap : 1;


  unsigned int is_thin_archive : 1;


  unsigned int no_element_cache : 1;



  unsigned int selective_search : 1;


  unsigned int is_linker_output : 1;


  unsigned int is_linker_input : 1;


  __extension__ enum bfd_plugin_format plugin_format : 2;


  unsigned int lto_output : 1;


  unsigned int lto_slim_object : 1;



  unsigned int read_only : 1;



  bfd *plugin_dummy_bfd;



  ufile_ptr origin;






  ufile_ptr proxy_origin;


  struct bfd_hash_table section_htab;


  struct bfd_section *sections;


  struct bfd_section *section_last;


  unsigned int section_count;


  int archive_plugin_fd;


  unsigned int archive_plugin_fd_open_count;



  int archive_pass;


  bfd_size_type alloc_size;



  bfd_vma start_address;



  struct bfd_symbol **outsymbols;


  unsigned int symcount;


  unsigned int dynsymcount;


  const struct bfd_arch_info *arch_info;




  ufile_ptr size;


  void *arelt_data;
  struct bfd *my_archive;
  struct bfd *archive_next;
  struct bfd *archive_head;
  struct bfd *nested_archives;


  union {

    struct bfd *next;

    struct bfd_link_hash_table *hash;
  } link;


  union
    {
      struct aout_data_struct *aout_data;
      struct artdata *aout_ar_data;
      struct coff_tdata *coff_obj_data;
      struct pe_tdata *pe_obj_data;
      struct xcoff_tdata *xcoff_obj_data;
      struct ecoff_tdata *ecoff_obj_data;
      struct srec_data_struct *srec_data;
      struct verilog_data_struct *verilog_data;
      struct ihex_data_struct *ihex_data;
      struct tekhex_data_struct *tekhex_data;
      struct elf_obj_tdata *elf_obj_data;
      struct mmo_data_struct *mmo_data;
      struct trad_core_struct *trad_core_data;
      struct som_data_struct *som_data;
      struct hpux_core_struct *hpux_core_data;
      struct hppabsd_core_struct *hppabsd_core_data;
      struct sgi_core_struct *sgi_core_data;
      struct lynx_core_struct *lynx_core_data;
      struct osf_core_struct *osf_core_data;
      struct cisco_core_struct *cisco_core_data;
      struct netbsd_core_struct *netbsd_core_data;
      struct mach_o_data_struct *mach_o_data;
      struct mach_o_fat_data_struct *mach_o_fat_data;
      struct plugin_data_struct *plugin_data;
      struct bfd_pef_data_struct *pef_data;
      struct bfd_pef_xlib_data_struct *pef_xlib_data;
      struct bfd_sym_data_struct *sym_data;
      void *any;
    }
  tdata;


  void *usrdata;




  void *memory;


  const struct bfd_build_id *build_id;
};

static inline const char *
bfd_get_filename (const bfd *abfd)
{
  return abfd->filename;
}

static inline 
# 2255 "../bfd/bfd.h" 3 4
             _Bool

# 2256 "../bfd/bfd.h"
bfd_get_cacheable (const bfd *abfd)
{
  return abfd->cacheable;
}

static inline enum bfd_format
bfd_get_format (const bfd *abfd)
{
  return abfd->format;
}

static inline flagword
bfd_get_file_flags (const bfd *abfd)
{
  return abfd->flags;
}

static inline bfd_vma
bfd_get_start_address (const bfd *abfd)
{
  return abfd->start_address;
}

static inline unsigned int
bfd_get_symcount (const bfd *abfd)
{
  return abfd->symcount;
}

static inline unsigned int
bfd_get_dynamic_symcount (const bfd *abfd)
{
  return abfd->dynsymcount;
}

static inline struct bfd_symbol **
bfd_get_outsymbols (const bfd *abfd)
{
  return abfd->outsymbols;
}

static inline unsigned int
bfd_count_sections (const bfd *abfd)
{
  return abfd->section_count;
}

static inline 
# 2303 "../bfd/bfd.h" 3 4
             _Bool

# 2304 "../bfd/bfd.h"
bfd_has_map (const bfd *abfd)
{
  return abfd->has_armap;
}

static inline 
# 2309 "../bfd/bfd.h" 3 4
             _Bool

# 2310 "../bfd/bfd.h"
bfd_is_thin_archive (const bfd *abfd)
{
  return abfd->is_thin_archive;
}

static inline void *
bfd_usrdata (const bfd *abfd)
{
  return abfd->usrdata;
}


static inline 
# 2322 "../bfd/bfd.h" 3 4
             _Bool

# 2323 "../bfd/bfd.h"
bfd_set_cacheable (bfd * abfd, 
# 2323 "../bfd/bfd.h" 3 4
                              _Bool 
# 2323 "../bfd/bfd.h"
                                   val)
{
  abfd->cacheable = val;
  return 
# 2326 "../bfd/bfd.h" 3 4
        1
# 2326 "../bfd/bfd.h"
            ;
}

static inline void
bfd_set_thin_archive (bfd *abfd, 
# 2330 "../bfd/bfd.h" 3 4
                                _Bool 
# 2330 "../bfd/bfd.h"
                                     val)
{
  abfd->is_thin_archive = val;
}

static inline void
bfd_set_usrdata (bfd *abfd, void *val)
{
  abfd->usrdata = val;
}

static inline asection *
bfd_asymbol_section (const asymbol *sy)
{
  return sy->section;
}

static inline bfd_vma
bfd_asymbol_value (const asymbol *sy)
{
  return sy->section->vma + sy->value;
}

static inline const char *
bfd_asymbol_name (const asymbol *sy)
{
  return sy->name;
}

static inline struct bfd *
bfd_asymbol_bfd (const asymbol *sy)
{
  return sy->the_bfd;
}

static inline void
bfd_set_asymbol_name (asymbol *sy, const char *name)
{
  sy->name = name;
}



static inline bfd_size_type
bfd_get_section_limit_octets (const bfd *abfd, const asection *sec)
{
  if (abfd->direction != write_direction && sec->rawsize != 0)
    return sec->rawsize;
  return sec->size;
}


static inline bfd_size_type
bfd_get_section_limit (const bfd *abfd, const asection *sec)
{
  return (bfd_get_section_limit_octets (abfd, sec)
   / bfd_octets_per_byte (abfd, sec));
}




static inline bfd_size_type
bfd_get_section_alloc_size (const bfd *abfd, const asection *sec)
{
  if (abfd->direction != write_direction && sec->rawsize > sec->size)
    return sec->rawsize;
  return sec->size;
}




static inline void
bfd_section_list_remove (bfd *abfd, asection *s)
{
  asection *next = s->next;
  asection *prev = s->prev;
  if (prev)
    prev->next = next;
  else
    abfd->sections = next;
  if (next)
    next->prev = prev;
  else
    abfd->section_last = prev;
}

static inline void
bfd_section_list_append (bfd *abfd, asection *s)
{
  s->next = 0;
  if (abfd->section_last)
    {
      s->prev = abfd->section_last;
      abfd->section_last->next = s;
    }
  else
    {
      s->prev = 0;
      abfd->sections = s;
    }
  abfd->section_last = s;
}

static inline void
bfd_section_list_prepend (bfd *abfd, asection *s)
{
  s->prev = 0;
  if (abfd->sections)
    {
      s->next = abfd->sections;
      abfd->sections->prev = s;
    }
  else
    {
      s->next = 0;
      abfd->section_last = s;
    }
  abfd->sections = s;
}

static inline void
bfd_section_list_insert_after (bfd *abfd, asection *a, asection *s)
{
  asection *next = a->next;
  s->next = next;
  s->prev = a;
  a->next = s;
  if (next)
    next->prev = s;
  else
    abfd->section_last = s;
}

static inline void
bfd_section_list_insert_before (bfd *abfd, asection *b, asection *s)
{
  asection *prev = b->prev;
  s->prev = prev;
  s->next = b;
  b->prev = s;
  if (prev)
    prev->next = s;
  else
    abfd->sections = s;
}

static inline 
# 2478 "../bfd/bfd.h" 3 4
             _Bool

# 2479 "../bfd/bfd.h"
bfd_section_removed_from_list (const bfd *abfd, const asection *s)
{
  return s->next ? s->next->prev != s : abfd->section_last != s;
}

typedef enum bfd_error
{
  bfd_error_no_error = 0,
  bfd_error_system_call,
  bfd_error_invalid_target,
  bfd_error_wrong_format,
  bfd_error_wrong_object_format,
  bfd_error_invalid_operation,
  bfd_error_no_memory,
  bfd_error_no_symbols,
  bfd_error_no_armap,
  bfd_error_no_more_archived_files,
  bfd_error_malformed_archive,
  bfd_error_missing_dso,
  bfd_error_file_not_recognized,
  bfd_error_file_ambiguously_recognized,
  bfd_error_no_contents,
  bfd_error_nonrepresentable_section,
  bfd_error_no_debug_section,
  bfd_error_bad_value,
  bfd_error_file_truncated,
  bfd_error_file_too_big,
  bfd_error_sorry,
  bfd_error_on_input,
  bfd_error_invalid_error_code
}
bfd_error_type;

bfd_error_type bfd_get_error (void);

void bfd_set_error (bfd_error_type error_tag);

void bfd_set_input_error (bfd *input, bfd_error_type error_tag);

const char *bfd_errmsg (bfd_error_type error_tag);

void bfd_perror (const char *message);

typedef void (*bfd_error_handler_type) (const char *, va_list);

void _bfd_error_handler (const char *fmt, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));

bfd_error_handler_type bfd_set_error_handler (bfd_error_handler_type);

void bfd_set_error_program_name (const char *);

typedef void (*bfd_assert_handler_type) (const char *bfd_formatmsg,
      const char *bfd_version,
      const char *bfd_file,
      int bfd_line);

bfd_assert_handler_type bfd_set_assert_handler (bfd_assert_handler_type);

unsigned int bfd_init (void);




long bfd_get_reloc_upper_bound (bfd *abfd, asection *sect);

long bfd_canonicalize_reloc
   (bfd *abfd, asection *sec, arelent **loc, asymbol **syms);

void bfd_set_reloc
   (bfd *abfd, asection *sec, arelent **rel, unsigned int count);




# 2552 "../bfd/bfd.h" 3 4
_Bool 
# 2552 "../bfd/bfd.h"
    bfd_set_file_flags (bfd *abfd, flagword flags);

int bfd_get_arch_size (bfd *abfd);

int bfd_get_sign_extend_vma (bfd *abfd);


# 2558 "../bfd/bfd.h" 3 4
_Bool 
# 2558 "../bfd/bfd.h"
    bfd_set_start_address (bfd *abfd, bfd_vma vma);

unsigned int bfd_get_gp_size (bfd *abfd);

void bfd_set_gp_size (bfd *abfd, unsigned int i);

void bfd_set_gp_value (bfd *abfd, bfd_vma v);

bfd_vma bfd_scan_vma (const char *string, const char **end, int base);


# 2568 "../bfd/bfd.h" 3 4
_Bool 
# 2568 "../bfd/bfd.h"
    bfd_copy_private_header_data (bfd *ibfd, bfd *obfd);





# 2573 "../bfd/bfd.h" 3 4
_Bool 
# 2573 "../bfd/bfd.h"
    bfd_copy_private_bfd_data (bfd *ibfd, bfd *obfd);





# 2578 "../bfd/bfd.h" 3 4
_Bool 
# 2578 "../bfd/bfd.h"
    bfd_set_private_flags (bfd *abfd, flagword flags);
# 2681 "../bfd/bfd.h"
bfd_byte *bfd_get_relocated_section_contents
   (bfd *, struct bfd_link_info *, struct bfd_link_order *, bfd_byte *,
    
# 2683 "../bfd/bfd.h" 3 4
   _Bool
# 2683 "../bfd/bfd.h"
       , asymbol **);


# 2685 "../bfd/bfd.h" 3 4
_Bool 
# 2685 "../bfd/bfd.h"
    bfd_record_phdr
   (bfd *, unsigned long, 
# 2686 "../bfd/bfd.h" 3 4
                         _Bool
# 2686 "../bfd/bfd.h"
                             , flagword, 
# 2686 "../bfd/bfd.h" 3 4
                                         _Bool
# 2686 "../bfd/bfd.h"
                                             , bfd_vma,
    
# 2687 "../bfd/bfd.h" 3 4
   _Bool
# 2687 "../bfd/bfd.h"
       , 
# 2687 "../bfd/bfd.h" 3 4
         _Bool
# 2687 "../bfd/bfd.h"
             , unsigned int, struct bfd_section **);

void bfd_sprintf_vma (bfd *, char *, bfd_vma);
void bfd_fprintf_vma (bfd *, void *, bfd_vma);




# 2694 "../bfd/bfd.h" 3 4
_Bool 
# 2694 "../bfd/bfd.h"
    bfd_alt_mach_code (bfd *abfd, int alternative);

bfd_vma bfd_emul_get_maxpagesize (const char *);

bfd_vma bfd_emul_get_commonpagesize (const char *);

char *bfd_demangle (bfd *, const char *, int);


bfd_size_type bfd_bread (void *, bfd_size_type, bfd *);

bfd_size_type bfd_bwrite (const void *, bfd_size_type, bfd *);

file_ptr bfd_tell (bfd *);

int bfd_flush (bfd *);

int bfd_stat (bfd *, struct stat *);

int bfd_seek (bfd *, file_ptr, int);

long bfd_get_mtime (bfd *abfd);

ufile_ptr bfd_get_size (bfd *abfd);

ufile_ptr bfd_get_file_size (bfd *abfd);

void *bfd_mmap (bfd *abfd, void *addr, bfd_size_type len,
    int prot, int flags, file_ptr offset,
    void **map_addr, bfd_size_type *map_len);


struct _bfd_window_internal;

typedef struct _bfd_window
{

  void *data;
  bfd_size_type size;






  struct _bfd_window_internal *i;
}
bfd_window;

void bfd_init_window (bfd_window *);

void bfd_free_window (bfd_window *);


# 2747 "../bfd/bfd.h" 3 4
_Bool 
# 2747 "../bfd/bfd.h"
    bfd_get_file_window
   (bfd *, file_ptr, bfd_size_type, bfd_window *, 
# 2748 "../bfd/bfd.h" 3 4
                                                 _Bool 
# 2748 "../bfd/bfd.h"
                                                                  );



# 2751 "../bfd/bfd.h" 3 4
_Bool 
# 2751 "../bfd/bfd.h"
    bfd_cache_close (bfd *abfd);


# 2753 "../bfd/bfd.h" 3 4
_Bool 
# 2753 "../bfd/bfd.h"
    bfd_cache_close_all (void);



enum compressed_debug_section_type
{
  COMPRESS_DEBUG_NONE = 0,
  COMPRESS_DEBUG_GNU_ZLIB = 1 << 1,
  COMPRESS_DEBUG_GABI_ZLIB = 1 << 2,
  COMPRESS_DEBUG_ZSTD = 1 << 3,
  COMPRESS_UNKNOWN = 1 << 4
};


struct compressed_type_tuple
{
  enum compressed_debug_section_type type;
  const char *name;
};


enum compression_type
{
  ch_none = 0,
  ch_compress_zlib = 1 ,
  ch_compress_zstd = 2
};

static inline char *
bfd_debug_name_to_zdebug (bfd *abfd, const char *name)
{
  size_t len = strlen (name);
  char *new_name = (char *) bfd_alloc (abfd, len + 2);
  if (new_name == 
# 2786 "../bfd/bfd.h" 3 4
                 ((void *)0)
# 2786 "../bfd/bfd.h"
                     )
    return 
# 2787 "../bfd/bfd.h" 3 4
          ((void *)0)
# 2787 "../bfd/bfd.h"
              ;
  new_name[0] = '.';
  new_name[1] = 'z';
  memcpy (new_name + 2, name + 1, len);
  return new_name;
}

static inline char *
bfd_zdebug_name_to_debug (bfd *abfd, const char *name)
{
  size_t len = strlen (name);
  char *new_name = (char *) bfd_alloc (abfd, len);
  if (new_name == 
# 2799 "../bfd/bfd.h" 3 4
                 ((void *)0)
# 2799 "../bfd/bfd.h"
                     )
    return 
# 2800 "../bfd/bfd.h" 3 4
          ((void *)0)
# 2800 "../bfd/bfd.h"
              ;
  new_name[0] = '.';
  memcpy (new_name + 1, name + 2, len - 1);
  return new_name;
}

enum compressed_debug_section_type
bfd_get_compression_algorithm (const char *name);

const char *bfd_get_compression_algorithm_name
   (enum compressed_debug_section_type type);

void bfd_update_compression_header
   (bfd *abfd, bfd_byte *contents, asection *sec);

int bfd_get_compression_header_size (bfd *abfd, asection *sec);


# 2817 "../bfd/bfd.h" 3 4
_Bool 
# 2817 "../bfd/bfd.h"
    bfd_convert_section_setup
   (bfd *ibfd, asection *isec, bfd *obfd,
    const char **new_name, bfd_size_type *new_size);


# 2821 "../bfd/bfd.h" 3 4
_Bool 
# 2821 "../bfd/bfd.h"
    bfd_convert_section_contents
   (bfd *ibfd, asection *isec, bfd *obfd,
    bfd_byte **ptr, bfd_size_type *ptr_size);


# 2825 "../bfd/bfd.h" 3 4
_Bool 
# 2825 "../bfd/bfd.h"
    bfd_get_full_section_contents
   (bfd *abfd, asection *section, bfd_byte **ptr);


# 2828 "../bfd/bfd.h" 3 4
_Bool 
# 2828 "../bfd/bfd.h"
    bfd_is_section_compressed_info
   (bfd *abfd, asection *section,
    int *compression_header_size_p,
    bfd_size_type *uncompressed_size_p,
    unsigned int *uncompressed_alignment_power_p,
    enum compression_type *ch_type);


# 2835 "../bfd/bfd.h" 3 4
_Bool 
# 2835 "../bfd/bfd.h"
    bfd_is_section_compressed
   (bfd *abfd, asection *section);


# 2838 "../bfd/bfd.h" 3 4
_Bool 
# 2838 "../bfd/bfd.h"
    bfd_init_section_decompress_status
   (bfd *abfd, asection *section);


# 2841 "../bfd/bfd.h" 3 4
_Bool 
# 2841 "../bfd/bfd.h"
    bfd_init_section_compress_status
   (bfd *abfd, asection *section);


# 2844 "../bfd/bfd.h" 3 4
_Bool 
# 2844 "../bfd/bfd.h"
    bfd_compress_section
   (bfd *abfd, asection *section, bfd_byte *uncompressed_buffer);


const char *bfd_core_file_failing_command (bfd *abfd);

int bfd_core_file_failing_signal (bfd *abfd);

int bfd_core_file_pid (bfd *abfd);


# 2854 "../bfd/bfd.h" 3 4
_Bool 
# 2854 "../bfd/bfd.h"
    core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);


# 2857 "../bfd/bfd.h" 3 4
_Bool 
# 2857 "../bfd/bfd.h"
    generic_core_file_matches_executable_p
   (bfd *core_bfd, bfd *exec_bfd);



# 2861 "../bfd/bfd.h" 3 4
_Bool 
# 2861 "../bfd/bfd.h"
    bfd_check_format (bfd *abfd, bfd_format format);


# 2863 "../bfd/bfd.h" 3 4
_Bool 
# 2863 "../bfd/bfd.h"
    bfd_check_format_matches
   (bfd *abfd, bfd_format format, char ***matching);


# 2866 "../bfd/bfd.h" 3 4
_Bool 
# 2866 "../bfd/bfd.h"
    bfd_set_format (bfd *abfd, bfd_format format);

const char *bfd_format_string (bfd_format format);
# 2882 "../bfd/bfd.h"

# 2882 "../bfd/bfd.h" 3 4
_Bool 
# 2882 "../bfd/bfd.h"
    bfd_link_split_section (bfd *abfd, asection *sec);





# 2887 "../bfd/bfd.h" 3 4
_Bool 
# 2887 "../bfd/bfd.h"
    bfd_section_already_linked (bfd *abfd,
    asection *sec,
    struct bfd_link_info *info);





# 2894 "../bfd/bfd.h" 3 4
_Bool 
# 2894 "../bfd/bfd.h"
    bfd_generic_define_common_symbol
   (bfd *output_bfd, struct bfd_link_info *info,
    struct bfd_link_hash_entry *h);




void _bfd_generic_link_hide_symbol
   (bfd *output_bfd, struct bfd_link_info *info,
    struct bfd_link_hash_entry *h);




struct bfd_link_hash_entry *bfd_generic_define_start_stop
   (struct bfd_link_info *info,
    const char *symbol, asection *sec);




struct bfd_elf_version_tree * bfd_find_version_for_sym
   (struct bfd_elf_version_tree *verdefs,
    const char *sym_name, 
# 2917 "../bfd/bfd.h" 3 4
                         _Bool 
# 2917 "../bfd/bfd.h"
                              *hide);


# 2919 "../bfd/bfd.h" 3 4
_Bool 
# 2919 "../bfd/bfd.h"
    bfd_hide_sym_by_version
   (struct bfd_elf_version_tree *verdefs, const char *sym_name);


# 2922 "../bfd/bfd.h" 3 4
_Bool 
# 2922 "../bfd/bfd.h"
    bfd_link_check_relocs
   (bfd *abfd, struct bfd_link_info *info);


# 2925 "../bfd/bfd.h" 3 4
_Bool 
# 2925 "../bfd/bfd.h"
    _bfd_generic_link_check_relocs
   (bfd *abfd, struct bfd_link_info *info);


# 2928 "../bfd/bfd.h" 3 4
_Bool 
# 2928 "../bfd/bfd.h"
    bfd_merge_private_bfd_data
   (bfd *ibfd, struct bfd_link_info *info);







extern unsigned int bfd_use_reserved_id;

bfd *bfd_fopen (const char *filename, const char *target,
    const char *mode, int fd);

bfd *bfd_openr (const char *filename, const char *target);

bfd *bfd_fdopenr (const char *filename, const char *target, int fd);

bfd *bfd_fdopenw (const char *filename, const char *target, int fd);

bfd *bfd_openstreamr (const char * filename, const char * target,
    void * stream);

bfd *bfd_openr_iovec (const char *filename, const char *target,
    void *(*open_func) (struct bfd *nbfd,
 void *open_closure),
    void *open_closure,
    file_ptr (*pread_func) (struct bfd *nbfd,
 void *stream,
 void *buf,
 file_ptr nbytes,
 file_ptr offset),
    int (*close_func) (struct bfd *nbfd,
 void *stream),
    int (*stat_func) (struct bfd *abfd,
 void *stream,
 struct stat *sb));

bfd *bfd_openw (const char *filename, const char *target);

bfd *bfd_elf_bfd_from_remote_memory
   (bfd *templ, bfd_vma ehdr_vma, bfd_size_type size, bfd_vma *loadbasep,
    int (*target_read_memory)
       (bfd_vma vma, bfd_byte *myaddr, bfd_size_type len));


# 2973 "../bfd/bfd.h" 3 4
_Bool 
# 2973 "../bfd/bfd.h"
    bfd_close (bfd *abfd);


# 2975 "../bfd/bfd.h" 3 4
_Bool 
# 2975 "../bfd/bfd.h"
    bfd_close_all_done (bfd *);

bfd *bfd_create (const char *filename, bfd *templ);


# 2979 "../bfd/bfd.h" 3 4
_Bool 
# 2979 "../bfd/bfd.h"
    bfd_make_writable (bfd *abfd);


# 2981 "../bfd/bfd.h" 3 4
_Bool 
# 2981 "../bfd/bfd.h"
    bfd_make_readable (bfd *abfd);

uint32_t bfd_calc_gnu_debuglink_crc32
   (uint32_t crc, const bfd_byte *buf, bfd_size_type len);

char *bfd_get_debug_link_info (bfd *abfd, uint32_t *crc32_out);

char *bfd_get_alt_debug_link_info (bfd * abfd,
    bfd_size_type *buildid_len,
    bfd_byte **buildid_out);

char *bfd_follow_gnu_debuglink (bfd *abfd, const char *dir);

char *bfd_follow_gnu_debugaltlink (bfd *abfd, const char *dir);

struct bfd_section *bfd_create_gnu_debuglink_section
   (bfd *abfd, const char *filename);


# 2999 "../bfd/bfd.h" 3 4
_Bool 
# 2999 "../bfd/bfd.h"
    bfd_fill_in_gnu_debuglink_section
   (bfd *abfd, struct bfd_section *sect, const char *filename);

char *bfd_follow_build_id_debuglink (bfd *abfd, const char *dir);

const char *bfd_set_filename (bfd *abfd, const char *filename);


typedef enum bfd_reloc_status
{


  bfd_reloc_ok = 2,


  bfd_reloc_overflow,


  bfd_reloc_outofrange,


  bfd_reloc_continue,


  bfd_reloc_notsupported,


  bfd_reloc_other,


  bfd_reloc_undefined,




  bfd_reloc_dangerous
 }
 bfd_reloc_status_type;

typedef const struct reloc_howto_struct reloc_howto_type;

struct reloc_cache_entry
{

  struct bfd_symbol **sym_ptr_ptr;


  bfd_size_type address;


  bfd_vma addend;


  reloc_howto_type *howto;

};

enum complain_overflow
{

  complain_overflow_dont,




  complain_overflow_bitfield,



  complain_overflow_signed,



  complain_overflow_unsigned
};

struct reloc_howto_struct
{



  unsigned int type;


  unsigned int size:4;



  unsigned int bitsize:7;



  unsigned int rightshift:6;



  unsigned int bitpos:6;



  __extension__ enum complain_overflow complain_on_overflow:2;


  unsigned int negate:1;


  unsigned int pc_relative:1;
# 3122 "../bfd/bfd.h"
  unsigned int partial_inplace:1;







  unsigned int pcrel_offset:1;




  unsigned int install_addend:1;
# 3145 "../bfd/bfd.h"
  bfd_vma src_mask;



  bfd_vma dst_mask;




  bfd_reloc_status_type (*special_function)
    (bfd *, arelent *, struct bfd_symbol *, void *, asection *,
     bfd *, char **);


  const char *name;
};
# 3173 "../bfd/bfd.h"
static inline unsigned int
bfd_get_reloc_size (reloc_howto_type *howto)
{
  return howto->size;
}

typedef struct relent_chain
{
  arelent relent;
  struct relent_chain *next;
}
arelent_chain;

bfd_reloc_status_type bfd_check_overflow
   (enum complain_overflow how,
    unsigned int bitsize,
    unsigned int rightshift,
    unsigned int addrsize,
    bfd_vma relocation);


# 3193 "../bfd/bfd.h" 3 4
_Bool 
# 3193 "../bfd/bfd.h"
    bfd_reloc_offset_in_range
   (reloc_howto_type *howto,
    bfd *abfd,
    asection *section,
    bfd_size_type offset);

bfd_reloc_status_type bfd_perform_relocation
   (bfd *abfd,
    arelent *reloc_entry,
    void *data,
    asection *input_section,
    bfd *output_bfd,
    char **error_message);

bfd_reloc_status_type bfd_install_relocation
   (bfd *abfd,
    arelent *reloc_entry,
    void *data, bfd_vma data_start,
    asection *input_section,
    char **error_message);

enum bfd_reloc_code_real {
  _dummy_first_bfd_reloc_code_real,



  BFD_RELOC_64,
  BFD_RELOC_32,
  BFD_RELOC_26,
  BFD_RELOC_24,
  BFD_RELOC_16,
  BFD_RELOC_14,
  BFD_RELOC_8,




  BFD_RELOC_64_PCREL,
  BFD_RELOC_32_PCREL,
  BFD_RELOC_24_PCREL,
  BFD_RELOC_16_PCREL,
  BFD_RELOC_12_PCREL,
  BFD_RELOC_8_PCREL,


  BFD_RELOC_32_SECREL,
  BFD_RELOC_16_SECIDX,


  BFD_RELOC_32_GOT_PCREL,
  BFD_RELOC_16_GOT_PCREL,
  BFD_RELOC_8_GOT_PCREL,
  BFD_RELOC_32_GOTOFF,
  BFD_RELOC_16_GOTOFF,
  BFD_RELOC_LO16_GOTOFF,
  BFD_RELOC_HI16_GOTOFF,
  BFD_RELOC_HI16_S_GOTOFF,
  BFD_RELOC_8_GOTOFF,
  BFD_RELOC_64_PLT_PCREL,
  BFD_RELOC_32_PLT_PCREL,
  BFD_RELOC_24_PLT_PCREL,
  BFD_RELOC_16_PLT_PCREL,
  BFD_RELOC_8_PLT_PCREL,
  BFD_RELOC_64_PLTOFF,
  BFD_RELOC_32_PLTOFF,
  BFD_RELOC_16_PLTOFF,
  BFD_RELOC_LO16_PLTOFF,
  BFD_RELOC_HI16_PLTOFF,
  BFD_RELOC_HI16_S_PLTOFF,
  BFD_RELOC_8_PLTOFF,


  BFD_RELOC_SIZE32,
  BFD_RELOC_SIZE64,


  BFD_RELOC_68K_GLOB_DAT,
  BFD_RELOC_68K_JMP_SLOT,
  BFD_RELOC_68K_RELATIVE,
  BFD_RELOC_68K_TLS_GD32,
  BFD_RELOC_68K_TLS_GD16,
  BFD_RELOC_68K_TLS_GD8,
  BFD_RELOC_68K_TLS_LDM32,
  BFD_RELOC_68K_TLS_LDM16,
  BFD_RELOC_68K_TLS_LDM8,
  BFD_RELOC_68K_TLS_LDO32,
  BFD_RELOC_68K_TLS_LDO16,
  BFD_RELOC_68K_TLS_LDO8,
  BFD_RELOC_68K_TLS_IE32,
  BFD_RELOC_68K_TLS_IE16,
  BFD_RELOC_68K_TLS_IE8,
  BFD_RELOC_68K_TLS_LE32,
  BFD_RELOC_68K_TLS_LE16,
  BFD_RELOC_68K_TLS_LE8,


  BFD_RELOC_32_BASEREL,
  BFD_RELOC_16_BASEREL,
  BFD_RELOC_LO16_BASEREL,
  BFD_RELOC_HI16_BASEREL,
  BFD_RELOC_HI16_S_BASEREL,
  BFD_RELOC_8_BASEREL,
  BFD_RELOC_RVA,


  BFD_RELOC_8_FFnn,







  BFD_RELOC_32_PCREL_S2,
  BFD_RELOC_16_PCREL_S2,
  BFD_RELOC_23_PCREL_S2,



  BFD_RELOC_HI22,
  BFD_RELOC_LO10,





  BFD_RELOC_GPREL16,
  BFD_RELOC_GPREL32,



  BFD_RELOC_NONE,
  BFD_RELOC_SPARC_WDISP22,
  BFD_RELOC_SPARC22,
  BFD_RELOC_SPARC13,
  BFD_RELOC_SPARC_GOT10,
  BFD_RELOC_SPARC_GOT13,
  BFD_RELOC_SPARC_GOT22,
  BFD_RELOC_SPARC_PC10,
  BFD_RELOC_SPARC_PC22,
  BFD_RELOC_SPARC_WPLT30,
  BFD_RELOC_SPARC_COPY,
  BFD_RELOC_SPARC_GLOB_DAT,
  BFD_RELOC_SPARC_JMP_SLOT,
  BFD_RELOC_SPARC_RELATIVE,
  BFD_RELOC_SPARC_UA16,
  BFD_RELOC_SPARC_UA32,
  BFD_RELOC_SPARC_UA64,
  BFD_RELOC_SPARC_GOTDATA_HIX22,
  BFD_RELOC_SPARC_GOTDATA_LOX10,
  BFD_RELOC_SPARC_GOTDATA_OP_HIX22,
  BFD_RELOC_SPARC_GOTDATA_OP_LOX10,
  BFD_RELOC_SPARC_GOTDATA_OP,
  BFD_RELOC_SPARC_JMP_IREL,
  BFD_RELOC_SPARC_IRELATIVE,


  BFD_RELOC_SPARC_BASE13,
  BFD_RELOC_SPARC_BASE22,



  BFD_RELOC_SPARC_10,
  BFD_RELOC_SPARC_11,
  BFD_RELOC_SPARC_OLO10,
  BFD_RELOC_SPARC_HH22,
  BFD_RELOC_SPARC_HM10,
  BFD_RELOC_SPARC_LM22,
  BFD_RELOC_SPARC_PC_HH22,
  BFD_RELOC_SPARC_PC_HM10,
  BFD_RELOC_SPARC_PC_LM22,
  BFD_RELOC_SPARC_WDISP16,
  BFD_RELOC_SPARC_WDISP19,
  BFD_RELOC_SPARC_7,
  BFD_RELOC_SPARC_6,
  BFD_RELOC_SPARC_5,

  BFD_RELOC_SPARC_PLT32,
  BFD_RELOC_SPARC_PLT64,
  BFD_RELOC_SPARC_HIX22,
  BFD_RELOC_SPARC_LOX10,
  BFD_RELOC_SPARC_H44,
  BFD_RELOC_SPARC_M44,
  BFD_RELOC_SPARC_L44,
  BFD_RELOC_SPARC_REGISTER,
  BFD_RELOC_SPARC_H34,
  BFD_RELOC_SPARC_SIZE32,
  BFD_RELOC_SPARC_SIZE64,
  BFD_RELOC_SPARC_WDISP10,


  BFD_RELOC_SPARC_REV32,


  BFD_RELOC_SPARC_TLS_GD_HI22,
  BFD_RELOC_SPARC_TLS_GD_LO10,
  BFD_RELOC_SPARC_TLS_GD_ADD,
  BFD_RELOC_SPARC_TLS_GD_CALL,
  BFD_RELOC_SPARC_TLS_LDM_HI22,
  BFD_RELOC_SPARC_TLS_LDM_LO10,
  BFD_RELOC_SPARC_TLS_LDM_ADD,
  BFD_RELOC_SPARC_TLS_LDM_CALL,
  BFD_RELOC_SPARC_TLS_LDO_HIX22,
  BFD_RELOC_SPARC_TLS_LDO_LOX10,
  BFD_RELOC_SPARC_TLS_LDO_ADD,
  BFD_RELOC_SPARC_TLS_IE_HI22,
  BFD_RELOC_SPARC_TLS_IE_LO10,
  BFD_RELOC_SPARC_TLS_IE_LD,
  BFD_RELOC_SPARC_TLS_IE_LDX,
  BFD_RELOC_SPARC_TLS_IE_ADD,
  BFD_RELOC_SPARC_TLS_LE_HIX22,
  BFD_RELOC_SPARC_TLS_LE_LOX10,
  BFD_RELOC_SPARC_TLS_DTPMOD32,
  BFD_RELOC_SPARC_TLS_DTPMOD64,
  BFD_RELOC_SPARC_TLS_DTPOFF32,
  BFD_RELOC_SPARC_TLS_DTPOFF64,
  BFD_RELOC_SPARC_TLS_TPOFF32,
  BFD_RELOC_SPARC_TLS_TPOFF64,


  BFD_RELOC_SPU_IMM7,
  BFD_RELOC_SPU_IMM8,
  BFD_RELOC_SPU_IMM10,
  BFD_RELOC_SPU_IMM10W,
  BFD_RELOC_SPU_IMM16,
  BFD_RELOC_SPU_IMM16W,
  BFD_RELOC_SPU_IMM18,
  BFD_RELOC_SPU_PCREL9a,
  BFD_RELOC_SPU_PCREL9b,
  BFD_RELOC_SPU_PCREL16,
  BFD_RELOC_SPU_LO16,
  BFD_RELOC_SPU_HI16,
  BFD_RELOC_SPU_PPU32,
  BFD_RELOC_SPU_PPU64,
  BFD_RELOC_SPU_ADD_PIC,







  BFD_RELOC_ALPHA_GPDISP_HI16,





  BFD_RELOC_ALPHA_GPDISP_LO16,




  BFD_RELOC_ALPHA_GPDISP,
# 3471 "../bfd/bfd.h"
  BFD_RELOC_ALPHA_LITERAL,
  BFD_RELOC_ALPHA_ELF_LITERAL,
  BFD_RELOC_ALPHA_LITUSE,




  BFD_RELOC_ALPHA_HINT,



  BFD_RELOC_ALPHA_LINKAGE,



  BFD_RELOC_ALPHA_CODEADDR,



  BFD_RELOC_ALPHA_GPREL_HI16,
  BFD_RELOC_ALPHA_GPREL_LO16,




  BFD_RELOC_ALPHA_BRSGP,



  BFD_RELOC_ALPHA_NOP,



  BFD_RELOC_ALPHA_BSR,



  BFD_RELOC_ALPHA_LDA,



  BFD_RELOC_ALPHA_BOH,


  BFD_RELOC_ALPHA_TLSGD,
  BFD_RELOC_ALPHA_TLSLDM,
  BFD_RELOC_ALPHA_DTPMOD64,
  BFD_RELOC_ALPHA_GOTDTPREL16,
  BFD_RELOC_ALPHA_DTPREL64,
  BFD_RELOC_ALPHA_DTPREL_HI16,
  BFD_RELOC_ALPHA_DTPREL_LO16,
  BFD_RELOC_ALPHA_DTPREL16,
  BFD_RELOC_ALPHA_GOTTPREL16,
  BFD_RELOC_ALPHA_TPREL64,
  BFD_RELOC_ALPHA_TPREL_HI16,
  BFD_RELOC_ALPHA_TPREL_LO16,
  BFD_RELOC_ALPHA_TPREL16,


  BFD_RELOC_MIPS_JMP,
  BFD_RELOC_MICROMIPS_JMP,


  BFD_RELOC_MIPS16_JMP,


  BFD_RELOC_MIPS16_GPREL,


  BFD_RELOC_HI16,





  BFD_RELOC_HI16_S,


  BFD_RELOC_LO16,


  BFD_RELOC_HI16_PCREL,


  BFD_RELOC_HI16_S_PCREL,


  BFD_RELOC_LO16_PCREL,



  BFD_RELOC_MIPS16_GOT16,
  BFD_RELOC_MIPS16_CALL16,


  BFD_RELOC_MIPS16_HI16,





  BFD_RELOC_MIPS16_HI16_S,


  BFD_RELOC_MIPS16_LO16,


  BFD_RELOC_MIPS16_TLS_GD,
  BFD_RELOC_MIPS16_TLS_LDM,
  BFD_RELOC_MIPS16_TLS_DTPREL_HI16,
  BFD_RELOC_MIPS16_TLS_DTPREL_LO16,
  BFD_RELOC_MIPS16_TLS_GOTTPREL,
  BFD_RELOC_MIPS16_TLS_TPREL_HI16,
  BFD_RELOC_MIPS16_TLS_TPREL_LO16,


  BFD_RELOC_MIPS_LITERAL,
  BFD_RELOC_MICROMIPS_LITERAL,


  BFD_RELOC_MICROMIPS_7_PCREL_S1,
  BFD_RELOC_MICROMIPS_10_PCREL_S1,
  BFD_RELOC_MICROMIPS_16_PCREL_S1,


  BFD_RELOC_MIPS16_16_PCREL_S1,


  BFD_RELOC_MIPS_21_PCREL_S2,
  BFD_RELOC_MIPS_26_PCREL_S2,
  BFD_RELOC_MIPS_18_PCREL_S3,
  BFD_RELOC_MIPS_19_PCREL_S2,


  BFD_RELOC_MICROMIPS_GPREL16,
  BFD_RELOC_MICROMIPS_HI16,
  BFD_RELOC_MICROMIPS_HI16_S,
  BFD_RELOC_MICROMIPS_LO16,


  BFD_RELOC_MIPS_GOT16,
  BFD_RELOC_MICROMIPS_GOT16,
  BFD_RELOC_MIPS_CALL16,
  BFD_RELOC_MICROMIPS_CALL16,
  BFD_RELOC_MIPS_GOT_HI16,
  BFD_RELOC_MICROMIPS_GOT_HI16,
  BFD_RELOC_MIPS_GOT_LO16,
  BFD_RELOC_MICROMIPS_GOT_LO16,
  BFD_RELOC_MIPS_CALL_HI16,
  BFD_RELOC_MICROMIPS_CALL_HI16,
  BFD_RELOC_MIPS_CALL_LO16,
  BFD_RELOC_MICROMIPS_CALL_LO16,
  BFD_RELOC_MIPS_SUB,
  BFD_RELOC_MICROMIPS_SUB,
  BFD_RELOC_MIPS_GOT_PAGE,
  BFD_RELOC_MICROMIPS_GOT_PAGE,
  BFD_RELOC_MIPS_GOT_OFST,
  BFD_RELOC_MICROMIPS_GOT_OFST,
  BFD_RELOC_MIPS_GOT_DISP,
  BFD_RELOC_MICROMIPS_GOT_DISP,
  BFD_RELOC_MIPS_SHIFT5,
  BFD_RELOC_MIPS_SHIFT6,
  BFD_RELOC_MIPS_INSERT_A,
  BFD_RELOC_MIPS_INSERT_B,
  BFD_RELOC_MIPS_DELETE,
  BFD_RELOC_MIPS_HIGHEST,
  BFD_RELOC_MICROMIPS_HIGHEST,
  BFD_RELOC_MIPS_HIGHER,
  BFD_RELOC_MICROMIPS_HIGHER,
  BFD_RELOC_MIPS_SCN_DISP,
  BFD_RELOC_MICROMIPS_SCN_DISP,
  BFD_RELOC_MIPS_16,
  BFD_RELOC_MIPS_RELGOT,
  BFD_RELOC_MIPS_JALR,
  BFD_RELOC_MICROMIPS_JALR,
  BFD_RELOC_MIPS_TLS_DTPMOD32,
  BFD_RELOC_MIPS_TLS_DTPREL32,
  BFD_RELOC_MIPS_TLS_DTPMOD64,
  BFD_RELOC_MIPS_TLS_DTPREL64,
  BFD_RELOC_MIPS_TLS_GD,
  BFD_RELOC_MICROMIPS_TLS_GD,
  BFD_RELOC_MIPS_TLS_LDM,
  BFD_RELOC_MICROMIPS_TLS_LDM,
  BFD_RELOC_MIPS_TLS_DTPREL_HI16,
  BFD_RELOC_MICROMIPS_TLS_DTPREL_HI16,
  BFD_RELOC_MIPS_TLS_DTPREL_LO16,
  BFD_RELOC_MICROMIPS_TLS_DTPREL_LO16,
  BFD_RELOC_MIPS_TLS_GOTTPREL,
  BFD_RELOC_MICROMIPS_TLS_GOTTPREL,
  BFD_RELOC_MIPS_TLS_TPREL32,
  BFD_RELOC_MIPS_TLS_TPREL64,
  BFD_RELOC_MIPS_TLS_TPREL_HI16,
  BFD_RELOC_MICROMIPS_TLS_TPREL_HI16,
  BFD_RELOC_MIPS_TLS_TPREL_LO16,
  BFD_RELOC_MICROMIPS_TLS_TPREL_LO16,
  BFD_RELOC_MIPS_EH,



  BFD_RELOC_MIPS_COPY,
  BFD_RELOC_MIPS_JUMP_SLOT,



  BFD_RELOC_MOXIE_10_PCREL,



  BFD_RELOC_FT32_10,
  BFD_RELOC_FT32_20,
  BFD_RELOC_FT32_17,
  BFD_RELOC_FT32_18,
  BFD_RELOC_FT32_RELAX,
  BFD_RELOC_FT32_SC0,
  BFD_RELOC_FT32_SC1,
  BFD_RELOC_FT32_15,
  BFD_RELOC_FT32_DIFF32,



  BFD_RELOC_FRV_LABEL16,
  BFD_RELOC_FRV_LABEL24,
  BFD_RELOC_FRV_LO16,
  BFD_RELOC_FRV_HI16,
  BFD_RELOC_FRV_GPREL12,
  BFD_RELOC_FRV_GPRELU12,
  BFD_RELOC_FRV_GPREL32,
  BFD_RELOC_FRV_GPRELHI,
  BFD_RELOC_FRV_GPRELLO,
  BFD_RELOC_FRV_GOT12,
  BFD_RELOC_FRV_GOTHI,
  BFD_RELOC_FRV_GOTLO,
  BFD_RELOC_FRV_FUNCDESC,
  BFD_RELOC_FRV_FUNCDESC_GOT12,
  BFD_RELOC_FRV_FUNCDESC_GOTHI,
  BFD_RELOC_FRV_FUNCDESC_GOTLO,
  BFD_RELOC_FRV_FUNCDESC_VALUE,
  BFD_RELOC_FRV_FUNCDESC_GOTOFF12,
  BFD_RELOC_FRV_FUNCDESC_GOTOFFHI,
  BFD_RELOC_FRV_FUNCDESC_GOTOFFLO,
  BFD_RELOC_FRV_GOTOFF12,
  BFD_RELOC_FRV_GOTOFFHI,
  BFD_RELOC_FRV_GOTOFFLO,
  BFD_RELOC_FRV_GETTLSOFF,
  BFD_RELOC_FRV_TLSDESC_VALUE,
  BFD_RELOC_FRV_GOTTLSDESC12,
  BFD_RELOC_FRV_GOTTLSDESCHI,
  BFD_RELOC_FRV_GOTTLSDESCLO,
  BFD_RELOC_FRV_TLSMOFF12,
  BFD_RELOC_FRV_TLSMOFFHI,
  BFD_RELOC_FRV_TLSMOFFLO,
  BFD_RELOC_FRV_GOTTLSOFF12,
  BFD_RELOC_FRV_GOTTLSOFFHI,
  BFD_RELOC_FRV_GOTTLSOFFLO,
  BFD_RELOC_FRV_TLSOFF,
  BFD_RELOC_FRV_TLSDESC_RELAX,
  BFD_RELOC_FRV_GETTLSOFF_RELAX,
  BFD_RELOC_FRV_TLSOFF_RELAX,
  BFD_RELOC_FRV_TLSMOFF,



  BFD_RELOC_MN10300_GOTOFF24,



  BFD_RELOC_MN10300_GOT32,



  BFD_RELOC_MN10300_GOT24,



  BFD_RELOC_MN10300_GOT16,


  BFD_RELOC_MN10300_COPY,


  BFD_RELOC_MN10300_GLOB_DAT,


  BFD_RELOC_MN10300_JMP_SLOT,


  BFD_RELOC_MN10300_RELATIVE,




  BFD_RELOC_MN10300_SYM_DIFF,




  BFD_RELOC_MN10300_ALIGN,


  BFD_RELOC_MN10300_TLS_GD,
  BFD_RELOC_MN10300_TLS_LD,
  BFD_RELOC_MN10300_TLS_LDO,
  BFD_RELOC_MN10300_TLS_GOTIE,
  BFD_RELOC_MN10300_TLS_IE,
  BFD_RELOC_MN10300_TLS_LE,
  BFD_RELOC_MN10300_TLS_DTPMOD,
  BFD_RELOC_MN10300_TLS_DTPOFF,
  BFD_RELOC_MN10300_TLS_TPOFF,



  BFD_RELOC_MN10300_32_PCREL,



  BFD_RELOC_MN10300_16_PCREL,



  BFD_RELOC_386_GOT32,
  BFD_RELOC_386_PLT32,
  BFD_RELOC_386_COPY,
  BFD_RELOC_386_GLOB_DAT,
  BFD_RELOC_386_JUMP_SLOT,
  BFD_RELOC_386_RELATIVE,
  BFD_RELOC_386_GOTOFF,
  BFD_RELOC_386_GOTPC,
  BFD_RELOC_386_TLS_TPOFF,
  BFD_RELOC_386_TLS_IE,
  BFD_RELOC_386_TLS_GOTIE,
  BFD_RELOC_386_TLS_LE,
  BFD_RELOC_386_TLS_GD,
  BFD_RELOC_386_TLS_LDM,
  BFD_RELOC_386_TLS_LDO_32,
  BFD_RELOC_386_TLS_IE_32,
  BFD_RELOC_386_TLS_LE_32,
  BFD_RELOC_386_TLS_DTPMOD32,
  BFD_RELOC_386_TLS_DTPOFF32,
  BFD_RELOC_386_TLS_TPOFF32,
  BFD_RELOC_386_TLS_GOTDESC,
  BFD_RELOC_386_TLS_DESC_CALL,
  BFD_RELOC_386_TLS_DESC,
  BFD_RELOC_386_IRELATIVE,
  BFD_RELOC_386_GOT32X,


  BFD_RELOC_X86_64_GOT32,
  BFD_RELOC_X86_64_PLT32,
  BFD_RELOC_X86_64_COPY,
  BFD_RELOC_X86_64_GLOB_DAT,
  BFD_RELOC_X86_64_JUMP_SLOT,
  BFD_RELOC_X86_64_RELATIVE,
  BFD_RELOC_X86_64_GOTPCREL,
  BFD_RELOC_X86_64_32S,
  BFD_RELOC_X86_64_DTPMOD64,
  BFD_RELOC_X86_64_DTPOFF64,
  BFD_RELOC_X86_64_TPOFF64,
  BFD_RELOC_X86_64_TLSGD,
  BFD_RELOC_X86_64_TLSLD,
  BFD_RELOC_X86_64_DTPOFF32,
  BFD_RELOC_X86_64_GOTTPOFF,
  BFD_RELOC_X86_64_TPOFF32,
  BFD_RELOC_X86_64_GOTOFF64,
  BFD_RELOC_X86_64_GOTPC32,
  BFD_RELOC_X86_64_GOT64,
  BFD_RELOC_X86_64_GOTPCREL64,
  BFD_RELOC_X86_64_GOTPC64,
  BFD_RELOC_X86_64_GOTPLT64,
  BFD_RELOC_X86_64_PLTOFF64,
  BFD_RELOC_X86_64_GOTPC32_TLSDESC,
  BFD_RELOC_X86_64_TLSDESC_CALL,
  BFD_RELOC_X86_64_TLSDESC,
  BFD_RELOC_X86_64_IRELATIVE,
  BFD_RELOC_X86_64_PC32_BND,
  BFD_RELOC_X86_64_PLT32_BND,
  BFD_RELOC_X86_64_GOTPCRELX,
  BFD_RELOC_X86_64_REX_GOTPCRELX,


  BFD_RELOC_NS32K_IMM_8,
  BFD_RELOC_NS32K_IMM_16,
  BFD_RELOC_NS32K_IMM_32,
  BFD_RELOC_NS32K_IMM_8_PCREL,
  BFD_RELOC_NS32K_IMM_16_PCREL,
  BFD_RELOC_NS32K_IMM_32_PCREL,
  BFD_RELOC_NS32K_DISP_8,
  BFD_RELOC_NS32K_DISP_16,
  BFD_RELOC_NS32K_DISP_32,
  BFD_RELOC_NS32K_DISP_8_PCREL,
  BFD_RELOC_NS32K_DISP_16_PCREL,
  BFD_RELOC_NS32K_DISP_32_PCREL,


  BFD_RELOC_PDP11_DISP_8_PCREL,
  BFD_RELOC_PDP11_DISP_6_PCREL,


  BFD_RELOC_PJ_CODE_HI16,
  BFD_RELOC_PJ_CODE_LO16,
  BFD_RELOC_PJ_CODE_DIR16,
  BFD_RELOC_PJ_CODE_DIR32,
  BFD_RELOC_PJ_CODE_REL16,
  BFD_RELOC_PJ_CODE_REL32,


  BFD_RELOC_PPC_B26,
  BFD_RELOC_PPC_BA26,
  BFD_RELOC_PPC_TOC16,
  BFD_RELOC_PPC_TOC16_LO,
  BFD_RELOC_PPC_TOC16_HI,
  BFD_RELOC_PPC_B16,
  BFD_RELOC_PPC_B16_BRTAKEN,
  BFD_RELOC_PPC_B16_BRNTAKEN,
  BFD_RELOC_PPC_BA16,
  BFD_RELOC_PPC_BA16_BRTAKEN,
  BFD_RELOC_PPC_BA16_BRNTAKEN,
  BFD_RELOC_PPC_COPY,
  BFD_RELOC_PPC_GLOB_DAT,
  BFD_RELOC_PPC_JMP_SLOT,
  BFD_RELOC_PPC_RELATIVE,
  BFD_RELOC_PPC_LOCAL24PC,
  BFD_RELOC_PPC_EMB_NADDR32,
  BFD_RELOC_PPC_EMB_NADDR16,
  BFD_RELOC_PPC_EMB_NADDR16_LO,
  BFD_RELOC_PPC_EMB_NADDR16_HI,
  BFD_RELOC_PPC_EMB_NADDR16_HA,
  BFD_RELOC_PPC_EMB_SDAI16,
  BFD_RELOC_PPC_EMB_SDA2I16,
  BFD_RELOC_PPC_EMB_SDA2REL,
  BFD_RELOC_PPC_EMB_SDA21,
  BFD_RELOC_PPC_EMB_MRKREF,
  BFD_RELOC_PPC_EMB_RELSEC16,
  BFD_RELOC_PPC_EMB_RELST_LO,
  BFD_RELOC_PPC_EMB_RELST_HI,
  BFD_RELOC_PPC_EMB_RELST_HA,
  BFD_RELOC_PPC_EMB_BIT_FLD,
  BFD_RELOC_PPC_EMB_RELSDA,
  BFD_RELOC_PPC_VLE_REL8,
  BFD_RELOC_PPC_VLE_REL15,
  BFD_RELOC_PPC_VLE_REL24,
  BFD_RELOC_PPC_VLE_LO16A,
  BFD_RELOC_PPC_VLE_LO16D,
  BFD_RELOC_PPC_VLE_HI16A,
  BFD_RELOC_PPC_VLE_HI16D,
  BFD_RELOC_PPC_VLE_HA16A,
  BFD_RELOC_PPC_VLE_HA16D,
  BFD_RELOC_PPC_VLE_SDA21,
  BFD_RELOC_PPC_VLE_SDA21_LO,
  BFD_RELOC_PPC_VLE_SDAREL_LO16A,
  BFD_RELOC_PPC_VLE_SDAREL_LO16D,
  BFD_RELOC_PPC_VLE_SDAREL_HI16A,
  BFD_RELOC_PPC_VLE_SDAREL_HI16D,
  BFD_RELOC_PPC_VLE_SDAREL_HA16A,
  BFD_RELOC_PPC_VLE_SDAREL_HA16D,
  BFD_RELOC_PPC_16DX_HA,
  BFD_RELOC_PPC_REL16DX_HA,
  BFD_RELOC_PPC_NEG,
  BFD_RELOC_PPC64_HIGHER,
  BFD_RELOC_PPC64_HIGHER_S,
  BFD_RELOC_PPC64_HIGHEST,
  BFD_RELOC_PPC64_HIGHEST_S,
  BFD_RELOC_PPC64_TOC16_LO,
  BFD_RELOC_PPC64_TOC16_HI,
  BFD_RELOC_PPC64_TOC16_HA,
  BFD_RELOC_PPC64_TOC,
  BFD_RELOC_PPC64_PLTGOT16,
  BFD_RELOC_PPC64_PLTGOT16_LO,
  BFD_RELOC_PPC64_PLTGOT16_HI,
  BFD_RELOC_PPC64_PLTGOT16_HA,
  BFD_RELOC_PPC64_ADDR16_DS,
  BFD_RELOC_PPC64_ADDR16_LO_DS,
  BFD_RELOC_PPC64_GOT16_DS,
  BFD_RELOC_PPC64_GOT16_LO_DS,
  BFD_RELOC_PPC64_PLT16_LO_DS,
  BFD_RELOC_PPC64_SECTOFF_DS,
  BFD_RELOC_PPC64_SECTOFF_LO_DS,
  BFD_RELOC_PPC64_TOC16_DS,
  BFD_RELOC_PPC64_TOC16_LO_DS,
  BFD_RELOC_PPC64_PLTGOT16_DS,
  BFD_RELOC_PPC64_PLTGOT16_LO_DS,
  BFD_RELOC_PPC64_ADDR16_HIGH,
  BFD_RELOC_PPC64_ADDR16_HIGHA,
  BFD_RELOC_PPC64_REL16_HIGH,
  BFD_RELOC_PPC64_REL16_HIGHA,
  BFD_RELOC_PPC64_REL16_HIGHER,
  BFD_RELOC_PPC64_REL16_HIGHERA,
  BFD_RELOC_PPC64_REL16_HIGHEST,
  BFD_RELOC_PPC64_REL16_HIGHESTA,
  BFD_RELOC_PPC64_ADDR64_LOCAL,
  BFD_RELOC_PPC64_ENTRY,
  BFD_RELOC_PPC64_REL24_NOTOC,
  BFD_RELOC_PPC64_REL24_P9NOTOC,
  BFD_RELOC_PPC64_D34,
  BFD_RELOC_PPC64_D34_LO,
  BFD_RELOC_PPC64_D34_HI30,
  BFD_RELOC_PPC64_D34_HA30,
  BFD_RELOC_PPC64_PCREL34,
  BFD_RELOC_PPC64_GOT_PCREL34,
  BFD_RELOC_PPC64_PLT_PCREL34,
  BFD_RELOC_PPC64_ADDR16_HIGHER34,
  BFD_RELOC_PPC64_ADDR16_HIGHERA34,
  BFD_RELOC_PPC64_ADDR16_HIGHEST34,
  BFD_RELOC_PPC64_ADDR16_HIGHESTA34,
  BFD_RELOC_PPC64_REL16_HIGHER34,
  BFD_RELOC_PPC64_REL16_HIGHERA34,
  BFD_RELOC_PPC64_REL16_HIGHEST34,
  BFD_RELOC_PPC64_REL16_HIGHESTA34,
  BFD_RELOC_PPC64_D28,
  BFD_RELOC_PPC64_PCREL28,


  BFD_RELOC_PPC_TLS,
  BFD_RELOC_PPC_TLSGD,
  BFD_RELOC_PPC_TLSLD,
  BFD_RELOC_PPC_TLSLE,
  BFD_RELOC_PPC_TLSIE,
  BFD_RELOC_PPC_TLSM,
  BFD_RELOC_PPC_TLSML,
  BFD_RELOC_PPC_DTPMOD,
  BFD_RELOC_PPC_TPREL16,
  BFD_RELOC_PPC_TPREL16_LO,
  BFD_RELOC_PPC_TPREL16_HI,
  BFD_RELOC_PPC_TPREL16_HA,
  BFD_RELOC_PPC_TPREL,
  BFD_RELOC_PPC_DTPREL16,
  BFD_RELOC_PPC_DTPREL16_LO,
  BFD_RELOC_PPC_DTPREL16_HI,
  BFD_RELOC_PPC_DTPREL16_HA,
  BFD_RELOC_PPC_DTPREL,
  BFD_RELOC_PPC_GOT_TLSGD16,
  BFD_RELOC_PPC_GOT_TLSGD16_LO,
  BFD_RELOC_PPC_GOT_TLSGD16_HI,
  BFD_RELOC_PPC_GOT_TLSGD16_HA,
  BFD_RELOC_PPC_GOT_TLSLD16,
  BFD_RELOC_PPC_GOT_TLSLD16_LO,
  BFD_RELOC_PPC_GOT_TLSLD16_HI,
  BFD_RELOC_PPC_GOT_TLSLD16_HA,
  BFD_RELOC_PPC_GOT_TPREL16,
  BFD_RELOC_PPC_GOT_TPREL16_LO,
  BFD_RELOC_PPC_GOT_TPREL16_HI,
  BFD_RELOC_PPC_GOT_TPREL16_HA,
  BFD_RELOC_PPC_GOT_DTPREL16,
  BFD_RELOC_PPC_GOT_DTPREL16_LO,
  BFD_RELOC_PPC_GOT_DTPREL16_HI,
  BFD_RELOC_PPC_GOT_DTPREL16_HA,
  BFD_RELOC_PPC64_TLSGD,
  BFD_RELOC_PPC64_TLSLD,
  BFD_RELOC_PPC64_TLSLE,
  BFD_RELOC_PPC64_TLSIE,
  BFD_RELOC_PPC64_TLSM,
  BFD_RELOC_PPC64_TLSML,
  BFD_RELOC_PPC64_TPREL16_DS,
  BFD_RELOC_PPC64_TPREL16_LO_DS,
  BFD_RELOC_PPC64_TPREL16_HIGH,
  BFD_RELOC_PPC64_TPREL16_HIGHA,
  BFD_RELOC_PPC64_TPREL16_HIGHER,
  BFD_RELOC_PPC64_TPREL16_HIGHERA,
  BFD_RELOC_PPC64_TPREL16_HIGHEST,
  BFD_RELOC_PPC64_TPREL16_HIGHESTA,
  BFD_RELOC_PPC64_DTPREL16_DS,
  BFD_RELOC_PPC64_DTPREL16_LO_DS,
  BFD_RELOC_PPC64_DTPREL16_HIGH,
  BFD_RELOC_PPC64_DTPREL16_HIGHA,
  BFD_RELOC_PPC64_DTPREL16_HIGHER,
  BFD_RELOC_PPC64_DTPREL16_HIGHERA,
  BFD_RELOC_PPC64_DTPREL16_HIGHEST,
  BFD_RELOC_PPC64_DTPREL16_HIGHESTA,
  BFD_RELOC_PPC64_TPREL34,
  BFD_RELOC_PPC64_DTPREL34,
  BFD_RELOC_PPC64_GOT_TLSGD_PCREL34,
  BFD_RELOC_PPC64_GOT_TLSLD_PCREL34,
  BFD_RELOC_PPC64_GOT_TPREL_PCREL34,
  BFD_RELOC_PPC64_GOT_DTPREL_PCREL34,
  BFD_RELOC_PPC64_TLS_PCREL,


  BFD_RELOC_I370_D12,




  BFD_RELOC_CTOR,



  BFD_RELOC_ARM_PCREL_BRANCH,




  BFD_RELOC_ARM_PCREL_BLX,




  BFD_RELOC_THUMB_PCREL_BLX,


  BFD_RELOC_ARM_PCREL_CALL,


  BFD_RELOC_ARM_PCREL_JUMP,


  BFD_RELOC_THUMB_PCREL_BRANCH5,


  BFD_RELOC_THUMB_PCREL_BFCSEL,


  BFD_RELOC_ARM_THUMB_BF17,


  BFD_RELOC_ARM_THUMB_BF13,


  BFD_RELOC_ARM_THUMB_BF19,


  BFD_RELOC_ARM_THUMB_LOOP12,






  BFD_RELOC_THUMB_PCREL_BRANCH7,
  BFD_RELOC_THUMB_PCREL_BRANCH9,
  BFD_RELOC_THUMB_PCREL_BRANCH12,
  BFD_RELOC_THUMB_PCREL_BRANCH20,
  BFD_RELOC_THUMB_PCREL_BRANCH23,
  BFD_RELOC_THUMB_PCREL_BRANCH25,


  BFD_RELOC_ARM_OFFSET_IMM,


  BFD_RELOC_ARM_THUMB_OFFSET,



  BFD_RELOC_ARM_TARGET1,


  BFD_RELOC_ARM_ROSEGREL32,


  BFD_RELOC_ARM_SBREL32,




  BFD_RELOC_ARM_TARGET2,


  BFD_RELOC_ARM_PREL31,


  BFD_RELOC_ARM_MOVW,
  BFD_RELOC_ARM_MOVT,
  BFD_RELOC_ARM_MOVW_PCREL,
  BFD_RELOC_ARM_MOVT_PCREL,
  BFD_RELOC_ARM_THUMB_MOVW,
  BFD_RELOC_ARM_THUMB_MOVT,
  BFD_RELOC_ARM_THUMB_MOVW_PCREL,
  BFD_RELOC_ARM_THUMB_MOVT_PCREL,


  BFD_RELOC_ARM_GOTFUNCDESC,
  BFD_RELOC_ARM_GOTOFFFUNCDESC,
  BFD_RELOC_ARM_FUNCDESC,
  BFD_RELOC_ARM_FUNCDESC_VALUE,
  BFD_RELOC_ARM_TLS_GD32_FDPIC,
  BFD_RELOC_ARM_TLS_LDM32_FDPIC,
  BFD_RELOC_ARM_TLS_IE32_FDPIC,


  BFD_RELOC_ARM_JUMP_SLOT,
  BFD_RELOC_ARM_GLOB_DAT,
  BFD_RELOC_ARM_GOT32,
  BFD_RELOC_ARM_PLT32,
  BFD_RELOC_ARM_RELATIVE,
  BFD_RELOC_ARM_GOTOFF,
  BFD_RELOC_ARM_GOTPC,
  BFD_RELOC_ARM_GOT_PREL,


  BFD_RELOC_ARM_TLS_GD32,
  BFD_RELOC_ARM_TLS_LDO32,
  BFD_RELOC_ARM_TLS_LDM32,
  BFD_RELOC_ARM_TLS_DTPOFF32,
  BFD_RELOC_ARM_TLS_DTPMOD32,
  BFD_RELOC_ARM_TLS_TPOFF32,
  BFD_RELOC_ARM_TLS_IE32,
  BFD_RELOC_ARM_TLS_LE32,
  BFD_RELOC_ARM_TLS_GOTDESC,
  BFD_RELOC_ARM_TLS_CALL,
  BFD_RELOC_ARM_THM_TLS_CALL,
  BFD_RELOC_ARM_TLS_DESCSEQ,
  BFD_RELOC_ARM_THM_TLS_DESCSEQ,
  BFD_RELOC_ARM_TLS_DESC,


  BFD_RELOC_ARM_ALU_PC_G0_NC,
  BFD_RELOC_ARM_ALU_PC_G0,
  BFD_RELOC_ARM_ALU_PC_G1_NC,
  BFD_RELOC_ARM_ALU_PC_G1,
  BFD_RELOC_ARM_ALU_PC_G2,
  BFD_RELOC_ARM_LDR_PC_G0,
  BFD_RELOC_ARM_LDR_PC_G1,
  BFD_RELOC_ARM_LDR_PC_G2,
  BFD_RELOC_ARM_LDRS_PC_G0,
  BFD_RELOC_ARM_LDRS_PC_G1,
  BFD_RELOC_ARM_LDRS_PC_G2,
  BFD_RELOC_ARM_LDC_PC_G0,
  BFD_RELOC_ARM_LDC_PC_G1,
  BFD_RELOC_ARM_LDC_PC_G2,
  BFD_RELOC_ARM_ALU_SB_G0_NC,
  BFD_RELOC_ARM_ALU_SB_G0,
  BFD_RELOC_ARM_ALU_SB_G1_NC,
  BFD_RELOC_ARM_ALU_SB_G1,
  BFD_RELOC_ARM_ALU_SB_G2,
  BFD_RELOC_ARM_LDR_SB_G0,
  BFD_RELOC_ARM_LDR_SB_G1,
  BFD_RELOC_ARM_LDR_SB_G2,
  BFD_RELOC_ARM_LDRS_SB_G0,
  BFD_RELOC_ARM_LDRS_SB_G1,
  BFD_RELOC_ARM_LDRS_SB_G2,
  BFD_RELOC_ARM_LDC_SB_G0,
  BFD_RELOC_ARM_LDC_SB_G1,
  BFD_RELOC_ARM_LDC_SB_G2,


  BFD_RELOC_ARM_V4BX,


  BFD_RELOC_ARM_IRELATIVE,


  BFD_RELOC_ARM_THUMB_ALU_ABS_G0_NC,
  BFD_RELOC_ARM_THUMB_ALU_ABS_G1_NC,
  BFD_RELOC_ARM_THUMB_ALU_ABS_G2_NC,
  BFD_RELOC_ARM_THUMB_ALU_ABS_G3_NC,



  BFD_RELOC_ARM_IMMEDIATE,
  BFD_RELOC_ARM_ADRL_IMMEDIATE,
  BFD_RELOC_ARM_T32_IMMEDIATE,
  BFD_RELOC_ARM_T32_ADD_IMM,
  BFD_RELOC_ARM_T32_IMM12,
  BFD_RELOC_ARM_T32_ADD_PC12,
  BFD_RELOC_ARM_SHIFT_IMM,
  BFD_RELOC_ARM_SMC,
  BFD_RELOC_ARM_HVC,
  BFD_RELOC_ARM_SWI,
  BFD_RELOC_ARM_MULTI,
  BFD_RELOC_ARM_CP_OFF_IMM,
  BFD_RELOC_ARM_CP_OFF_IMM_S2,
  BFD_RELOC_ARM_T32_CP_OFF_IMM,
  BFD_RELOC_ARM_T32_CP_OFF_IMM_S2,
  BFD_RELOC_ARM_T32_VLDR_VSTR_OFF_IMM,
  BFD_RELOC_ARM_ADR_IMM,
  BFD_RELOC_ARM_LDR_IMM,
  BFD_RELOC_ARM_LITERAL,
  BFD_RELOC_ARM_IN_POOL,
  BFD_RELOC_ARM_OFFSET_IMM8,
  BFD_RELOC_ARM_T32_OFFSET_U8,
  BFD_RELOC_ARM_T32_OFFSET_IMM,
  BFD_RELOC_ARM_HWLITERAL,
  BFD_RELOC_ARM_THUMB_ADD,
  BFD_RELOC_ARM_THUMB_IMM,
  BFD_RELOC_ARM_THUMB_SHIFT,


  BFD_RELOC_SH_PCDISP8BY2,
  BFD_RELOC_SH_PCDISP12BY2,
  BFD_RELOC_SH_IMM3,
  BFD_RELOC_SH_IMM3U,
  BFD_RELOC_SH_DISP12,
  BFD_RELOC_SH_DISP12BY2,
  BFD_RELOC_SH_DISP12BY4,
  BFD_RELOC_SH_DISP12BY8,
  BFD_RELOC_SH_DISP20,
  BFD_RELOC_SH_DISP20BY8,
  BFD_RELOC_SH_IMM4,
  BFD_RELOC_SH_IMM4BY2,
  BFD_RELOC_SH_IMM4BY4,
  BFD_RELOC_SH_IMM8,
  BFD_RELOC_SH_IMM8BY2,
  BFD_RELOC_SH_IMM8BY4,
  BFD_RELOC_SH_PCRELIMM8BY2,
  BFD_RELOC_SH_PCRELIMM8BY4,
  BFD_RELOC_SH_SWITCH16,
  BFD_RELOC_SH_SWITCH32,
  BFD_RELOC_SH_USES,
  BFD_RELOC_SH_COUNT,
  BFD_RELOC_SH_ALIGN,
  BFD_RELOC_SH_CODE,
  BFD_RELOC_SH_DATA,
  BFD_RELOC_SH_LABEL,
  BFD_RELOC_SH_LOOP_START,
  BFD_RELOC_SH_LOOP_END,
  BFD_RELOC_SH_COPY,
  BFD_RELOC_SH_GLOB_DAT,
  BFD_RELOC_SH_JMP_SLOT,
  BFD_RELOC_SH_RELATIVE,
  BFD_RELOC_SH_GOTPC,
  BFD_RELOC_SH_GOT_LOW16,
  BFD_RELOC_SH_GOT_MEDLOW16,
  BFD_RELOC_SH_GOT_MEDHI16,
  BFD_RELOC_SH_GOT_HI16,
  BFD_RELOC_SH_GOTPLT_LOW16,
  BFD_RELOC_SH_GOTPLT_MEDLOW16,
  BFD_RELOC_SH_GOTPLT_MEDHI16,
  BFD_RELOC_SH_GOTPLT_HI16,
  BFD_RELOC_SH_PLT_LOW16,
  BFD_RELOC_SH_PLT_MEDLOW16,
  BFD_RELOC_SH_PLT_MEDHI16,
  BFD_RELOC_SH_PLT_HI16,
  BFD_RELOC_SH_GOTOFF_LOW16,
  BFD_RELOC_SH_GOTOFF_MEDLOW16,
  BFD_RELOC_SH_GOTOFF_MEDHI16,
  BFD_RELOC_SH_GOTOFF_HI16,
  BFD_RELOC_SH_GOTPC_LOW16,
  BFD_RELOC_SH_GOTPC_MEDLOW16,
  BFD_RELOC_SH_GOTPC_MEDHI16,
  BFD_RELOC_SH_GOTPC_HI16,
  BFD_RELOC_SH_COPY64,
  BFD_RELOC_SH_GLOB_DAT64,
  BFD_RELOC_SH_JMP_SLOT64,
  BFD_RELOC_SH_RELATIVE64,
  BFD_RELOC_SH_GOT10BY4,
  BFD_RELOC_SH_GOT10BY8,
  BFD_RELOC_SH_GOTPLT10BY4,
  BFD_RELOC_SH_GOTPLT10BY8,
  BFD_RELOC_SH_GOTPLT32,
  BFD_RELOC_SH_SHMEDIA_CODE,
  BFD_RELOC_SH_IMMU5,
  BFD_RELOC_SH_IMMS6,
  BFD_RELOC_SH_IMMS6BY32,
  BFD_RELOC_SH_IMMU6,
  BFD_RELOC_SH_IMMS10,
  BFD_RELOC_SH_IMMS10BY2,
  BFD_RELOC_SH_IMMS10BY4,
  BFD_RELOC_SH_IMMS10BY8,
  BFD_RELOC_SH_IMMS16,
  BFD_RELOC_SH_IMMU16,
  BFD_RELOC_SH_IMM_LOW16,
  BFD_RELOC_SH_IMM_LOW16_PCREL,
  BFD_RELOC_SH_IMM_MEDLOW16,
  BFD_RELOC_SH_IMM_MEDLOW16_PCREL,
  BFD_RELOC_SH_IMM_MEDHI16,
  BFD_RELOC_SH_IMM_MEDHI16_PCREL,
  BFD_RELOC_SH_IMM_HI16,
  BFD_RELOC_SH_IMM_HI16_PCREL,
  BFD_RELOC_SH_PT_16,
  BFD_RELOC_SH_TLS_GD_32,
  BFD_RELOC_SH_TLS_LD_32,
  BFD_RELOC_SH_TLS_LDO_32,
  BFD_RELOC_SH_TLS_IE_32,
  BFD_RELOC_SH_TLS_LE_32,
  BFD_RELOC_SH_TLS_DTPMOD32,
  BFD_RELOC_SH_TLS_DTPOFF32,
  BFD_RELOC_SH_TLS_TPOFF32,
  BFD_RELOC_SH_GOT20,
  BFD_RELOC_SH_GOTOFF20,
  BFD_RELOC_SH_GOTFUNCDESC,
  BFD_RELOC_SH_GOTFUNCDESC20,
  BFD_RELOC_SH_GOTOFFFUNCDESC,
  BFD_RELOC_SH_GOTOFFFUNCDESC20,
  BFD_RELOC_SH_FUNCDESC,


  BFD_RELOC_ARC_NONE,
  BFD_RELOC_ARC_8,
  BFD_RELOC_ARC_16,
  BFD_RELOC_ARC_24,
  BFD_RELOC_ARC_32,
  BFD_RELOC_ARC_N8,
  BFD_RELOC_ARC_N16,
  BFD_RELOC_ARC_N24,
  BFD_RELOC_ARC_N32,
  BFD_RELOC_ARC_SDA,
  BFD_RELOC_ARC_SECTOFF,
  BFD_RELOC_ARC_S21H_PCREL,
  BFD_RELOC_ARC_S21W_PCREL,
  BFD_RELOC_ARC_S25H_PCREL,
  BFD_RELOC_ARC_S25W_PCREL,
  BFD_RELOC_ARC_SDA32,
  BFD_RELOC_ARC_SDA_LDST,
  BFD_RELOC_ARC_SDA_LDST1,
  BFD_RELOC_ARC_SDA_LDST2,
  BFD_RELOC_ARC_SDA16_LD,
  BFD_RELOC_ARC_SDA16_LD1,
  BFD_RELOC_ARC_SDA16_LD2,
  BFD_RELOC_ARC_S13_PCREL,
  BFD_RELOC_ARC_W,
  BFD_RELOC_ARC_32_ME,
  BFD_RELOC_ARC_32_ME_S,
  BFD_RELOC_ARC_N32_ME,
  BFD_RELOC_ARC_SECTOFF_ME,
  BFD_RELOC_ARC_SDA32_ME,
  BFD_RELOC_ARC_W_ME,
  BFD_RELOC_AC_SECTOFF_U8,
  BFD_RELOC_AC_SECTOFF_U8_1,
  BFD_RELOC_AC_SECTOFF_U8_2,
  BFD_RELOC_AC_SECTOFF_S9,
  BFD_RELOC_AC_SECTOFF_S9_1,
  BFD_RELOC_AC_SECTOFF_S9_2,
  BFD_RELOC_ARC_SECTOFF_ME_1,
  BFD_RELOC_ARC_SECTOFF_ME_2,
  BFD_RELOC_ARC_SECTOFF_1,
  BFD_RELOC_ARC_SECTOFF_2,
  BFD_RELOC_ARC_SDA_12,
  BFD_RELOC_ARC_SDA16_ST2,
  BFD_RELOC_ARC_32_PCREL,
  BFD_RELOC_ARC_PC32,
  BFD_RELOC_ARC_GOT32,
  BFD_RELOC_ARC_GOTPC32,
  BFD_RELOC_ARC_PLT32,
  BFD_RELOC_ARC_COPY,
  BFD_RELOC_ARC_GLOB_DAT,
  BFD_RELOC_ARC_JMP_SLOT,
  BFD_RELOC_ARC_RELATIVE,
  BFD_RELOC_ARC_GOTOFF,
  BFD_RELOC_ARC_GOTPC,
  BFD_RELOC_ARC_S21W_PCREL_PLT,
  BFD_RELOC_ARC_S25H_PCREL_PLT,
  BFD_RELOC_ARC_TLS_DTPMOD,
  BFD_RELOC_ARC_TLS_TPOFF,
  BFD_RELOC_ARC_TLS_GD_GOT,
  BFD_RELOC_ARC_TLS_GD_LD,
  BFD_RELOC_ARC_TLS_GD_CALL,
  BFD_RELOC_ARC_TLS_IE_GOT,
  BFD_RELOC_ARC_TLS_DTPOFF,
  BFD_RELOC_ARC_TLS_DTPOFF_S9,
  BFD_RELOC_ARC_TLS_LE_S9,
  BFD_RELOC_ARC_TLS_LE_32,
  BFD_RELOC_ARC_S25W_PCREL_PLT,
  BFD_RELOC_ARC_S21H_PCREL_PLT,
  BFD_RELOC_ARC_NPS_CMEM16,
  BFD_RELOC_ARC_JLI_SECTOFF,


  BFD_RELOC_BFIN_16_IMM,


  BFD_RELOC_BFIN_16_HIGH,


  BFD_RELOC_BFIN_4_PCREL,


  BFD_RELOC_BFIN_5_PCREL,


  BFD_RELOC_BFIN_16_LOW,


  BFD_RELOC_BFIN_10_PCREL,


  BFD_RELOC_BFIN_11_PCREL,


  BFD_RELOC_BFIN_12_PCREL_JUMP,


  BFD_RELOC_BFIN_12_PCREL_JUMP_S,


  BFD_RELOC_BFIN_24_PCREL_CALL_X,


  BFD_RELOC_BFIN_24_PCREL_JUMP_L,


  BFD_RELOC_BFIN_GOT17M4,
  BFD_RELOC_BFIN_GOTHI,
  BFD_RELOC_BFIN_GOTLO,
  BFD_RELOC_BFIN_FUNCDESC,
  BFD_RELOC_BFIN_FUNCDESC_GOT17M4,
  BFD_RELOC_BFIN_FUNCDESC_GOTHI,
  BFD_RELOC_BFIN_FUNCDESC_GOTLO,
  BFD_RELOC_BFIN_FUNCDESC_VALUE,
  BFD_RELOC_BFIN_FUNCDESC_GOTOFF17M4,
  BFD_RELOC_BFIN_FUNCDESC_GOTOFFHI,
  BFD_RELOC_BFIN_FUNCDESC_GOTOFFLO,
  BFD_RELOC_BFIN_GOTOFF17M4,
  BFD_RELOC_BFIN_GOTOFFHI,
  BFD_RELOC_BFIN_GOTOFFLO,


  BFD_RELOC_BFIN_GOT,


  BFD_RELOC_BFIN_PLTPC,


  BFD_ARELOC_BFIN_PUSH,


  BFD_ARELOC_BFIN_CONST,


  BFD_ARELOC_BFIN_ADD,


  BFD_ARELOC_BFIN_SUB,


  BFD_ARELOC_BFIN_MULT,


  BFD_ARELOC_BFIN_DIV,


  BFD_ARELOC_BFIN_MOD,


  BFD_ARELOC_BFIN_LSHIFT,


  BFD_ARELOC_BFIN_RSHIFT,


  BFD_ARELOC_BFIN_AND,


  BFD_ARELOC_BFIN_OR,


  BFD_ARELOC_BFIN_XOR,


  BFD_ARELOC_BFIN_LAND,


  BFD_ARELOC_BFIN_LOR,


  BFD_ARELOC_BFIN_LEN,


  BFD_ARELOC_BFIN_NEG,


  BFD_ARELOC_BFIN_COMP,


  BFD_ARELOC_BFIN_PAGE,


  BFD_ARELOC_BFIN_HWPAGE,


  BFD_ARELOC_BFIN_ADDR,




  BFD_RELOC_D10V_10_PCREL_R,






  BFD_RELOC_D10V_10_PCREL_L,



  BFD_RELOC_D10V_18,



  BFD_RELOC_D10V_18_PCREL,



  BFD_RELOC_D30V_6,



  BFD_RELOC_D30V_9_PCREL,





  BFD_RELOC_D30V_9_PCREL_R,



  BFD_RELOC_D30V_15,



  BFD_RELOC_D30V_15_PCREL,





  BFD_RELOC_D30V_15_PCREL_R,



  BFD_RELOC_D30V_21,



  BFD_RELOC_D30V_21_PCREL,





  BFD_RELOC_D30V_21_PCREL_R,


  BFD_RELOC_D30V_32,


  BFD_RELOC_D30V_32_PCREL,


  BFD_RELOC_DLX_HI16_S,


  BFD_RELOC_DLX_LO16,


  BFD_RELOC_DLX_JMP26,


  BFD_RELOC_M32C_HI8,
  BFD_RELOC_M32C_RL_JUMP,
  BFD_RELOC_M32C_RL_1ADDR,
  BFD_RELOC_M32C_RL_2ADDR,



  BFD_RELOC_M32R_24,


  BFD_RELOC_M32R_10_PCREL,


  BFD_RELOC_M32R_18_PCREL,


  BFD_RELOC_M32R_26_PCREL,



  BFD_RELOC_M32R_HI16_ULO,



  BFD_RELOC_M32R_HI16_SLO,


  BFD_RELOC_M32R_LO16,



  BFD_RELOC_M32R_SDA16,


  BFD_RELOC_M32R_GOT24,
  BFD_RELOC_M32R_26_PLTREL,
  BFD_RELOC_M32R_COPY,
  BFD_RELOC_M32R_GLOB_DAT,
  BFD_RELOC_M32R_JMP_SLOT,
  BFD_RELOC_M32R_RELATIVE,
  BFD_RELOC_M32R_GOTOFF,
  BFD_RELOC_M32R_GOTOFF_HI_ULO,
  BFD_RELOC_M32R_GOTOFF_HI_SLO,
  BFD_RELOC_M32R_GOTOFF_LO,
  BFD_RELOC_M32R_GOTPC24,
  BFD_RELOC_M32R_GOT16_HI_ULO,
  BFD_RELOC_M32R_GOT16_HI_SLO,
  BFD_RELOC_M32R_GOT16_LO,
  BFD_RELOC_M32R_GOTPC_HI_ULO,
  BFD_RELOC_M32R_GOTPC_HI_SLO,
  BFD_RELOC_M32R_GOTPC_LO,



  BFD_RELOC_NDS32_20,


  BFD_RELOC_NDS32_9_PCREL,


  BFD_RELOC_NDS32_WORD_9_PCREL,


  BFD_RELOC_NDS32_15_PCREL,


  BFD_RELOC_NDS32_17_PCREL,


  BFD_RELOC_NDS32_25_PCREL,



  BFD_RELOC_NDS32_HI20,



  BFD_RELOC_NDS32_LO12S3,



  BFD_RELOC_NDS32_LO12S2,



  BFD_RELOC_NDS32_LO12S1,



  BFD_RELOC_NDS32_LO12S0,



  BFD_RELOC_NDS32_LO12S0_ORI,



  BFD_RELOC_NDS32_SDA15S3,



  BFD_RELOC_NDS32_SDA15S2,



  BFD_RELOC_NDS32_SDA15S1,



  BFD_RELOC_NDS32_SDA15S0,



  BFD_RELOC_NDS32_SDA16S3,



  BFD_RELOC_NDS32_SDA17S2,



  BFD_RELOC_NDS32_SDA18S1,



  BFD_RELOC_NDS32_SDA19S0,


  BFD_RELOC_NDS32_GOT20,
  BFD_RELOC_NDS32_9_PLTREL,
  BFD_RELOC_NDS32_25_PLTREL,
  BFD_RELOC_NDS32_COPY,
  BFD_RELOC_NDS32_GLOB_DAT,
  BFD_RELOC_NDS32_JMP_SLOT,
  BFD_RELOC_NDS32_RELATIVE,
  BFD_RELOC_NDS32_GOTOFF,
  BFD_RELOC_NDS32_GOTOFF_HI20,
  BFD_RELOC_NDS32_GOTOFF_LO12,
  BFD_RELOC_NDS32_GOTPC20,
  BFD_RELOC_NDS32_GOT_HI20,
  BFD_RELOC_NDS32_GOT_LO12,
  BFD_RELOC_NDS32_GOTPC_HI20,
  BFD_RELOC_NDS32_GOTPC_LO12,


  BFD_RELOC_NDS32_INSN16,
  BFD_RELOC_NDS32_LABEL,
  BFD_RELOC_NDS32_LONGCALL1,
  BFD_RELOC_NDS32_LONGCALL2,
  BFD_RELOC_NDS32_LONGCALL3,
  BFD_RELOC_NDS32_LONGJUMP1,
  BFD_RELOC_NDS32_LONGJUMP2,
  BFD_RELOC_NDS32_LONGJUMP3,
  BFD_RELOC_NDS32_LOADSTORE,
  BFD_RELOC_NDS32_9_FIXED,
  BFD_RELOC_NDS32_15_FIXED,
  BFD_RELOC_NDS32_17_FIXED,
  BFD_RELOC_NDS32_25_FIXED,
  BFD_RELOC_NDS32_LONGCALL4,
  BFD_RELOC_NDS32_LONGCALL5,
  BFD_RELOC_NDS32_LONGCALL6,
  BFD_RELOC_NDS32_LONGJUMP4,
  BFD_RELOC_NDS32_LONGJUMP5,
  BFD_RELOC_NDS32_LONGJUMP6,
  BFD_RELOC_NDS32_LONGJUMP7,


  BFD_RELOC_NDS32_PLTREL_HI20,
  BFD_RELOC_NDS32_PLTREL_LO12,
  BFD_RELOC_NDS32_PLT_GOTREL_HI20,
  BFD_RELOC_NDS32_PLT_GOTREL_LO12,


  BFD_RELOC_NDS32_SDA12S2_DP,
  BFD_RELOC_NDS32_SDA12S2_SP,
  BFD_RELOC_NDS32_LO12S2_DP,
  BFD_RELOC_NDS32_LO12S2_SP,


  BFD_RELOC_NDS32_DWARF2_OP1,
  BFD_RELOC_NDS32_DWARF2_OP2,
  BFD_RELOC_NDS32_DWARF2_LEB,


  BFD_RELOC_NDS32_UPDATE_TA,


  BFD_RELOC_NDS32_PLT_GOTREL_LO20,
  BFD_RELOC_NDS32_PLT_GOTREL_LO15,
  BFD_RELOC_NDS32_PLT_GOTREL_LO19,
  BFD_RELOC_NDS32_GOT_LO15,
  BFD_RELOC_NDS32_GOT_LO19,
  BFD_RELOC_NDS32_GOTOFF_LO15,
  BFD_RELOC_NDS32_GOTOFF_LO19,
  BFD_RELOC_NDS32_GOT15S2,
  BFD_RELOC_NDS32_GOT17S2,



  BFD_RELOC_NDS32_5,


  BFD_RELOC_NDS32_10_UPCREL,


  BFD_RELOC_NDS32_SDA_FP7U2_RELA,


  BFD_RELOC_NDS32_RELAX_ENTRY,
  BFD_RELOC_NDS32_GOT_SUFF,
  BFD_RELOC_NDS32_GOTOFF_SUFF,
  BFD_RELOC_NDS32_PLT_GOT_SUFF,
  BFD_RELOC_NDS32_MULCALL_SUFF,
  BFD_RELOC_NDS32_PTR,
  BFD_RELOC_NDS32_PTR_COUNT,
  BFD_RELOC_NDS32_PTR_RESOLVED,
  BFD_RELOC_NDS32_PLTBLOCK,
  BFD_RELOC_NDS32_RELAX_REGION_BEGIN,
  BFD_RELOC_NDS32_RELAX_REGION_END,
  BFD_RELOC_NDS32_MINUEND,
  BFD_RELOC_NDS32_SUBTRAHEND,
  BFD_RELOC_NDS32_DIFF8,
  BFD_RELOC_NDS32_DIFF16,
  BFD_RELOC_NDS32_DIFF32,
  BFD_RELOC_NDS32_DIFF_ULEB128,
  BFD_RELOC_NDS32_EMPTY,


  BFD_RELOC_NDS32_25_ABS,


  BFD_RELOC_NDS32_DATA,
  BFD_RELOC_NDS32_TRAN,
  BFD_RELOC_NDS32_17IFC_PCREL,
  BFD_RELOC_NDS32_10IFCU_PCREL,


  BFD_RELOC_NDS32_TPOFF,
  BFD_RELOC_NDS32_GOTTPOFF,
  BFD_RELOC_NDS32_TLS_LE_HI20,
  BFD_RELOC_NDS32_TLS_LE_LO12,
  BFD_RELOC_NDS32_TLS_LE_20,
  BFD_RELOC_NDS32_TLS_LE_15S0,
  BFD_RELOC_NDS32_TLS_LE_15S1,
  BFD_RELOC_NDS32_TLS_LE_15S2,
  BFD_RELOC_NDS32_TLS_LE_ADD,
  BFD_RELOC_NDS32_TLS_LE_LS,
  BFD_RELOC_NDS32_TLS_IE_HI20,
  BFD_RELOC_NDS32_TLS_IE_LO12,
  BFD_RELOC_NDS32_TLS_IE_LO12S2,
  BFD_RELOC_NDS32_TLS_IEGP_HI20,
  BFD_RELOC_NDS32_TLS_IEGP_LO12,
  BFD_RELOC_NDS32_TLS_IEGP_LO12S2,
  BFD_RELOC_NDS32_TLS_IEGP_LW,
  BFD_RELOC_NDS32_TLS_DESC,
  BFD_RELOC_NDS32_TLS_DESC_HI20,
  BFD_RELOC_NDS32_TLS_DESC_LO12,
  BFD_RELOC_NDS32_TLS_DESC_20,
  BFD_RELOC_NDS32_TLS_DESC_SDA17S2,
  BFD_RELOC_NDS32_TLS_DESC_ADD,
  BFD_RELOC_NDS32_TLS_DESC_FUNC,
  BFD_RELOC_NDS32_TLS_DESC_CALL,
  BFD_RELOC_NDS32_TLS_DESC_MEM,
  BFD_RELOC_NDS32_REMOVE,
  BFD_RELOC_NDS32_GROUP,


  BFD_RELOC_NDS32_LSI,


  BFD_RELOC_V850_9_PCREL,


  BFD_RELOC_V850_22_PCREL,


  BFD_RELOC_V850_SDA_16_16_OFFSET,



  BFD_RELOC_V850_SDA_15_16_OFFSET,


  BFD_RELOC_V850_ZDA_16_16_OFFSET,



  BFD_RELOC_V850_ZDA_15_16_OFFSET,



  BFD_RELOC_V850_TDA_6_8_OFFSET,



  BFD_RELOC_V850_TDA_7_8_OFFSET,


  BFD_RELOC_V850_TDA_7_7_OFFSET,


  BFD_RELOC_V850_TDA_16_16_OFFSET,



  BFD_RELOC_V850_TDA_4_5_OFFSET,


  BFD_RELOC_V850_TDA_4_4_OFFSET,



  BFD_RELOC_V850_SDA_16_16_SPLIT_OFFSET,



  BFD_RELOC_V850_ZDA_16_16_SPLIT_OFFSET,


  BFD_RELOC_V850_CALLT_6_7_OFFSET,


  BFD_RELOC_V850_CALLT_16_16_OFFSET,


  BFD_RELOC_V850_LONGCALL,


  BFD_RELOC_V850_LONGJUMP,


  BFD_RELOC_V850_ALIGN,



  BFD_RELOC_V850_LO16_SPLIT_OFFSET,


  BFD_RELOC_V850_16_PCREL,


  BFD_RELOC_V850_17_PCREL,


  BFD_RELOC_V850_23,


  BFD_RELOC_V850_32_PCREL,


  BFD_RELOC_V850_32_ABS,


  BFD_RELOC_V850_16_SPLIT_OFFSET,


  BFD_RELOC_V850_16_S1,


  BFD_RELOC_V850_LO16_S1,


  BFD_RELOC_V850_CALLT_15_16_OFFSET,


  BFD_RELOC_V850_32_GOTPCREL,


  BFD_RELOC_V850_16_GOT,


  BFD_RELOC_V850_32_GOT,


  BFD_RELOC_V850_22_PLT_PCREL,


  BFD_RELOC_V850_32_PLT_PCREL,


  BFD_RELOC_V850_COPY,


  BFD_RELOC_V850_GLOB_DAT,


  BFD_RELOC_V850_JMP_SLOT,


  BFD_RELOC_V850_RELATIVE,


  BFD_RELOC_V850_16_GOTOFF,


  BFD_RELOC_V850_32_GOTOFF,


  BFD_RELOC_V850_CODE,


  BFD_RELOC_V850_DATA,




  BFD_RELOC_TIC30_LDP,




  BFD_RELOC_TIC54X_PARTLS7,




  BFD_RELOC_TIC54X_PARTMS9,


  BFD_RELOC_TIC54X_23,




  BFD_RELOC_TIC54X_16_OF_23,




  BFD_RELOC_TIC54X_MS7_OF_23,


  BFD_RELOC_C6000_PCR_S21,
  BFD_RELOC_C6000_PCR_S12,
  BFD_RELOC_C6000_PCR_S10,
  BFD_RELOC_C6000_PCR_S7,
  BFD_RELOC_C6000_ABS_S16,
  BFD_RELOC_C6000_ABS_L16,
  BFD_RELOC_C6000_ABS_H16,
  BFD_RELOC_C6000_SBR_U15_B,
  BFD_RELOC_C6000_SBR_U15_H,
  BFD_RELOC_C6000_SBR_U15_W,
  BFD_RELOC_C6000_SBR_S16,
  BFD_RELOC_C6000_SBR_L16_B,
  BFD_RELOC_C6000_SBR_L16_H,
  BFD_RELOC_C6000_SBR_L16_W,
  BFD_RELOC_C6000_SBR_H16_B,
  BFD_RELOC_C6000_SBR_H16_H,
  BFD_RELOC_C6000_SBR_H16_W,
  BFD_RELOC_C6000_SBR_GOT_U15_W,
  BFD_RELOC_C6000_SBR_GOT_L16_W,
  BFD_RELOC_C6000_SBR_GOT_H16_W,
  BFD_RELOC_C6000_DSBT_INDEX,
  BFD_RELOC_C6000_PREL31,
  BFD_RELOC_C6000_COPY,
  BFD_RELOC_C6000_JUMP_SLOT,
  BFD_RELOC_C6000_EHTYPE,
  BFD_RELOC_C6000_PCR_H16,
  BFD_RELOC_C6000_PCR_L16,
  BFD_RELOC_C6000_ALIGN,
  BFD_RELOC_C6000_FPHEAD,
  BFD_RELOC_C6000_NOCMP,


  BFD_RELOC_FR30_48,



  BFD_RELOC_FR30_20,



  BFD_RELOC_FR30_6_IN_4,



  BFD_RELOC_FR30_8_IN_8,



  BFD_RELOC_FR30_9_IN_8,



  BFD_RELOC_FR30_10_IN_8,



  BFD_RELOC_FR30_9_PCREL,



  BFD_RELOC_FR30_12_PCREL,


  BFD_RELOC_MCORE_PCREL_IMM8BY4,
  BFD_RELOC_MCORE_PCREL_IMM11BY2,
  BFD_RELOC_MCORE_PCREL_IMM4BY2,
  BFD_RELOC_MCORE_PCREL_32,
  BFD_RELOC_MCORE_PCREL_JSR_IMM11BY2,
  BFD_RELOC_MCORE_RVA,


  BFD_RELOC_MEP_8,
  BFD_RELOC_MEP_16,
  BFD_RELOC_MEP_32,
  BFD_RELOC_MEP_PCREL8A2,
  BFD_RELOC_MEP_PCREL12A2,
  BFD_RELOC_MEP_PCREL17A2,
  BFD_RELOC_MEP_PCREL24A2,
  BFD_RELOC_MEP_PCABS24A2,
  BFD_RELOC_MEP_LOW16,
  BFD_RELOC_MEP_HI16U,
  BFD_RELOC_MEP_HI16S,
  BFD_RELOC_MEP_GPREL,
  BFD_RELOC_MEP_TPREL,
  BFD_RELOC_MEP_TPREL7,
  BFD_RELOC_MEP_TPREL7A2,
  BFD_RELOC_MEP_TPREL7A4,
  BFD_RELOC_MEP_UIMM24,
  BFD_RELOC_MEP_ADDR24A4,
  BFD_RELOC_MEP_GNU_VTINHERIT,
  BFD_RELOC_MEP_GNU_VTENTRY,



  BFD_RELOC_METAG_HIADDR16,
  BFD_RELOC_METAG_LOADDR16,
  BFD_RELOC_METAG_RELBRANCH,
  BFD_RELOC_METAG_GETSETOFF,
  BFD_RELOC_METAG_HIOG,
  BFD_RELOC_METAG_LOOG,
  BFD_RELOC_METAG_REL8,
  BFD_RELOC_METAG_REL16,
  BFD_RELOC_METAG_HI16_GOTOFF,
  BFD_RELOC_METAG_LO16_GOTOFF,
  BFD_RELOC_METAG_GETSET_GOTOFF,
  BFD_RELOC_METAG_GETSET_GOT,
  BFD_RELOC_METAG_HI16_GOTPC,
  BFD_RELOC_METAG_LO16_GOTPC,
  BFD_RELOC_METAG_HI16_PLT,
  BFD_RELOC_METAG_LO16_PLT,
  BFD_RELOC_METAG_RELBRANCH_PLT,
  BFD_RELOC_METAG_GOTOFF,
  BFD_RELOC_METAG_PLT,
  BFD_RELOC_METAG_COPY,
  BFD_RELOC_METAG_JMP_SLOT,
  BFD_RELOC_METAG_RELATIVE,
  BFD_RELOC_METAG_GLOB_DAT,
  BFD_RELOC_METAG_TLS_GD,
  BFD_RELOC_METAG_TLS_LDM,
  BFD_RELOC_METAG_TLS_LDO_HI16,
  BFD_RELOC_METAG_TLS_LDO_LO16,
  BFD_RELOC_METAG_TLS_LDO,
  BFD_RELOC_METAG_TLS_IE,
  BFD_RELOC_METAG_TLS_IENONPIC,
  BFD_RELOC_METAG_TLS_IENONPIC_HI16,
  BFD_RELOC_METAG_TLS_IENONPIC_LO16,
  BFD_RELOC_METAG_TLS_TPOFF,
  BFD_RELOC_METAG_TLS_DTPMOD,
  BFD_RELOC_METAG_TLS_DTPOFF,
  BFD_RELOC_METAG_TLS_LE,
  BFD_RELOC_METAG_TLS_LE_HI16,
  BFD_RELOC_METAG_TLS_LE_LO16,


  BFD_RELOC_MMIX_GETA,
  BFD_RELOC_MMIX_GETA_1,
  BFD_RELOC_MMIX_GETA_2,
  BFD_RELOC_MMIX_GETA_3,


  BFD_RELOC_MMIX_CBRANCH,
  BFD_RELOC_MMIX_CBRANCH_J,
  BFD_RELOC_MMIX_CBRANCH_1,
  BFD_RELOC_MMIX_CBRANCH_2,
  BFD_RELOC_MMIX_CBRANCH_3,


  BFD_RELOC_MMIX_PUSHJ,
  BFD_RELOC_MMIX_PUSHJ_1,
  BFD_RELOC_MMIX_PUSHJ_2,
  BFD_RELOC_MMIX_PUSHJ_3,
  BFD_RELOC_MMIX_PUSHJ_STUBBABLE,


  BFD_RELOC_MMIX_JMP,
  BFD_RELOC_MMIX_JMP_1,
  BFD_RELOC_MMIX_JMP_2,
  BFD_RELOC_MMIX_JMP_3,



  BFD_RELOC_MMIX_ADDR19,


  BFD_RELOC_MMIX_ADDR27,



  BFD_RELOC_MMIX_REG_OR_BYTE,



  BFD_RELOC_MMIX_REG,



  BFD_RELOC_MMIX_BASE_PLUS_OFFSET,



  BFD_RELOC_MMIX_LOCAL,



  BFD_RELOC_AVR_7_PCREL,



  BFD_RELOC_AVR_13_PCREL,



  BFD_RELOC_AVR_16_PM,



  BFD_RELOC_AVR_LO8_LDI,



  BFD_RELOC_AVR_HI8_LDI,



  BFD_RELOC_AVR_HH8_LDI,



  BFD_RELOC_AVR_MS8_LDI,



  BFD_RELOC_AVR_LO8_LDI_NEG,




  BFD_RELOC_AVR_HI8_LDI_NEG,




  BFD_RELOC_AVR_HH8_LDI_NEG,



  BFD_RELOC_AVR_MS8_LDI_NEG,



  BFD_RELOC_AVR_LO8_LDI_PM,





  BFD_RELOC_AVR_LO8_LDI_GS,



  BFD_RELOC_AVR_HI8_LDI_PM,





  BFD_RELOC_AVR_HI8_LDI_GS,



  BFD_RELOC_AVR_HH8_LDI_PM,



  BFD_RELOC_AVR_LO8_LDI_PM_NEG,




  BFD_RELOC_AVR_HI8_LDI_PM_NEG,




  BFD_RELOC_AVR_HH8_LDI_PM_NEG,



  BFD_RELOC_AVR_CALL,



  BFD_RELOC_AVR_LDI,



  BFD_RELOC_AVR_6,



  BFD_RELOC_AVR_6_ADIW,



  BFD_RELOC_AVR_8_LO,



  BFD_RELOC_AVR_8_HI,



  BFD_RELOC_AVR_8_HLO,







  BFD_RELOC_AVR_DIFF8,
  BFD_RELOC_AVR_DIFF16,
  BFD_RELOC_AVR_DIFF32,



  BFD_RELOC_AVR_LDS_STS_16,



  BFD_RELOC_AVR_PORT6,



  BFD_RELOC_AVR_PORT5,


  BFD_RELOC_RISCV_HI20,
  BFD_RELOC_RISCV_PCREL_HI20,
  BFD_RELOC_RISCV_PCREL_LO12_I,
  BFD_RELOC_RISCV_PCREL_LO12_S,
  BFD_RELOC_RISCV_LO12_I,
  BFD_RELOC_RISCV_LO12_S,
  BFD_RELOC_RISCV_GPREL12_I,
  BFD_RELOC_RISCV_GPREL12_S,
  BFD_RELOC_RISCV_TPREL_HI20,
  BFD_RELOC_RISCV_TPREL_LO12_I,
  BFD_RELOC_RISCV_TPREL_LO12_S,
  BFD_RELOC_RISCV_TPREL_ADD,
  BFD_RELOC_RISCV_CALL,
  BFD_RELOC_RISCV_CALL_PLT,
  BFD_RELOC_RISCV_ADD8,
  BFD_RELOC_RISCV_ADD16,
  BFD_RELOC_RISCV_ADD32,
  BFD_RELOC_RISCV_ADD64,
  BFD_RELOC_RISCV_SUB8,
  BFD_RELOC_RISCV_SUB16,
  BFD_RELOC_RISCV_SUB32,
  BFD_RELOC_RISCV_SUB64,
  BFD_RELOC_RISCV_GOT_HI20,
  BFD_RELOC_RISCV_TLS_GOT_HI20,
  BFD_RELOC_RISCV_TLS_GD_HI20,
  BFD_RELOC_RISCV_JMP,
  BFD_RELOC_RISCV_TLS_DTPMOD32,
  BFD_RELOC_RISCV_TLS_DTPREL32,
  BFD_RELOC_RISCV_TLS_DTPMOD64,
  BFD_RELOC_RISCV_TLS_DTPREL64,
  BFD_RELOC_RISCV_TLS_TPREL32,
  BFD_RELOC_RISCV_TLS_TPREL64,
  BFD_RELOC_RISCV_ALIGN,
  BFD_RELOC_RISCV_RVC_BRANCH,
  BFD_RELOC_RISCV_RVC_JUMP,
  BFD_RELOC_RISCV_RVC_LUI,
  BFD_RELOC_RISCV_GPREL_I,
  BFD_RELOC_RISCV_GPREL_S,
  BFD_RELOC_RISCV_TPREL_I,
  BFD_RELOC_RISCV_TPREL_S,
  BFD_RELOC_RISCV_RELAX,
  BFD_RELOC_RISCV_CFA,
  BFD_RELOC_RISCV_SUB6,
  BFD_RELOC_RISCV_SET6,
  BFD_RELOC_RISCV_SET8,
  BFD_RELOC_RISCV_SET16,
  BFD_RELOC_RISCV_SET32,
  BFD_RELOC_RISCV_32_PCREL,
  BFD_RELOC_RISCV_SET_ULEB128,
  BFD_RELOC_RISCV_SUB_ULEB128,


  BFD_RELOC_RL78_NEG8,
  BFD_RELOC_RL78_NEG16,
  BFD_RELOC_RL78_NEG24,
  BFD_RELOC_RL78_NEG32,
  BFD_RELOC_RL78_16_OP,
  BFD_RELOC_RL78_24_OP,
  BFD_RELOC_RL78_32_OP,
  BFD_RELOC_RL78_8U,
  BFD_RELOC_RL78_16U,
  BFD_RELOC_RL78_24U,
  BFD_RELOC_RL78_DIR3U_PCREL,
  BFD_RELOC_RL78_DIFF,
  BFD_RELOC_RL78_GPRELB,
  BFD_RELOC_RL78_GPRELW,
  BFD_RELOC_RL78_GPRELL,
  BFD_RELOC_RL78_SYM,
  BFD_RELOC_RL78_OP_SUBTRACT,
  BFD_RELOC_RL78_OP_NEG,
  BFD_RELOC_RL78_OP_AND,
  BFD_RELOC_RL78_OP_SHRA,
  BFD_RELOC_RL78_ABS8,
  BFD_RELOC_RL78_ABS16,
  BFD_RELOC_RL78_ABS16_REV,
  BFD_RELOC_RL78_ABS32,
  BFD_RELOC_RL78_ABS32_REV,
  BFD_RELOC_RL78_ABS16U,
  BFD_RELOC_RL78_ABS16UW,
  BFD_RELOC_RL78_ABS16UL,
  BFD_RELOC_RL78_RELAX,
  BFD_RELOC_RL78_HI16,
  BFD_RELOC_RL78_HI8,
  BFD_RELOC_RL78_LO16,
  BFD_RELOC_RL78_CODE,
  BFD_RELOC_RL78_SADDR,


  BFD_RELOC_RX_NEG8,
  BFD_RELOC_RX_NEG16,
  BFD_RELOC_RX_NEG24,
  BFD_RELOC_RX_NEG32,
  BFD_RELOC_RX_16_OP,
  BFD_RELOC_RX_24_OP,
  BFD_RELOC_RX_32_OP,
  BFD_RELOC_RX_8U,
  BFD_RELOC_RX_16U,
  BFD_RELOC_RX_24U,
  BFD_RELOC_RX_DIR3U_PCREL,
  BFD_RELOC_RX_DIFF,
  BFD_RELOC_RX_GPRELB,
  BFD_RELOC_RX_GPRELW,
  BFD_RELOC_RX_GPRELL,
  BFD_RELOC_RX_SYM,
  BFD_RELOC_RX_OP_SUBTRACT,
  BFD_RELOC_RX_OP_NEG,
  BFD_RELOC_RX_ABS8,
  BFD_RELOC_RX_ABS16,
  BFD_RELOC_RX_ABS16_REV,
  BFD_RELOC_RX_ABS32,
  BFD_RELOC_RX_ABS32_REV,
  BFD_RELOC_RX_ABS16U,
  BFD_RELOC_RX_ABS16UW,
  BFD_RELOC_RX_ABS16UL,
  BFD_RELOC_RX_RELAX,


  BFD_RELOC_390_12,


  BFD_RELOC_390_GOT12,


  BFD_RELOC_390_PLT32,


  BFD_RELOC_390_COPY,


  BFD_RELOC_390_GLOB_DAT,


  BFD_RELOC_390_JMP_SLOT,


  BFD_RELOC_390_RELATIVE,


  BFD_RELOC_390_GOTPC,


  BFD_RELOC_390_GOT16,


  BFD_RELOC_390_PC12DBL,


  BFD_RELOC_390_PLT12DBL,


  BFD_RELOC_390_PC16DBL,


  BFD_RELOC_390_PLT16DBL,


  BFD_RELOC_390_PC24DBL,


  BFD_RELOC_390_PLT24DBL,


  BFD_RELOC_390_PC32DBL,


  BFD_RELOC_390_PLT32DBL,


  BFD_RELOC_390_GOTPCDBL,


  BFD_RELOC_390_GOT64,


  BFD_RELOC_390_PLT64,


  BFD_RELOC_390_GOTENT,


  BFD_RELOC_390_GOTOFF64,


  BFD_RELOC_390_GOTPLT12,


  BFD_RELOC_390_GOTPLT16,


  BFD_RELOC_390_GOTPLT32,


  BFD_RELOC_390_GOTPLT64,


  BFD_RELOC_390_GOTPLTENT,


  BFD_RELOC_390_PLTOFF16,


  BFD_RELOC_390_PLTOFF32,


  BFD_RELOC_390_PLTOFF64,


  BFD_RELOC_390_TLS_LOAD,
  BFD_RELOC_390_TLS_GDCALL,
  BFD_RELOC_390_TLS_LDCALL,
  BFD_RELOC_390_TLS_GD32,
  BFD_RELOC_390_TLS_GD64,
  BFD_RELOC_390_TLS_GOTIE12,
  BFD_RELOC_390_TLS_GOTIE32,
  BFD_RELOC_390_TLS_GOTIE64,
  BFD_RELOC_390_TLS_LDM32,
  BFD_RELOC_390_TLS_LDM64,
  BFD_RELOC_390_TLS_IE32,
  BFD_RELOC_390_TLS_IE64,
  BFD_RELOC_390_TLS_IEENT,
  BFD_RELOC_390_TLS_LE32,
  BFD_RELOC_390_TLS_LE64,
  BFD_RELOC_390_TLS_LDO32,
  BFD_RELOC_390_TLS_LDO64,
  BFD_RELOC_390_TLS_DTPMOD,
  BFD_RELOC_390_TLS_DTPOFF,
  BFD_RELOC_390_TLS_TPOFF,


  BFD_RELOC_390_20,
  BFD_RELOC_390_GOT20,
  BFD_RELOC_390_GOTPLT20,
  BFD_RELOC_390_TLS_GOTIE20,


  BFD_RELOC_390_IRELATIVE,



  BFD_RELOC_SCORE_GPREL15,


  BFD_RELOC_SCORE_DUMMY2,
  BFD_RELOC_SCORE_JMP,


  BFD_RELOC_SCORE_BRANCH,


  BFD_RELOC_SCORE_IMM30,


  BFD_RELOC_SCORE_IMM32,


  BFD_RELOC_SCORE16_JMP,


  BFD_RELOC_SCORE16_BRANCH,


  BFD_RELOC_SCORE_BCMP,


  BFD_RELOC_SCORE_GOT15,
  BFD_RELOC_SCORE_GOT_LO16,
  BFD_RELOC_SCORE_CALL15,
  BFD_RELOC_SCORE_DUMMY_HI16,


  BFD_RELOC_IP2K_FR9,


  BFD_RELOC_IP2K_BANK,


  BFD_RELOC_IP2K_ADDR16CJP,


  BFD_RELOC_IP2K_PAGE3,


  BFD_RELOC_IP2K_LO8DATA,
  BFD_RELOC_IP2K_HI8DATA,
  BFD_RELOC_IP2K_EX8DATA,


  BFD_RELOC_IP2K_LO8INSN,
  BFD_RELOC_IP2K_HI8INSN,


  BFD_RELOC_IP2K_PC_SKIP,


  BFD_RELOC_IP2K_TEXT,


  BFD_RELOC_IP2K_FR_OFFSET,


  BFD_RELOC_VPE4KMATH_DATA,
  BFD_RELOC_VPE4KMATH_INSN,
# 5677 "../bfd/bfd.h"
  BFD_RELOC_VTABLE_INHERIT,
  BFD_RELOC_VTABLE_ENTRY,


  BFD_RELOC_IA64_IMM14,
  BFD_RELOC_IA64_IMM22,
  BFD_RELOC_IA64_IMM64,
  BFD_RELOC_IA64_DIR32MSB,
  BFD_RELOC_IA64_DIR32LSB,
  BFD_RELOC_IA64_DIR64MSB,
  BFD_RELOC_IA64_DIR64LSB,
  BFD_RELOC_IA64_GPREL22,
  BFD_RELOC_IA64_GPREL64I,
  BFD_RELOC_IA64_GPREL32MSB,
  BFD_RELOC_IA64_GPREL32LSB,
  BFD_RELOC_IA64_GPREL64MSB,
  BFD_RELOC_IA64_GPREL64LSB,
  BFD_RELOC_IA64_LTOFF22,
  BFD_RELOC_IA64_LTOFF64I,
  BFD_RELOC_IA64_PLTOFF22,
  BFD_RELOC_IA64_PLTOFF64I,
  BFD_RELOC_IA64_PLTOFF64MSB,
  BFD_RELOC_IA64_PLTOFF64LSB,
  BFD_RELOC_IA64_FPTR64I,
  BFD_RELOC_IA64_FPTR32MSB,
  BFD_RELOC_IA64_FPTR32LSB,
  BFD_RELOC_IA64_FPTR64MSB,
  BFD_RELOC_IA64_FPTR64LSB,
  BFD_RELOC_IA64_PCREL21B,
  BFD_RELOC_IA64_PCREL21BI,
  BFD_RELOC_IA64_PCREL21M,
  BFD_RELOC_IA64_PCREL21F,
  BFD_RELOC_IA64_PCREL22,
  BFD_RELOC_IA64_PCREL60B,
  BFD_RELOC_IA64_PCREL64I,
  BFD_RELOC_IA64_PCREL32MSB,
  BFD_RELOC_IA64_PCREL32LSB,
  BFD_RELOC_IA64_PCREL64MSB,
  BFD_RELOC_IA64_PCREL64LSB,
  BFD_RELOC_IA64_LTOFF_FPTR22,
  BFD_RELOC_IA64_LTOFF_FPTR64I,
  BFD_RELOC_IA64_LTOFF_FPTR32MSB,
  BFD_RELOC_IA64_LTOFF_FPTR32LSB,
  BFD_RELOC_IA64_LTOFF_FPTR64MSB,
  BFD_RELOC_IA64_LTOFF_FPTR64LSB,
  BFD_RELOC_IA64_SEGREL32MSB,
  BFD_RELOC_IA64_SEGREL32LSB,
  BFD_RELOC_IA64_SEGREL64MSB,
  BFD_RELOC_IA64_SEGREL64LSB,
  BFD_RELOC_IA64_SECREL32MSB,
  BFD_RELOC_IA64_SECREL32LSB,
  BFD_RELOC_IA64_SECREL64MSB,
  BFD_RELOC_IA64_SECREL64LSB,
  BFD_RELOC_IA64_REL32MSB,
  BFD_RELOC_IA64_REL32LSB,
  BFD_RELOC_IA64_REL64MSB,
  BFD_RELOC_IA64_REL64LSB,
  BFD_RELOC_IA64_LTV32MSB,
  BFD_RELOC_IA64_LTV32LSB,
  BFD_RELOC_IA64_LTV64MSB,
  BFD_RELOC_IA64_LTV64LSB,
  BFD_RELOC_IA64_IPLTMSB,
  BFD_RELOC_IA64_IPLTLSB,
  BFD_RELOC_IA64_COPY,
  BFD_RELOC_IA64_LTOFF22X,
  BFD_RELOC_IA64_LDXMOV,
  BFD_RELOC_IA64_TPREL14,
  BFD_RELOC_IA64_TPREL22,
  BFD_RELOC_IA64_TPREL64I,
  BFD_RELOC_IA64_TPREL64MSB,
  BFD_RELOC_IA64_TPREL64LSB,
  BFD_RELOC_IA64_LTOFF_TPREL22,
  BFD_RELOC_IA64_DTPMOD64MSB,
  BFD_RELOC_IA64_DTPMOD64LSB,
  BFD_RELOC_IA64_LTOFF_DTPMOD22,
  BFD_RELOC_IA64_DTPREL14,
  BFD_RELOC_IA64_DTPREL22,
  BFD_RELOC_IA64_DTPREL64I,
  BFD_RELOC_IA64_DTPREL32MSB,
  BFD_RELOC_IA64_DTPREL32LSB,
  BFD_RELOC_IA64_DTPREL64MSB,
  BFD_RELOC_IA64_DTPREL64LSB,
  BFD_RELOC_IA64_LTOFF_DTPREL22,



  BFD_RELOC_M68HC11_HI8,



  BFD_RELOC_M68HC11_LO8,



  BFD_RELOC_M68HC11_3B,






  BFD_RELOC_M68HC11_RL_JUMP,





  BFD_RELOC_M68HC11_RL_GROUP,





  BFD_RELOC_M68HC11_LO16,





  BFD_RELOC_M68HC11_PAGE,





  BFD_RELOC_M68HC11_24,



  BFD_RELOC_M68HC12_5B,



  BFD_RELOC_XGATE_RL_JUMP,





  BFD_RELOC_XGATE_RL_GROUP,




  BFD_RELOC_XGATE_LO16,


  BFD_RELOC_XGATE_GPAGE,


  BFD_RELOC_XGATE_24,



  BFD_RELOC_XGATE_PCREL_9,



  BFD_RELOC_XGATE_PCREL_10,




  BFD_RELOC_XGATE_IMM8_LO,




  BFD_RELOC_XGATE_IMM8_HI,



  BFD_RELOC_XGATE_IMM3,



  BFD_RELOC_XGATE_IMM4,



  BFD_RELOC_XGATE_IMM5,



  BFD_RELOC_M68HC12_9B,



  BFD_RELOC_M68HC12_16B,



  BFD_RELOC_M68HC12_9_PCREL,



  BFD_RELOC_M68HC12_10_PCREL,




  BFD_RELOC_M68HC12_LO8XG,




  BFD_RELOC_M68HC12_HI8XG,




  BFD_RELOC_S12Z_15_PCREL,


  BFD_RELOC_CR16_NUM8,
  BFD_RELOC_CR16_NUM16,
  BFD_RELOC_CR16_NUM32,
  BFD_RELOC_CR16_NUM32a,
  BFD_RELOC_CR16_REGREL0,
  BFD_RELOC_CR16_REGREL4,
  BFD_RELOC_CR16_REGREL4a,
  BFD_RELOC_CR16_REGREL14,
  BFD_RELOC_CR16_REGREL14a,
  BFD_RELOC_CR16_REGREL16,
  BFD_RELOC_CR16_REGREL20,
  BFD_RELOC_CR16_REGREL20a,
  BFD_RELOC_CR16_ABS20,
  BFD_RELOC_CR16_ABS24,
  BFD_RELOC_CR16_IMM4,
  BFD_RELOC_CR16_IMM8,
  BFD_RELOC_CR16_IMM16,
  BFD_RELOC_CR16_IMM20,
  BFD_RELOC_CR16_IMM24,
  BFD_RELOC_CR16_IMM32,
  BFD_RELOC_CR16_IMM32a,
  BFD_RELOC_CR16_DISP4,
  BFD_RELOC_CR16_DISP8,
  BFD_RELOC_CR16_DISP16,
  BFD_RELOC_CR16_DISP20,
  BFD_RELOC_CR16_DISP24,
  BFD_RELOC_CR16_DISP24a,
  BFD_RELOC_CR16_SWITCH8,
  BFD_RELOC_CR16_SWITCH16,
  BFD_RELOC_CR16_SWITCH32,
  BFD_RELOC_CR16_GOT_REGREL20,
  BFD_RELOC_CR16_GOTC_REGREL20,
  BFD_RELOC_CR16_GLOB_DAT,


  BFD_RELOC_CRX_REL4,
  BFD_RELOC_CRX_REL8,
  BFD_RELOC_CRX_REL8_CMP,
  BFD_RELOC_CRX_REL16,
  BFD_RELOC_CRX_REL24,
  BFD_RELOC_CRX_REL32,
  BFD_RELOC_CRX_REGREL12,
  BFD_RELOC_CRX_REGREL22,
  BFD_RELOC_CRX_REGREL28,
  BFD_RELOC_CRX_REGREL32,
  BFD_RELOC_CRX_ABS16,
  BFD_RELOC_CRX_ABS32,
  BFD_RELOC_CRX_NUM8,
  BFD_RELOC_CRX_NUM16,
  BFD_RELOC_CRX_NUM32,
  BFD_RELOC_CRX_IMM16,
  BFD_RELOC_CRX_IMM32,
  BFD_RELOC_CRX_SWITCH8,
  BFD_RELOC_CRX_SWITCH16,
  BFD_RELOC_CRX_SWITCH32,



  BFD_RELOC_CRIS_BDISP8,
  BFD_RELOC_CRIS_UNSIGNED_5,
  BFD_RELOC_CRIS_SIGNED_6,
  BFD_RELOC_CRIS_UNSIGNED_6,
  BFD_RELOC_CRIS_SIGNED_8,
  BFD_RELOC_CRIS_UNSIGNED_8,
  BFD_RELOC_CRIS_SIGNED_16,
  BFD_RELOC_CRIS_UNSIGNED_16,
  BFD_RELOC_CRIS_LAPCQ_OFFSET,
  BFD_RELOC_CRIS_UNSIGNED_4,


  BFD_RELOC_CRIS_COPY,
  BFD_RELOC_CRIS_GLOB_DAT,
  BFD_RELOC_CRIS_JUMP_SLOT,
  BFD_RELOC_CRIS_RELATIVE,


  BFD_RELOC_CRIS_32_GOT,


  BFD_RELOC_CRIS_16_GOT,


  BFD_RELOC_CRIS_32_GOTPLT,


  BFD_RELOC_CRIS_16_GOTPLT,


  BFD_RELOC_CRIS_32_GOTREL,


  BFD_RELOC_CRIS_32_PLT_GOTREL,


  BFD_RELOC_CRIS_32_PLT_PCREL,


  BFD_RELOC_CRIS_32_GOT_GD,
  BFD_RELOC_CRIS_16_GOT_GD,
  BFD_RELOC_CRIS_32_GD,
  BFD_RELOC_CRIS_DTP,
  BFD_RELOC_CRIS_32_DTPREL,
  BFD_RELOC_CRIS_16_DTPREL,
  BFD_RELOC_CRIS_32_GOT_TPREL,
  BFD_RELOC_CRIS_16_GOT_TPREL,
  BFD_RELOC_CRIS_32_TPREL,
  BFD_RELOC_CRIS_16_TPREL,
  BFD_RELOC_CRIS_DTPMOD,
  BFD_RELOC_CRIS_32_IE,


  BFD_RELOC_OR1K_REL_26,
  BFD_RELOC_OR1K_SLO16,
  BFD_RELOC_OR1K_PCREL_PG21,
  BFD_RELOC_OR1K_LO13,
  BFD_RELOC_OR1K_SLO13,
  BFD_RELOC_OR1K_GOTPC_HI16,
  BFD_RELOC_OR1K_GOTPC_LO16,
  BFD_RELOC_OR1K_GOT_AHI16,
  BFD_RELOC_OR1K_GOT16,
  BFD_RELOC_OR1K_GOT_PG21,
  BFD_RELOC_OR1K_GOT_LO13,
  BFD_RELOC_OR1K_PLT26,
  BFD_RELOC_OR1K_PLTA26,
  BFD_RELOC_OR1K_GOTOFF_SLO16,
  BFD_RELOC_OR1K_COPY,
  BFD_RELOC_OR1K_GLOB_DAT,
  BFD_RELOC_OR1K_JMP_SLOT,
  BFD_RELOC_OR1K_RELATIVE,
  BFD_RELOC_OR1K_TLS_GD_HI16,
  BFD_RELOC_OR1K_TLS_GD_LO16,
  BFD_RELOC_OR1K_TLS_GD_PG21,
  BFD_RELOC_OR1K_TLS_GD_LO13,
  BFD_RELOC_OR1K_TLS_LDM_HI16,
  BFD_RELOC_OR1K_TLS_LDM_LO16,
  BFD_RELOC_OR1K_TLS_LDM_PG21,
  BFD_RELOC_OR1K_TLS_LDM_LO13,
  BFD_RELOC_OR1K_TLS_LDO_HI16,
  BFD_RELOC_OR1K_TLS_LDO_LO16,
  BFD_RELOC_OR1K_TLS_IE_HI16,
  BFD_RELOC_OR1K_TLS_IE_AHI16,
  BFD_RELOC_OR1K_TLS_IE_LO16,
  BFD_RELOC_OR1K_TLS_IE_PG21,
  BFD_RELOC_OR1K_TLS_IE_LO13,
  BFD_RELOC_OR1K_TLS_LE_HI16,
  BFD_RELOC_OR1K_TLS_LE_AHI16,
  BFD_RELOC_OR1K_TLS_LE_LO16,
  BFD_RELOC_OR1K_TLS_LE_SLO16,
  BFD_RELOC_OR1K_TLS_TPOFF,
  BFD_RELOC_OR1K_TLS_DTPOFF,
  BFD_RELOC_OR1K_TLS_DTPMOD,


  BFD_RELOC_H8_DIR16A8,
  BFD_RELOC_H8_DIR16R8,
  BFD_RELOC_H8_DIR24A8,
  BFD_RELOC_H8_DIR24R8,
  BFD_RELOC_H8_DIR32A16,
  BFD_RELOC_H8_DISP32A16,


  BFD_RELOC_XSTORMY16_REL_12,
  BFD_RELOC_XSTORMY16_12,
  BFD_RELOC_XSTORMY16_24,
  BFD_RELOC_XSTORMY16_FPTR16,


  BFD_RELOC_RELC,



  BFD_RELOC_VAX_GLOB_DAT,
  BFD_RELOC_VAX_JMP_SLOT,
  BFD_RELOC_VAX_RELATIVE,


  BFD_RELOC_MT_PC16,


  BFD_RELOC_MT_HI16,


  BFD_RELOC_MT_LO16,


  BFD_RELOC_MT_GNU_VTINHERIT,


  BFD_RELOC_MT_GNU_VTENTRY,


  BFD_RELOC_MT_PCINSN8,


  BFD_RELOC_MSP430_10_PCREL,
  BFD_RELOC_MSP430_16_PCREL,
  BFD_RELOC_MSP430_16,
  BFD_RELOC_MSP430_16_PCREL_BYTE,
  BFD_RELOC_MSP430_16_BYTE,
  BFD_RELOC_MSP430_2X_PCREL,
  BFD_RELOC_MSP430_RL_PCREL,
  BFD_RELOC_MSP430_ABS8,
  BFD_RELOC_MSP430X_PCR20_EXT_SRC,
  BFD_RELOC_MSP430X_PCR20_EXT_DST,
  BFD_RELOC_MSP430X_PCR20_EXT_ODST,
  BFD_RELOC_MSP430X_ABS20_EXT_SRC,
  BFD_RELOC_MSP430X_ABS20_EXT_DST,
  BFD_RELOC_MSP430X_ABS20_EXT_ODST,
  BFD_RELOC_MSP430X_ABS20_ADR_SRC,
  BFD_RELOC_MSP430X_ABS20_ADR_DST,
  BFD_RELOC_MSP430X_PCR16,
  BFD_RELOC_MSP430X_PCR20_CALL,
  BFD_RELOC_MSP430X_ABS16,
  BFD_RELOC_MSP430_ABS_HI16,
  BFD_RELOC_MSP430_PREL31,
  BFD_RELOC_MSP430_SYM_DIFF,
  BFD_RELOC_MSP430_SET_ULEB128,
  BFD_RELOC_MSP430_SUB_ULEB128,


  BFD_RELOC_NIOS2_S16,
  BFD_RELOC_NIOS2_U16,
  BFD_RELOC_NIOS2_CALL26,
  BFD_RELOC_NIOS2_IMM5,
  BFD_RELOC_NIOS2_CACHE_OPX,
  BFD_RELOC_NIOS2_IMM6,
  BFD_RELOC_NIOS2_IMM8,
  BFD_RELOC_NIOS2_HI16,
  BFD_RELOC_NIOS2_LO16,
  BFD_RELOC_NIOS2_HIADJ16,
  BFD_RELOC_NIOS2_GPREL,
  BFD_RELOC_NIOS2_UJMP,
  BFD_RELOC_NIOS2_CJMP,
  BFD_RELOC_NIOS2_CALLR,
  BFD_RELOC_NIOS2_ALIGN,
  BFD_RELOC_NIOS2_GOT16,
  BFD_RELOC_NIOS2_CALL16,
  BFD_RELOC_NIOS2_GOTOFF_LO,
  BFD_RELOC_NIOS2_GOTOFF_HA,
  BFD_RELOC_NIOS2_PCREL_LO,
  BFD_RELOC_NIOS2_PCREL_HA,
  BFD_RELOC_NIOS2_TLS_GD16,
  BFD_RELOC_NIOS2_TLS_LDM16,
  BFD_RELOC_NIOS2_TLS_LDO16,
  BFD_RELOC_NIOS2_TLS_IE16,
  BFD_RELOC_NIOS2_TLS_LE16,
  BFD_RELOC_NIOS2_TLS_DTPMOD,
  BFD_RELOC_NIOS2_TLS_DTPREL,
  BFD_RELOC_NIOS2_TLS_TPREL,
  BFD_RELOC_NIOS2_COPY,
  BFD_RELOC_NIOS2_GLOB_DAT,
  BFD_RELOC_NIOS2_JUMP_SLOT,
  BFD_RELOC_NIOS2_RELATIVE,
  BFD_RELOC_NIOS2_GOTOFF,
  BFD_RELOC_NIOS2_CALL26_NOAT,
  BFD_RELOC_NIOS2_GOT_LO,
  BFD_RELOC_NIOS2_GOT_HA,
  BFD_RELOC_NIOS2_CALL_LO,
  BFD_RELOC_NIOS2_CALL_HA,
  BFD_RELOC_NIOS2_R2_S12,
  BFD_RELOC_NIOS2_R2_I10_1_PCREL,
  BFD_RELOC_NIOS2_R2_T1I7_1_PCREL,
  BFD_RELOC_NIOS2_R2_T1I7_2,
  BFD_RELOC_NIOS2_R2_T2I4,
  BFD_RELOC_NIOS2_R2_T2I4_1,
  BFD_RELOC_NIOS2_R2_T2I4_2,
  BFD_RELOC_NIOS2_R2_X1I7_2,
  BFD_RELOC_NIOS2_R2_X2L5,
  BFD_RELOC_NIOS2_R2_F1I5_2,
  BFD_RELOC_NIOS2_R2_L5I4X1,
  BFD_RELOC_NIOS2_R2_T1X1I6,
  BFD_RELOC_NIOS2_R2_T1X1I6_2,


  BFD_RELOC_PRU_U16,


  BFD_RELOC_PRU_U16_PMEMIMM,




  BFD_RELOC_PRU_LDI32,


  BFD_RELOC_PRU_S10_PCREL,


  BFD_RELOC_PRU_U8_PCREL,



  BFD_RELOC_PRU_32_PMEM,
  BFD_RELOC_PRU_16_PMEM,
# 6193 "../bfd/bfd.h"
  BFD_RELOC_PRU_GNU_DIFF8,
  BFD_RELOC_PRU_GNU_DIFF16,
  BFD_RELOC_PRU_GNU_DIFF32,
  BFD_RELOC_PRU_GNU_DIFF16_PMEM,
  BFD_RELOC_PRU_GNU_DIFF32_PMEM,


  BFD_RELOC_IQ2000_OFFSET_16,
  BFD_RELOC_IQ2000_OFFSET_21,
  BFD_RELOC_IQ2000_UHI16,




  BFD_RELOC_XTENSA_RTLD,


  BFD_RELOC_XTENSA_GLOB_DAT,
  BFD_RELOC_XTENSA_JMP_SLOT,
  BFD_RELOC_XTENSA_RELATIVE,



  BFD_RELOC_XTENSA_PLT,
# 6226 "../bfd/bfd.h"
  BFD_RELOC_XTENSA_DIFF8,
  BFD_RELOC_XTENSA_DIFF16,
  BFD_RELOC_XTENSA_DIFF32,





  BFD_RELOC_XTENSA_SLOT0_OP,
  BFD_RELOC_XTENSA_SLOT1_OP,
  BFD_RELOC_XTENSA_SLOT2_OP,
  BFD_RELOC_XTENSA_SLOT3_OP,
  BFD_RELOC_XTENSA_SLOT4_OP,
  BFD_RELOC_XTENSA_SLOT5_OP,
  BFD_RELOC_XTENSA_SLOT6_OP,
  BFD_RELOC_XTENSA_SLOT7_OP,
  BFD_RELOC_XTENSA_SLOT8_OP,
  BFD_RELOC_XTENSA_SLOT9_OP,
  BFD_RELOC_XTENSA_SLOT10_OP,
  BFD_RELOC_XTENSA_SLOT11_OP,
  BFD_RELOC_XTENSA_SLOT12_OP,
  BFD_RELOC_XTENSA_SLOT13_OP,
  BFD_RELOC_XTENSA_SLOT14_OP,



  BFD_RELOC_XTENSA_SLOT0_ALT,
  BFD_RELOC_XTENSA_SLOT1_ALT,
  BFD_RELOC_XTENSA_SLOT2_ALT,
  BFD_RELOC_XTENSA_SLOT3_ALT,
  BFD_RELOC_XTENSA_SLOT4_ALT,
  BFD_RELOC_XTENSA_SLOT5_ALT,
  BFD_RELOC_XTENSA_SLOT6_ALT,
  BFD_RELOC_XTENSA_SLOT7_ALT,
  BFD_RELOC_XTENSA_SLOT8_ALT,
  BFD_RELOC_XTENSA_SLOT9_ALT,
  BFD_RELOC_XTENSA_SLOT10_ALT,
  BFD_RELOC_XTENSA_SLOT11_ALT,
  BFD_RELOC_XTENSA_SLOT12_ALT,
  BFD_RELOC_XTENSA_SLOT13_ALT,
  BFD_RELOC_XTENSA_SLOT14_ALT,



  BFD_RELOC_XTENSA_OP0,
  BFD_RELOC_XTENSA_OP1,
  BFD_RELOC_XTENSA_OP2,




  BFD_RELOC_XTENSA_ASM_EXPAND,





  BFD_RELOC_XTENSA_ASM_SIMPLIFY,


  BFD_RELOC_XTENSA_TLSDESC_FN,
  BFD_RELOC_XTENSA_TLSDESC_ARG,
  BFD_RELOC_XTENSA_TLS_DTPOFF,
  BFD_RELOC_XTENSA_TLS_TPOFF,
  BFD_RELOC_XTENSA_TLS_FUNC,
  BFD_RELOC_XTENSA_TLS_ARG,
  BFD_RELOC_XTENSA_TLS_CALL,
# 6303 "../bfd/bfd.h"
  BFD_RELOC_XTENSA_PDIFF8,
  BFD_RELOC_XTENSA_PDIFF16,
  BFD_RELOC_XTENSA_PDIFF32,
  BFD_RELOC_XTENSA_NDIFF8,
  BFD_RELOC_XTENSA_NDIFF16,
  BFD_RELOC_XTENSA_NDIFF32,


  BFD_RELOC_Z80_DISP8,


  BFD_RELOC_Z80_BYTE0,


  BFD_RELOC_Z80_BYTE1,


  BFD_RELOC_Z80_BYTE2,


  BFD_RELOC_Z80_BYTE3,


  BFD_RELOC_Z80_WORD0,


  BFD_RELOC_Z80_WORD1,


  BFD_RELOC_Z80_16_BE,


  BFD_RELOC_Z8K_DISP7,


  BFD_RELOC_Z8K_CALLR,


  BFD_RELOC_Z8K_IMM4L,


  BFD_RELOC_LM32_CALL,
  BFD_RELOC_LM32_BRANCH,
  BFD_RELOC_LM32_16_GOT,
  BFD_RELOC_LM32_GOTOFF_HI16,
  BFD_RELOC_LM32_GOTOFF_LO16,
  BFD_RELOC_LM32_COPY,
  BFD_RELOC_LM32_GLOB_DAT,
  BFD_RELOC_LM32_JMP_SLOT,
  BFD_RELOC_LM32_RELATIVE,



  BFD_RELOC_MACH_O_SECTDIFF,


  BFD_RELOC_MACH_O_LOCAL_SECTDIFF,


  BFD_RELOC_MACH_O_PAIR,


  BFD_RELOC_MACH_O_SUBTRACTOR32,


  BFD_RELOC_MACH_O_SUBTRACTOR64,



  BFD_RELOC_MACH_O_X86_64_BRANCH32,
  BFD_RELOC_MACH_O_X86_64_BRANCH8,


  BFD_RELOC_MACH_O_X86_64_GOT,



  BFD_RELOC_MACH_O_X86_64_GOT_LOAD,


  BFD_RELOC_MACH_O_X86_64_PCREL32_1,


  BFD_RELOC_MACH_O_X86_64_PCREL32_2,


  BFD_RELOC_MACH_O_X86_64_PCREL32_4,


  BFD_RELOC_MACH_O_X86_64_TLV,


  BFD_RELOC_MACH_O_ARM64_ADDEND,


  BFD_RELOC_MACH_O_ARM64_GOT_LOAD_PAGE21,


  BFD_RELOC_MACH_O_ARM64_GOT_LOAD_PAGEOFF12,


  BFD_RELOC_MACH_O_ARM64_POINTER_TO_GOT,



  BFD_RELOC_MICROBLAZE_32_LO,



  BFD_RELOC_MICROBLAZE_32_LO_PCREL,



  BFD_RELOC_MICROBLAZE_32_ROSDA,



  BFD_RELOC_MICROBLAZE_32_RWSDA,



  BFD_RELOC_MICROBLAZE_32_SYM_OP_SYM,




  BFD_RELOC_MICROBLAZE_64_NONE,




  BFD_RELOC_MICROBLAZE_64_GOTPC,




  BFD_RELOC_MICROBLAZE_64_GOT,




  BFD_RELOC_MICROBLAZE_64_PLT,




  BFD_RELOC_MICROBLAZE_64_GOTOFF,



  BFD_RELOC_MICROBLAZE_32_GOTOFF,



  BFD_RELOC_MICROBLAZE_COPY,


  BFD_RELOC_MICROBLAZE_64_TLS,




  BFD_RELOC_MICROBLAZE_64_TLSGD,




  BFD_RELOC_MICROBLAZE_64_TLSLD,


  BFD_RELOC_MICROBLAZE_32_TLSDTPMOD,


  BFD_RELOC_MICROBLAZE_32_TLSDTPREL,



  BFD_RELOC_MICROBLAZE_64_TLSDTPREL,



  BFD_RELOC_MICROBLAZE_64_TLSGOTTPREL,



  BFD_RELOC_MICROBLAZE_64_TLSTPREL,




  BFD_RELOC_MICROBLAZE_64_TEXTPCREL,




  BFD_RELOC_MICROBLAZE_64_TEXTREL,





  BFD_RELOC_AARCH64_RELOC_START,


  BFD_RELOC_AARCH64_NULL,


  BFD_RELOC_AARCH64_NONE,




  BFD_RELOC_AARCH64_64,
  BFD_RELOC_AARCH64_32,
  BFD_RELOC_AARCH64_16,



  BFD_RELOC_AARCH64_64_PCREL,
  BFD_RELOC_AARCH64_32_PCREL,
  BFD_RELOC_AARCH64_16_PCREL,



  BFD_RELOC_AARCH64_MOVW_G0,



  BFD_RELOC_AARCH64_MOVW_G0_NC,



  BFD_RELOC_AARCH64_MOVW_G1,



  BFD_RELOC_AARCH64_MOVW_G1_NC,



  BFD_RELOC_AARCH64_MOVW_G2,



  BFD_RELOC_AARCH64_MOVW_G2_NC,



  BFD_RELOC_AARCH64_MOVW_G3,




  BFD_RELOC_AARCH64_MOVW_G0_S,




  BFD_RELOC_AARCH64_MOVW_G1_S,




  BFD_RELOC_AARCH64_MOVW_G2_S,




  BFD_RELOC_AARCH64_MOVW_PREL_G0,




  BFD_RELOC_AARCH64_MOVW_PREL_G0_NC,



  BFD_RELOC_AARCH64_MOVW_PREL_G1,



  BFD_RELOC_AARCH64_MOVW_PREL_G1_NC,



  BFD_RELOC_AARCH64_MOVW_PREL_G2,



  BFD_RELOC_AARCH64_MOVW_PREL_G2_NC,



  BFD_RELOC_AARCH64_MOVW_PREL_G3,




  BFD_RELOC_AARCH64_LD_LO19_PCREL,


  BFD_RELOC_AARCH64_ADR_LO21_PCREL,



  BFD_RELOC_AARCH64_ADR_HI21_PCREL,




  BFD_RELOC_AARCH64_ADR_HI21_NC_PCREL,



  BFD_RELOC_AARCH64_ADD_LO12,



  BFD_RELOC_AARCH64_LDST8_LO12,




  BFD_RELOC_AARCH64_TSTBR14,




  BFD_RELOC_AARCH64_BRANCH19,




  BFD_RELOC_AARCH64_JUMP26,




  BFD_RELOC_AARCH64_CALL26,



  BFD_RELOC_AARCH64_LDST16_LO12,



  BFD_RELOC_AARCH64_LDST32_LO12,



  BFD_RELOC_AARCH64_LDST64_LO12,



  BFD_RELOC_AARCH64_LDST128_LO12,






  BFD_RELOC_AARCH64_GOT_LD_PREL19,




  BFD_RELOC_AARCH64_ADR_GOT_PAGE,




  BFD_RELOC_AARCH64_LD64_GOT_LO12_NC,




  BFD_RELOC_AARCH64_LD32_GOT_LO12_NC,



  BFD_RELOC_AARCH64_MOVW_GOTOFF_G0_NC,



  BFD_RELOC_AARCH64_MOVW_GOTOFF_G1,



  BFD_RELOC_AARCH64_LD64_GOTOFF_LO15,


  BFD_RELOC_AARCH64_LD32_GOTPAGE_LO14,


  BFD_RELOC_AARCH64_LD64_GOTPAGE_LO15,





  BFD_RELOC_AARCH64_TLSGD_ADR_PAGE21,


  BFD_RELOC_AARCH64_TLSGD_ADR_PREL21,




  BFD_RELOC_AARCH64_TLSGD_ADD_LO12_NC,


  BFD_RELOC_AARCH64_TLSGD_MOVW_G0_NC,


  BFD_RELOC_AARCH64_TLSGD_MOVW_G1,


  BFD_RELOC_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21,


  BFD_RELOC_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC,


  BFD_RELOC_AARCH64_TLSIE_LD32_GOTTPREL_LO12_NC,


  BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_PREL19,


  BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC,


  BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G1,


  BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_HI12,


  BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12_NC,




  BFD_RELOC_AARCH64_TLSLD_ADD_LO12_NC,



  BFD_RELOC_AARCH64_TLSLD_ADR_PAGE21,


  BFD_RELOC_AARCH64_TLSLD_ADR_PREL21,



  BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC,


  BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0,


  BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0_NC,


  BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1,


  BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1_NC,


  BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G2,


  BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G2,


  BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1,


  BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1_NC,


  BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0,


  BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0_NC,


  BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_HI12,


  BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12,


  BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSLE_LDST16_TPREL_LO12,


  BFD_RELOC_AARCH64_TLSLE_LDST16_TPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSLE_LDST32_TPREL_LO12,


  BFD_RELOC_AARCH64_TLSLE_LDST32_TPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSLE_LDST64_TPREL_LO12,


  BFD_RELOC_AARCH64_TLSLE_LDST64_TPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSLE_LDST8_TPREL_LO12,


  BFD_RELOC_AARCH64_TLSLE_LDST8_TPREL_LO12_NC,


  BFD_RELOC_AARCH64_TLSDESC_LD_PREL19,


  BFD_RELOC_AARCH64_TLSDESC_ADR_PREL21,


  BFD_RELOC_AARCH64_TLSDESC_ADR_PAGE21,


  BFD_RELOC_AARCH64_TLSDESC_LD64_LO12,


  BFD_RELOC_AARCH64_TLSDESC_LD32_LO12_NC,


  BFD_RELOC_AARCH64_TLSDESC_ADD_LO12,


  BFD_RELOC_AARCH64_TLSDESC_OFF_G1,


  BFD_RELOC_AARCH64_TLSDESC_OFF_G0_NC,


  BFD_RELOC_AARCH64_TLSDESC_LDR,


  BFD_RELOC_AARCH64_TLSDESC_ADD,


  BFD_RELOC_AARCH64_TLSDESC_CALL,


  BFD_RELOC_AARCH64_COPY,


  BFD_RELOC_AARCH64_GLOB_DAT,


  BFD_RELOC_AARCH64_JUMP_SLOT,


  BFD_RELOC_AARCH64_RELATIVE,


  BFD_RELOC_AARCH64_TLS_DTPMOD,


  BFD_RELOC_AARCH64_TLS_DTPREL,


  BFD_RELOC_AARCH64_TLS_TPREL,


  BFD_RELOC_AARCH64_TLSDESC,


  BFD_RELOC_AARCH64_IRELATIVE,






  BFD_RELOC_AARCH64_RELOC_END,



  BFD_RELOC_AARCH64_GAS_INTERNAL_FIXUP,



  BFD_RELOC_AARCH64_LDST_LO12,




  BFD_RELOC_AARCH64_TLSLD_LDST_DTPREL_LO12,


  BFD_RELOC_AARCH64_TLSLD_LDST_DTPREL_LO12_NC,




  BFD_RELOC_AARCH64_TLSLE_LDST_TPREL_LO12,


  BFD_RELOC_AARCH64_TLSLE_LDST_TPREL_LO12_NC,



  BFD_RELOC_AARCH64_LD_GOT_LO12_NC,



  BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_LO12_NC,



  BFD_RELOC_AARCH64_TLSDESC_LD_LO12_NC,


  BFD_RELOC_TILEPRO_COPY,
  BFD_RELOC_TILEPRO_GLOB_DAT,
  BFD_RELOC_TILEPRO_JMP_SLOT,
  BFD_RELOC_TILEPRO_RELATIVE,
  BFD_RELOC_TILEPRO_BROFF_X1,
  BFD_RELOC_TILEPRO_JOFFLONG_X1,
  BFD_RELOC_TILEPRO_JOFFLONG_X1_PLT,
  BFD_RELOC_TILEPRO_IMM8_X0,
  BFD_RELOC_TILEPRO_IMM8_Y0,
  BFD_RELOC_TILEPRO_IMM8_X1,
  BFD_RELOC_TILEPRO_IMM8_Y1,
  BFD_RELOC_TILEPRO_DEST_IMM8_X1,
  BFD_RELOC_TILEPRO_MT_IMM15_X1,
  BFD_RELOC_TILEPRO_MF_IMM15_X1,
  BFD_RELOC_TILEPRO_IMM16_X0,
  BFD_RELOC_TILEPRO_IMM16_X1,
  BFD_RELOC_TILEPRO_IMM16_X0_LO,
  BFD_RELOC_TILEPRO_IMM16_X1_LO,
  BFD_RELOC_TILEPRO_IMM16_X0_HI,
  BFD_RELOC_TILEPRO_IMM16_X1_HI,
  BFD_RELOC_TILEPRO_IMM16_X0_HA,
  BFD_RELOC_TILEPRO_IMM16_X1_HA,
  BFD_RELOC_TILEPRO_IMM16_X0_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X1_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X0_LO_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X1_LO_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X0_HI_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X1_HI_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X0_HA_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X1_HA_PCREL,
  BFD_RELOC_TILEPRO_IMM16_X0_GOT,
  BFD_RELOC_TILEPRO_IMM16_X1_GOT,
  BFD_RELOC_TILEPRO_IMM16_X0_GOT_LO,
  BFD_RELOC_TILEPRO_IMM16_X1_GOT_LO,
  BFD_RELOC_TILEPRO_IMM16_X0_GOT_HI,
  BFD_RELOC_TILEPRO_IMM16_X1_GOT_HI,
  BFD_RELOC_TILEPRO_IMM16_X0_GOT_HA,
  BFD_RELOC_TILEPRO_IMM16_X1_GOT_HA,
  BFD_RELOC_TILEPRO_MMSTART_X0,
  BFD_RELOC_TILEPRO_MMEND_X0,
  BFD_RELOC_TILEPRO_MMSTART_X1,
  BFD_RELOC_TILEPRO_MMEND_X1,
  BFD_RELOC_TILEPRO_SHAMT_X0,
  BFD_RELOC_TILEPRO_SHAMT_X1,
  BFD_RELOC_TILEPRO_SHAMT_Y0,
  BFD_RELOC_TILEPRO_SHAMT_Y1,
  BFD_RELOC_TILEPRO_TLS_GD_CALL,
  BFD_RELOC_TILEPRO_IMM8_X0_TLS_GD_ADD,
  BFD_RELOC_TILEPRO_IMM8_X1_TLS_GD_ADD,
  BFD_RELOC_TILEPRO_IMM8_Y0_TLS_GD_ADD,
  BFD_RELOC_TILEPRO_IMM8_Y1_TLS_GD_ADD,
  BFD_RELOC_TILEPRO_TLS_IE_LOAD,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_LO,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_LO,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_HI,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_HI,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_GD_HA,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_GD_HA,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_LO,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_LO,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_HI,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_HI,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_IE_HA,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_IE_HA,
  BFD_RELOC_TILEPRO_TLS_DTPMOD32,
  BFD_RELOC_TILEPRO_TLS_DTPOFF32,
  BFD_RELOC_TILEPRO_TLS_TPOFF32,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_LO,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_LO,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_HI,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_HI,
  BFD_RELOC_TILEPRO_IMM16_X0_TLS_LE_HA,
  BFD_RELOC_TILEPRO_IMM16_X1_TLS_LE_HA,


  BFD_RELOC_TILEGX_HW0,
  BFD_RELOC_TILEGX_HW1,
  BFD_RELOC_TILEGX_HW2,
  BFD_RELOC_TILEGX_HW3,
  BFD_RELOC_TILEGX_HW0_LAST,
  BFD_RELOC_TILEGX_HW1_LAST,
  BFD_RELOC_TILEGX_HW2_LAST,
  BFD_RELOC_TILEGX_COPY,
  BFD_RELOC_TILEGX_GLOB_DAT,
  BFD_RELOC_TILEGX_JMP_SLOT,
  BFD_RELOC_TILEGX_RELATIVE,
  BFD_RELOC_TILEGX_BROFF_X1,
  BFD_RELOC_TILEGX_JUMPOFF_X1,
  BFD_RELOC_TILEGX_JUMPOFF_X1_PLT,
  BFD_RELOC_TILEGX_IMM8_X0,
  BFD_RELOC_TILEGX_IMM8_Y0,
  BFD_RELOC_TILEGX_IMM8_X1,
  BFD_RELOC_TILEGX_IMM8_Y1,
  BFD_RELOC_TILEGX_DEST_IMM8_X1,
  BFD_RELOC_TILEGX_MT_IMM14_X1,
  BFD_RELOC_TILEGX_MF_IMM14_X1,
  BFD_RELOC_TILEGX_MMSTART_X0,
  BFD_RELOC_TILEGX_MMEND_X0,
  BFD_RELOC_TILEGX_SHAMT_X0,
  BFD_RELOC_TILEGX_SHAMT_X1,
  BFD_RELOC_TILEGX_SHAMT_Y0,
  BFD_RELOC_TILEGX_SHAMT_Y1,
  BFD_RELOC_TILEGX_IMM16_X0_HW0,
  BFD_RELOC_TILEGX_IMM16_X1_HW0,
  BFD_RELOC_TILEGX_IMM16_X0_HW1,
  BFD_RELOC_TILEGX_IMM16_X1_HW1,
  BFD_RELOC_TILEGX_IMM16_X0_HW2,
  BFD_RELOC_TILEGX_IMM16_X1_HW2,
  BFD_RELOC_TILEGX_IMM16_X0_HW3,
  BFD_RELOC_TILEGX_IMM16_X1_HW3,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST,
  BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST,
  BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW2_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW2_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW3_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW3_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_GOT,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_GOT,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW2_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW2_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_GOT,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_GOT,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_GOT,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_GOT,
  BFD_RELOC_TILEGX_IMM16_X0_HW3_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW3_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_LE,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_GD,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_TLS_IE,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_TLS_IE,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL,
  BFD_RELOC_TILEGX_IMM16_X0_HW0_LAST_TLS_IE,
  BFD_RELOC_TILEGX_IMM16_X1_HW0_LAST_TLS_IE,
  BFD_RELOC_TILEGX_IMM16_X0_HW1_LAST_TLS_IE,
  BFD_RELOC_TILEGX_IMM16_X1_HW1_LAST_TLS_IE,
  BFD_RELOC_TILEGX_TLS_DTPMOD64,
  BFD_RELOC_TILEGX_TLS_DTPOFF64,
  BFD_RELOC_TILEGX_TLS_TPOFF64,
  BFD_RELOC_TILEGX_TLS_DTPMOD32,
  BFD_RELOC_TILEGX_TLS_DTPOFF32,
  BFD_RELOC_TILEGX_TLS_TPOFF32,
  BFD_RELOC_TILEGX_TLS_GD_CALL,
  BFD_RELOC_TILEGX_IMM8_X0_TLS_GD_ADD,
  BFD_RELOC_TILEGX_IMM8_X1_TLS_GD_ADD,
  BFD_RELOC_TILEGX_IMM8_Y0_TLS_GD_ADD,
  BFD_RELOC_TILEGX_IMM8_Y1_TLS_GD_ADD,
  BFD_RELOC_TILEGX_TLS_IE_LOAD,
  BFD_RELOC_TILEGX_IMM8_X0_TLS_ADD,
  BFD_RELOC_TILEGX_IMM8_X1_TLS_ADD,
  BFD_RELOC_TILEGX_IMM8_Y0_TLS_ADD,
  BFD_RELOC_TILEGX_IMM8_Y1_TLS_ADD,


  BFD_RELOC_BPF_64,
  BFD_RELOC_BPF_DISP32,
  BFD_RELOC_BPF_DISPCALL32,
  BFD_RELOC_BPF_DISP16,


  BFD_RELOC_EPIPHANY_SIMM8,


  BFD_RELOC_EPIPHANY_SIMM24,


  BFD_RELOC_EPIPHANY_HIGH,


  BFD_RELOC_EPIPHANY_LOW,


  BFD_RELOC_EPIPHANY_SIMM11,


  BFD_RELOC_EPIPHANY_IMM11,


  BFD_RELOC_EPIPHANY_IMM8,


  BFD_RELOC_VISIUM_HI16,
  BFD_RELOC_VISIUM_LO16,
  BFD_RELOC_VISIUM_IM16,
  BFD_RELOC_VISIUM_REL16,
  BFD_RELOC_VISIUM_HI16_PCREL,
  BFD_RELOC_VISIUM_LO16_PCREL,
  BFD_RELOC_VISIUM_IM16_PCREL,


  BFD_RELOC_WASM32_LEB128,
  BFD_RELOC_WASM32_LEB128_GOT,
  BFD_RELOC_WASM32_LEB128_GOT_CODE,
  BFD_RELOC_WASM32_LEB128_PLT,
  BFD_RELOC_WASM32_PLT_INDEX,
  BFD_RELOC_WASM32_ABS32_CODE,
  BFD_RELOC_WASM32_COPY,
  BFD_RELOC_WASM32_CODE_POINTER,
  BFD_RELOC_WASM32_INDEX,
  BFD_RELOC_WASM32_PLT_SIG,


  BFD_RELOC_CKCORE_NONE,
  BFD_RELOC_CKCORE_ADDR32,
  BFD_RELOC_CKCORE_PCREL_IMM8BY4,
  BFD_RELOC_CKCORE_PCREL_IMM11BY2,
  BFD_RELOC_CKCORE_PCREL_IMM4BY2,
  BFD_RELOC_CKCORE_PCREL32,
  BFD_RELOC_CKCORE_PCREL_JSR_IMM11BY2,
  BFD_RELOC_CKCORE_GNU_VTINHERIT,
  BFD_RELOC_CKCORE_GNU_VTENTRY,
  BFD_RELOC_CKCORE_RELATIVE,
  BFD_RELOC_CKCORE_COPY,
  BFD_RELOC_CKCORE_GLOB_DAT,
  BFD_RELOC_CKCORE_JUMP_SLOT,
  BFD_RELOC_CKCORE_GOTOFF,
  BFD_RELOC_CKCORE_GOTPC,
  BFD_RELOC_CKCORE_GOT32,
  BFD_RELOC_CKCORE_PLT32,
  BFD_RELOC_CKCORE_ADDRGOT,
  BFD_RELOC_CKCORE_ADDRPLT,
  BFD_RELOC_CKCORE_PCREL_IMM26BY2,
  BFD_RELOC_CKCORE_PCREL_IMM16BY2,
  BFD_RELOC_CKCORE_PCREL_IMM16BY4,
  BFD_RELOC_CKCORE_PCREL_IMM10BY2,
  BFD_RELOC_CKCORE_PCREL_IMM10BY4,
  BFD_RELOC_CKCORE_ADDR_HI16,
  BFD_RELOC_CKCORE_ADDR_LO16,
  BFD_RELOC_CKCORE_GOTPC_HI16,
  BFD_RELOC_CKCORE_GOTPC_LO16,
  BFD_RELOC_CKCORE_GOTOFF_HI16,
  BFD_RELOC_CKCORE_GOTOFF_LO16,
  BFD_RELOC_CKCORE_GOT12,
  BFD_RELOC_CKCORE_GOT_HI16,
  BFD_RELOC_CKCORE_GOT_LO16,
  BFD_RELOC_CKCORE_PLT12,
  BFD_RELOC_CKCORE_PLT_HI16,
  BFD_RELOC_CKCORE_PLT_LO16,
  BFD_RELOC_CKCORE_ADDRGOT_HI16,
  BFD_RELOC_CKCORE_ADDRGOT_LO16,
  BFD_RELOC_CKCORE_ADDRPLT_HI16,
  BFD_RELOC_CKCORE_ADDRPLT_LO16,
  BFD_RELOC_CKCORE_PCREL_JSR_IMM26BY2,
  BFD_RELOC_CKCORE_TOFFSET_LO16,
  BFD_RELOC_CKCORE_DOFFSET_LO16,
  BFD_RELOC_CKCORE_PCREL_IMM18BY2,
  BFD_RELOC_CKCORE_DOFFSET_IMM18,
  BFD_RELOC_CKCORE_DOFFSET_IMM18BY2,
  BFD_RELOC_CKCORE_DOFFSET_IMM18BY4,
  BFD_RELOC_CKCORE_GOTOFF_IMM18,
  BFD_RELOC_CKCORE_GOT_IMM18BY4,
  BFD_RELOC_CKCORE_PLT_IMM18BY4,
  BFD_RELOC_CKCORE_PCREL_IMM7BY4,
  BFD_RELOC_CKCORE_TLS_LE32,
  BFD_RELOC_CKCORE_TLS_IE32,
  BFD_RELOC_CKCORE_TLS_GD32,
  BFD_RELOC_CKCORE_TLS_LDM32,
  BFD_RELOC_CKCORE_TLS_LDO32,
  BFD_RELOC_CKCORE_TLS_DTPMOD32,
  BFD_RELOC_CKCORE_TLS_DTPOFF32,
  BFD_RELOC_CKCORE_TLS_TPOFF32,
  BFD_RELOC_CKCORE_PCREL_FLRW_IMM8BY4,
  BFD_RELOC_CKCORE_NOJSRI,
  BFD_RELOC_CKCORE_CALLGRAPH,
  BFD_RELOC_CKCORE_IRELATIVE,
  BFD_RELOC_CKCORE_PCREL_BLOOP_IMM4BY4,
  BFD_RELOC_CKCORE_PCREL_BLOOP_IMM12BY4,


  BFD_RELOC_S12Z_OPR,


  BFD_RELOC_LARCH_TLS_DTPMOD32,
  BFD_RELOC_LARCH_TLS_DTPREL32,
  BFD_RELOC_LARCH_TLS_DTPMOD64,
  BFD_RELOC_LARCH_TLS_DTPREL64,
  BFD_RELOC_LARCH_TLS_TPREL32,
  BFD_RELOC_LARCH_TLS_TPREL64,
  BFD_RELOC_LARCH_MARK_LA,
  BFD_RELOC_LARCH_MARK_PCREL,
  BFD_RELOC_LARCH_SOP_PUSH_PCREL,
  BFD_RELOC_LARCH_SOP_PUSH_ABSOLUTE,
  BFD_RELOC_LARCH_SOP_PUSH_DUP,
  BFD_RELOC_LARCH_SOP_PUSH_GPREL,
  BFD_RELOC_LARCH_SOP_PUSH_TLS_TPREL,
  BFD_RELOC_LARCH_SOP_PUSH_TLS_GOT,
  BFD_RELOC_LARCH_SOP_PUSH_TLS_GD,
  BFD_RELOC_LARCH_SOP_PUSH_PLT_PCREL,
  BFD_RELOC_LARCH_SOP_ASSERT,
  BFD_RELOC_LARCH_SOP_NOT,
  BFD_RELOC_LARCH_SOP_SUB,
  BFD_RELOC_LARCH_SOP_SL,
  BFD_RELOC_LARCH_SOP_SR,
  BFD_RELOC_LARCH_SOP_ADD,
  BFD_RELOC_LARCH_SOP_AND,
  BFD_RELOC_LARCH_SOP_IF_ELSE,
  BFD_RELOC_LARCH_SOP_POP_32_S_10_5,
  BFD_RELOC_LARCH_SOP_POP_32_U_10_12,
  BFD_RELOC_LARCH_SOP_POP_32_S_10_12,
  BFD_RELOC_LARCH_SOP_POP_32_S_10_16,
  BFD_RELOC_LARCH_SOP_POP_32_S_10_16_S2,
  BFD_RELOC_LARCH_SOP_POP_32_S_5_20,
  BFD_RELOC_LARCH_SOP_POP_32_S_0_5_10_16_S2,
  BFD_RELOC_LARCH_SOP_POP_32_S_0_10_10_16_S2,
  BFD_RELOC_LARCH_SOP_POP_32_U,
  BFD_RELOC_LARCH_ADD8,
  BFD_RELOC_LARCH_ADD16,
  BFD_RELOC_LARCH_ADD24,
  BFD_RELOC_LARCH_ADD32,
  BFD_RELOC_LARCH_ADD64,
  BFD_RELOC_LARCH_SUB8,
  BFD_RELOC_LARCH_SUB16,
  BFD_RELOC_LARCH_SUB24,
  BFD_RELOC_LARCH_SUB32,
  BFD_RELOC_LARCH_SUB64,
  BFD_RELOC_LARCH_B16,
  BFD_RELOC_LARCH_B21,
  BFD_RELOC_LARCH_B26,
  BFD_RELOC_LARCH_ABS_HI20,
  BFD_RELOC_LARCH_ABS_LO12,
  BFD_RELOC_LARCH_ABS64_LO20,
  BFD_RELOC_LARCH_ABS64_HI12,
  BFD_RELOC_LARCH_PCALA_HI20,
  BFD_RELOC_LARCH_PCALA_LO12,
  BFD_RELOC_LARCH_PCALA64_LO20,
  BFD_RELOC_LARCH_PCALA64_HI12,
  BFD_RELOC_LARCH_GOT_PC_HI20,
  BFD_RELOC_LARCH_GOT_PC_LO12,
  BFD_RELOC_LARCH_GOT64_PC_LO20,
  BFD_RELOC_LARCH_GOT64_PC_HI12,
  BFD_RELOC_LARCH_GOT_HI20,
  BFD_RELOC_LARCH_GOT_LO12,
  BFD_RELOC_LARCH_GOT64_LO20,
  BFD_RELOC_LARCH_GOT64_HI12,
  BFD_RELOC_LARCH_TLS_LE_HI20,
  BFD_RELOC_LARCH_TLS_LE_LO12,
  BFD_RELOC_LARCH_TLS_LE64_LO20,
  BFD_RELOC_LARCH_TLS_LE64_HI12,
  BFD_RELOC_LARCH_TLS_IE_PC_HI20,
  BFD_RELOC_LARCH_TLS_IE_PC_LO12,
  BFD_RELOC_LARCH_TLS_IE64_PC_LO20,
  BFD_RELOC_LARCH_TLS_IE64_PC_HI12,
  BFD_RELOC_LARCH_TLS_IE_HI20,
  BFD_RELOC_LARCH_TLS_IE_LO12,
  BFD_RELOC_LARCH_TLS_IE64_LO20,
  BFD_RELOC_LARCH_TLS_IE64_HI12,
  BFD_RELOC_LARCH_TLS_LD_PC_HI20,
  BFD_RELOC_LARCH_TLS_LD_HI20,
  BFD_RELOC_LARCH_TLS_GD_PC_HI20,
  BFD_RELOC_LARCH_TLS_GD_HI20,
  BFD_RELOC_LARCH_32_PCREL,
  BFD_RELOC_LARCH_RELAX,
  BFD_RELOC_LARCH_DELETE,
  BFD_RELOC_LARCH_ALIGN,
  BFD_RELOC_LARCH_PCREL20_S2,
  BFD_RELOC_LARCH_CFA,
  BFD_RELOC_LARCH_ADD6,
  BFD_RELOC_LARCH_SUB6,
  BFD_RELOC_LARCH_ADD_ULEB128,
  BFD_RELOC_LARCH_SUB_ULEB128,
  BFD_RELOC_LARCH_64_PCREL,
  BFD_RELOC_UNUSED };
typedef enum bfd_reloc_code_real bfd_reloc_code_real_type;

reloc_howto_type *bfd_reloc_type_lookup
   (bfd *abfd, bfd_reloc_code_real_type code);
reloc_howto_type *bfd_reloc_name_lookup
   (bfd *abfd, const char *reloc_name);

const char *bfd_get_reloc_code_name (bfd_reloc_code_real_type code);


bfd_byte *bfd_simple_get_relocated_section_contents
   (bfd *abfd, asection *sec, bfd_byte *outbuf, asymbol **symbol_table);


const char *bfd_get_stab_name (int);





struct stab_info
{

  struct bfd_strtab_hash *strings;

  struct bfd_hash_table includes;

  struct bfd_section *stabstr;
};
# 7414 "../bfd/bfd.h"
enum bfd_flavour
{

  bfd_target_unknown_flavour,
  bfd_target_aout_flavour,
  bfd_target_coff_flavour,
  bfd_target_ecoff_flavour,
  bfd_target_xcoff_flavour,
  bfd_target_elf_flavour,
  bfd_target_tekhex_flavour,
  bfd_target_srec_flavour,
  bfd_target_verilog_flavour,
  bfd_target_ihex_flavour,
  bfd_target_som_flavour,
  bfd_target_msdos_flavour,
  bfd_target_evax_flavour,
  bfd_target_mmo_flavour,
  bfd_target_mach_o_flavour,
  bfd_target_pef_flavour,
  bfd_target_pef_xlib_flavour,
  bfd_target_sym_flavour
};

enum bfd_endian { BFD_ENDIAN_BIG, BFD_ENDIAN_LITTLE, BFD_ENDIAN_UNKNOWN };


struct flag_info;
typedef void (*bfd_cleanup) (bfd *);

typedef struct bfd_target
{

  const char *name;



  enum bfd_flavour flavour;


  enum bfd_endian byteorder;


  enum bfd_endian header_byteorder;



  flagword object_flags;



  flagword section_flags;



  char symbol_leading_char;


  char ar_pad_char;


  unsigned char ar_max_namelen;



  unsigned char match_priority;


  
# 7481 "../bfd/bfd.h" 3 4
 _Bool 
# 7481 "../bfd/bfd.h"
      keep_unused_section_symbols;




  uint64_t (*bfd_getx64) (const void *);
  int64_t (*bfd_getx_signed_64) (const void *);
  void (*bfd_putx64) (uint64_t, void *);
  bfd_vma (*bfd_getx32) (const void *);
  bfd_signed_vma (*bfd_getx_signed_32) (const void *);
  void (*bfd_putx32) (bfd_vma, void *);
  bfd_vma (*bfd_getx16) (const void *);
  bfd_signed_vma (*bfd_getx_signed_16) (const void *);
  void (*bfd_putx16) (bfd_vma, void *);


  uint64_t (*bfd_h_getx64) (const void *);
  int64_t (*bfd_h_getx_signed_64) (const void *);
  void (*bfd_h_putx64) (uint64_t, void *);
  bfd_vma (*bfd_h_getx32) (const void *);
  bfd_signed_vma (*bfd_h_getx_signed_32) (const void *);
  void (*bfd_h_putx32) (bfd_vma, void *);
  bfd_vma (*bfd_h_getx16) (const void *);
  bfd_signed_vma (*bfd_h_getx_signed_16) (const void *);
  void (*bfd_h_putx16) (bfd_vma, void *);






  bfd_cleanup (*_bfd_check_format[bfd_type_end]) (bfd *);


  
# 7515 "../bfd/bfd.h" 3 4
 _Bool 
# 7515 "../bfd/bfd.h"
      (*_bfd_set_format[bfd_type_end]) (bfd *);


  
# 7518 "../bfd/bfd.h" 3 4
 _Bool 
# 7518 "../bfd/bfd.h"
      (*_bfd_write_contents[bfd_type_end]) (bfd *);
# 7529 "../bfd/bfd.h"
  
# 7529 "../bfd/bfd.h" 3 4
 _Bool 
# 7529 "../bfd/bfd.h"
      (*_close_and_cleanup) (bfd *);

  
# 7531 "../bfd/bfd.h" 3 4
 _Bool 
# 7531 "../bfd/bfd.h"
      (*_bfd_free_cached_info) (bfd *);

  
# 7533 "../bfd/bfd.h" 3 4
 _Bool 
# 7533 "../bfd/bfd.h"
      (*_new_section_hook) (bfd *, sec_ptr);

  
# 7535 "../bfd/bfd.h" 3 4
 _Bool 
# 7535 "../bfd/bfd.h"
      (*_bfd_get_section_contents) (bfd *, sec_ptr, void *, file_ptr,
         bfd_size_type);
  
# 7537 "../bfd/bfd.h" 3 4
 _Bool 
# 7537 "../bfd/bfd.h"
      (*_bfd_get_section_contents_in_window) (bfd *, sec_ptr, bfd_window *,
            file_ptr, bfd_size_type);
# 7553 "../bfd/bfd.h"
  
# 7553 "../bfd/bfd.h" 3 4
 _Bool 
# 7553 "../bfd/bfd.h"
      (*_bfd_copy_private_bfd_data) (bfd *, bfd *);


  
# 7556 "../bfd/bfd.h" 3 4
 _Bool 
# 7556 "../bfd/bfd.h"
      (*_bfd_merge_private_bfd_data) (bfd *, struct bfd_link_info *);





  
# 7562 "../bfd/bfd.h" 3 4
 _Bool 
# 7562 "../bfd/bfd.h"
      (*_bfd_init_private_section_data) (bfd *, sec_ptr, bfd *, sec_ptr,
       struct bfd_link_info *);


  
# 7566 "../bfd/bfd.h" 3 4
 _Bool 
# 7566 "../bfd/bfd.h"
      (*_bfd_copy_private_section_data) (bfd *, sec_ptr, bfd *, sec_ptr);


  
# 7569 "../bfd/bfd.h" 3 4
 _Bool 
# 7569 "../bfd/bfd.h"
      (*_bfd_copy_private_symbol_data) (bfd *, asymbol *,
      bfd *, asymbol *);


  
# 7573 "../bfd/bfd.h" 3 4
 _Bool 
# 7573 "../bfd/bfd.h"
      (*_bfd_copy_private_header_data) (bfd *, bfd *);

  
# 7575 "../bfd/bfd.h" 3 4
 _Bool 
# 7575 "../bfd/bfd.h"
      (*_bfd_set_private_flags) (bfd *, flagword);


  
# 7578 "../bfd/bfd.h" 3 4
 _Bool 
# 7578 "../bfd/bfd.h"
      (*_bfd_print_private_bfd_data) (bfd *, void *);
# 7587 "../bfd/bfd.h"
  char *(*_core_file_failing_command) (bfd *);
  int (*_core_file_failing_signal) (bfd *);
  
# 7589 "../bfd/bfd.h" 3 4
 _Bool 
# 7589 "../bfd/bfd.h"
       (*_core_file_matches_executable_p) (bfd *, bfd *);
  int (*_core_file_pid) (bfd *);
# 7606 "../bfd/bfd.h"
  
# 7606 "../bfd/bfd.h" 3 4
 _Bool 
# 7606 "../bfd/bfd.h"
      (*_bfd_slurp_armap) (bfd *);
  
# 7607 "../bfd/bfd.h" 3 4
 _Bool 
# 7607 "../bfd/bfd.h"
      (*_bfd_slurp_extended_name_table) (bfd *);
  
# 7608 "../bfd/bfd.h" 3 4
 _Bool 
# 7608 "../bfd/bfd.h"
      (*_bfd_construct_extended_name_table) (bfd *, char **,
           bfd_size_type *,
           const char **);
  void (*_bfd_truncate_arname) (bfd *, const char *, char *);
  
# 7612 "../bfd/bfd.h" 3 4
 _Bool 
# 7612 "../bfd/bfd.h"
      (*write_armap) (bfd *, unsigned, struct orl *, unsigned, int);
  void *(*_bfd_read_ar_hdr_fn) (bfd *);
  
# 7614 "../bfd/bfd.h" 3 4
 _Bool 
# 7614 "../bfd/bfd.h"
      (*_bfd_write_ar_hdr_fn) (bfd *, bfd *);
  bfd *(*openr_next_archived_file) (bfd *, bfd *);


  bfd *(*_bfd_get_elt_at_index) (bfd *, symindex);
  int (*_bfd_stat_arch_elt) (bfd *, struct stat *);
  
# 7620 "../bfd/bfd.h" 3 4
 _Bool 
# 7620 "../bfd/bfd.h"
      (*_bfd_update_armap_timestamp) (bfd *);
# 7641 "../bfd/bfd.h"
  long (*_bfd_get_symtab_upper_bound) (bfd *);
  long (*_bfd_canonicalize_symtab) (bfd *, struct bfd_symbol **);
  struct bfd_symbol *
       (*_bfd_make_empty_symbol) (bfd *);
  void (*_bfd_print_symbol) (bfd *, void *, struct bfd_symbol *,
        bfd_print_symbol_type);


  void (*_bfd_get_symbol_info) (bfd *, struct bfd_symbol *, symbol_info *);


  const char *
       (*_bfd_get_symbol_version_string) (bfd *, struct bfd_symbol *,
       
# 7654 "../bfd/bfd.h" 3 4
      _Bool
# 7654 "../bfd/bfd.h"
          , 
# 7654 "../bfd/bfd.h" 3 4
            _Bool 
# 7654 "../bfd/bfd.h"
                 *);


  
# 7657 "../bfd/bfd.h" 3 4
 _Bool 
# 7657 "../bfd/bfd.h"
      (*_bfd_is_local_label_name) (bfd *, const char *);
  
# 7658 "../bfd/bfd.h" 3 4
 _Bool 
# 7658 "../bfd/bfd.h"
      (*_bfd_is_target_special_symbol) (bfd *, asymbol *);
  alent *
       (*_get_lineno) (bfd *, struct bfd_symbol *);
  
# 7661 "../bfd/bfd.h" 3 4
 _Bool 
# 7661 "../bfd/bfd.h"
      (*_bfd_find_nearest_line) (bfd *, struct bfd_symbol **,
      struct bfd_section *, bfd_vma,
      const char **, const char **,
      unsigned int *, unsigned int *);
  
# 7665 "../bfd/bfd.h" 3 4
 _Bool 
# 7665 "../bfd/bfd.h"
      (*_bfd_find_nearest_line_with_alt) (bfd *, const char *,
        struct bfd_symbol **,
        struct bfd_section *, bfd_vma,
        const char **, const char **,
        unsigned int *, unsigned int *);
  
# 7670 "../bfd/bfd.h" 3 4
 _Bool 
# 7670 "../bfd/bfd.h"
      (*_bfd_find_line) (bfd *, struct bfd_symbol **,
     struct bfd_symbol *, const char **,
     unsigned int *);
  
# 7673 "../bfd/bfd.h" 3 4
 _Bool 
# 7673 "../bfd/bfd.h"
      (*_bfd_find_inliner_info)
    (bfd *, const char **, const char **, unsigned int *);



  asymbol *
       (*_bfd_make_debug_symbol) (bfd *);


  long (*_read_minisymbols) (bfd *, 
# 7682 "../bfd/bfd.h" 3 4
                                   _Bool
# 7682 "../bfd/bfd.h"
                                       , void **, unsigned int *);


  asymbol *
       (*_minisymbol_to_symbol) (bfd *, 
# 7686 "../bfd/bfd.h" 3 4
                                       _Bool
# 7686 "../bfd/bfd.h"
                                           , const void *, asymbol *);
# 7696 "../bfd/bfd.h"
  long (*_get_reloc_upper_bound) (bfd *, sec_ptr);
  long (*_bfd_canonicalize_reloc) (bfd *, sec_ptr, arelent **,
       struct bfd_symbol **);
  void (*_bfd_set_reloc) (bfd *, sec_ptr, arelent **, unsigned int);

  reloc_howto_type *
       (*reloc_type_lookup) (bfd *, bfd_reloc_code_real_type);
  reloc_howto_type *
       (*reloc_name_lookup) (bfd *, const char *);






  
# 7711 "../bfd/bfd.h" 3 4
 _Bool 
# 7711 "../bfd/bfd.h"
      (*_bfd_set_arch_mach) (bfd *, enum bfd_architecture,
         unsigned long);
  
# 7713 "../bfd/bfd.h" 3 4
 _Bool 
# 7713 "../bfd/bfd.h"
      (*_bfd_set_section_contents) (bfd *, sec_ptr, const void *,
         file_ptr, bfd_size_type);
# 7739 "../bfd/bfd.h"
  int (*_bfd_sizeof_headers) (bfd *, struct bfd_link_info *);
  bfd_byte *
       (*_bfd_get_relocated_section_contents) (bfd *,
            struct bfd_link_info *,
            struct bfd_link_order *,
            bfd_byte *, 
# 7744 "../bfd/bfd.h" 3 4
                       _Bool
# 7744 "../bfd/bfd.h"
                           ,
            struct bfd_symbol **);

  
# 7747 "../bfd/bfd.h" 3 4
 _Bool 
# 7747 "../bfd/bfd.h"
      (*_bfd_relax_section) (bfd *, struct bfd_section *,
         struct bfd_link_info *, 
# 7748 "../bfd/bfd.h" 3 4
                                _Bool 
# 7748 "../bfd/bfd.h"
                                     *);



  struct bfd_link_hash_table *
       (*_bfd_link_hash_table_create) (bfd *);


  
# 7756 "../bfd/bfd.h" 3 4
 _Bool 
# 7756 "../bfd/bfd.h"
      (*_bfd_link_add_symbols) (bfd *, struct bfd_link_info *);


  void (*_bfd_link_just_syms) (asection *, struct bfd_link_info *);





  void (*_bfd_copy_link_hash_symbol_type) (bfd *,
        struct bfd_link_hash_entry *,
        struct bfd_link_hash_entry *);



  
# 7771 "../bfd/bfd.h" 3 4
 _Bool 
# 7771 "../bfd/bfd.h"
      (*_bfd_final_link) (bfd *, struct bfd_link_info *);


  
# 7774 "../bfd/bfd.h" 3 4
 _Bool 
# 7774 "../bfd/bfd.h"
      (*_bfd_link_split_section) (bfd *, struct bfd_section *);


  
# 7777 "../bfd/bfd.h" 3 4
 _Bool 
# 7777 "../bfd/bfd.h"
      (* _bfd_link_check_relocs)(bfd *, struct bfd_link_info *);


  
# 7780 "../bfd/bfd.h" 3 4
 _Bool 
# 7780 "../bfd/bfd.h"
      (*_bfd_gc_sections) (bfd *, struct bfd_link_info *);


  
# 7783 "../bfd/bfd.h" 3 4
 _Bool 
# 7783 "../bfd/bfd.h"
      (*_bfd_lookup_section_flags) (struct bfd_link_info *,
         struct flag_info *, asection *);


  
# 7787 "../bfd/bfd.h" 3 4
 _Bool 
# 7787 "../bfd/bfd.h"
      (*_bfd_merge_sections) (bfd *, struct bfd_link_info *);


  
# 7790 "../bfd/bfd.h" 3 4
 _Bool 
# 7790 "../bfd/bfd.h"
      (*_bfd_is_group_section) (bfd *, const struct bfd_section *);


  const char *(*_bfd_group_name) (bfd *, const struct bfd_section *);


  
# 7796 "../bfd/bfd.h" 3 4
 _Bool 
# 7796 "../bfd/bfd.h"
      (*_bfd_discard_group) (bfd *, struct bfd_section *);



  
# 7800 "../bfd/bfd.h" 3 4
 _Bool 
# 7800 "../bfd/bfd.h"
      (*_section_already_linked) (bfd *, asection *,
       struct bfd_link_info *);


  
# 7804 "../bfd/bfd.h" 3 4
 _Bool 
# 7804 "../bfd/bfd.h"
      (*_bfd_define_common_symbol) (bfd *, struct bfd_link_info *,
         struct bfd_link_hash_entry *);


  void (*_bfd_link_hide_symbol) (bfd *, struct bfd_link_info *,
     struct bfd_link_hash_entry *);


  struct bfd_link_hash_entry *
       (*_bfd_define_start_stop) (struct bfd_link_info *, const char *,
      asection *);
# 7825 "../bfd/bfd.h"
  long (*_bfd_get_dynamic_symtab_upper_bound) (bfd *);

  long (*_bfd_canonicalize_dynamic_symtab) (bfd *, struct bfd_symbol **);

  long (*_bfd_get_synthetic_symtab) (bfd *, long, struct bfd_symbol **,
         long, struct bfd_symbol **,
         struct bfd_symbol **);

  long (*_bfd_get_dynamic_reloc_upper_bound) (bfd *);

  long (*_bfd_canonicalize_dynamic_reloc) (bfd *, arelent **,
        struct bfd_symbol **);


  const struct bfd_target *alternative_target;



  const void *backend_data;

} bfd_target;

static inline const char *
bfd_get_target (const bfd *abfd)
{
  return abfd->xvec->name;
}

static inline enum bfd_flavour
bfd_get_flavour (const bfd *abfd)
{
  return abfd->xvec->flavour;
}

static inline flagword
bfd_applicable_file_flags (const bfd *abfd)
{
  return abfd->xvec->object_flags;
}

static inline 
# 7865 "../bfd/bfd.h" 3 4
             _Bool

# 7866 "../bfd/bfd.h"
bfd_family_coff (const bfd *abfd)
{
  return (bfd_get_flavour (abfd) == bfd_target_coff_flavour
   || bfd_get_flavour (abfd) == bfd_target_xcoff_flavour);
}

static inline 
# 7872 "../bfd/bfd.h" 3 4
             _Bool

# 7873 "../bfd/bfd.h"
bfd_big_endian (const bfd *abfd)
{
  return abfd->xvec->byteorder == BFD_ENDIAN_BIG;
}
static inline 
# 7877 "../bfd/bfd.h" 3 4
             _Bool

# 7878 "../bfd/bfd.h"
bfd_little_endian (const bfd *abfd)
{
  return abfd->xvec->byteorder == BFD_ENDIAN_LITTLE;
}

static inline 
# 7883 "../bfd/bfd.h" 3 4
             _Bool

# 7884 "../bfd/bfd.h"
bfd_header_big_endian (const bfd *abfd)
{
  return abfd->xvec->header_byteorder == BFD_ENDIAN_BIG;
}

static inline 
# 7889 "../bfd/bfd.h" 3 4
             _Bool

# 7890 "../bfd/bfd.h"
bfd_header_little_endian (const bfd *abfd)
{
  return abfd->xvec->header_byteorder == BFD_ENDIAN_LITTLE;
}

static inline flagword
bfd_applicable_section_flags (const bfd *abfd)
{
  return abfd->xvec->section_flags;
}

static inline char
bfd_get_symbol_leading_char (const bfd *abfd)
{
  return abfd->xvec->symbol_leading_char;
}

static inline enum bfd_flavour
bfd_asymbol_flavour (const asymbol *sy)
{
  if ((sy->flags & (1 << 21)) != 0)
    return bfd_target_unknown_flavour;
  return sy->the_bfd->xvec->flavour;
}

static inline 
# 7915 "../bfd/bfd.h" 3 4
             _Bool

# 7916 "../bfd/bfd.h"
bfd_keep_unused_section_symbols (const bfd *abfd)
{
  return abfd->xvec->keep_unused_section_symbols;
}


# 7921 "../bfd/bfd.h" 3 4
_Bool 
# 7921 "../bfd/bfd.h"
    bfd_set_default_target (const char *name);

const bfd_target *bfd_find_target (const char *target_name, bfd *abfd);

const bfd_target *bfd_get_target_info (const char *target_name,
    bfd *abfd,
    
# 7927 "../bfd/bfd.h" 3 4
   _Bool 
# 7927 "../bfd/bfd.h"
        *is_bigendian,
    int *underscoring,
    const char **def_target_arch);

const char ** bfd_target_list (void);

const bfd_target *bfd_iterate_over_targets
   (int (*func) (const bfd_target *, void *),
    void *data);

const char *bfd_flavour_name (enum bfd_flavour flavour);
# 24 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2

# 1 "/doner/binutils/binutils-515f23e/binutils/./bucomm.h" 1
# 27 "/doner/binutils/binutils-515f23e/binutils/./bucomm.h"
const char *bfd_get_archive_filename (const bfd *);

void bfd_nonfatal (const char *);

void bfd_nonfatal_message (const char *, const bfd *, const asection *,
      const char *, ...);

void bfd_fatal (const char *) __attribute__ ((__noreturn__));

void report (const char *, va_list) __attribute__ ((__format__ (__printf__, 1, 0))) __attribute__ ((__nonnull__ (1)));

void fatal (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1))) __attribute__ ((__noreturn__));

void non_fatal (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));

void *bfd_xalloc (bfd *, size_t);

void set_default_bfd_target (void);

void list_matching_formats (char **);

void list_supported_targets (const char *, FILE *);

void list_supported_architectures (const char *, FILE *);

int display_info (void);

void print_arelt_descr (FILE *, bfd *, 
# 54 "/doner/binutils/binutils-515f23e/binutils/./bucomm.h" 3 4
                                      _Bool
# 54 "/doner/binutils/binutils-515f23e/binutils/./bucomm.h"
                                          , 
# 54 "/doner/binutils/binutils-515f23e/binutils/./bucomm.h" 3 4
                                            _Bool
# 54 "/doner/binutils/binutils-515f23e/binutils/./bucomm.h"
                                                );

char *make_tempname (const char *, int *);
char *make_tempdir (const char *);

bfd_vma parse_vma (const char *, const char *);

off_t get_file_size (const char *);


# 63 "/doner/binutils/binutils-515f23e/binutils/./bucomm.h" 3 4
_Bool 
# 63 "/doner/binutils/binutils-515f23e/binutils/./bucomm.h"
    is_valid_archive_path (char const *);

extern char *program_name;


void mode_string (unsigned long, char *);


extern void print_version (const char *);


extern void set_times (const char *, const struct stat *);

extern int smart_rename (const char *, const char *, int,
    struct stat *, 
# 77 "/doner/binutils/binutils-515f23e/binutils/./bucomm.h" 3 4
                  _Bool
# 77 "/doner/binutils/binutils-515f23e/binutils/./bucomm.h"
                      );



void *xmalloc (size_t);

void *xrealloc (void *, size_t);
# 26 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2
# 1 "/doner/binutils/binutils-515f23e/binutils/./elfcomm.h" 1
# 27 "/doner/binutils/binutils-515f23e/binutils/./elfcomm.h"
# 1 "./../include/aout/ar.h" 1
# 43 "./../include/aout/ar.h"
struct ar_hdr
{
  char ar_name[16];
  char ar_date[12];
  char ar_uid[6];
  char ar_gid[6];
  char ar_mode[8];
  char ar_size[10];
  char ar_fmag[2];
};
# 28 "/doner/binutils/binutils-515f23e/binutils/./elfcomm.h" 2

extern void error (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));
extern void warn (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));

extern void (*byte_put) (unsigned char *, uint64_t, unsigned int);
extern void byte_put_little_endian (unsigned char *, uint64_t, unsigned int);
extern void byte_put_big_endian (unsigned char *, uint64_t, unsigned int);

extern uint64_t (*byte_get) (const unsigned char *, unsigned int);
extern uint64_t byte_get_signed (const unsigned char *, unsigned int);
extern uint64_t byte_get_little_endian (const unsigned char *, unsigned int);
extern uint64_t byte_get_big_endian (const unsigned char *, unsigned int);
# 50 "/doner/binutils/binutils-515f23e/binutils/./elfcomm.h"
struct archive_info
{
  char *file_name;
  FILE *file;
  uint64_t index_num;
  uint64_t *index_array;
  char *sym_table;
  uint64_t sym_size;
  char *longnames;
  uint64_t longnames_size;
  uint64_t nested_member_origin;
  uint64_t next_arhdr_offset;
  int is_thin_archive;
  int uses_64bit_indices;
  struct ar_hdr arhdr;
};


extern char *adjust_relative_path (const char *, const char *, unsigned long);


extern int setup_archive (struct archive_info *, const char *, FILE *,
     off_t, int, int);


extern int setup_nested_archive (struct archive_info *, const char *);


extern void release_archive (struct archive_info *);



extern char *get_archive_member_name (struct archive_info *,
          struct archive_info *);




extern char *get_archive_member_name_at (struct archive_info *,
      unsigned long,
      struct archive_info *);




extern char *make_qualified_name (struct archive_info *,
      struct archive_info *,
      const char *);
# 27 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2
# 1 "./../include/elf/common.h" 1
# 28 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2
# 1 "./../include/dwarf2.h" 1
# 85 "./../include/dwarf2.h"
# 1 "./../include/dwarf2.def" 1
# 71 "./../include/dwarf2.def"
enum dwarf_tag { DW_TAG_padding = 0x00
, DW_TAG_array_type = 0x01
, DW_TAG_class_type = 0x02
, DW_TAG_entry_point = 0x03
, DW_TAG_enumeration_type = 0x04
, DW_TAG_formal_parameter = 0x05
, DW_TAG_imported_declaration = 0x08
, DW_TAG_label = 0x0a
, DW_TAG_lexical_block = 0x0b
, DW_TAG_member = 0x0d
, DW_TAG_pointer_type = 0x0f
, DW_TAG_reference_type = 0x10
, DW_TAG_compile_unit = 0x11
, DW_TAG_string_type = 0x12
, DW_TAG_structure_type = 0x13
, DW_TAG_subroutine_type = 0x15
, DW_TAG_typedef = 0x16
, DW_TAG_union_type = 0x17
, DW_TAG_unspecified_parameters = 0x18
, DW_TAG_variant = 0x19
, DW_TAG_common_block = 0x1a
, DW_TAG_common_inclusion = 0x1b
, DW_TAG_inheritance = 0x1c
, DW_TAG_inlined_subroutine = 0x1d
, DW_TAG_module = 0x1e
, DW_TAG_ptr_to_member_type = 0x1f
, DW_TAG_set_type = 0x20
, DW_TAG_subrange_type = 0x21
, DW_TAG_with_stmt = 0x22
, DW_TAG_access_declaration = 0x23
, DW_TAG_base_type = 0x24
, DW_TAG_catch_block = 0x25
, DW_TAG_const_type = 0x26
, DW_TAG_constant = 0x27
, DW_TAG_enumerator = 0x28
, DW_TAG_file_type = 0x29
, DW_TAG_friend = 0x2a
, DW_TAG_namelist = 0x2b
, DW_TAG_namelist_item = 0x2c
, DW_TAG_packed_type = 0x2d
, DW_TAG_subprogram = 0x2e
, DW_TAG_template_type_param = 0x2f
, DW_TAG_template_value_param = 0x30
, DW_TAG_thrown_type = 0x31
, DW_TAG_try_block = 0x32
, DW_TAG_variant_part = 0x33
, DW_TAG_variable = 0x34
, DW_TAG_volatile_type = 0x35

, DW_TAG_dwarf_procedure = 0x36
, DW_TAG_restrict_type = 0x37
, DW_TAG_interface_type = 0x38
, DW_TAG_namespace = 0x39
, DW_TAG_imported_module = 0x3a
, DW_TAG_unspecified_type = 0x3b
, DW_TAG_partial_unit = 0x3c
, DW_TAG_imported_unit = 0x3d
, DW_TAG_condition = 0x3f
, DW_TAG_shared_type = 0x40

, DW_TAG_type_unit = 0x41
, DW_TAG_rvalue_reference_type = 0x42
, DW_TAG_template_alias = 0x43

, DW_TAG_coarray_type = 0x44
, DW_TAG_generic_subrange = 0x45
, DW_TAG_dynamic_type = 0x46
, DW_TAG_atomic_type = 0x47
, DW_TAG_call_site = 0x48
, DW_TAG_call_site_parameter = 0x49
, DW_TAG_skeleton_unit = 0x4a
, DW_TAG_immutable_type = 0x4b

, DW_TAG_lo_user = 0x4080
, DW_TAG_hi_user = 0xffff


, DW_TAG_MIPS_loop = 0x4081


, DW_TAG_HP_array_descriptor = 0x4090
, DW_TAG_HP_Bliss_field = 0x4091
, DW_TAG_HP_Bliss_field_set = 0x4092


, DW_TAG_format_label = 0x4101
, DW_TAG_function_template = 0x4102
, DW_TAG_class_template = 0x4103
, DW_TAG_GNU_BINCL = 0x4104
, DW_TAG_GNU_EINCL = 0x4105


, DW_TAG_GNU_template_template_param = 0x4106





, DW_TAG_GNU_template_parameter_pack = 0x4107
, DW_TAG_GNU_formal_parameter_pack = 0x4108




, DW_TAG_GNU_call_site = 0x4109
, DW_TAG_GNU_call_site_parameter = 0x410a

, DW_TAG_upc_shared_type = 0x8765
, DW_TAG_upc_strict_type = 0x8766
, DW_TAG_upc_relaxed_type = 0x8767

, DW_TAG_PGI_kanji_type = 0xA000
, DW_TAG_PGI_interface_block = 0xA020
};

enum dwarf_form { DW_FORM_addr = 0x01
, DW_FORM_block2 = 0x03
, DW_FORM_block4 = 0x04
, DW_FORM_data2 = 0x05
, DW_FORM_data4 = 0x06
, DW_FORM_data8 = 0x07
, DW_FORM_string = 0x08
, DW_FORM_block = 0x09
, DW_FORM_block1 = 0x0a
, DW_FORM_data1 = 0x0b
, DW_FORM_flag = 0x0c
, DW_FORM_sdata = 0x0d
, DW_FORM_strp = 0x0e
, DW_FORM_udata = 0x0f
, DW_FORM_ref_addr = 0x10
, DW_FORM_ref1 = 0x11
, DW_FORM_ref2 = 0x12
, DW_FORM_ref4 = 0x13
, DW_FORM_ref8 = 0x14
, DW_FORM_ref_udata = 0x15
, DW_FORM_indirect = 0x16

, DW_FORM_sec_offset = 0x17
, DW_FORM_exprloc = 0x18
, DW_FORM_flag_present = 0x19
, DW_FORM_ref_sig8 = 0x20

, DW_FORM_strx = 0x1a
, DW_FORM_addrx = 0x1b
, DW_FORM_ref_sup4 = 0x1c
, DW_FORM_strp_sup = 0x1d
, DW_FORM_data16 = 0x1e
, DW_FORM_line_strp = 0x1f
, DW_FORM_implicit_const = 0x21
, DW_FORM_loclistx = 0x22
, DW_FORM_rnglistx = 0x23
, DW_FORM_ref_sup8 = 0x24
, DW_FORM_strx1 = 0x25
, DW_FORM_strx2 = 0x26
, DW_FORM_strx3 = 0x27
, DW_FORM_strx4 = 0x28
, DW_FORM_addrx1 = 0x29
, DW_FORM_addrx2 = 0x2a
, DW_FORM_addrx3 = 0x2b
, DW_FORM_addrx4 = 0x2c

, DW_FORM_GNU_addr_index = 0x1f01
, DW_FORM_GNU_str_index = 0x1f02


, DW_FORM_GNU_ref_alt = 0x1f20
, DW_FORM_GNU_strp_alt = 0x1f21
};

enum dwarf_attribute { DW_AT_sibling = 0x01
, DW_AT_location = 0x02
, DW_AT_name = 0x03
, DW_AT_ordering = 0x09
, DW_AT_subscr_data = 0x0a
, DW_AT_byte_size = 0x0b
, DW_AT_bit_offset = 0x0c
, DW_AT_bit_size = 0x0d
, DW_AT_element_list = 0x0f
, DW_AT_stmt_list = 0x10
, DW_AT_low_pc = 0x11
, DW_AT_high_pc = 0x12
, DW_AT_language = 0x13
, DW_AT_member = 0x14
, DW_AT_discr = 0x15
, DW_AT_discr_value = 0x16
, DW_AT_visibility = 0x17
, DW_AT_import = 0x18
, DW_AT_string_length = 0x19
, DW_AT_common_reference = 0x1a
, DW_AT_comp_dir = 0x1b
, DW_AT_const_value = 0x1c
, DW_AT_containing_type = 0x1d
, DW_AT_default_value = 0x1e
, DW_AT_inline = 0x20
, DW_AT_is_optional = 0x21
, DW_AT_lower_bound = 0x22
, DW_AT_producer = 0x25
, DW_AT_prototyped = 0x27
, DW_AT_return_addr = 0x2a
, DW_AT_start_scope = 0x2c
, DW_AT_bit_stride = 0x2e
, DW_AT_upper_bound = 0x2f
, DW_AT_abstract_origin = 0x31
, DW_AT_accessibility = 0x32
, DW_AT_address_class = 0x33
, DW_AT_artificial = 0x34
, DW_AT_base_types = 0x35
, DW_AT_calling_convention = 0x36
, DW_AT_count = 0x37
, DW_AT_data_member_location = 0x38
, DW_AT_decl_column = 0x39
, DW_AT_decl_file = 0x3a
, DW_AT_decl_line = 0x3b
, DW_AT_declaration = 0x3c
, DW_AT_discr_list = 0x3d
, DW_AT_encoding = 0x3e
, DW_AT_external = 0x3f
, DW_AT_frame_base = 0x40
, DW_AT_friend = 0x41
, DW_AT_identifier_case = 0x42
, DW_AT_macro_info = 0x43
, DW_AT_namelist_item = 0x44
, DW_AT_priority = 0x45
, DW_AT_segment = 0x46
, DW_AT_specification = 0x47
, DW_AT_static_link = 0x48
, DW_AT_type = 0x49
, DW_AT_use_location = 0x4a
, DW_AT_variable_parameter = 0x4b
, DW_AT_virtuality = 0x4c
, DW_AT_vtable_elem_location = 0x4d

, DW_AT_allocated = 0x4e
, DW_AT_associated = 0x4f
, DW_AT_data_location = 0x50
, DW_AT_byte_stride = 0x51
, DW_AT_entry_pc = 0x52
, DW_AT_use_UTF8 = 0x53
, DW_AT_extension = 0x54
, DW_AT_ranges = 0x55
, DW_AT_trampoline = 0x56
, DW_AT_call_column = 0x57
, DW_AT_call_file = 0x58
, DW_AT_call_line = 0x59
, DW_AT_description = 0x5a
, DW_AT_binary_scale = 0x5b
, DW_AT_decimal_scale = 0x5c
, DW_AT_small = 0x5d
, DW_AT_decimal_sign = 0x5e
, DW_AT_digit_count = 0x5f
, DW_AT_picture_string = 0x60
, DW_AT_mutable = 0x61
, DW_AT_threads_scaled = 0x62
, DW_AT_explicit = 0x63
, DW_AT_object_pointer = 0x64
, DW_AT_endianity = 0x65
, DW_AT_elemental = 0x66
, DW_AT_pure = 0x67
, DW_AT_recursive = 0x68

, DW_AT_signature = 0x69
, DW_AT_main_subprogram = 0x6a
, DW_AT_data_bit_offset = 0x6b
, DW_AT_const_expr = 0x6c
, DW_AT_enum_class = 0x6d
, DW_AT_linkage_name = 0x6e

, DW_AT_string_length_bit_size = 0x6f
, DW_AT_string_length_byte_size = 0x70
, DW_AT_rank = 0x71
, DW_AT_str_offsets_base = 0x72
, DW_AT_addr_base = 0x73
, DW_AT_rnglists_base = 0x74
, DW_AT_dwo_name = 0x76
, DW_AT_reference = 0x77
, DW_AT_rvalue_reference = 0x78
, DW_AT_macros = 0x79
, DW_AT_call_all_calls = 0x7a
, DW_AT_call_all_source_calls = 0x7b
, DW_AT_call_all_tail_calls = 0x7c
, DW_AT_call_return_pc = 0x7d
, DW_AT_call_value = 0x7e
, DW_AT_call_origin = 0x7f
, DW_AT_call_parameter = 0x80
, DW_AT_call_pc = 0x81
, DW_AT_call_tail_call = 0x82
, DW_AT_call_target = 0x83
, DW_AT_call_target_clobbered = 0x84
, DW_AT_call_data_location = 0x85
, DW_AT_call_data_value = 0x86
, DW_AT_noreturn = 0x87
, DW_AT_alignment = 0x88
, DW_AT_export_symbols = 0x89
, DW_AT_deleted = 0x8a
, DW_AT_defaulted = 0x8b
, DW_AT_loclists_base = 0x8c

, DW_AT_lo_user = 0x2000
, DW_AT_hi_user = 0x3fff


, DW_AT_MIPS_fde = 0x2001
, DW_AT_MIPS_loop_begin = 0x2002
, DW_AT_MIPS_tail_loop_begin = 0x2003
, DW_AT_MIPS_epilog_begin = 0x2004
, DW_AT_MIPS_loop_unroll_factor = 0x2005
, DW_AT_MIPS_software_pipeline_depth = 0x2006
, DW_AT_MIPS_linkage_name = 0x2007
, DW_AT_MIPS_stride = 0x2008
, DW_AT_MIPS_abstract_name = 0x2009
, DW_AT_MIPS_clone_origin = 0x200a
, DW_AT_MIPS_has_inlines = 0x200b

, DW_AT_HP_block_index = 0x2000
, DW_AT_HP_unmodifiable = 0x2001
, DW_AT_HP_prologue = 0x2005
, DW_AT_HP_epilogue = 0x2008
, DW_AT_HP_actuals_stmt_list = 0x2010
, DW_AT_HP_proc_per_section = 0x2011
, DW_AT_HP_raw_data_ptr = 0x2012
, DW_AT_HP_pass_by_reference = 0x2013
, DW_AT_HP_opt_level = 0x2014
, DW_AT_HP_prof_version_id = 0x2015
, DW_AT_HP_opt_flags = 0x2016
, DW_AT_HP_cold_region_low_pc = 0x2017
, DW_AT_HP_cold_region_high_pc = 0x2018
, DW_AT_HP_all_variables_modifiable = 0x2019
, DW_AT_HP_linkage_name = 0x201a
, DW_AT_HP_prof_flags = 0x201b
, DW_AT_HP_unit_name = 0x201f
, DW_AT_HP_unit_size = 0x2020
, DW_AT_HP_widened_byte_size = 0x2021
, DW_AT_HP_definition_points = 0x2022
, DW_AT_HP_default_location = 0x2023
, DW_AT_HP_is_result_param = 0x2029


, DW_AT_sf_names = 0x2101
, DW_AT_src_info = 0x2102
, DW_AT_mac_info = 0x2103
, DW_AT_src_coords = 0x2104
, DW_AT_body_begin = 0x2105
, DW_AT_body_end = 0x2106
, DW_AT_GNU_vector = 0x2107


, DW_AT_GNU_guarded_by = 0x2108
, DW_AT_GNU_pt_guarded_by = 0x2109
, DW_AT_GNU_guarded = 0x210a
, DW_AT_GNU_pt_guarded = 0x210b
, DW_AT_GNU_locks_excluded = 0x210c
, DW_AT_GNU_exclusive_locks_required = 0x210d
, DW_AT_GNU_shared_locks_required = 0x210e


, DW_AT_GNU_odr_signature = 0x210f


, DW_AT_GNU_template_name = 0x2110


, DW_AT_GNU_call_site_value = 0x2111
, DW_AT_GNU_call_site_data_value = 0x2112
, DW_AT_GNU_call_site_target = 0x2113
, DW_AT_GNU_call_site_target_clobbered = 0x2114
, DW_AT_GNU_tail_call = 0x2115
, DW_AT_GNU_all_tail_call_sites = 0x2116
, DW_AT_GNU_all_call_sites = 0x2117
, DW_AT_GNU_all_source_call_sites = 0x2118

, DW_AT_GNU_macros = 0x2119

, DW_AT_GNU_deleted = 0x211a

, DW_AT_GNU_dwo_name = 0x2130
, DW_AT_GNU_dwo_id = 0x2131
, DW_AT_GNU_ranges_base = 0x2132
, DW_AT_GNU_addr_base = 0x2133
, DW_AT_GNU_pubnames = 0x2134
, DW_AT_GNU_pubtypes = 0x2135


, DW_AT_GNU_discriminator = 0x2136
, DW_AT_GNU_locviews = 0x2137
, DW_AT_GNU_entry_view = 0x2138

, DW_AT_VMS_rtnbeg_pd_address = 0x2201



, DW_AT_use_GNAT_descriptive_type = 0x2301
, DW_AT_GNAT_descriptive_type = 0x2302


, DW_AT_GNU_numerator = 0x2303
, DW_AT_GNU_denominator = 0x2304


, DW_AT_GNU_bias = 0x2305

, DW_AT_upc_threads_scaled = 0x3210

, DW_AT_PGI_lbase = 0x3a00
, DW_AT_PGI_soffset = 0x3a01
, DW_AT_PGI_lstride = 0x3a02

, DW_AT_APPLE_optimized = 0x3fe1
, DW_AT_APPLE_flags = 0x3fe2
, DW_AT_APPLE_isa = 0x3fe3
, DW_AT_APPLE_block = 0x3fe4
, DW_AT_APPLE_major_runtime_vers = 0x3fe5
, DW_AT_APPLE_runtime_class = 0x3fe6
, DW_AT_APPLE_omit_frame_ptr = 0x3fe7
, DW_AT_APPLE_property_name = 0x3fe8
, DW_AT_APPLE_property_getter = 0x3fe9
, DW_AT_APPLE_property_setter = 0x3fea
, DW_AT_APPLE_property_attribute = 0x3feb
, DW_AT_APPLE_objc_complete_type = 0x3fec
, DW_AT_APPLE_property = 0x3fed
};

enum dwarf_location_atom { DW_OP_addr = 0x03
, DW_OP_deref = 0x06
, DW_OP_const1u = 0x08
, DW_OP_const1s = 0x09
, DW_OP_const2u = 0x0a
, DW_OP_const2s = 0x0b
, DW_OP_const4u = 0x0c
, DW_OP_const4s = 0x0d
, DW_OP_const8u = 0x0e
, DW_OP_const8s = 0x0f
, DW_OP_constu = 0x10
, DW_OP_consts = 0x11
, DW_OP_dup = 0x12
, DW_OP_drop = 0x13
, DW_OP_over = 0x14
, DW_OP_pick = 0x15
, DW_OP_swap = 0x16
, DW_OP_rot = 0x17
, DW_OP_xderef = 0x18
, DW_OP_abs = 0x19
, DW_OP_and = 0x1a
, DW_OP_div = 0x1b
, DW_OP_minus = 0x1c
, DW_OP_mod = 0x1d
, DW_OP_mul = 0x1e
, DW_OP_neg = 0x1f
, DW_OP_not = 0x20
, DW_OP_or = 0x21
, DW_OP_plus = 0x22
, DW_OP_plus_uconst = 0x23
, DW_OP_shl = 0x24
, DW_OP_shr = 0x25
, DW_OP_shra = 0x26
, DW_OP_xor = 0x27
, DW_OP_bra = 0x28
, DW_OP_eq = 0x29
, DW_OP_ge = 0x2a
, DW_OP_gt = 0x2b
, DW_OP_le = 0x2c
, DW_OP_lt = 0x2d
, DW_OP_ne = 0x2e
, DW_OP_skip = 0x2f
, DW_OP_lit0 = 0x30
, DW_OP_lit1 = 0x31
, DW_OP_lit2 = 0x32
, DW_OP_lit3 = 0x33
, DW_OP_lit4 = 0x34
, DW_OP_lit5 = 0x35
, DW_OP_lit6 = 0x36
, DW_OP_lit7 = 0x37
, DW_OP_lit8 = 0x38
, DW_OP_lit9 = 0x39
, DW_OP_lit10 = 0x3a
, DW_OP_lit11 = 0x3b
, DW_OP_lit12 = 0x3c
, DW_OP_lit13 = 0x3d
, DW_OP_lit14 = 0x3e
, DW_OP_lit15 = 0x3f
, DW_OP_lit16 = 0x40
, DW_OP_lit17 = 0x41
, DW_OP_lit18 = 0x42
, DW_OP_lit19 = 0x43
, DW_OP_lit20 = 0x44
, DW_OP_lit21 = 0x45
, DW_OP_lit22 = 0x46
, DW_OP_lit23 = 0x47
, DW_OP_lit24 = 0x48
, DW_OP_lit25 = 0x49
, DW_OP_lit26 = 0x4a
, DW_OP_lit27 = 0x4b
, DW_OP_lit28 = 0x4c
, DW_OP_lit29 = 0x4d
, DW_OP_lit30 = 0x4e
, DW_OP_lit31 = 0x4f
, DW_OP_reg0 = 0x50
, DW_OP_reg1 = 0x51
, DW_OP_reg2 = 0x52
, DW_OP_reg3 = 0x53
, DW_OP_reg4 = 0x54
, DW_OP_reg5 = 0x55
, DW_OP_reg6 = 0x56
, DW_OP_reg7 = 0x57
, DW_OP_reg8 = 0x58
, DW_OP_reg9 = 0x59
, DW_OP_reg10 = 0x5a
, DW_OP_reg11 = 0x5b
, DW_OP_reg12 = 0x5c
, DW_OP_reg13 = 0x5d
, DW_OP_reg14 = 0x5e
, DW_OP_reg15 = 0x5f
, DW_OP_reg16 = 0x60
, DW_OP_reg17 = 0x61
, DW_OP_reg18 = 0x62
, DW_OP_reg19 = 0x63
, DW_OP_reg20 = 0x64
, DW_OP_reg21 = 0x65
, DW_OP_reg22 = 0x66
, DW_OP_reg23 = 0x67
, DW_OP_reg24 = 0x68
, DW_OP_reg25 = 0x69
, DW_OP_reg26 = 0x6a
, DW_OP_reg27 = 0x6b
, DW_OP_reg28 = 0x6c
, DW_OP_reg29 = 0x6d
, DW_OP_reg30 = 0x6e
, DW_OP_reg31 = 0x6f
, DW_OP_breg0 = 0x70
, DW_OP_breg1 = 0x71
, DW_OP_breg2 = 0x72
, DW_OP_breg3 = 0x73
, DW_OP_breg4 = 0x74
, DW_OP_breg5 = 0x75
, DW_OP_breg6 = 0x76
, DW_OP_breg7 = 0x77
, DW_OP_breg8 = 0x78
, DW_OP_breg9 = 0x79
, DW_OP_breg10 = 0x7a
, DW_OP_breg11 = 0x7b
, DW_OP_breg12 = 0x7c
, DW_OP_breg13 = 0x7d
, DW_OP_breg14 = 0x7e
, DW_OP_breg15 = 0x7f
, DW_OP_breg16 = 0x80
, DW_OP_breg17 = 0x81
, DW_OP_breg18 = 0x82
, DW_OP_breg19 = 0x83
, DW_OP_breg20 = 0x84
, DW_OP_breg21 = 0x85
, DW_OP_breg22 = 0x86
, DW_OP_breg23 = 0x87
, DW_OP_breg24 = 0x88
, DW_OP_breg25 = 0x89
, DW_OP_breg26 = 0x8a
, DW_OP_breg27 = 0x8b
, DW_OP_breg28 = 0x8c
, DW_OP_breg29 = 0x8d
, DW_OP_breg30 = 0x8e
, DW_OP_breg31 = 0x8f
, DW_OP_regx = 0x90
, DW_OP_fbreg = 0x91
, DW_OP_bregx = 0x92
, DW_OP_piece = 0x93
, DW_OP_deref_size = 0x94
, DW_OP_xderef_size = 0x95
, DW_OP_nop = 0x96

, DW_OP_push_object_address = 0x97
, DW_OP_call2 = 0x98
, DW_OP_call4 = 0x99
, DW_OP_call_ref = 0x9a
, DW_OP_form_tls_address = 0x9b
, DW_OP_call_frame_cfa = 0x9c
, DW_OP_bit_piece = 0x9d


, DW_OP_implicit_value = 0x9e
, DW_OP_stack_value = 0x9f


, DW_OP_implicit_pointer = 0xa0
, DW_OP_addrx = 0xa1
, DW_OP_constx = 0xa2
, DW_OP_entry_value = 0xa3
, DW_OP_const_type = 0xa4
, DW_OP_regval_type = 0xa5
, DW_OP_deref_type = 0xa6
, DW_OP_xderef_type = 0xa7
, DW_OP_convert = 0xa8
, DW_OP_reinterpret = 0xa9

, DW_OP_lo_user = 0xe0
, DW_OP_hi_user = 0xff


, DW_OP_GNU_push_tls_address = 0xe0

, DW_OP_GNU_uninit = 0xf0
, DW_OP_GNU_encoded_addr = 0xf1


, DW_OP_GNU_implicit_pointer = 0xf2


, DW_OP_GNU_entry_value = 0xf3


, DW_OP_GNU_const_type = 0xf4
, DW_OP_GNU_regval_type = 0xf5
, DW_OP_GNU_deref_type = 0xf6
, DW_OP_GNU_convert = 0xf7
, DW_OP_GNU_reinterpret = 0xf9

, DW_OP_GNU_parameter_ref = 0xfa

, DW_OP_GNU_addr_index = 0xfb
, DW_OP_GNU_const_index = 0xfc


, DW_OP_GNU_variable_value = 0xfd

, DW_OP_HP_unknown = 0xe0
, DW_OP_HP_is_value = 0xe1
, DW_OP_HP_fltconst4 = 0xe2
, DW_OP_HP_fltconst8 = 0xe3
, DW_OP_HP_mod_range = 0xe4
, DW_OP_HP_unmod_range = 0xe5
, DW_OP_HP_tls = 0xe6

, DW_OP_PGI_omp_thread_num = 0xf8





, DW_OP_AARCH64_operation = 0xea
};

enum dwarf_type { DW_ATE_void = 0x0
, DW_ATE_address = 0x1
, DW_ATE_boolean = 0x2
, DW_ATE_complex_float = 0x3
, DW_ATE_float = 0x4
, DW_ATE_signed = 0x5
, DW_ATE_signed_char = 0x6
, DW_ATE_unsigned = 0x7
, DW_ATE_unsigned_char = 0x8

, DW_ATE_imaginary_float = 0x9
, DW_ATE_packed_decimal = 0xa
, DW_ATE_numeric_string = 0xb
, DW_ATE_edited = 0xc
, DW_ATE_signed_fixed = 0xd
, DW_ATE_unsigned_fixed = 0xe
, DW_ATE_decimal_float = 0xf

, DW_ATE_UTF = 0x10

, DW_ATE_UCS = 0x11
, DW_ATE_ASCII = 0x12

, DW_ATE_lo_user = 0x80
, DW_ATE_hi_user = 0xff


, DW_ATE_HP_float80 = 0x80
, DW_ATE_HP_complex_float80 = 0x81
, DW_ATE_HP_float128 = 0x82
, DW_ATE_HP_complex_float128 = 0x83
, DW_ATE_HP_floathpintel = 0x84
, DW_ATE_HP_imaginary_float80 = 0x85
, DW_ATE_HP_imaginary_float128 = 0x86
, DW_ATE_HP_VAX_float = 0x88
, DW_ATE_HP_VAX_float_d = 0x89
, DW_ATE_HP_packed_decimal = 0x8a
, DW_ATE_HP_zoned_decimal = 0x8b
, DW_ATE_HP_edited = 0x8c
, DW_ATE_HP_signed_fixed = 0x8d
, DW_ATE_HP_unsigned_fixed = 0x8e
, DW_ATE_HP_VAX_complex_float = 0x8f
, DW_ATE_HP_VAX_complex_float_d = 0x90

};

enum dwarf_call_frame_info { DW_CFA_advance_loc = 0x40
, DW_CFA_offset = 0x80
, DW_CFA_restore = 0xc0
, DW_CFA_nop = 0x00
, DW_CFA_set_loc = 0x01
, DW_CFA_advance_loc1 = 0x02
, DW_CFA_advance_loc2 = 0x03
, DW_CFA_advance_loc4 = 0x04
, DW_CFA_offset_extended = 0x05
, DW_CFA_restore_extended = 0x06
, DW_CFA_undefined = 0x07
, DW_CFA_same_value = 0x08
, DW_CFA_register = 0x09
, DW_CFA_remember_state = 0x0a
, DW_CFA_restore_state = 0x0b
, DW_CFA_def_cfa = 0x0c
, DW_CFA_def_cfa_register = 0x0d
, DW_CFA_def_cfa_offset = 0x0e

, DW_CFA_def_cfa_expression = 0x0f
, DW_CFA_expression = 0x10
, DW_CFA_offset_extended_sf = 0x11
, DW_CFA_def_cfa_sf = 0x12
, DW_CFA_def_cfa_offset_sf = 0x13
, DW_CFA_val_offset = 0x14
, DW_CFA_val_offset_sf = 0x15
, DW_CFA_val_expression = 0x16

, DW_CFA_lo_user = 0x1c
, DW_CFA_hi_user = 0x3f


, DW_CFA_MIPS_advance_loc8 = 0x1d


, DW_CFA_GNU_window_save = 0x2d
, DW_CFA_AARCH64_negate_ra_state = 0x2d
, DW_CFA_GNU_args_size = 0x2e
, DW_CFA_GNU_negative_offset_extended = 0x2f

};


enum dwarf_name_index_attribute { DW_IDX_compile_unit = 1
, DW_IDX_type_unit = 2
, DW_IDX_die_offset = 3
, DW_IDX_parent = 4
, DW_IDX_type_hash = 5
, DW_IDX_lo_user = 0x2000
, DW_IDX_hi_user = 0x3fff
, DW_IDX_GNU_internal = 0x2000
, DW_IDX_GNU_external = 0x2001
};


enum dwarf_unit_type { DW_UT_compile = 0x01
, DW_UT_type = 0x02
, DW_UT_partial = 0x03
, DW_UT_skeleton = 0x04
, DW_UT_split_compile = 0x05
, DW_UT_split_type = 0x06
, DW_UT_lo_user = 0x80
, DW_UT_hi_user = 0xff
};
# 86 "./../include/dwarf2.h" 2
# 127 "./../include/dwarf2.h"
enum dwarf_decimal_sign_encoding
  {

    DW_DS_unsigned = 0x01,
    DW_DS_leading_overpunch = 0x02,
    DW_DS_trailing_overpunch = 0x03,
    DW_DS_leading_separate = 0x04,
    DW_DS_trailing_separate = 0x05
  };


enum dwarf_endianity_encoding
  {

    DW_END_default = 0x00,
    DW_END_big = 0x01,
    DW_END_little = 0x02,

    DW_END_lo_user = 0x40,
    DW_END_hi_user = 0xff
  };


enum dwarf_array_dim_ordering
  {
    DW_ORD_row_major = 0,
    DW_ORD_col_major = 1
  };


enum dwarf_access_attribute
  {
    DW_ACCESS_public = 1,
    DW_ACCESS_protected = 2,
    DW_ACCESS_private = 3
  };


enum dwarf_visibility_attribute
  {
    DW_VIS_local = 1,
    DW_VIS_exported = 2,
    DW_VIS_qualified = 3
  };


enum dwarf_virtuality_attribute
  {
    DW_VIRTUALITY_none = 0,
    DW_VIRTUALITY_virtual = 1,
    DW_VIRTUALITY_pure_virtual = 2
  };


enum dwarf_id_case
  {
    DW_ID_case_sensitive = 0,
    DW_ID_up_case = 1,
    DW_ID_down_case = 2,
    DW_ID_case_insensitive = 3
  };


enum dwarf_calling_convention
  {
    DW_CC_normal = 0x1,
    DW_CC_program = 0x2,
    DW_CC_nocall = 0x3,


    DW_CC_pass_by_reference = 0x4,
    DW_CC_pass_by_value = 0x5,

    DW_CC_lo_user = 0x40,
    DW_CC_hi_user = 0xff,

    DW_CC_GNU_renesas_sh = 0x40,
    DW_CC_GNU_borland_fastcall_i386 = 0x41,







    DW_CC_GDB_IBM_OpenCL = 0xff
  };


enum dwarf_inline_attribute
  {
    DW_INL_not_inlined = 0,
    DW_INL_inlined = 1,
    DW_INL_declared_not_inlined = 2,
    DW_INL_declared_inlined = 3
  };


enum dwarf_discrim_list
  {
    DW_DSC_label = 0,
    DW_DSC_range = 1
  };


enum dwarf_line_number_ops
  {
    DW_LNS_extended_op = 0,
    DW_LNS_copy = 1,
    DW_LNS_advance_pc = 2,
    DW_LNS_advance_line = 3,
    DW_LNS_set_file = 4,
    DW_LNS_set_column = 5,
    DW_LNS_negate_stmt = 6,
    DW_LNS_set_basic_block = 7,
    DW_LNS_const_add_pc = 8,
    DW_LNS_fixed_advance_pc = 9,

    DW_LNS_set_prologue_end = 10,
    DW_LNS_set_epilogue_begin = 11,
    DW_LNS_set_isa = 12
  };


enum dwarf_line_number_x_ops
  {
    DW_LNE_end_sequence = 1,
    DW_LNE_set_address = 2,
    DW_LNE_define_file = 3,
    DW_LNE_set_discriminator = 4,

    DW_LNE_HP_negate_is_UV_update = 0x11,
    DW_LNE_HP_push_context = 0x12,
    DW_LNE_HP_pop_context = 0x13,
    DW_LNE_HP_set_file_line_column = 0x14,
    DW_LNE_HP_set_routine_name = 0x15,
    DW_LNE_HP_set_sequence = 0x16,
    DW_LNE_HP_negate_post_semantics = 0x17,
    DW_LNE_HP_negate_function_exit = 0x18,
    DW_LNE_HP_negate_front_end_logical = 0x19,
    DW_LNE_HP_define_proc = 0x20,
    DW_LNE_HP_source_file_correlation = 0x80,

    DW_LNE_lo_user = 0x80,
    DW_LNE_hi_user = 0xff
  };


enum dwarf_line_number_hp_sfc_ops
  {
    DW_LNE_HP_SFC_formfeed = 1,
    DW_LNE_HP_SFC_set_listing_line = 2,
    DW_LNE_HP_SFC_associate = 3
  };



enum dwarf_line_number_content_type
  {
    DW_LNCT_path = 0x1,
    DW_LNCT_directory_index = 0x2,
    DW_LNCT_timestamp = 0x3,
    DW_LNCT_size = 0x4,
    DW_LNCT_MD5 = 0x5,
    DW_LNCT_lo_user = 0x2000,
    DW_LNCT_hi_user = 0x3fff
  };


enum dwarf_location_list_entry_type
  {
    DW_LLE_end_of_list = 0x00,
    DW_LLE_base_addressx = 0x01,
    DW_LLE_startx_endx = 0x02,
    DW_LLE_startx_length = 0x03,
    DW_LLE_offset_pair = 0x04,
    DW_LLE_default_location = 0x05,
    DW_LLE_base_address = 0x06,
    DW_LLE_start_end = 0x07,
    DW_LLE_start_length = 0x08,






    DW_LLE_GNU_view_pair = 0x09,




    DW_LLE_GNU_end_of_list_entry = 0x00,
    DW_LLE_GNU_base_address_selection_entry = 0x01,
    DW_LLE_GNU_start_end_entry = 0x02,
    DW_LLE_GNU_start_length_entry = 0x03
  };
# 335 "./../include/dwarf2.h"
enum dwarf_source_language
  {
    DW_LANG_C89 = 0x0001,
    DW_LANG_C = 0x0002,
    DW_LANG_Ada83 = 0x0003,
    DW_LANG_C_plus_plus = 0x0004,
    DW_LANG_Cobol74 = 0x0005,
    DW_LANG_Cobol85 = 0x0006,
    DW_LANG_Fortran77 = 0x0007,
    DW_LANG_Fortran90 = 0x0008,
    DW_LANG_Pascal83 = 0x0009,
    DW_LANG_Modula2 = 0x000a,

    DW_LANG_Java = 0x000b,
    DW_LANG_C99 = 0x000c,
    DW_LANG_Ada95 = 0x000d,
    DW_LANG_Fortran95 = 0x000e,
    DW_LANG_PLI = 0x000f,
    DW_LANG_ObjC = 0x0010,
    DW_LANG_ObjC_plus_plus = 0x0011,
    DW_LANG_UPC = 0x0012,
    DW_LANG_D = 0x0013,

    DW_LANG_Python = 0x0014,

    DW_LANG_OpenCL = 0x0015,
    DW_LANG_Go = 0x0016,
    DW_LANG_Modula3 = 0x0017,
    DW_LANG_Haskell = 0x0018,
    DW_LANG_C_plus_plus_03 = 0x0019,
    DW_LANG_C_plus_plus_11 = 0x001a,
    DW_LANG_OCaml = 0x001b,
    DW_LANG_Rust = 0x001c,
    DW_LANG_C11 = 0x001d,
    DW_LANG_Swift = 0x001e,
    DW_LANG_Julia = 0x001f,
    DW_LANG_Dylan = 0x0020,
    DW_LANG_C_plus_plus_14 = 0x0021,
    DW_LANG_Fortran03 = 0x0022,
    DW_LANG_Fortran08 = 0x0023,
    DW_LANG_RenderScript = 0x0024,

    DW_LANG_lo_user = 0x8000,
    DW_LANG_hi_user = 0xffff,


    DW_LANG_Mips_Assembler = 0x8001,

    DW_LANG_Upc = 0x8765,

    DW_LANG_HP_Bliss = 0x8003,
    DW_LANG_HP_Basic91 = 0x8004,
    DW_LANG_HP_Pascal91 = 0x8005,
    DW_LANG_HP_IMacro = 0x8006,
    DW_LANG_HP_Assembler = 0x8007,


    DW_LANG_Rust_old = 0x9000
  };


enum dwarf_macinfo_record_type
  {
    DW_MACINFO_define = 1,
    DW_MACINFO_undef = 2,
    DW_MACINFO_start_file = 3,
    DW_MACINFO_end_file = 4,
    DW_MACINFO_vendor_ext = 255
  };


enum dwarf_defaulted_attribute
  {
    DW_DEFAULTED_no = 0x00,
    DW_DEFAULTED_in_class = 0x01,
    DW_DEFAULTED_out_of_class = 0x02
  };


enum dwarf_macro_record_type
  {
    DW_MACRO_define = 0x01,
    DW_MACRO_undef = 0x02,
    DW_MACRO_start_file = 0x03,
    DW_MACRO_end_file = 0x04,
    DW_MACRO_define_strp = 0x05,
    DW_MACRO_undef_strp = 0x06,
    DW_MACRO_import = 0x07,
    DW_MACRO_define_sup = 0x08,
    DW_MACRO_undef_sup = 0x09,
    DW_MACRO_import_sup = 0x0a,
    DW_MACRO_define_strx = 0x0b,
    DW_MACRO_undef_strx = 0x0c,
    DW_MACRO_lo_user = 0xe0,
    DW_MACRO_hi_user = 0xff,


    DW_MACRO_GNU_define = 0x01,
    DW_MACRO_GNU_undef = 0x02,
    DW_MACRO_GNU_start_file = 0x03,
    DW_MACRO_GNU_end_file = 0x04,
    DW_MACRO_GNU_define_indirect = 0x05,
    DW_MACRO_GNU_undef_indirect = 0x06,
    DW_MACRO_GNU_transparent_include = 0x07,


    DW_MACRO_GNU_define_indirect_alt = 0x08,
    DW_MACRO_GNU_undef_indirect_alt = 0x09,
    DW_MACRO_GNU_transparent_include_alt = 0x0a,
    DW_MACRO_GNU_lo_user = 0xe0,
    DW_MACRO_GNU_hi_user = 0xff
  };


enum dwarf_range_list_entry
  {
    DW_RLE_end_of_list = 0x00,
    DW_RLE_base_addressx = 0x01,
    DW_RLE_startx_endx = 0x02,
    DW_RLE_startx_length = 0x03,
    DW_RLE_offset_pair = 0x04,
    DW_RLE_base_address = 0x05,
    DW_RLE_start_end = 0x06,
    DW_RLE_start_length = 0x07
  };
# 487 "./../include/dwarf2.h"
enum dwarf_sect
{
  DW_SECT_INFO = 1,
  DW_SECT_TYPES = 2,
  DW_SECT_ABBREV = 3,
  DW_SECT_LINE = 4,
  DW_SECT_LOC = 5,
  DW_SECT_STR_OFFSETS = 6,
  DW_SECT_MACINFO = 7,
  DW_SECT_MACRO = 8,
  DW_SECT_MAX = 8
};




enum dwarf_sect_v5
{
  DW_SECT_INFO_V5 = 1,
  DW_SECT_RESERVED_V5 = 2,
  DW_SECT_ABBREV_V5 = 3,
  DW_SECT_LINE_V5 = 4,
  DW_SECT_LOCLISTS_V5 = 5,
  DW_SECT_STR_OFFSETS_V5 = 6,
  DW_SECT_MACRO_V5 = 7,
  DW_SECT_RNGLISTS_V5 = 8,
  DW_SECT_MAX_V5 = 8
};







extern const char *get_DW_TAG_name (unsigned int tag);



extern const char *get_DW_AT_name (unsigned int attr);



extern const char *get_DW_FORM_name (unsigned int form);



extern const char *get_DW_OP_name (unsigned int op);



extern const char *get_DW_ATE_name (unsigned int enc);



extern const char *get_DW_CFA_name (unsigned int opc);



extern const char *get_DW_IDX_name (unsigned int idx);



extern const char *get_DW_UT_name (unsigned int ut);
# 29 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2
# 1 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h" 1
# 24 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h"
typedef struct
{
  uint64_t li_length;
  uint16_t li_version;
  uint8_t li_address_size;
  uint8_t li_segment_size;
  uint64_t li_prologue_length;
  uint8_t li_min_insn_length;
  uint8_t li_max_ops_per_insn;
  uint8_t li_default_is_stmt;
  int8_t li_line_base;
  uint8_t li_line_range;
  uint8_t li_opcode_base;

  unsigned int li_offset_size;
}
DWARF2_Internal_LineInfo;


typedef struct
{
  uint64_t pn_length;
  unsigned short pn_version;
  uint64_t pn_offset;
  uint64_t pn_size;
}
DWARF2_Internal_PubNames;


typedef struct
{
  uint64_t cu_length;
  unsigned short cu_version;
  uint64_t cu_abbrev_offset;
  unsigned char cu_pointer_size;
  enum dwarf_unit_type cu_unit_type;
}
DWARF2_Internal_CompUnit;


typedef struct
{
  uint64_t ar_length;
  unsigned short ar_version;
  uint64_t ar_info_offset;
  unsigned char ar_pointer_size;
  unsigned char ar_segment_size;
}
DWARF2_Internal_ARange;



enum dwarf_section_display_enum
{
  abbrev = 0,
  aranges,
  frame,
  info,
  line,
  pubnames,
  gnu_pubnames,
  eh_frame,
  macinfo,
  macro,
  str,
  line_str,
  loc,
  loclists,
  loclists_dwo,
  pubtypes,
  gnu_pubtypes,
  ranges,
  rnglists,
  rnglists_dwo,
  static_func,
  static_vars,
  types,
  weaknames,
  gdb_index,
  debug_names,
  trace_info,
  trace_abbrev,
  trace_aranges,
  info_dwo,
  abbrev_dwo,
  types_dwo,
  line_dwo,
  loc_dwo,
  macro_dwo,
  macinfo_dwo,
  str_dwo,
  str_index,
  str_index_dwo,
  debug_addr,
  dwp_cu_index,
  dwp_tu_index,
  gnu_debuglink,
  gnu_debugaltlink,
  debug_sup,
  separate_debug_str,
  note_gnu_build_id,
  max
};

struct dwarf_section
{





  const char * uncompressed_name;
  const char * compressed_name;
  const char * xcoff_name;
  const char * name;


  const char * filename;
  unsigned char * start;
  uint64_t address;
  uint64_t size;
  enum dwarf_section_display_enum abbrev_sec;

  void * reloc_info;
  uint64_t num_relocs;
};



struct dwarf_section_display
{
  struct dwarf_section section;
  int (*display) (struct dwarf_section *, void *);
  int *enabled;
  
# 158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h" 3 4
 _Bool 
# 158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h"
      relocate;
};

extern struct dwarf_section_display debug_displays [];



typedef struct
{
  unsigned int pointer_size;
  unsigned int offset_size;
  int dwarf_version;
  uint64_t cu_offset;
  uint64_t base_address;


  uint64_t addr_base;


  uint64_t ranges_base;

  uint64_t * loc_offsets;

  uint64_t * loc_views;
  int * have_frame_base;


  unsigned int num_loc_offsets;
  unsigned int max_loc_offsets;
  unsigned int num_loc_views;
  uint64_t loclists_base;


  uint64_t * range_lists;
  unsigned int num_range_lists;
  unsigned int max_range_lists;
  uint64_t rnglists_base;
  uint64_t str_offsets_base;
}
debug_info;

typedef struct separate_info
{
  void * handle;
  const char * filename;
  struct separate_info * next;
} separate_info;

extern separate_info * first_separate_info;

extern unsigned int eh_addr_size;

extern int do_debug_info;
extern int do_debug_abbrevs;
extern int do_debug_lines;
extern int do_debug_pubnames;
extern int do_debug_pubtypes;
extern int do_debug_aranges;
extern int do_debug_ranges;
extern int do_debug_frames;
extern int do_debug_frames_interp;
extern int do_debug_macinfo;
extern int do_debug_str;
extern int do_debug_str_offsets;
extern int do_debug_loc;
extern int do_gdb_index;
extern int do_trace_info;
extern int do_trace_abbrevs;
extern int do_trace_aranges;
extern int do_debug_addr;
extern int do_debug_cu_index;
extern int do_wide;
extern int do_debug_links;
extern int do_follow_links;



extern 
# 235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h" 3 4
      _Bool 
# 235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h"
           do_checks;

extern int dwarf_cutoff_level;
extern unsigned long dwarf_start_die;

extern int dwarf_check;

extern void init_dwarf_regnames_by_elf_machine_code (unsigned int);
extern void init_dwarf_regnames_by_bfd_arch_and_mach (enum bfd_architecture arch,
            unsigned long mach);

extern 
# 246 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h" 3 4
      _Bool 
# 246 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h"
           load_debug_section (enum dwarf_section_display_enum, void *);
extern void free_debug_section (enum dwarf_section_display_enum);
extern 
# 248 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h" 3 4
      _Bool 
# 248 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h"
           load_separate_debug_files (void *, const char *);
extern void close_debug_file (void *);
extern void *open_debug_file (const char *);

extern void free_debug_memory (void);

extern int dwarf_select_sections_by_names (const char *);
extern int dwarf_select_sections_by_letters (const char *);
extern void dwarf_select_sections_all (void);

extern unsigned int * find_cu_tu_set (void *, unsigned int);

extern void * cmalloc (uint64_t, size_t);
extern void * xcalloc2 (uint64_t, size_t);
extern void * xcmalloc (uint64_t, size_t);
extern void * xcrealloc (void *, uint64_t, size_t);




extern 
# 268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h" 3 4
      _Bool 
# 268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h"
           reloc_at (struct dwarf_section *, uint64_t);

extern uint64_t read_leb128 (unsigned char *, const unsigned char *const,
        
# 271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h" 3 4
       _Bool
# 271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.h"
           , unsigned int *, int *);





static inline void
report_leb_status (int status)
{
  if ((status & 1) != 0)
    error (gettext ("end of data encountered whilst reading LEB\n"));
  else if ((status & 2) != 0)
    error (gettext ("read LEB value is too large to store in destination variable\n"));
}
# 30 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2
# 1 "./../include/gdb/gdb-index.h" 1
# 60 "./../include/gdb/gdb-index.h"
typedef enum {

  GDB_INDEX_SYMBOL_KIND_NONE = 0,
  GDB_INDEX_SYMBOL_KIND_TYPE = 1,
  GDB_INDEX_SYMBOL_KIND_VARIABLE = 2,
  GDB_INDEX_SYMBOL_KIND_FUNCTION = 3,
  GDB_INDEX_SYMBOL_KIND_OTHER = 4,


  GDB_INDEX_SYMBOL_KIND_UNUSED5 = 5,
  GDB_INDEX_SYMBOL_KIND_UNUSED6 = 6,
  GDB_INDEX_SYMBOL_KIND_UNUSED7 = 7
} gdb_index_symbol_kind;
# 31 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2
# 1 "./../include/filenames.h" 1
# 29 "./../include/filenames.h"
# 1 "./../include/hashtab.h" 1
# 42 "./../include/hashtab.h"
typedef unsigned int hashval_t;




typedef hashval_t (*htab_hash) (const void *);






typedef int (*htab_eq) (const void *, const void *);



typedef void (*htab_del) (void *);





typedef int (*htab_trav) (void **, void *);





typedef void *(*htab_alloc) (size_t, size_t);


typedef void (*htab_free) (void *);



typedef void *(*htab_alloc_with_arg) (void *, size_t, size_t);
typedef void (*htab_free_with_arg) (void *, void *);
# 95 "./../include/hashtab.h"
struct htab {

  htab_hash hash_f;


  htab_eq eq_f;


  htab_del del_f;


  void **entries;


  size_t size;


  size_t n_elements;


  size_t n_deleted;



  unsigned int searches;



  unsigned int collisions;


  htab_alloc alloc_f;
  htab_free free_f;


  void *alloc_arg;
  htab_alloc_with_arg alloc_with_arg_f;
  htab_free_with_arg free_with_arg_f;



  unsigned int size_prime_index;
};

typedef struct htab *htab_t;


enum insert_option {NO_INSERT, INSERT};



extern htab_t htab_create_alloc (size_t, htab_hash,
                                    htab_eq, htab_del,
                                    htab_alloc, htab_free);

extern htab_t htab_create_alloc_ex (size_t, htab_hash,
                                      htab_eq, htab_del,
                                      void *, htab_alloc_with_arg,
                                      htab_free_with_arg);

extern htab_t htab_create_typed_alloc (size_t, htab_hash, htab_eq, htab_del,
     htab_alloc, htab_alloc, htab_free);


extern htab_t htab_create (size_t, htab_hash, htab_eq, htab_del);
extern htab_t htab_try_create (size_t, htab_hash, htab_eq, htab_del);

extern void htab_set_functions_ex (htab_t, htab_hash,
                                       htab_eq, htab_del,
                                       void *, htab_alloc_with_arg,
                                       htab_free_with_arg);

extern void htab_delete (htab_t);
extern void htab_empty (htab_t);

extern void * htab_find (htab_t, const void *);
extern void ** htab_find_slot (htab_t, const void *, enum insert_option);
extern void * htab_find_with_hash (htab_t, const void *, hashval_t);
extern void ** htab_find_slot_with_hash (htab_t, const void *,
       hashval_t, enum insert_option);
extern void htab_clear_slot (htab_t, void **);
extern void htab_remove_elt (htab_t, const void *);
extern void htab_remove_elt_with_hash (htab_t, const void *, hashval_t);

extern void htab_traverse (htab_t, htab_trav, void *);
extern void htab_traverse_noresize (htab_t, htab_trav, void *);

extern size_t htab_size (htab_t);
extern size_t htab_elements (htab_t);
extern double htab_collisions (htab_t);


extern htab_hash htab_hash_pointer;


extern htab_eq htab_eq_pointer;


extern hashval_t htab_hash_string (const void *);


extern int htab_eq_string (const void *, const void *);


extern hashval_t iterative_hash (const void *, size_t, hashval_t);
# 30 "./../include/filenames.h" 2
# 84 "./../include/filenames.h"
extern int filename_cmp (const char *s1, const char *s2);


extern int filename_ncmp (const char *s1, const char *s2,
     size_t n);

extern hashval_t filename_hash (const void *s);

extern int filename_eq (const void *s1, const void *s2);

extern int canonical_filename_eq (const char *a, const char *b);
# 32 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2
# 1 "./../include/safe-ctype.h" 1
# 57 "./../include/safe-ctype.h"
enum {

  _sch_isblank = 0x0001,
  _sch_iscntrl = 0x0002,
  _sch_isdigit = 0x0004,
  _sch_islower = 0x0008,
  _sch_isprint = 0x0010,
  _sch_ispunct = 0x0020,
  _sch_isspace = 0x0040,
  _sch_isupper = 0x0080,
  _sch_isxdigit = 0x0100,


  _sch_isidst = 0x0200,
  _sch_isvsp = 0x0400,
  _sch_isnvsp = 0x0800,


  _sch_isalpha = _sch_isupper|_sch_islower,
  _sch_isalnum = _sch_isalpha|_sch_isdigit,
  _sch_isidnum = _sch_isidst|_sch_isdigit,
  _sch_isgraph = _sch_isalnum|_sch_ispunct,
  _sch_iscppsp = _sch_isvsp|_sch_isnvsp,
  _sch_isbasic = _sch_isprint|_sch_iscppsp

};


extern const unsigned short _sch_istable[256];
# 110 "./../include/safe-ctype.h"
extern const unsigned char _sch_toupper[256];
extern const unsigned char _sch_tolower[256];
# 122 "./../include/safe-ctype.h"
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 46 "/usr/include/ctype.h" 3 4

# 46 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha (int) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit (int) __attribute__ ((__nothrow__ , __leaf__));
extern int islower (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint (int) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit (int) __attribute__ ((__nothrow__ , __leaf__));



extern int tolower (int __c) __attribute__ ((__nothrow__ , __leaf__));


extern int toupper (int __c) __attribute__ ((__nothrow__ , __leaf__));




extern int isblank (int) __attribute__ ((__nothrow__ , __leaf__));




extern int isctype (int __c, int __mask) __attribute__ ((__nothrow__ , __leaf__));






extern int isascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int toascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int _toupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int _tolower (int) __attribute__ ((__nothrow__ , __leaf__));
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int islower_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));

extern int isblank_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));



extern int __tolower_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int tolower_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


extern int __toupper_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int toupper_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
# 327 "/usr/include/ctype.h" 3 4

# 123 "./../include/safe-ctype.h" 2
# 33 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2
# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4



extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



# 34 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 1 3 4
# 40 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2
# 53 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"

# 53 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
static const char *regname (unsigned int regno, int row);
static const char *regname_internal_by_table_only (unsigned int regno);

static int have_frame_base;
static int need_base_address;

static unsigned int num_debug_info_entries = 0;
static unsigned int alloc_num_debug_info_entries = 0;
static debug_info *debug_information = 
# 61 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                      ((void *)0)
# 61 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                          ;






typedef enum dwo_type
{
 DWO_NAME,
 DWO_DIR,
 DWO_ID
} dwo_type;

typedef struct dwo_info
{
  dwo_type type;
  const char * value;
  uint64_t cu_offset;
  struct dwo_info * next;
} dwo_info;

static dwo_info *first_dwo_info = 
# 83 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 ((void *)0)
# 83 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                     ;
static 
# 84 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool 
# 84 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           need_dwo_info;

separate_info * first_separate_info = 
# 86 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 86 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         ;

unsigned int eh_addr_size;

int do_debug_info;
int do_debug_abbrevs;
int do_debug_lines;
int do_debug_pubnames;
int do_debug_pubtypes;
int do_debug_aranges;
int do_debug_ranges;
int do_debug_frames;
int do_debug_frames_interp;
int do_debug_macinfo;
int do_debug_str;
int do_debug_str_offsets;
int do_debug_loc;
int do_gdb_index;
int do_trace_info;
int do_trace_abbrevs;
int do_trace_aranges;
int do_debug_addr;
int do_debug_cu_index;
int do_wide;
int do_debug_links;
int do_follow_links = 1;




# 115 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
_Bool 
# 115 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    do_checks;

int dwarf_cutoff_level = -1;
unsigned long dwarf_start_die;

int dwarf_check = 0;






static unsigned int *shndx_pool = 
# 127 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 ((void *)0)
# 127 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                     ;
static unsigned int shndx_pool_size = 0;
static unsigned int shndx_pool_used = 0;







struct cu_tu_set
{
  uint64_t signature;
  uint64_t section_offsets[DW_SECT_MAX];
  size_t section_sizes[DW_SECT_MAX];
};

static int cu_count = 0;
static int tu_count = 0;
static struct cu_tu_set *cu_sets = 
# 146 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                  ((void *)0)
# 146 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      ;
static struct cu_tu_set *tu_sets = 
# 147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                  ((void *)0)
# 147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      ;

static 
# 149 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool 
# 149 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           load_cu_tu_indexes (void *);





static 
# 155 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool 
# 155 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           level_type_signed[(1 << 8)];





static unsigned int
size_of_encoded_value (int encoding)
{
  switch (encoding & 0x7)
    {
    default:
    case 0: return eh_addr_size;
    case 2: return 2;
    case 3: return 4;
    case 4: return 8;
    }
}

static uint64_t
get_encoded_value (unsigned char **pdata,
     int encoding,
     struct dwarf_section *section,
     unsigned char * end)
{
  unsigned char * data = * pdata;
  unsigned int size = size_of_encoded_value (encoding);
  uint64_t val;

  if (data >= end || size > (size_t) (end - data))
    {
      warn (gettext ("Encoded value extends past end of section\n"));
      * pdata = end;
      return 0;
    }


  if (size > 8)
    {
      warn (gettext ("Encoded size of %d is too large to read\n"), size);
      * pdata = end;
      return 0;
    }


  if (size == 0)
    {
      warn (gettext ("Encoded size of 0 is too small to read\n"));
      * pdata = end;
      return 0;
    }

  if (encoding & 0x08)
    val = byte_get_signed (data, size);
  else
    val = byte_get (data, size);

  if ((encoding & 0x70) == 0x10)
    val += section->address + (data - section->start);

  * pdata = data + size;
  return val;
}





static void
print_hex (uint64_t value, unsigned num_bytes)
{
  if (num_bytes == 0)
    num_bytes = 2;

  printf ("%0*" 
# 229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               "l" "x" 
# 229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      " ", num_bytes * 2,
   value & ~(~(uint64_t) 0 << num_bytes * 4 << num_bytes * 4));
}



static void
print_hex_ns (uint64_t value, unsigned num_bytes)
{
  if (num_bytes == 0)
    num_bytes = 2;

  printf ("%0*" 
# 241 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               "l" "x"
# 241 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     , num_bytes * 2,
   value & ~(~(uint64_t) 0 << num_bytes * 4 << num_bytes * 4));
}




static void
print_view (uint64_t value, unsigned num_bytes)
{
  if (num_bytes == 0)
    num_bytes = 2;

  printf ("v%0*" 
# 254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                "l" "x" 
# 254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       " ", num_bytes * 2 - 1,
   value & ~(~(uint64_t) 0 << num_bytes * 4 << num_bytes * 4));
}

static const char *
null_name (const char *p)
{
  if (p == 
# 261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              )
    p = gettext ("unknown");
  return p;
}
# 274 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
uint64_t
read_leb128 (unsigned char *data,
      const unsigned char *const end,
      
# 277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     _Bool 
# 277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          sign,
      unsigned int *length_return,
      int *status_return)
{
  uint64_t result = 0;
  unsigned int num_read = 0;
  unsigned int shift = 0;
  int status = 1;

  while (data < end)
    {
      unsigned char byte = *data++;
      unsigned char lost, mask;

      num_read++;

      if (shift < 8 * sizeof (result))
 {
   result |= ((uint64_t) (byte & 0x7f)) << shift;

   lost = byte ^ (result >> shift);

   mask = 0x7f ^ ((uint64_t) 0x7f << shift >> shift);
   shift += 7;
 }
      else
 {
   lost = byte;
   mask = 0x7f;
 }
      if ((lost & mask) != (sign && (int64_t) result < 0 ? mask : 0))
 status |= 2;

      if ((byte & 0x80) == 0)
 {
   status &= ~1;
   if (sign && shift < 8 * sizeof (result) && (byte & 0x40))
     result |= -((uint64_t) 1 << shift);
   break;
 }
    }

  if (length_return != 
# 319 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                      ((void *)0)
# 319 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          )
    *length_return = num_read;
  if (status_return != 
# 321 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                      ((void *)0)
# 321 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          )
    *status_return = status;

  return result;
}
# 377 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
typedef struct State_Machine_Registers
{
  uint64_t address;
  unsigned int view;
  unsigned int file;
  unsigned int line;
  unsigned int column;
  int is_stmt;
  int basic_block;
  unsigned char op_index;
  unsigned char end_sequence;


  unsigned int last_file_entry;
} SMR;

static SMR state_machine_regs;

static void
reset_state_machine (int is_stmt)
{
  state_machine_regs.address = 0;
  state_machine_regs.view = 0;
  state_machine_regs.op_index = 0;
  state_machine_regs.file = 1;
  state_machine_regs.line = 1;
  state_machine_regs.column = 0;
  state_machine_regs.is_stmt = is_stmt;
  state_machine_regs.basic_block = 0;
  state_machine_regs.end_sequence = 0;
  state_machine_regs.last_file_entry = 0;
}




static size_t
process_extended_line_op (unsigned char * data,
     int is_stmt,
     unsigned char * end)
{
  unsigned char op_code;
  size_t len, header_len;
  unsigned char *name;
  unsigned char *orig_data = data;
  uint64_t adr, val;

  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 424 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 424 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (len) = _val; if ((len) != _val) _status |= 2; report_leb_status (_status); } while (0);
  header_len = data - orig_data;

  if (len == 0 || data >= end || len > (size_t) (end - data))
    {
      warn (gettext ("Badly formed extended line op encountered!\n"));
      return header_len;
    }

  op_code = *data++;

  printf (gettext ("  Extended opcode %d: "), op_code);

  switch (op_code)
    {
    case DW_LNE_end_sequence:
      printf (gettext ("End of Sequence\n\n"));
      reset_state_machine (is_stmt);
      break;

    case DW_LNE_set_address:

      if (len - 1 > 8)
 {
   warn (gettext ("Length (%zu) of DW_LNE_set_address op is too long\n"),
  len - 1);
   adr = 0;
 }
      else
 do { size_t amount = (len - 1); if (sizeof (adr) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (adr)); amount = sizeof (adr); } if (1) 
# 453 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void) sizeof ((
# 453 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(data) <= (end)
# 453 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ? 1 : 0), __extension__ ({ if (
# 453 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(data) <= (end)
# 453 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ; else __assert_fail (
# 453 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
"(data) <= (end)"
# 453 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
, "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 453, __extension__ __PRETTY_FUNCTION__); }))
# 453 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (adr) = 0; else (adr) = (byte_get) ((data), amount); if (
# 453 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
0
# 453 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
) (data) += amount; } while (0);
      printf (gettext ("set Address to %#" 
# 454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "x" 
# 454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"), adr);
      state_machine_regs.address = adr;
      state_machine_regs.view = 0;
      state_machine_regs.op_index = 0;
      break;

    case DW_LNE_define_file:
      printf (gettext ("define new File Table entry\n"));
      printf (gettext ("  Entry\tDir\tTime\tSize\tName\n"));
      printf ("   %d\t", ++state_machine_regs.last_file_entry);

      {
 size_t l;

 name = data;
 l = strnlen ((char *) data, end - data);
 data += l;
 if (data < end)
   data++;
 do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 473 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
0
# 473 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
, &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
 printf ("%" 
# 474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "u" 
# 474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   "\t", val);
 do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 475 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
0
# 475 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
, &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
 printf ("%" 
# 476 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "u" 
# 476 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   "\t", val);
 do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 477 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
0
# 477 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
, &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
 printf ("%" 
# 478 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "u" 
# 478 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   "\t", val);
 printf ("%.*s\n\n", (int) l, name);
      }

      if (((size_t) (data - orig_data) != len + header_len) || data >= end)
 warn (gettext ("DW_LNE_define_file: Bad opcode length\n"));
      break;

    case DW_LNE_set_discriminator:
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 487 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 487 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
      printf (gettext ("set Discriminator to %" 
# 488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "u" 
# 488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"), val);
      break;


    case DW_LNE_HP_negate_is_UV_update:
      printf ("DW_LNE_HP_negate_is_UV_update\n");
      break;
    case DW_LNE_HP_push_context:
      printf ("DW_LNE_HP_push_context\n");
      break;
    case DW_LNE_HP_pop_context:
      printf ("DW_LNE_HP_pop_context\n");
      break;
    case DW_LNE_HP_set_file_line_column:
      printf ("DW_LNE_HP_set_file_line_column\n");
      break;
    case DW_LNE_HP_set_routine_name:
      printf ("DW_LNE_HP_set_routine_name\n");
      break;
    case DW_LNE_HP_set_sequence:
      printf ("DW_LNE_HP_set_sequence\n");
      break;
    case DW_LNE_HP_negate_post_semantics:
      printf ("DW_LNE_HP_negate_post_semantics\n");
      break;
    case DW_LNE_HP_negate_function_exit:
      printf ("DW_LNE_HP_negate_function_exit\n");
      break;
    case DW_LNE_HP_negate_front_end_logical:
      printf ("DW_LNE_HP_negate_front_end_logical\n");
      break;
    case DW_LNE_HP_define_proc:
      printf ("DW_LNE_HP_define_proc\n");
      break;
    case DW_LNE_HP_source_file_correlation:
      {
 unsigned char *edata = data + len - 1;

 printf ("DW_LNE_HP_source_file_correlation\n");

 while (data < edata)
   {
     unsigned int opc;

     do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, edata, 
# 532 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    0
# 532 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    , &_len, &_status); data += _len; (opc) = _val; if ((opc) != _val) _status |= 2; report_leb_status (_status); } while (0);

     switch (opc)
       {
       case DW_LNE_HP_SFC_formfeed:
  printf ("    DW_LNE_HP_SFC_formfeed\n");
  break;
       case DW_LNE_HP_SFC_set_listing_line:
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, edata, 
# 540 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 540 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
  printf ("    DW_LNE_HP_SFC_set_listing_line (%" 
# 541 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                 "l" "u" 
# 541 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        ")\n",
   val);
  break;
       case DW_LNE_HP_SFC_associate:
  printf ("    DW_LNE_HP_SFC_associate ");
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, edata, 
# 546 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 546 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
  printf ("(%" 
# 547 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "u" 
# 547 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     , val);
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, edata, 
# 548 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 548 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
  printf (",%" 
# 549 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "u"
# 549 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    , val);
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, edata, 
# 550 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 550 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
  printf (",%" 
# 551 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "u" 
# 551 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     ")\n", val);
  break;
       default:
  printf (gettext ("    UNKNOWN DW_LNE_HP_SFC opcode (%u)\n"), opc);
  data = edata;
  break;
       }
   }
      }
      break;

    default:
      {
 unsigned int rlen = len - 1;

 if (op_code >= DW_LNE_lo_user



                                     )
   printf (gettext ("user defined: "));
 else
   printf (gettext ("UNKNOWN: "));
 printf (gettext ("length %d ["), rlen);
 for (; rlen; rlen--)
   printf (" %02x", *data++);
 printf ("]\n");
      }
      break;
    }

  return len + header_len;
}

static const unsigned char *
fetch_indirect_string (uint64_t offset)
{
  struct dwarf_section *section = &debug_displays [str].section;
  const unsigned char * ret;

  if (section->start == 
# 591 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 591 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           )
    return (const unsigned char *) gettext ("<no .debug_str section>");

  if (offset >= section->size)
    {
      warn (gettext ("DW_FORM_strp offset too big: %#" 
# 596 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 596 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           "\n"), offset);
      return (const unsigned char *) gettext ("<offset is too big>");
    }

  ret = section->start + offset;



  if (strnlen ((const char *) ret, section->size - offset)
      == section->size - offset)
    ret = (const unsigned char *)
      gettext ("<no NUL byte at end of .debug_str section>");

  return ret;
}

static const unsigned char *
fetch_indirect_line_string (uint64_t offset)
{
  struct dwarf_section *section = &debug_displays [line_str].section;
  const unsigned char * ret;

  if (section->start == 
# 618 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 618 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           )
    return (const unsigned char *) gettext ("<no .debug_line_str section>");

  if (offset >= section->size)
    {
      warn (gettext ("DW_FORM_line_strp offset too big: %#" 
# 623 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 623 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           "\n"), offset);
      return (const unsigned char *) gettext ("<offset is too big>");
    }

  ret = section->start + offset;



  if (strnlen ((const char *) ret, section->size - offset)
      == section->size - offset)
    ret = (const unsigned char *)
      gettext ("<no NUL byte at end of .debug_line_str section>");

  return ret;
}

static const char *
fetch_indexed_string (uint64_t idx,
        struct cu_tu_set *this_set,
        uint64_t offset_size,
        
# 643 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       _Bool 
# 643 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            dwo,
        uint64_t str_offsets_base)
{
  enum dwarf_section_display_enum str_sec_idx = dwo ? str_dwo : str;
  enum dwarf_section_display_enum idx_sec_idx = dwo ? str_index_dwo : str_index;
  struct dwarf_section *index_section = &debug_displays [idx_sec_idx].section;
  struct dwarf_section *str_section = &debug_displays [str_sec_idx].section;
  uint64_t index_offset;
  uint64_t str_offset;
  const char * ret;

  if (index_section->start == 
# 654 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             ((void *)0)
# 654 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                 )
    return (dwo ? gettext ("<no .debug_str_offsets.dwo section>")
  : gettext ("<no .debug_str_offsets section>"));

  if (str_section->start == 
# 658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           ((void *)0)
# 658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               )
    return (dwo ? gettext ("<no .debug_str.dwo section>")
  : gettext ("<no .debug_str section>"));

  if (__builtin_mul_overflow (idx, offset_size, &index_offset)
      || (this_set != 
# 663 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
   
# 664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  && ((index_offset += this_set->section_offsets [DW_SECT_STR_OFFSETS])
       < this_set->section_offsets [DW_SECT_STR_OFFSETS]))
      || (index_offset += str_offsets_base) < str_offsets_base
      || index_offset + offset_size < offset_size
      || index_offset + offset_size > index_section->size)
    {
      warn (gettext ("string index of %" 
# 670 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "u" 
# 670 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           " converts to an offset of %#" 
# 670 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 670 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           " which is too big for section %s")
                                          ,
     idx, index_offset, str_section->name);

      return gettext ("<string index too big>");
    }

  str_offset = byte_get (index_section->start + index_offset, offset_size);

  str_offset -= str_section->address;
  if (str_offset >= str_section->size)
    {
      warn (gettext ("indirect offset too big: %#" 
# 682 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 682 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           "\n"), str_offset);
      return gettext ("<indirect index offset is too big>");
    }

  ret = (const char *) str_section->start + str_offset;




  if (strnlen (ret, str_section->size - str_offset)
      == str_section->size - str_offset)
    return gettext ("<no NUL byte at end of section>");

  return ret;
}

static uint64_t
fetch_indexed_addr (uint64_t offset, uint32_t num_bytes)
{
  struct dwarf_section *section = &debug_displays [debug_addr].section;

  if (section->start == 
# 703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           )
    {
      warn (gettext ("Cannot fetch indexed address: the .debug_addr section is missing\n"));
      return 0;
    }

  if (offset + num_bytes > section->size)
    {
      warn (gettext ("Offset into section %s too big: %#" 
# 711 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 711 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           "\n"),
     section->name, offset);
      return 0;
    }

  return byte_get (section->start + offset, num_bytes);
}





static uint64_t
fetch_indexed_value (uint64_t idx,
       enum dwarf_section_display_enum sec_enum,
       uint64_t base_address)
{
  struct dwarf_section *section = &debug_displays [sec_enum].section;

  if (section->start == 
# 730 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 730 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           )
    {
      warn (gettext ("Unable to locate %s section\n"), section->uncompressed_name);
      return -1;
    }

  if (section->size < 4)
    {
      warn (gettext ("Section %s is too small to contain an value indexed from another section!\n"),
     section->name);
      return -1;
    }

  uint32_t pointer_size, bias;

  if (byte_get (section->start, 4) == 0xffffffff)
    {
      pointer_size = 8;
      bias = 20;
    }
  else
    {
      pointer_size = 4;
      bias = 12;
    }

  uint64_t offset = idx * pointer_size;



  if (base_address)
    offset += base_address;
  else
    offset += bias;

  if (offset + pointer_size > section->size)
    {
      warn (gettext ("Offset into section %s too big: %#" 
# 767 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 767 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           "\n"),
     section->name, offset);
      return -1;
    }

  return byte_get (section->start + offset, pointer_size);
}





typedef struct abbrev_attr
{
  unsigned long attribute;
  unsigned long form;
  int64_t implicit_const;
  struct abbrev_attr *next;
}
abbrev_attr;


typedef struct abbrev_entry
{
  unsigned long number;
  unsigned long tag;
  int children;
  struct abbrev_attr * first_attr;
  struct abbrev_attr * last_attr;
  struct abbrev_entry * next;
}
abbrev_entry;


typedef struct abbrev_list
{
  abbrev_entry * first_abbrev;
  abbrev_entry * last_abbrev;
  unsigned char * raw;
  struct abbrev_list * next;
  unsigned char * start_of_next_abbrevs;
}
abbrev_list;


static struct abbrev_list * abbrev_lists = 
# 812 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          ((void *)0)
# 812 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                              ;

typedef struct abbrev_map
{
  uint64_t start;
  uint64_t end;
  abbrev_list *list;
} abbrev_map;


static abbrev_map * cu_abbrev_map = 
# 822 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 822 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         ;
static unsigned long num_abbrev_map_entries = 0;
static unsigned long next_free_abbrev_map_entry = 0;




static void
record_abbrev_list_for_cu (uint64_t start, uint64_t end,
      abbrev_list *list, abbrev_list *free_list)
{
  if (free_list != 
# 833 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  ((void *)0)
# 833 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      )
    {
      list->next = abbrev_lists;
      abbrev_lists = list;
    }

  if (cu_abbrev_map == 
# 839 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                      ((void *)0)
# 839 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          )
    {
      num_abbrev_map_entries = 8;
      cu_abbrev_map = xmalloc (num_abbrev_map_entries * sizeof (* cu_abbrev_map));
    }
  else if (next_free_abbrev_map_entry == num_abbrev_map_entries)
    {
      num_abbrev_map_entries += 8;
      cu_abbrev_map = xrealloc (cu_abbrev_map, num_abbrev_map_entries * sizeof (* cu_abbrev_map));
    }

  cu_abbrev_map[next_free_abbrev_map_entry].start = start;
  cu_abbrev_map[next_free_abbrev_map_entry].end = end;
  cu_abbrev_map[next_free_abbrev_map_entry].list = list;
  next_free_abbrev_map_entry ++;
}

static abbrev_list *
free_abbrev_list (abbrev_list *list)
{
  abbrev_entry *abbrv = list->first_abbrev;

  while (abbrv)
    {
      abbrev_attr *attr = abbrv->first_attr;

      while (attr)
 {
   abbrev_attr *next_attr = attr->next;
   free (attr);
   attr = next_attr;
 }

      abbrev_entry *next_abbrev = abbrv->next;
      free (abbrv);
      abbrv = next_abbrev;
    }

  abbrev_list *next = list->next;
  free (list);
  return next;
}

static void
free_all_abbrevs (void)
{
  while (abbrev_lists)
    abbrev_lists = free_abbrev_list (abbrev_lists);

  free (cu_abbrev_map);
  cu_abbrev_map = 
# 889 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 ((void *)0)
# 889 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     ;
  next_free_abbrev_map_entry = 0;
}

static abbrev_list *
find_abbrev_list_by_raw_abbrev (unsigned char *raw)
{
  abbrev_list * list;

  for (list = abbrev_lists; list != 
# 898 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                   ((void *)0)
# 898 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       ; list = list->next)
    if (list->raw == raw)
      return list;

  return 
# 902 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 902 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ;
}






static abbrev_map *
find_abbrev_map_by_offset (uint64_t offset)
{
  unsigned long i;

  for (i = 0; i < next_free_abbrev_map_entry; i++)
    if (cu_abbrev_map[i].start <= offset
 && cu_abbrev_map[i].end > offset)
      return cu_abbrev_map + i;

  return 
# 920 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 920 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ;
}

static void
add_abbrev (unsigned long number,
     unsigned long tag,
     int children,
     abbrev_list * list)
{
  abbrev_entry * entry;

  entry = (abbrev_entry *) xmalloc (sizeof (*entry));

  entry->number = number;
  entry->tag = tag;
  entry->children = children;
  entry->first_attr = 
# 936 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 936 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;
  entry->last_attr = 
# 937 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 937 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;
  entry->next = 
# 938 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 938 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;

  
# 940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 list != 
# 940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 list != 
# 940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)) ; else __assert_fail (
# 940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "list != NULL"
# 940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 940, __extension__ __PRETTY_FUNCTION__); }))
# 940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      ;

  if (list->first_abbrev == 
# 942 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           ((void *)0)
# 942 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               )
    list->first_abbrev = entry;
  else
    list->last_abbrev->next = entry;

  list->last_abbrev = entry;
}

static void
add_abbrev_attr (unsigned long attribute,
   unsigned long form,
   int64_t implicit_const,
   abbrev_list *list)
{
  abbrev_attr *attr;

  attr = (abbrev_attr *) xmalloc (sizeof (*attr));

  attr->attribute = attribute;
  attr->form = form;
  attr->implicit_const = implicit_const;
  attr->next = 
# 963 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                        ((void *)0)
# 963 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            ;

  
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 list != 
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0) 
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 && list->last_abbrev != 
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 list != 
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0) 
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 && list->last_abbrev != 
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)) ; else __assert_fail (
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "list != NULL && list->last_abbrev != NULL"
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 965, __extension__ __PRETTY_FUNCTION__); }))
# 965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                   ;

  if (list->last_abbrev->first_attr == 
# 967 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                      ((void *)0)
# 967 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                          )
    list->last_abbrev->first_attr = attr;
  else
    list->last_abbrev->last_attr->next = attr;

  list->last_abbrev->last_attr = attr;
}




static abbrev_list *
process_abbrev_set (struct dwarf_section *section,
      unsigned char *start,
      unsigned char *end)
{
  abbrev_list *list = xmalloc (sizeof (*list));
  list->first_abbrev = 
# 984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                      ((void *)0)
# 984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          ;
  list->last_abbrev = 
# 985 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 985 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;
  list->raw = start;
  list->next = 
# 987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              ((void *)0)
# 987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  ;

  while (start < end)
    {
      unsigned long entry;
      unsigned long tag;
      unsigned long attribute;
      int children;

      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 996 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 996 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); start += _len; (entry) = _val; if ((entry) != _val) _status |= 2; report_leb_status (_status); } while (0);




      if (start == end || entry == 0)
 {
   list->start_of_next_abbrevs = start != end ? start : 
# 1003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                       ((void *)0)
# 1003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                           ;
   return list;
 }

      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 1007 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 1007 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); start += _len; (tag) = _val; if ((tag) != _val) _status |= 2; report_leb_status (_status); } while (0);
      if (start == end)
 return free_abbrev_list (list);

      children = *start++;

      add_abbrev (entry, tag, children, list);

      do
 {
   unsigned long form;

   int64_t implicit_const = -1;

   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 1021 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1021 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (attribute) = _val; if ((attribute) != _val) _status |= 2; report_leb_status (_status); } while (0);
   if (start == end)
     break;

   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 1025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (form) = _val; if ((form) != _val) _status |= 2; report_leb_status (_status); } while (0);
   if (start == end)
     break;

   if (form == DW_FORM_implicit_const)
     {
       do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 1031 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 1031 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (implicit_const) = _val; if ((implicit_const) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (start == end)
  break;
     }

   add_abbrev_attr (attribute, form, implicit_const, list);
 }
      while (attribute != 0);
    }


  error (gettext ("%s section not zero terminated\n"), section->name);

  return free_abbrev_list (list);
}
# 1055 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
static abbrev_list *
find_and_process_abbrev_set (struct dwarf_section *section,
        uint64_t abbrev_base,
        uint64_t abbrev_size,
        uint64_t abbrev_offset,
        abbrev_list **free_list)
{
  if (free_list)
    *free_list = 
# 1063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                ((void *)0)
# 1063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    ;

  if (abbrev_base >= section->size
      || abbrev_size > section->size - abbrev_base)
    {

      warn (gettext ("Debug info is corrupted, abbrev size (%#" 
# 1069 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 1069 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ")" " is larger than abbrev section size (%#" 
# 1069 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 1069 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ")\n")
                                                              ,
       abbrev_base + abbrev_size, section->size);
      return 
# 1072 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 1072 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }
  if (abbrev_offset >= abbrev_size)
    {
      warn (gettext ("Debug info is corrupted, abbrev offset (%#" 
# 1076 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 1076 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ")" " is larger than abbrev section size (%#" 
# 1076 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 1076 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ")\n")
                                                              ,
     abbrev_offset, abbrev_size);
      return 
# 1079 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 1079 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }

  unsigned char *start = section->start + abbrev_base + abbrev_offset;
  unsigned char *end = section->start + abbrev_base + abbrev_size;
  abbrev_list *list = 
# 1084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 1084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;
  if (free_list)
    list = find_abbrev_list_by_raw_abbrev (start);
  if (list == 
# 1087 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 1087 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 )
    {
      list = process_abbrev_set (section, start, end);
      if (free_list)
 *free_list = list;
    }
  return list;
}

static const char *
get_TAG_name (uint64_t tag)
{
  const char *name = 
# 1099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    ((void *)0)
# 1099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ;

  if ((unsigned int) tag == tag)
    name = get_DW_TAG_name ((unsigned int) tag);
  if (name == 
# 1103 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 1103 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 )
    {
      static char buffer[100];

      if (tag >= DW_TAG_lo_user && tag <= DW_TAG_hi_user)
 snprintf (buffer, sizeof (buffer),
    gettext ("User TAG value: %#" 
# 1109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   "l" "x"
# 1109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ), tag);
      else
 snprintf (buffer, sizeof (buffer),
    gettext ("Unknown TAG value: %#" 
# 1112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   "l" "x"
# 1112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ), tag);
      return buffer;
    }

  return name;
}

static const char *
get_FORM_name (unsigned long form)
{
  const char *name = 
# 1122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    ((void *)0)
# 1122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ;

  if (form == 0)
    return "DW_FORM value: 0";

  if ((unsigned int) form == form)
    name = get_DW_FORM_name ((unsigned int) form);
  if (name == 
# 1129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 1129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 )
    {
      static char buffer[100];

      snprintf (buffer, sizeof (buffer), gettext ("Unknown FORM value: %lx"), form);
      return buffer;
    }

  return name;
}

static const char *
get_IDX_name (unsigned long idx)
{
  const char *name = 
# 1143 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    ((void *)0)
# 1143 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ;

  if ((unsigned int) idx == idx)
    name = get_DW_IDX_name ((unsigned int) idx);
  if (name == 
# 1147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 1147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 )
    {
      static char buffer[100];

      snprintf (buffer, sizeof (buffer), gettext ("Unknown IDX value: %lx"), idx);
      return buffer;
    }

  return name;
}

static unsigned char *
display_block (unsigned char *data,
        uint64_t length,
        const unsigned char * const end, char delimiter)
{
  size_t maxlen;

  printf (gettext ("%c%" 
# 1165 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         "l" "u" 
# 1165 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
         " byte block: "), delimiter, length);
  if (data > end)
    return (unsigned char *) end;

  maxlen = end - data;
  length = length > maxlen ? maxlen : length;

  while (length --)
    printf ("%" 
# 1173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               "l" "x" 
# 1173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      " ", byte_get (data++, 1));

  return data;
}

static int
decode_location_expression (unsigned char * data,
       unsigned int pointer_size,
       unsigned int offset_size,
       int dwarf_version,
       uint64_t length,
       uint64_t cu_offset,
       struct dwarf_section * section)
{
  unsigned op;
  uint64_t uvalue;
  int64_t svalue;
  unsigned char *end = data + length;
  int need_frame_base = 0;

  while (data < end)
    {
      op = *data++;

      switch (op)
 {
 case DW_OP_addr:
   do { size_t amount = (pointer_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1200 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1200 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1200 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1200 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1200 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1200 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1200 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1200, __extension__ __PRETTY_FUNCTION__); }))
# 1200 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1200 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1200 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_addr: %" 
# 1201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          "l" "x"
# 1201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                , uvalue);
   break;
 case DW_OP_deref:
   printf ("DW_OP_deref");
   break;
 case DW_OP_const1u:
   do { size_t amount = (1); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1207, __extension__ __PRETTY_FUNCTION__); }))
# 1207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_const1u: %" 
# 1208 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             "l" "u"
# 1208 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , uvalue);
   break;
 case DW_OP_const1s:
   do { size_t amount = (1); if (sizeof (svalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (svalue)); amount = sizeof (svalue); } if (1) 
# 1211 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1211 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1211 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1211 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1211 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1211 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1211 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1211, __extension__ __PRETTY_FUNCTION__); }))
# 1211 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (svalue) = 0; else (svalue) = (byte_get_signed) ((data), amount); if (
# 1211 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1211 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_const1s: %" 
# 1212 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             "l" "d"
# 1212 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , svalue);
   break;
 case DW_OP_const2u:
   do { size_t amount = (2); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1215, __extension__ __PRETTY_FUNCTION__); }))
# 1215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_const2u: %" 
# 1216 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             "l" "u"
# 1216 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , uvalue);
   break;
 case DW_OP_const2s:
   do { size_t amount = (2); if (sizeof (svalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (svalue)); amount = sizeof (svalue); } if (1) 
# 1219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1219, __extension__ __PRETTY_FUNCTION__); }))
# 1219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (svalue) = 0; else (svalue) = (byte_get_signed) ((data), amount); if (
# 1219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_const2s: %" 
# 1220 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             "l" "d"
# 1220 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , svalue);
   break;
 case DW_OP_const4u:
   do { size_t amount = (4); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1223 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1223 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1223 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1223 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1223 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1223 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1223 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1223, __extension__ __PRETTY_FUNCTION__); }))
# 1223 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1223 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1223 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_const4u: %" 
# 1224 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             "l" "u"
# 1224 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , uvalue);
   break;
 case DW_OP_const4s:
   do { size_t amount = (4); if (sizeof (svalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (svalue)); amount = sizeof (svalue); } if (1) 
# 1227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1227, __extension__ __PRETTY_FUNCTION__); }))
# 1227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (svalue) = 0; else (svalue) = (byte_get_signed) ((data), amount); if (
# 1227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_const4s: %" 
# 1228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             "l" "d"
# 1228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , svalue);
   break;
 case DW_OP_const8u:
   do { size_t amount = (8); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1231, __extension__ __PRETTY_FUNCTION__); }))
# 1231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_const8u: %" 
# 1232 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             "l" "u"
# 1232 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , uvalue);
   break;
 case DW_OP_const8s:
   do { size_t amount = (8); if (sizeof (svalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (svalue)); amount = sizeof (svalue); } if (1) 
# 1235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1235, __extension__ __PRETTY_FUNCTION__); }))
# 1235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (svalue) = 0; else (svalue) = (byte_get_signed) ((data), amount); if (
# 1235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_const8s: %" 
# 1236 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             "l" "d"
# 1236 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , svalue);
   break;
 case DW_OP_constu:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1239 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1239 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("DW_OP_constu: %" 
# 1240 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            "l" "u"
# 1240 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  , uvalue);
   break;
 case DW_OP_consts:
   do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1243 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1243 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (svalue) = _val; if ((svalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("DW_OP_consts: %" 
# 1244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            "l" "d"
# 1244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  , svalue);
   break;
 case DW_OP_dup:
   printf ("DW_OP_dup");
   break;
 case DW_OP_drop:
   printf ("DW_OP_drop");
   break;
 case DW_OP_over:
   printf ("DW_OP_over");
   break;
 case DW_OP_pick:
   do { size_t amount = (1); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1256, __extension__ __PRETTY_FUNCTION__); }))
# 1256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_pick: %" 
# 1257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          "l" "u"
# 1257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                , uvalue);
   break;
 case DW_OP_swap:
   printf ("DW_OP_swap");
   break;
 case DW_OP_rot:
   printf ("DW_OP_rot");
   break;
 case DW_OP_xderef:
   printf ("DW_OP_xderef");
   break;
 case DW_OP_abs:
   printf ("DW_OP_abs");
   break;
 case DW_OP_and:
   printf ("DW_OP_and");
   break;
 case DW_OP_div:
   printf ("DW_OP_div");
   break;
 case DW_OP_minus:
   printf ("DW_OP_minus");
   break;
 case DW_OP_mod:
   printf ("DW_OP_mod");
   break;
 case DW_OP_mul:
   printf ("DW_OP_mul");
   break;
 case DW_OP_neg:
   printf ("DW_OP_neg");
   break;
 case DW_OP_not:
   printf ("DW_OP_not");
   break;
 case DW_OP_or:
   printf ("DW_OP_or");
   break;
 case DW_OP_plus:
   printf ("DW_OP_plus");
   break;
 case DW_OP_plus_uconst:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1299 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1299 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("DW_OP_plus_uconst: %" 
# 1300 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 "l" "u"
# 1300 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , uvalue);
   break;
 case DW_OP_shl:
   printf ("DW_OP_shl");
   break;
 case DW_OP_shr:
   printf ("DW_OP_shr");
   break;
 case DW_OP_shra:
   printf ("DW_OP_shra");
   break;
 case DW_OP_xor:
   printf ("DW_OP_xor");
   break;
 case DW_OP_bra:
   do { size_t amount = (2); if (sizeof (svalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (svalue)); amount = sizeof (svalue); } if (1) 
# 1315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1315, __extension__ __PRETTY_FUNCTION__); }))
# 1315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (svalue) = 0; else (svalue) = (byte_get_signed) ((data), amount); if (
# 1315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_bra: %" 
# 1316 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         "l" "d"
# 1316 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               , svalue);
   break;
 case DW_OP_eq:
   printf ("DW_OP_eq");
   break;
 case DW_OP_ge:
   printf ("DW_OP_ge");
   break;
 case DW_OP_gt:
   printf ("DW_OP_gt");
   break;
 case DW_OP_le:
   printf ("DW_OP_le");
   break;
 case DW_OP_lt:
   printf ("DW_OP_lt");
   break;
 case DW_OP_ne:
   printf ("DW_OP_ne");
   break;
 case DW_OP_skip:
   do { size_t amount = (2); if (sizeof (svalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (svalue)); amount = sizeof (svalue); } if (1) 
# 1337 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1337 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1337 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1337 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1337 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1337 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1337 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1337, __extension__ __PRETTY_FUNCTION__); }))
# 1337 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (svalue) = 0; else (svalue) = (byte_get_signed) ((data), amount); if (
# 1337 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1337 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_skip: %" 
# 1338 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          "l" "d"
# 1338 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                , svalue);
   break;

 case DW_OP_lit0:
 case DW_OP_lit1:
 case DW_OP_lit2:
 case DW_OP_lit3:
 case DW_OP_lit4:
 case DW_OP_lit5:
 case DW_OP_lit6:
 case DW_OP_lit7:
 case DW_OP_lit8:
 case DW_OP_lit9:
 case DW_OP_lit10:
 case DW_OP_lit11:
 case DW_OP_lit12:
 case DW_OP_lit13:
 case DW_OP_lit14:
 case DW_OP_lit15:
 case DW_OP_lit16:
 case DW_OP_lit17:
 case DW_OP_lit18:
 case DW_OP_lit19:
 case DW_OP_lit20:
 case DW_OP_lit21:
 case DW_OP_lit22:
 case DW_OP_lit23:
 case DW_OP_lit24:
 case DW_OP_lit25:
 case DW_OP_lit26:
 case DW_OP_lit27:
 case DW_OP_lit28:
 case DW_OP_lit29:
 case DW_OP_lit30:
 case DW_OP_lit31:
   printf ("DW_OP_lit%d", op - DW_OP_lit0);
   break;

 case DW_OP_reg0:
 case DW_OP_reg1:
 case DW_OP_reg2:
 case DW_OP_reg3:
 case DW_OP_reg4:
 case DW_OP_reg5:
 case DW_OP_reg6:
 case DW_OP_reg7:
 case DW_OP_reg8:
 case DW_OP_reg9:
 case DW_OP_reg10:
 case DW_OP_reg11:
 case DW_OP_reg12:
 case DW_OP_reg13:
 case DW_OP_reg14:
 case DW_OP_reg15:
 case DW_OP_reg16:
 case DW_OP_reg17:
 case DW_OP_reg18:
 case DW_OP_reg19:
 case DW_OP_reg20:
 case DW_OP_reg21:
 case DW_OP_reg22:
 case DW_OP_reg23:
 case DW_OP_reg24:
 case DW_OP_reg25:
 case DW_OP_reg26:
 case DW_OP_reg27:
 case DW_OP_reg28:
 case DW_OP_reg29:
 case DW_OP_reg30:
 case DW_OP_reg31:
   printf ("DW_OP_reg%d (%s)", op - DW_OP_reg0,
    regname (op - DW_OP_reg0, 1));
   break;

 case DW_OP_breg0:
 case DW_OP_breg1:
 case DW_OP_breg2:
 case DW_OP_breg3:
 case DW_OP_breg4:
 case DW_OP_breg5:
 case DW_OP_breg6:
 case DW_OP_breg7:
 case DW_OP_breg8:
 case DW_OP_breg9:
 case DW_OP_breg10:
 case DW_OP_breg11:
 case DW_OP_breg12:
 case DW_OP_breg13:
 case DW_OP_breg14:
 case DW_OP_breg15:
 case DW_OP_breg16:
 case DW_OP_breg17:
 case DW_OP_breg18:
 case DW_OP_breg19:
 case DW_OP_breg20:
 case DW_OP_breg21:
 case DW_OP_breg22:
 case DW_OP_breg23:
 case DW_OP_breg24:
 case DW_OP_breg25:
 case DW_OP_breg26:
 case DW_OP_breg27:
 case DW_OP_breg28:
 case DW_OP_breg29:
 case DW_OP_breg30:
 case DW_OP_breg31:
   do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1444 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1444 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (svalue) = _val; if ((svalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("DW_OP_breg%d (%s): %" 
# 1445 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 "l" "d"
# 1445 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       ,
    op - DW_OP_breg0, regname (op - DW_OP_breg0, 1), svalue);
   break;

 case DW_OP_regx:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1450 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1450 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("DW_OP_regx: %" 
# 1451 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          "l" "u" 
# 1451 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                 " (%s)",
    uvalue, regname (uvalue, 1));
   break;
 case DW_OP_fbreg:
   need_frame_base = 1;
   do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1456 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1456 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (svalue) = _val; if ((svalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("DW_OP_fbreg: %" 
# 1457 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           "l" "d"
# 1457 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                 , svalue);
   break;
 case DW_OP_bregx:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1460 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1460 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (svalue) = _val; if ((svalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("DW_OP_bregx: %" 
# 1462 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           "l" "u" 
# 1462 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  " (%s) %" 
# 1462 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                            "l" "d"
# 1462 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                  ,
    uvalue, regname (uvalue, 1), svalue);
   break;
 case DW_OP_piece:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("DW_OP_piece: %" 
# 1467 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           "l" "u"
# 1467 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                 , uvalue);
   break;
 case DW_OP_deref_size:
   do { size_t amount = (1); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1470 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1470 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1470 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1470 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1470 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1470 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1470 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1470, __extension__ __PRETTY_FUNCTION__); }))
# 1470 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1470 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1470 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_deref_size: %" 
# 1471 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                "l" "u"
# 1471 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      , uvalue);
   break;
 case DW_OP_xderef_size:
   do { size_t amount = (1); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1474, __extension__ __PRETTY_FUNCTION__); }))
# 1474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1474 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_xderef_size: %" 
# 1475 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 "l" "u"
# 1475 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , uvalue);
   break;
 case DW_OP_nop:
   printf ("DW_OP_nop");
   break;


 case DW_OP_push_object_address:
   printf ("DW_OP_push_object_address");
   break;
 case DW_OP_call2:


   do { size_t amount = (2); if (sizeof (svalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (svalue)); amount = sizeof (svalue); } if (1) 
# 1488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1488, __extension__ __PRETTY_FUNCTION__); }))
# 1488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (svalue) = 0; else (svalue) = (byte_get_signed) ((data), amount); if (
# 1488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_call2: <%#" 
# 1489 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             "l" "x" 
# 1489 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                    ">", svalue + cu_offset);
   break;
 case DW_OP_call4:


   do { size_t amount = (4); if (sizeof (svalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (svalue)); amount = sizeof (svalue); } if (1) 
# 1494 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1494 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1494 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1494 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1494 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1494 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1494 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1494, __extension__ __PRETTY_FUNCTION__); }))
# 1494 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (svalue) = 0; else (svalue) = (byte_get_signed) ((data), amount); if (
# 1494 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1494 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_call4: <%#" 
# 1495 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             "l" "x" 
# 1495 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                    ">", svalue + cu_offset);
   break;
 case DW_OP_call_ref:


   if (dwarf_version == -1)
     {
       printf (gettext ("(DW_OP_call_ref in frame info)"));

       return need_frame_base;
     }
   if (dwarf_version == 2)
     {
       do { size_t amount = (pointer_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1508 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 1508 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1508 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 1508 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1508 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 1508 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(data) <= (end)"
# 1508 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1508, __extension__ __PRETTY_FUNCTION__); }))
# 1508 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1508 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 1508 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (data) += amount; } while (0);
     }
   else
     {
       do { size_t amount = (offset_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 1512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 1512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 1512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(data) <= (end)"
# 1512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1512, __extension__ __PRETTY_FUNCTION__); }))
# 1512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 1512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (data) += amount; } while (0);
     }
   printf ("DW_OP_call_ref: <%#" 
# 1514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                "l" "x" 
# 1514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       ">", uvalue);
   break;
 case DW_OP_form_tls_address:
   printf ("DW_OP_form_tls_address");
   break;
 case DW_OP_call_frame_cfa:
   printf ("DW_OP_call_frame_cfa");
   break;
 case DW_OP_bit_piece:
   printf ("DW_OP_bit_piece: ");
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf (gettext ("size: %" 
# 1525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "u" 
# 1525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " "), uvalue);
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1526 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1526 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf (gettext ("offset: %" 
# 1527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "u" 
# 1527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " "), uvalue);
   break;


 case DW_OP_stack_value:
   printf ("DW_OP_stack_value");
   break;

 case DW_OP_implicit_value:
   printf ("DW_OP_implicit_value");
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1537 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1537 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   data = display_block (data, uvalue, end, ' ');
   break;


 case DW_OP_GNU_push_tls_address:
   printf (gettext ("DW_OP_GNU_push_tls_address or DW_OP_HP_unknown"));
   break;
 case DW_OP_GNU_uninit:
   printf ("DW_OP_GNU_uninit");

   break;
 case DW_OP_GNU_encoded_addr:
   {
     int encoding = 0;
     uint64_t addr;

     if (data < end)
       encoding = *data++;
     addr = get_encoded_value (&data, encoding, section, end);

     printf ("DW_OP_GNU_encoded_addr: fmt:%02x addr:", encoding);
     print_hex_ns (addr, pointer_size);
   }
   break;
 case DW_OP_implicit_pointer:
 case DW_OP_GNU_implicit_pointer:


   if (dwarf_version == -1)
     {
       printf (gettext ("(%s in frame info)"),
        (op == DW_OP_implicit_pointer
         ? "DW_OP_implicit_pointer"
         : "DW_OP_GNU_implicit_pointer"));

       return need_frame_base;
     }
   if (dwarf_version == 2)
     {
       do { size_t amount = (pointer_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 1577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 1577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 1577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(data) <= (end)"
# 1577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1577, __extension__ __PRETTY_FUNCTION__); }))
# 1577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 1577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (data) += amount; } while (0);
     }
   else
     {
       do { size_t amount = (offset_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1581 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 1581 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1581 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 1581 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1581 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 1581 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(data) <= (end)"
# 1581 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1581, __extension__ __PRETTY_FUNCTION__); }))
# 1581 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1581 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 1581 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (data) += amount; } while (0);
     }
   do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1583 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1583 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (svalue) = _val; if ((svalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("%s: <%#" 
# 1584 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    "l" "x" 
# 1584 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           "> %" 
# 1584 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 "l" "d"
# 1584 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       ,
    (op == DW_OP_implicit_pointer
     ? "DW_OP_implicit_pointer" : "DW_OP_GNU_implicit_pointer"),
    uvalue, svalue);
   break;
 case DW_OP_entry_value:
 case DW_OP_GNU_entry_value:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1591 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1591 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);

   if (uvalue > (size_t) (end - data))
     uvalue = end - data;
   printf ("%s: (", (op == DW_OP_entry_value ? "DW_OP_entry_value"
          : "DW_OP_GNU_entry_value"));
   if (decode_location_expression (data, pointer_size, offset_size,
       dwarf_version, uvalue,
       cu_offset, section))
     need_frame_base = 1;
   putchar (')');
   data += uvalue;
   break;
 case DW_OP_const_type:
 case DW_OP_GNU_const_type:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("%s: <%#" 
# 1607 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    "l" "x" 
# 1607 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           "> ",
    (op == DW_OP_const_type ? "DW_OP_const_type"
       : "DW_OP_GNU_const_type"),
    cu_offset + uvalue);
   do { size_t amount = (1); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1611 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1611 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1611 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1611 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1611 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1611 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1611 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1611, __extension__ __PRETTY_FUNCTION__); }))
# 1611 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1611 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1611 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   data = display_block (data, uvalue, end, ' ');
   break;
 case DW_OP_regval_type:
 case DW_OP_GNU_regval_type:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1616 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1616 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("%s: %" 
# 1617 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  "l" "u" 
# 1617 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         " (%s)",
    (op == DW_OP_regval_type ? "DW_OP_regval_type"
        : "DW_OP_GNU_regval_type"),
    uvalue, regname (uvalue, 1));
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf (" <%#" 
# 1622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 "l" "x" 
# 1622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ">", cu_offset + uvalue);
   break;
 case DW_OP_deref_type:
 case DW_OP_GNU_deref_type:
   do { size_t amount = (1); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1626, __extension__ __PRETTY_FUNCTION__); }))
# 1626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("%s: %" 
# 1627 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  "l" "d"
# 1627 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ,
    (op == DW_OP_deref_type ? "DW_OP_deref_type"
       : "DW_OP_GNU_deref_type"),
    uvalue);
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1631 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1631 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf (" <%#" 
# 1632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 "l" "x" 
# 1632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ">", cu_offset + uvalue);
   break;
 case DW_OP_convert:
 case DW_OP_GNU_convert:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1636 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1636 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("%s <%#" 
# 1637 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   "l" "x" 
# 1637 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          ">",
    (op == DW_OP_convert ? "DW_OP_convert" : "DW_OP_GNU_convert"),
    uvalue ? cu_offset + uvalue : uvalue);
   break;
 case DW_OP_reinterpret:
 case DW_OP_GNU_reinterpret:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1643 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1643 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("%s <%#" 
# 1644 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   "l" "x" 
# 1644 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          ">",
    (op == DW_OP_reinterpret ? "DW_OP_reinterpret"
        : "DW_OP_GNU_reinterpret"),
    uvalue ? cu_offset + uvalue : uvalue);
   break;
 case DW_OP_GNU_parameter_ref:
   do { size_t amount = (4); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 1650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 1650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (end)
# 1650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 1650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (end)"
# 1650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1650, __extension__ __PRETTY_FUNCTION__); }))
# 1650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 1650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);
   printf ("DW_OP_GNU_parameter_ref: <%#" 
# 1651 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                         "l" "x" 
# 1651 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                ">",
    cu_offset + uvalue);
   break;
 case DW_OP_addrx:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1655 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1655 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("DW_OP_addrx <%#" 
# 1656 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            "l" "x" 
# 1656 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   ">", uvalue);
   break;
 case DW_OP_GNU_addr_index:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("DW_OP_GNU_addr_index <%#" 
# 1660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     "l" "x" 
# 1660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                            ">", uvalue);
   break;
 case DW_OP_GNU_const_index:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1663 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 1663 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
   printf ("DW_OP_GNU_const_index <%#" 
# 1664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                      "l" "x" 
# 1664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                             ">", uvalue);
   break;
 case DW_OP_GNU_variable_value:


   if (dwarf_version == -1)
     {
       printf (gettext ("(DW_OP_GNU_variable_value in frame info)"));

       return need_frame_base;
     }
   if (dwarf_version == 2)
     {
       do { size_t amount = (pointer_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 1677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 1677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 1677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(data) <= (end)"
# 1677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1677, __extension__ __PRETTY_FUNCTION__); }))
# 1677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 1677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (data) += amount; } while (0);
     }
   else
     {
       do { size_t amount = (offset_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1681 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 1681 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1681 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 1681 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 1681 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 1681 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(data) <= (end)"
# 1681 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1681, __extension__ __PRETTY_FUNCTION__); }))
# 1681 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1681 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 1681 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (data) += amount; } while (0);
     }
   printf ("DW_OP_GNU_variable_value: <%#" 
# 1683 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          "l" "x" 
# 1683 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                 ">", uvalue);
   break;


 case DW_OP_HP_is_value:
   printf ("DW_OP_HP_is_value");

   break;
 case DW_OP_HP_fltconst4:
   printf ("DW_OP_HP_fltconst4");

   break;
 case DW_OP_HP_fltconst8:
   printf ("DW_OP_HP_fltconst8");

   break;
 case DW_OP_HP_mod_range:
   printf ("DW_OP_HP_mod_range");

   break;
 case DW_OP_HP_unmod_range:
   printf ("DW_OP_HP_unmod_range");

   break;
 case DW_OP_HP_tls:
   printf ("DW_OP_HP_tls");

   break;


 case DW_OP_PGI_omp_thread_num:




   printf ("DW_OP_PGI_omp_thread_num");
   break;

 default:
   if (op >= DW_OP_lo_user
       && op <= DW_OP_hi_user)
     printf (gettext ("(User defined location op %#x)"), op);
   else
     printf (gettext ("(Unknown location op %#x)"), op);

   return need_frame_base;
 }


      if (data < end)
 printf ("; ");
    }

  return need_frame_base;
}




static struct cu_tu_set *
find_cu_tu_set_v2 (uint64_t cu_offset, int do_types)
{
  struct cu_tu_set *p;
  unsigned int nsets;
  unsigned int dw_sect;

  if (do_types)
    {
      p = tu_sets;
      nsets = tu_count;
      dw_sect = DW_SECT_TYPES;
    }
  else
    {
      p = cu_sets;
      nsets = cu_count;
      dw_sect = DW_SECT_INFO;
    }
  while (nsets > 0)
    {
      if (p->section_offsets [dw_sect] == cu_offset)
 return p;
      p++;
      nsets--;
    }
  return 
# 1768 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 1768 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ;
}

static const char *
fetch_alt_indirect_string (uint64_t offset)
{
  separate_info * i;

  if (! do_follow_links)
    return "";

  if (first_separate_info == 
# 1779 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            ((void *)0)
# 1779 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                )
    return gettext ("<no links available>");

  for (i = first_separate_info; i != 
# 1782 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                    ((void *)0)
# 1782 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                        ; i = i->next)
    {
      struct dwarf_section * section;
      const char * ret;

      if (! load_debug_section (separate_debug_str, i->handle))
 continue;

      section = &debug_displays [separate_debug_str].section;

      if (section->start == 
# 1792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           ((void *)0)
# 1792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               )
 continue;

      if (offset >= section->size)
 continue;

      ret = (const char *) (section->start + offset);



      if (strnlen ((const char *) ret, section->size - offset)
   == section->size - offset)
 return gettext ("<no NUL byte at end of alt .debug_str section>");

      return ret;
    }

  warn (gettext ("DW_FORM_GNU_strp_alt offset (%#" 
# 1809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       "l" "x" 
# 1809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ")" " too big or no string sections available\n")
                                                , offset);
  return gettext ("<offset is too big>");
}

static const char *
get_AT_name (unsigned long attribute)
{
  const char *name;

  if (attribute == 0)
    return "DW_AT value: 0";


  if (attribute == DW_AT_MIPS_fde)
    return "DW_AT_MIPS_fde or DW_AT_HP_unmodifiable";

  name = get_DW_AT_name (attribute);

  if (name == 
# 1828 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 1828 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 )
    {
      static char buffer[100];

      snprintf (buffer, sizeof (buffer), gettext ("Unknown AT value: %lx"),
  attribute);
      return buffer;
    }

  return name;
}

static void
add_dwo_info (const char * value, uint64_t cu_offset, dwo_type type)
{
  dwo_info * dwinfo = xmalloc (sizeof * dwinfo);

  dwinfo->type = type;
  dwinfo->value = value;
  dwinfo->cu_offset = cu_offset;
  dwinfo->next = first_dwo_info;
  first_dwo_info = dwinfo;
}

static void
add_dwo_name (const char * name, uint64_t cu_offset)
{
  add_dwo_info (name, cu_offset, DWO_NAME);
}

static void
add_dwo_dir (const char * dir, uint64_t cu_offset)
{
  add_dwo_info (dir, cu_offset, DWO_DIR);
}

static void
add_dwo_id (const char * id, uint64_t cu_offset)
{
  add_dwo_info (id, cu_offset, DWO_ID);
}

static void
free_dwo_info (void)
{
  dwo_info * dwinfo;
  dwo_info * next;

  for (dwinfo = first_dwo_info; dwinfo != 
# 1876 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                         ((void *)0)
# 1876 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                             ; dwinfo = next)
    {
      next = dwinfo->next;
      free (dwinfo);
    }
  first_dwo_info = 
# 1881 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  ((void *)0)
# 1881 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      ;
}




static inline uint64_t
check_uvalue (const unsigned char *start,
       uint64_t uvalue,
       const unsigned char *end)
{
  uint64_t max_uvalue = end - start;



  if (uvalue > max_uvalue)
    {
      warn (gettext ("Corrupt attribute block length: %#" 
# 1898 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 1898 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           "\n"), uvalue);
      uvalue = max_uvalue;
    }

  return uvalue;
}

static unsigned char *
skip_attr_bytes (unsigned long form,
   unsigned char *data,
   unsigned char *end,
   uint64_t pointer_size,
   uint64_t offset_size,
   int dwarf_version,
   uint64_t *value_return)
{
  int64_t svalue;
  uint64_t uvalue = 0;
  uint64_t inc = 0;

  * value_return = 0;

  switch (form)
    {
    case DW_FORM_ref_addr:
      if (dwarf_version == 2)
 do { size_t amount = (pointer_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1924 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void) sizeof ((
# 1924 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(data) <= (end)
# 1924 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ? 1 : 0), __extension__ ({ if (
# 1924 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(data) <= (end)
# 1924 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ; else __assert_fail (
# 1924 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
"(data) <= (end)"
# 1924 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
, "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1924, __extension__ __PRETTY_FUNCTION__); }))
# 1924 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1924 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
1
# 1924 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
) (data) += amount; } while (0);
      else if (dwarf_version > 2)
 do { size_t amount = (offset_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1926 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void) sizeof ((
# 1926 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(data) <= (end)
# 1926 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ? 1 : 0), __extension__ ({ if (
# 1926 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(data) <= (end)
# 1926 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ; else __assert_fail (
# 1926 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
"(data) <= (end)"
# 1926 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
, "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1926, __extension__ __PRETTY_FUNCTION__); }))
# 1926 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1926 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
1
# 1926 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
) (data) += amount; } while (0);
      else
 return 
# 1928 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 1928 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ;
      break;

    case DW_FORM_addr:
      do { size_t amount = (pointer_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1932 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 1932 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1932 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 1932 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1932 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 1932 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 1932 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1932, __extension__ __PRETTY_FUNCTION__); }))
# 1932 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1932 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 1932 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_strp:
    case DW_FORM_line_strp:
    case DW_FORM_sec_offset:
    case DW_FORM_GNU_ref_alt:
    case DW_FORM_GNU_strp_alt:
      do { size_t amount = (offset_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 1940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 1940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 1940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 1940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1940, __extension__ __PRETTY_FUNCTION__); }))
# 1940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 1940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_flag_present:
      uvalue = 1;
      break;

    case DW_FORM_ref1:
    case DW_FORM_flag:
    case DW_FORM_data1:
    case DW_FORM_strx1:
    case DW_FORM_addrx1:
      do { size_t amount = (1); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1952 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 1952 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1952 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 1952 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1952 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 1952 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 1952 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1952, __extension__ __PRETTY_FUNCTION__); }))
# 1952 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1952 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 1952 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_strx3:
    case DW_FORM_addrx3:
      do { size_t amount = (3); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 1957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 1957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 1957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 1957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1957, __extension__ __PRETTY_FUNCTION__); }))
# 1957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 1957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_ref2:
    case DW_FORM_data2:
    case DW_FORM_strx2:
    case DW_FORM_addrx2:
      do { size_t amount = (2); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1964 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 1964 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1964 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 1964 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1964 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 1964 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 1964 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1964, __extension__ __PRETTY_FUNCTION__); }))
# 1964 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1964 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 1964 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_ref4:
    case DW_FORM_data4:
    case DW_FORM_strx4:
    case DW_FORM_addrx4:
      do { size_t amount = (4); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1971 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 1971 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1971 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 1971 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1971 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 1971 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 1971 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1971, __extension__ __PRETTY_FUNCTION__); }))
# 1971 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1971 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 1971 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_sdata:
      do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1975 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 1975 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (svalue) = _val; if ((svalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
      uvalue = svalue;
      break;

    case DW_FORM_ref_udata:
    case DW_FORM_udata:
    case DW_FORM_GNU_str_index:
    case DW_FORM_strx:
    case DW_FORM_GNU_addr_index:
    case DW_FORM_addrx:
    case DW_FORM_loclistx:
    case DW_FORM_rnglistx:
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 1987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 1987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
      break;

    case DW_FORM_ref8:
      do { size_t amount = (8); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 1991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 1991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 1991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 1991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 1991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 1991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 1991, __extension__ __PRETTY_FUNCTION__); }))
# 1991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 1991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 1991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_data8:
    case DW_FORM_ref_sig8:
      inc = 8;
      break;

    case DW_FORM_data16:
      inc = 16;
      break;

    case DW_FORM_string:
      inc = strnlen ((char *) data, end - data) + 1;
      break;

    case DW_FORM_block:
    case DW_FORM_exprloc:
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 2009 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 2009 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
      inc = uvalue;
      break;

    case DW_FORM_block1:
      do { size_t amount = (1); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2014, __extension__ __PRETTY_FUNCTION__); }))
# 2014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      inc = uvalue;
      break;

    case DW_FORM_block2:
      do { size_t amount = (2); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2019, __extension__ __PRETTY_FUNCTION__); }))
# 2019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      inc = uvalue;
      break;

    case DW_FORM_block4:
      do { size_t amount = (4); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2024, __extension__ __PRETTY_FUNCTION__); }))
# 2024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      inc = uvalue;
      break;

    case DW_FORM_indirect:
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 2029 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 2029 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (form) = _val; if ((form) != _val) _status |= 2; report_leb_status (_status); } while (0);
      if (form == DW_FORM_implicit_const)
 do { unsigned int _len; read_leb128 (data, end, 
# 2031 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
0
# 2031 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
, &_len, 
# 2031 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void *)0)
# 2031 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
); data += _len; } while (0);
      return skip_attr_bytes (form, data, end, pointer_size, offset_size,
         dwarf_version, value_return);

    default:
      return 
# 2036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 2036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }

  * value_return = uvalue;
  if (inc <= (size_t) (end - data))
    data += inc;
  else
    data = end;
  return data;
}




static abbrev_entry *
get_type_abbrev_from_form (unsigned long form,
      unsigned long uvalue,
      uint64_t cu_offset,
      unsigned char *cu_end,
      const struct dwarf_section *section,
      unsigned long *abbrev_num_return,
      unsigned char **data_return,
      abbrev_map **map_return)
{
  unsigned long abbrev_number;
  abbrev_map * map;
  abbrev_entry * entry;
  unsigned char * data;

  if (abbrev_num_return != 
# 2065 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          ((void *)0)
# 2065 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                              )
    * abbrev_num_return = 0;
  if (data_return != 
# 2067 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    ((void *)0)
# 2067 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        )
    * data_return = 
# 2068 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 2068 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       ;

  switch (form)
    {
    case DW_FORM_GNU_ref_alt:
    case DW_FORM_ref_sig8:

      return 
# 2075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 2075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;

    case DW_FORM_ref_addr:
      if (uvalue >= section->size)
 {
   warn (gettext ("Unable to resolve ref_addr form: uvalue %lx " "> section size %" 
# 2080 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 2080 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " (%s)\n")
                                        ,
  uvalue, section->size, section->name);
   return 
# 2083 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         ((void *)0)
# 2083 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             ;
 }
      break;

    case DW_FORM_ref_sup4:
    case DW_FORM_ref_sup8:
      break;

    case DW_FORM_ref1:
    case DW_FORM_ref2:
    case DW_FORM_ref4:
    case DW_FORM_ref8:
    case DW_FORM_ref_udata:
      if (uvalue + cu_offset < uvalue
   || uvalue + cu_offset > (size_t) (cu_end - section->start))
 {
   warn (gettext ("Unable to resolve ref form: uvalue %lx + cu_offset %" 
# 2099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 2099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " > CU size %tx\n")
                       ,
  uvalue, cu_offset, cu_end - section->start);
   return 
# 2102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         ((void *)0)
# 2102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             ;
 }
      uvalue += cu_offset;
      break;



    default:
      warn (gettext ("Unexpected form %lx encountered whilst finding abbreviation for type\n"), form);
      return 
# 2111 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 2111 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }

  data = (unsigned char *) section->start + uvalue;
  map = find_abbrev_map_by_offset (uvalue);

  if (map == 
# 2117 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 2117 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                )
    {
      warn (gettext ("Unable to find abbreviations for CU offset %#lx\n"), uvalue);
      return 
# 2120 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 2120 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }
  if (map->list == 
# 2122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  ((void *)0)
# 2122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      )
    {
      warn (gettext ("Empty abbreviation list encountered for CU offset %lx\n"), uvalue);
      return 
# 2125 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 2125 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }

  if (map_return != 
# 2128 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 2128 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       )
    {
      if (form == DW_FORM_ref_addr)
 *map_return = map;
      else
 *map_return = 
# 2133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              ((void *)0)
# 2133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  ;
    }

  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, section->start + section->size, 
# 2136 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 2136 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (abbrev_number) = _val; if ((abbrev_number) != _val) _status |= 2; report_leb_status (_status); } while (0);

  for (entry = map->list->first_abbrev; entry != 
# 2138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                ((void *)0)
# 2138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                    ; entry = entry->next)
    if (entry->number == abbrev_number)
      break;

  if (abbrev_num_return != 
# 2142 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          ((void *)0)
# 2142 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                              )
    * abbrev_num_return = abbrev_number;

  if (data_return != 
# 2145 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    ((void *)0)
# 2145 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        )
    * data_return = data;

  if (entry == 
# 2148 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              ((void *)0)
# 2148 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  )
    warn (gettext ("Unable to find entry for abbreviation %lu\n"), abbrev_number);

  return entry;
}





static void
get_type_signedness (abbrev_entry *entry,
       const struct dwarf_section *section,
       unsigned char *data,
       unsigned char *end,
       uint64_t cu_offset,
       uint64_t pointer_size,
       uint64_t offset_size,
       int dwarf_version,
       
# 2167 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool 
# 2167 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           *is_signed,
       unsigned int nesting)
{
  abbrev_attr * attr;

  * is_signed = 
# 2172 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               0
# 2172 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    ;


  if (nesting > 20)
    {


      return;
    }

  for (attr = entry->first_attr;
       attr != 
# 2183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              ((void *)0) 
# 2183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   && attr->attribute;
       attr = attr->next)
    {
      unsigned char * orig_data = data;
      uint64_t uvalue = 0;

      data = skip_attr_bytes (attr->form, data, end, pointer_size,
         offset_size, dwarf_version, & uvalue);
      if (data == 
# 2191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 ((void *)0)
# 2191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     )
 return;

      switch (attr->attribute)
 {
 case DW_AT_linkage_name:
 case DW_AT_name:
   if (do_wide)
     {
       if (attr->form == DW_FORM_strp)
  printf (", %s", fetch_indirect_string (uvalue));
       else if (attr->form == DW_FORM_string)
  printf (", %.*s", (int) (end - orig_data), orig_data);
     }
   break;

 case DW_AT_type:

   {
     abbrev_entry *type_abbrev;
     unsigned char *type_data;
     abbrev_map *map;

     type_abbrev = get_type_abbrev_from_form (attr->form,
           uvalue,
           cu_offset,
           end,
           section,
           
# 2219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0) 
# 2219 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      ,
           &type_data,
           &map);
     if (type_abbrev == 
# 2222 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 2222 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           )
       break;

     get_type_signedness (type_abbrev, section, type_data,
     map ? section->start + map->end : end,
     map ? map->start : cu_offset,
     pointer_size, offset_size, dwarf_version,
     is_signed, nesting + 1);
   }
   break;

 case DW_AT_encoding:

   switch (uvalue)
     {
     case DW_ATE_address:

     case DW_ATE_boolean:
     case DW_ATE_unsigned:
     case DW_ATE_unsigned_char:
     case DW_ATE_unsigned_fixed:
       * is_signed = 
# 2243 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    0
# 2243 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;
       break;

     default:
     case DW_ATE_complex_float:
     case DW_ATE_float:
     case DW_ATE_signed:
     case DW_ATE_signed_char:
     case DW_ATE_imaginary_float:
     case DW_ATE_decimal_float:
     case DW_ATE_signed_fixed:
       * is_signed = 
# 2254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    1
# 2254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ;
       break;
     }
   break;
 }
    }
}

static void
read_and_print_leb128 (unsigned char *data,
         unsigned int *bytes_read,
         unsigned const char *end,
         
# 2266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        _Bool 
# 2266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             is_signed)
{
  int status;
  uint64_t val = read_leb128 (data, end, is_signed, bytes_read, &status);
  if (status != 0)
    report_leb_status (status);
  else if (is_signed)
    printf ("%" 
# 2273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               "l" "d"
# 2273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     , val);
  else
    printf ("%" 
# 2275 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               "l" "u"
# 2275 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     , val);
}

static void
display_discr_list (unsigned long form,
      uint64_t uvalue,
      unsigned char *data,
      int level)
{
  unsigned char *end = data;

  if (uvalue == 0)
    {
      printf ("[default]");
      return;
    }

  switch (form)
    {
    case DW_FORM_block:
    case DW_FORM_block1:
    case DW_FORM_block2:
    case DW_FORM_block4:

      data -= uvalue;
      break;
    default:
      printf ("<corrupt>\n");
      warn (gettext ("corrupt discr_list - not using a block form\n"));
      return;
    }

  if (uvalue < 2)
    {
      printf ("<corrupt>\n");
      warn (gettext ("corrupt discr_list - block not long enough\n"));
      return;
    }

  
# 2314 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 _Bool 
# 2314 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      is_signed = (level > 0 && level <= (1 << 8)
      ? level_type_signed [level - 1] : 
# 2315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                       0
# 2315 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                            );

  printf ("(");
  while (data < end)
    {
      unsigned char discriminant;
      unsigned int bytes_read;

      do { size_t amount = (1); if (sizeof (discriminant) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (discriminant)); amount = sizeof (discriminant); } if (1) 
# 2323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2323, __extension__ __PRETTY_FUNCTION__); }))
# 2323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (discriminant) = 0; else (discriminant) = (byte_get) ((data), amount); if (
# 2323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);

      switch (discriminant)
 {
 case DW_DSC_label:
   printf ("label ");
   read_and_print_leb128 (data, & bytes_read, end, is_signed);
   data += bytes_read;
   break;

 case DW_DSC_range:
   printf ("range ");
   read_and_print_leb128 (data, & bytes_read, end, is_signed);
   data += bytes_read;

   printf ("..");
   read_and_print_leb128 (data, & bytes_read, end, is_signed);
   data += bytes_read;
   break;

 default:
   printf ("<corrupt>\n");
   warn (gettext ("corrupt discr_list - unrecognized discriminant byte %#x\n"),
  discriminant);
   return;
 }

      if (data < end)
 printf (", ");
    }

  if (is_signed)
    printf (")(signed)");
  else
    printf (")(unsigned)");
}

static unsigned char *
read_and_display_attr_value (unsigned long attribute,
        unsigned long form,
        int64_t implicit_const,
        unsigned char *start,
        unsigned char *data,
        unsigned char *end,
        uint64_t cu_offset,
        uint64_t pointer_size,
        uint64_t offset_size,
        int dwarf_version,
        debug_info *debug_info_p,
        int do_loc,
        struct dwarf_section *section,
        struct cu_tu_set *this_set,
        char delimiter,
        int level)
{
  int64_t svalue;
  uint64_t uvalue = 0;
  uint64_t uvalue_hi = 0;
  unsigned char *block_start = 
# 2381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              ((void *)0)
# 2381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  ;
  unsigned char *orig_data = data;

  if (data > end || (data == end && form != DW_FORM_flag_present))
    {
      warn (gettext ("Corrupt attribute\n"));
      return data;
    }

  if (do_wide && ! do_loc)
    {

      const char * name = get_FORM_name (form);


      if (name[0] == 'D')
 name += 8;
      printf ("%c(%s)", delimiter, name);
    }

  switch (form)
    {
    case DW_FORM_ref_addr:
      if (dwarf_version == 2)
 do { size_t amount = (pointer_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void) sizeof ((
# 2405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(data) <= (end)
# 2405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ? 1 : 0), __extension__ ({ if (
# 2405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(data) <= (end)
# 2405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ; else __assert_fail (
# 2405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
"(data) <= (end)"
# 2405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
, "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2405, __extension__ __PRETTY_FUNCTION__); }))
# 2405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
1
# 2405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
) (data) += amount; } while (0);
      else if (dwarf_version > 2)
 do { size_t amount = (offset_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2407 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void) sizeof ((
# 2407 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(data) <= (end)
# 2407 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ? 1 : 0), __extension__ ({ if (
# 2407 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(data) <= (end)
# 2407 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ; else __assert_fail (
# 2407 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
"(data) <= (end)"
# 2407 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
, "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2407, __extension__ __PRETTY_FUNCTION__); }))
# 2407 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2407 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
1
# 2407 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
) (data) += amount; } while (0);
      else
 error (gettext ("Internal error: DW_FORM_ref_addr is not supported in DWARF version 1.\n"));
      break;

    case DW_FORM_addr:
      do { size_t amount = (pointer_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2413 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2413 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2413 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2413 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2413 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2413 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2413 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2413, __extension__ __PRETTY_FUNCTION__); }))
# 2413 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2413 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2413 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_strp_sup:
    case DW_FORM_strp:
    case DW_FORM_line_strp:
    case DW_FORM_sec_offset:
    case DW_FORM_GNU_ref_alt:
    case DW_FORM_GNU_strp_alt:
      do { size_t amount = (offset_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2422 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2422 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2422 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2422 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2422 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2422 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2422 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2422, __extension__ __PRETTY_FUNCTION__); }))
# 2422 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2422 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2422 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_flag_present:
      uvalue = 1;
      break;

    case DW_FORM_ref1:
    case DW_FORM_flag:
    case DW_FORM_data1:
    case DW_FORM_strx1:
    case DW_FORM_addrx1:
      do { size_t amount = (1); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2434, __extension__ __PRETTY_FUNCTION__); }))
# 2434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_ref2:
    case DW_FORM_data2:
    case DW_FORM_strx2:
    case DW_FORM_addrx2:
      do { size_t amount = (2); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2441 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2441 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2441 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2441 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2441 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2441 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2441 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2441, __extension__ __PRETTY_FUNCTION__); }))
# 2441 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2441 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2441 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_strx3:
    case DW_FORM_addrx3:
      do { size_t amount = (3); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2446 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2446 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2446 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2446 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2446 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2446 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2446 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2446, __extension__ __PRETTY_FUNCTION__); }))
# 2446 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2446 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2446 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_ref_sup4:
    case DW_FORM_ref4:
    case DW_FORM_data4:
    case DW_FORM_strx4:
    case DW_FORM_addrx4:
      do { size_t amount = (4); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2454, __extension__ __PRETTY_FUNCTION__); }))
# 2454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_ref_sup8:
    case DW_FORM_ref8:
    case DW_FORM_data8:
    case DW_FORM_ref_sig8:
      do { size_t amount = (8); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2461, __extension__ __PRETTY_FUNCTION__); }))
# 2461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      break;

    case DW_FORM_data16:
      do { size_t amount = (8); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2465 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2465 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2465 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2465 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2465 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2465 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2465 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2465, __extension__ __PRETTY_FUNCTION__); }))
# 2465 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2465 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2465 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      do { size_t amount = (8); if (sizeof (uvalue_hi) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue_hi)); amount = sizeof (uvalue_hi); } if (1) 
# 2466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2466, __extension__ __PRETTY_FUNCTION__); }))
# 2466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue_hi) = 0; else (uvalue_hi) = (byte_get) ((data), amount); if (
# 2466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      if (byte_get != byte_get_little_endian)
 {
   uint64_t utmp = uvalue;
   uvalue = uvalue_hi;
   uvalue_hi = utmp;
 }
      break;

    case DW_FORM_sdata:
      do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 2476 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2476 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (svalue) = _val; if ((svalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
      uvalue = svalue;
      break;

    case DW_FORM_GNU_str_index:
    case DW_FORM_strx:
    case DW_FORM_ref_udata:
    case DW_FORM_udata:
    case DW_FORM_GNU_addr_index:
    case DW_FORM_addrx:
    case DW_FORM_loclistx:
    case DW_FORM_rnglistx:
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 2488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 2488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
      break;

    case DW_FORM_indirect:
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 2492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 2492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (form) = _val; if ((form) != _val) _status |= 2; report_leb_status (_status); } while (0);
      if (!do_loc)
 printf ("%c%s", delimiter, get_FORM_name (form));
      if (form == DW_FORM_implicit_const)
 do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 2496 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
1
# 2496 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
, &_len, &_status); data += _len; (implicit_const) = _val; if ((implicit_const) != _val) _status |= 2; report_leb_status (_status); } while (0);
      return read_and_display_attr_value (attribute, form, implicit_const,
       start, data, end,
       cu_offset, pointer_size,
       offset_size, dwarf_version,
       debug_info_p, do_loc,
       section, this_set, delimiter, level);

    case DW_FORM_implicit_const:
      uvalue = implicit_const;
      break;

    default:
      break;
    }

  switch (form)
    {
    case DW_FORM_ref_addr:
      if (!do_loc)
 printf ("%c<%#" 
# 2516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                "l" "x" 
# 2516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       ">", delimiter, uvalue);
      break;

    case DW_FORM_GNU_ref_alt:
      if (!do_loc)
 {
   if (do_wide)

     printf ("%c<%#" 
# 2524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    "l" "x" 
# 2524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           ">", delimiter, uvalue);
   else
     printf ("%c<alt %#" 
# 2526 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                        "l" "x" 
# 2526 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               ">", delimiter, uvalue);
 }

      break;

    case DW_FORM_ref1:
    case DW_FORM_ref2:
    case DW_FORM_ref4:
    case DW_FORM_ref_sup4:
    case DW_FORM_ref_udata:
      if (!do_loc)
 printf ("%c<%#" 
# 2537 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                "l" "x" 
# 2537 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       ">", delimiter, uvalue + cu_offset);
      break;

    case DW_FORM_data4:
    case DW_FORM_addr:
    case DW_FORM_sec_offset:
      if (!do_loc)
 printf ("%c%#" 
# 2544 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               "l" "x"
# 2544 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     , delimiter, uvalue);
      break;

    case DW_FORM_flag_present:
    case DW_FORM_flag:
    case DW_FORM_data1:
    case DW_FORM_data2:
    case DW_FORM_sdata:
      if (!do_loc)
 printf ("%c%" 
# 2553 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "d"
# 2553 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    , delimiter, uvalue);
      break;

    case DW_FORM_udata:
      if (!do_loc)
 printf ("%c%" 
# 2558 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "u"
# 2558 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    , delimiter, uvalue);
      break;

    case DW_FORM_implicit_const:
      if (!do_loc)
 printf ("%c%" 
# 2563 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "d"
# 2563 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    , delimiter, implicit_const);
      break;

    case DW_FORM_ref_sup8:
    case DW_FORM_ref8:
    case DW_FORM_data8:
      if (!do_loc)
 {
   uint64_t utmp = uvalue;
   if (form == DW_FORM_ref8)
     utmp += cu_offset;
   printf ("%c%#" 
# 2574 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 "l" "x"
# 2574 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , delimiter, utmp);
 }
      break;

    case DW_FORM_data16:
      if (!do_loc)
 {
   if (uvalue_hi == 0)
     printf (" %#" 
# 2582 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  "l" "x"
# 2582 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        , uvalue);
   else
     printf (" %#" 
# 2584 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  "l" "x" 
# 2584 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         "%016" 
# 2584 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                "l" "x"
# 2584 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      , uvalue_hi, uvalue);
 }
      break;

    case DW_FORM_string:
      if (!do_loc)
 printf ("%c%.*s", delimiter, (int) (end - data), data);
      data += strnlen ((char *) data, end - data);
      if (data < end)
 data++;
      break;

    case DW_FORM_block:
    case DW_FORM_exprloc:
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 2598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 2598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (uvalue) = _val; if ((uvalue) != _val) _status |= 2; report_leb_status (_status); } while (0);
    do_block:
      block_start = data;
      if (block_start >= end)
 {
   warn (gettext ("Block ends prematurely\n"));
   uvalue = 0;
   block_start = end;
 }

      uvalue = check_uvalue (block_start, uvalue, end);

      data = block_start + uvalue;
      if (!do_loc)
 {
   unsigned char op;

   do { size_t amount = (sizeof (op)); if (sizeof (op) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (op)); amount = sizeof (op); } if (1) 
# 2615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 2615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (block_start) <= (end)
# 2615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 2615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (block_start) <= (end)
# 2615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 2615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(block_start) <= (end)"
# 2615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2615, __extension__ __PRETTY_FUNCTION__); }))
# 2615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (block_start); if ((block_start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (op) = 0; else (op) = (byte_get) ((block_start), amount); if (
# 2615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 2615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (block_start) += amount; } while (0);
   if (op != DW_OP_addrx)
     data = display_block (block_start, uvalue, end, delimiter);
 }
      break;

    case DW_FORM_block1:
      do { size_t amount = (1); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2622, __extension__ __PRETTY_FUNCTION__); }))
# 2622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      goto do_block;

    case DW_FORM_block2:
      do { size_t amount = (2); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2626, __extension__ __PRETTY_FUNCTION__); }))
# 2626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      goto do_block;

    case DW_FORM_block4:
      do { size_t amount = (4); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 2630 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 2630 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2630 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 2630 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 2630 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 2630 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 2630 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 2630, __extension__ __PRETTY_FUNCTION__); }))
# 2630 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 2630 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 2630 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      goto do_block;

    case DW_FORM_strp:
      if (!do_loc)
 {
   if (do_wide)

     printf (gettext ("%c(offset: %#" 
# 2638 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2638 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            "): %s"),
      delimiter, uvalue, fetch_indirect_string (uvalue));
   else
     printf (gettext ("%c(indirect string, offset: %#" 
# 2641 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2641 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            "): %s"),
      delimiter, uvalue, fetch_indirect_string (uvalue));
 }
      break;

    case DW_FORM_line_strp:
      if (!do_loc)
 {
   if (do_wide)

     printf (gettext ("%c(offset: %#" 
# 2651 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2651 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            "): %s"),
      delimiter, uvalue, fetch_indirect_line_string (uvalue));
   else
     printf (gettext ("%c(indirect line string, offset: %#" 
# 2654 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2654 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            "): %s"),
      delimiter, uvalue, fetch_indirect_line_string (uvalue));
 }
      break;

    case DW_FORM_GNU_str_index:
    case DW_FORM_strx:
    case DW_FORM_strx1:
    case DW_FORM_strx2:
    case DW_FORM_strx3:
    case DW_FORM_strx4:
      if (!do_loc)
 {
   const char *suffix = section ? strrchr (section->name, '.') : 
# 2667 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 2667 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                    ;
   
# 2668 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  _Bool 
# 2668 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       dwo = suffix && strcmp (suffix, ".dwo") == 0;
   const char *strng;

   strng = fetch_indexed_string (uvalue, this_set, offset_size, dwo,
     debug_info_p ? debug_info_p->str_offsets_base : 0);
   if (do_wide)

     printf (gettext ("%c(offset: %#" 
# 2675 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2675 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            "): %s"),
      delimiter, uvalue, strng);
   else
     printf (gettext ("%c(indexed string: %#" 
# 2678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            "): %s"),
      delimiter, uvalue, strng);
 }
      break;

    case DW_FORM_GNU_strp_alt:
      if (!do_loc)
 {
   if (do_wide)

     printf (gettext ("%c(offset: %#" 
# 2688 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2688 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ") %s"),
      delimiter, uvalue, fetch_alt_indirect_string (uvalue));
   else
     printf (gettext ("%c(alt indirect string, offset: %#" 
# 2691 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2691 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ") %s"),
      delimiter, uvalue, fetch_alt_indirect_string (uvalue));
 }
      break;

    case DW_FORM_indirect:

      break;

    case DW_FORM_ref_sig8:
      if (!do_loc)
 printf ("%c%s: %#" 
# 2702 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   "l" "x"
# 2702 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         , delimiter, do_wide ? "" : "signature",
  uvalue);
      break;

    case DW_FORM_GNU_addr_index:
    case DW_FORM_addrx:
    case DW_FORM_addrx1:
    case DW_FORM_addrx2:
    case DW_FORM_addrx3:
    case DW_FORM_addrx4:
    case DW_FORM_loclistx:
    case DW_FORM_rnglistx:
      if (!do_loc)
 {
   uint64_t base, idx;
   const char *suffix = strrchr (section->name, '.');
   
# 2718 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  _Bool 
# 2718 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       dwo = suffix && strcmp (suffix, ".dwo") == 0;

   if (form == DW_FORM_loclistx)
     {
       if (dwo)
  {
    idx = fetch_indexed_value (uvalue, loclists_dwo, 0);
    if (idx != (uint64_t) -1)
      idx += (offset_size == 8) ? 20 : 12;
  }
       else if (debug_info_p == 
# 2728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0) 
# 2728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                    || dwarf_version > 4)
  {
    idx = fetch_indexed_value (uvalue, loclists, 0);
  }
       else
  {





    if (uvalue < debug_info_p->num_loc_offsets)
      idx = debug_info_p->loc_offsets [uvalue];
    else
      {
        warn (gettext ("loc_offset %" 
# 2743 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "u" 
# 2743 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             " too big\n"), uvalue);
        idx = -1;
      }
  }
     }
   else if (form == DW_FORM_rnglistx)
     {
       if (dwo)
  {
    idx = fetch_indexed_value (uvalue, rnglists_dwo, 0);
    if (idx != (uint64_t) -1)
      idx += (offset_size == 8) ? 20 : 12;
  }
       else
  {
    if (debug_info_p == 
# 2758 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 2758 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           )
      base = 0;
    else
      base = debug_info_p->rnglists_base;


    idx = fetch_indexed_value (uvalue, rnglists, base);
    if (idx != (uint64_t) -1)
      idx += base;
  }
     }
   else
     {
       if (debug_info_p == 
# 2771 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          ((void *)0)
# 2771 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                              )
  base = 0;
       else if (debug_info_p->addr_base == (unsigned int) -1)
  base = 0;
       else
  base = debug_info_p->addr_base;

       base += uvalue * pointer_size;
       idx = fetch_indexed_addr (base, pointer_size);
     }


   if (idx != (uint64_t) -1)
     printf (gettext ("%c(index: %#" 
# 2784 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2784 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            "): %#" 
# 2784 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x"
# 2784 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ),
      delimiter, uvalue, idx);
 }
      break;

    case DW_FORM_strp_sup:
      if (!do_loc)
 printf ("%c<%#" 
# 2791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                "l" "x" 
# 2791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       ">", delimiter, uvalue + cu_offset);
      break;

    default:
      warn (gettext ("Unrecognized form: %#lx"), form);

      ++data;
      break;
    }

  if ((do_loc || do_debug_loc || do_debug_ranges || do_debug_info)
      && num_debug_info_entries == 0
      && debug_info_p != 
# 2803 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                        ((void *)0)
# 2803 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            )
    {
      switch (attribute)
 {
 case DW_AT_loclists_base:
   if (debug_info_p->loclists_base)
     warn (gettext ("CU @ %#" 
# 2809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 2809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " has multiple loclists_base values " "(%#" 
# 2809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 2809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " and %#" 
# 2809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 2809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          ")")
                                        ,
    debug_info_p->cu_offset,
    debug_info_p->loclists_base, uvalue);
   svalue = uvalue;
   if (svalue < 0)
     {
       warn (gettext ("CU @ %#" 
# 2816 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2816 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " has has a negative loclists_base " "value of %#" 
# 2816 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2816 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " - treating as zero")
                                                   ,
      debug_info_p->cu_offset, svalue);
       uvalue = 0;
     }
   debug_info_p->loclists_base = uvalue;
   break;

 case DW_AT_rnglists_base:
   if (debug_info_p->rnglists_base)
     warn (gettext ("CU @ %#" 
# 2826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 2826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " has multiple rnglists_base values " "(%#" 
# 2826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 2826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " and %#" 
# 2826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 2826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          ")")
                                        ,
    debug_info_p->cu_offset,
    debug_info_p->rnglists_base, uvalue);
   svalue = uvalue;
   if (svalue < 0)
     {
       warn (gettext ("CU @ %#" 
# 2833 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2833 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " has has a negative rnglists_base " "value of %#" 
# 2833 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2833 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " - treating as zero")
                                                   ,
      debug_info_p->cu_offset, svalue);
       uvalue = 0;
     }
   debug_info_p->rnglists_base = uvalue;
   break;

 case DW_AT_str_offsets_base:
   if (debug_info_p->str_offsets_base)
     warn (gettext ("CU @ %#" 
# 2843 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 2843 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " has multiple str_offsets_base values " "%#" 
# 2843 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 2843 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " and %#" 
# 2843 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 2843 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          ")")
                                       ,
    debug_info_p->cu_offset,
    debug_info_p->str_offsets_base, uvalue);
   svalue = uvalue;
   if (svalue < 0)
     {
       warn (gettext ("CU @ %#" 
# 2850 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2850 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " has has a negative stroffsets_base " "value of %#" 
# 2850 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 2850 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " - treating as zero")
                                                   ,
      debug_info_p->cu_offset, svalue);
       uvalue = 0;
     }
   debug_info_p->str_offsets_base = uvalue;
   break;

 case DW_AT_frame_base:
   have_frame_base = 1;

 case DW_AT_location:
 case DW_AT_GNU_locviews:
 case DW_AT_string_length:
 case DW_AT_return_addr:
 case DW_AT_data_member_location:
 case DW_AT_vtable_elem_location:
 case DW_AT_segment:
 case DW_AT_static_link:
 case DW_AT_use_location:
 case DW_AT_call_value:
 case DW_AT_GNU_call_site_value:
 case DW_AT_call_data_value:
 case DW_AT_GNU_call_site_data_value:
 case DW_AT_call_target:
 case DW_AT_GNU_call_site_target:
 case DW_AT_call_target_clobbered:
 case DW_AT_GNU_call_site_target_clobbered:
   if ((dwarf_version < 4
        && (form == DW_FORM_data4 || form == DW_FORM_data8))
       || form == DW_FORM_sec_offset
       || form == DW_FORM_loclistx)
     {

       unsigned int lmax = debug_info_p->max_loc_offsets;
       unsigned int num = debug_info_p->num_loc_offsets;

       if (lmax == 0 || num >= lmax)
  {
    lmax += 1024;
    debug_info_p->loc_offsets = (uint64_t *)
      xcrealloc (debug_info_p->loc_offsets,
          lmax, sizeof (*debug_info_p->loc_offsets));
    debug_info_p->loc_views = (uint64_t *)
      xcrealloc (debug_info_p->loc_views,
          lmax, sizeof (*debug_info_p->loc_views));
    debug_info_p->have_frame_base = (int *)
      xcrealloc (debug_info_p->have_frame_base,
          lmax, sizeof (*debug_info_p->have_frame_base));
    debug_info_p->max_loc_offsets = lmax;
  }
       if (form == DW_FORM_loclistx)
  uvalue = fetch_indexed_value (num, loclists, debug_info_p->loclists_base);
       else if (this_set != 
# 2903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           ((void *)0)
# 2903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               )
  uvalue += this_set->section_offsets [DW_SECT_LOC];

       debug_info_p->have_frame_base [num] = have_frame_base;
       if (attribute != DW_AT_GNU_locviews)
  {
    uvalue += debug_info_p->loclists_base;



    if (debug_info_p->num_loc_offsets
        > debug_info_p->num_loc_views)
      warn (gettext ("More location offset attributes than DW_AT_GNU_locview attributes\n"));
    else
      {
        debug_info_p->loc_offsets [num] = uvalue;
        debug_info_p->num_loc_offsets++;
      }
  }
       else
  {
    if (debug_info_p->num_loc_views > num)
      {
        warn (gettext ("The number of views (%u) is greater than the number of locations (%u)\n"),
       debug_info_p->num_loc_views, num);
        debug_info_p->num_loc_views = num;
      }
    else
      num = debug_info_p->num_loc_views;
    if (num > debug_info_p->num_loc_offsets)
      warn (gettext ("More DW_AT_GNU_locview attributes than location offset attributes\n"));
    else
      {
        debug_info_p->loc_views [num] = uvalue;
        debug_info_p->num_loc_views++;
      }
  }
     }
   break;

 case DW_AT_low_pc:
   if (need_base_address)
     debug_info_p->base_address = uvalue;
   break;

 case DW_AT_GNU_addr_base:
 case DW_AT_addr_base:
   debug_info_p->addr_base = uvalue;
   break;

 case DW_AT_GNU_ranges_base:
   debug_info_p->ranges_base = uvalue;
   break;

 case DW_AT_ranges:
   if ((dwarf_version < 4
        && (form == DW_FORM_data4 || form == DW_FORM_data8))
       || form == DW_FORM_sec_offset
       || form == DW_FORM_rnglistx)
     {

       unsigned int lmax = debug_info_p->max_range_lists;
       unsigned int num = debug_info_p->num_range_lists;

       if (lmax == 0 || num >= lmax)
  {
    lmax += 1024;
    debug_info_p->range_lists = (uint64_t *)
      xcrealloc (debug_info_p->range_lists,
          lmax, sizeof (*debug_info_p->range_lists));
    debug_info_p->max_range_lists = lmax;
  }

       if (form == DW_FORM_rnglistx)
  uvalue = fetch_indexed_value (uvalue, rnglists, 0);

       debug_info_p->range_lists [num] = uvalue;
       debug_info_p->num_range_lists++;
     }
   break;

 case DW_AT_GNU_dwo_name:
 case DW_AT_dwo_name:
   if (need_dwo_info)
     switch (form)
       {
       case DW_FORM_strp:
  add_dwo_name ((const char *) fetch_indirect_string (uvalue), cu_offset);
  break;
       case DW_FORM_GNU_strp_alt:
  add_dwo_name ((const char *) fetch_alt_indirect_string (uvalue), cu_offset);
  break;
       case DW_FORM_GNU_str_index:
       case DW_FORM_strx:
       case DW_FORM_strx1:
       case DW_FORM_strx2:
       case DW_FORM_strx3:
       case DW_FORM_strx4:
  add_dwo_name (fetch_indexed_string (uvalue, this_set, offset_size, 
# 3001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                    0
# 3001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                         ,
          debug_info_p->str_offsets_base),
         cu_offset);
  break;
       case DW_FORM_string:
  add_dwo_name ((const char *) orig_data, cu_offset);
  break;
       default:
  warn (gettext ("Unsupported form (%s) for attribute %s\n"),
        get_FORM_name (form), get_AT_name (attribute));
  break;
       }
   break;

 case DW_AT_comp_dir:

   if (need_dwo_info)
     switch (form)
       {
       case DW_FORM_strp:
  add_dwo_dir ((const char *) fetch_indirect_string (uvalue), cu_offset);
  break;
       case DW_FORM_GNU_strp_alt:
  add_dwo_dir (fetch_alt_indirect_string (uvalue), cu_offset);
  break;
       case DW_FORM_line_strp:
  add_dwo_dir ((const char *) fetch_indirect_line_string (uvalue), cu_offset);
  break;
       case DW_FORM_GNU_str_index:
       case DW_FORM_strx:
       case DW_FORM_strx1:
       case DW_FORM_strx2:
       case DW_FORM_strx3:
       case DW_FORM_strx4:
  add_dwo_dir (fetch_indexed_string (uvalue, this_set, offset_size, 
# 3035 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                   0
# 3035 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                        ,
         debug_info_p->str_offsets_base),
        cu_offset);
  break;
       case DW_FORM_string:
  add_dwo_dir ((const char *) orig_data, cu_offset);
  break;
       default:
  warn (gettext ("Unsupported form (%s) for attribute %s\n"),
        get_FORM_name (form), get_AT_name (attribute));
  break;
       }
   break;

 case DW_AT_GNU_dwo_id:
   if (need_dwo_info)
     switch (form)
       {
       case DW_FORM_data8:

  add_dwo_id ((const char *) (data - 8), cu_offset);
  break;
       default:
  warn (gettext ("Unsupported form (%s) for attribute %s\n"),
        get_FORM_name (form), get_AT_name (attribute));
  break;
       }
   break;

 default:
   break;
 }
    }

  if (do_loc || attribute == 0)
    return data;


  switch (attribute)
    {
    case DW_AT_type:
      if (level >= 0 && level < (1 << 8)
   && uvalue < (size_t) (end - start))
 {
   
# 3079 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  _Bool 
# 3079 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       is_signed = 
# 3079 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   0
# 3079 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ;
   abbrev_entry *type_abbrev;
   unsigned char *type_data;
   abbrev_map *map;

   type_abbrev = get_type_abbrev_from_form (form, uvalue,
         cu_offset, end,
         section, 
# 3086 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 ((void *)0)
# 3086 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     ,
         &type_data, &map);
   if (type_abbrev != 
# 3088 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 3088 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         )
     {
       get_type_signedness (type_abbrev, section, type_data,
       map ? section->start + map->end : end,
       map ? map->start : cu_offset,
       pointer_size, offset_size, dwarf_version,
       & is_signed, 0);
     }
   level_type_signed[level] = is_signed;
 }
      break;

    case DW_AT_inline:
      printf ("\t");
      switch (uvalue)
 {
 case DW_INL_not_inlined:
   printf (gettext ("(not inlined)"));
   break;
 case DW_INL_inlined:
   printf (gettext ("(inlined)"));
   break;
 case DW_INL_declared_not_inlined:
   printf (gettext ("(declared as inline but ignored)"));
   break;
 case DW_INL_declared_inlined:
   printf (gettext ("(declared as inline and inlined)"));
   break;
 default:
   printf (gettext ("  (Unknown inline attribute value: %#" 
# 3117 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 3117 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          ")"),
    uvalue);
   break;
 }
      break;

    case DW_AT_language:
      printf ("\t");
      switch (uvalue)
 {

 case DW_LANG_C89: printf ("(ANSI C)"); break;
 case DW_LANG_C: printf ("(non-ANSI C)"); break;
 case DW_LANG_Ada83: printf ("(Ada)"); break;
 case DW_LANG_C_plus_plus: printf ("(C++)"); break;
 case DW_LANG_Cobol74: printf ("(Cobol 74)"); break;
 case DW_LANG_Cobol85: printf ("(Cobol 85)"); break;
 case DW_LANG_Fortran77: printf ("(FORTRAN 77)"); break;
 case DW_LANG_Fortran90: printf ("(Fortran 90)"); break;
 case DW_LANG_Pascal83: printf ("(ANSI Pascal)"); break;
 case DW_LANG_Modula2: printf ("(Modula 2)"); break;

 case DW_LANG_Java: printf ("(Java)"); break;
 case DW_LANG_C99: printf ("(ANSI C99)"); break;
 case DW_LANG_Ada95: printf ("(ADA 95)"); break;
 case DW_LANG_Fortran95: printf ("(Fortran 95)"); break;

 case DW_LANG_PLI: printf ("(PLI)"); break;
 case DW_LANG_ObjC: printf ("(Objective C)"); break;
 case DW_LANG_ObjC_plus_plus: printf ("(Objective C++)"); break;
 case DW_LANG_UPC: printf ("(Unified Parallel C)"); break;
 case DW_LANG_D: printf ("(D)"); break;

 case DW_LANG_Python: printf ("(Python)"); break;

 case DW_LANG_OpenCL: printf ("(OpenCL)"); break;
 case DW_LANG_Go: printf ("(Go)"); break;
 case DW_LANG_Modula3: printf ("(Modula 3)"); break;
 case DW_LANG_Haskell: printf ("(Haskell)"); break;
 case DW_LANG_C_plus_plus_03: printf ("(C++03)"); break;
 case DW_LANG_C_plus_plus_11: printf ("(C++11)"); break;
 case DW_LANG_OCaml: printf ("(OCaml)"); break;
 case DW_LANG_Rust: printf ("(Rust)"); break;
 case DW_LANG_C11: printf ("(C11)"); break;
 case DW_LANG_Swift: printf ("(Swift)"); break;
 case DW_LANG_Julia: printf ("(Julia)"); break;
 case DW_LANG_Dylan: printf ("(Dylan)"); break;
 case DW_LANG_C_plus_plus_14: printf ("(C++14)"); break;
 case DW_LANG_Fortran03: printf ("(Fortran 03)"); break;
 case DW_LANG_Fortran08: printf ("(Fortran 08)"); break;
 case DW_LANG_RenderScript: printf ("(RenderScript)"); break;

 case DW_LANG_Mips_Assembler: printf ("(MIPS assembler)"); break;

 case DW_LANG_Upc: printf ("(Unified Parallel C)"); break;
 default:
   if (uvalue >= DW_LANG_lo_user && uvalue <= DW_LANG_hi_user)
     printf (gettext ("(implementation defined: %#" 
# 3174 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 3174 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ")"), uvalue);
   else
     printf (gettext ("(unknown: %#" 
# 3176 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 3176 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ")"), uvalue);
   break;
 }
      break;

    case DW_AT_encoding:
      printf ("\t");
      switch (uvalue)
 {
 case DW_ATE_void: printf ("(void)"); break;
 case DW_ATE_address: printf ("(machine address)"); break;
 case DW_ATE_boolean: printf ("(boolean)"); break;
 case DW_ATE_complex_float: printf ("(complex float)"); break;
 case DW_ATE_float: printf ("(float)"); break;
 case DW_ATE_signed: printf ("(signed)"); break;
 case DW_ATE_signed_char: printf ("(signed char)"); break;
 case DW_ATE_unsigned: printf ("(unsigned)"); break;
 case DW_ATE_unsigned_char: printf ("(unsigned char)"); break;

 case DW_ATE_imaginary_float: printf ("(imaginary float)"); break;
 case DW_ATE_decimal_float: printf ("(decimal float)"); break;

 case DW_ATE_packed_decimal: printf ("(packed_decimal)"); break;
 case DW_ATE_numeric_string: printf ("(numeric_string)"); break;
 case DW_ATE_edited: printf ("(edited)"); break;
 case DW_ATE_signed_fixed: printf ("(signed_fixed)"); break;
 case DW_ATE_unsigned_fixed: printf ("(unsigned_fixed)"); break;

 case DW_ATE_UTF: printf ("(unicode string)"); break;

 case DW_ATE_UCS: printf ("(UCS)"); break;
 case DW_ATE_ASCII: printf ("(ASCII)"); break;


 case DW_ATE_HP_float80: printf ("(HP_float80)"); break;
 case DW_ATE_HP_complex_float80: printf ("(HP_complex_float80)"); break;
 case DW_ATE_HP_float128: printf ("(HP_float128)"); break;
 case DW_ATE_HP_complex_float128:printf ("(HP_complex_float128)"); break;
 case DW_ATE_HP_floathpintel: printf ("(HP_floathpintel)"); break;
 case DW_ATE_HP_imaginary_float80: printf ("(HP_imaginary_float80)"); break;
 case DW_ATE_HP_imaginary_float128: printf ("(HP_imaginary_float128)"); break;

 default:
   if (uvalue >= DW_ATE_lo_user
       && uvalue <= DW_ATE_hi_user)
     printf (gettext ("(user defined type)"));
   else
     printf (gettext ("(unknown type)"));
   break;
 }
      break;

    case DW_AT_accessibility:
      printf ("\t");
      switch (uvalue)
 {
 case DW_ACCESS_public: printf ("(public)"); break;
 case DW_ACCESS_protected: printf ("(protected)"); break;
 case DW_ACCESS_private: printf ("(private)"); break;
 default:
   printf (gettext ("(unknown accessibility)"));
   break;
 }
      break;

    case DW_AT_visibility:
      printf ("\t");
      switch (uvalue)
 {
 case DW_VIS_local: printf ("(local)"); break;
 case DW_VIS_exported: printf ("(exported)"); break;
 case DW_VIS_qualified: printf ("(qualified)"); break;
 default: printf (gettext ("(unknown visibility)")); break;
 }
      break;

    case DW_AT_endianity:
      printf ("\t");
      switch (uvalue)
 {
 case DW_END_default: printf ("(default)"); break;
 case DW_END_big: printf ("(big)"); break;
 case DW_END_little: printf ("(little)"); break;
 default:
   if (uvalue >= DW_END_lo_user && uvalue <= DW_END_hi_user)
     printf (gettext ("(user specified)"));
   else
     printf (gettext ("(unknown endianity)"));
   break;
 }
      break;

    case DW_AT_virtuality:
      printf ("\t");
      switch (uvalue)
 {
 case DW_VIRTUALITY_none: printf ("(none)"); break;
 case DW_VIRTUALITY_virtual: printf ("(virtual)"); break;
 case DW_VIRTUALITY_pure_virtual:printf ("(pure_virtual)"); break;
 default: printf (gettext ("(unknown virtuality)")); break;
 }
      break;

    case DW_AT_identifier_case:
      printf ("\t");
      switch (uvalue)
 {
 case DW_ID_case_sensitive: printf ("(case_sensitive)"); break;
 case DW_ID_up_case: printf ("(up_case)"); break;
 case DW_ID_down_case: printf ("(down_case)"); break;
 case DW_ID_case_insensitive: printf ("(case_insensitive)"); break;
 default: printf (gettext ("(unknown case)")); break;
 }
      break;

    case DW_AT_calling_convention:
      printf ("\t");
      switch (uvalue)
 {
 case DW_CC_normal: printf ("(normal)"); break;
 case DW_CC_program: printf ("(program)"); break;
 case DW_CC_nocall: printf ("(nocall)"); break;
 case DW_CC_pass_by_reference: printf ("(pass by ref)"); break;
 case DW_CC_pass_by_value: printf ("(pass by value)"); break;
 case DW_CC_GNU_renesas_sh: printf ("(Rensas SH)"); break;
 case DW_CC_GNU_borland_fastcall_i386: printf ("(Borland fastcall i386)"); break;
 default:
   if (uvalue >= DW_CC_lo_user
       && uvalue <= DW_CC_hi_user)
     printf (gettext ("(user defined)"));
   else
     printf (gettext ("(unknown convention)"));
 }
      break;

    case DW_AT_ordering:
      printf ("\t");
      switch (uvalue)
 {
 case 255:
 case -1: printf (gettext ("(undefined)")); break;
 case 0: printf ("(row major)"); break;
 case 1: printf ("(column major)"); break;
 }
      break;

    case DW_AT_decimal_sign:
      printf ("\t");
      switch (uvalue)
 {
 case DW_DS_unsigned: printf (gettext ("(unsigned)")); break;
 case DW_DS_leading_overpunch: printf (gettext ("(leading overpunch)")); break;
 case DW_DS_trailing_overpunch: printf (gettext ("(trailing overpunch)")); break;
 case DW_DS_leading_separate: printf (gettext ("(leading separate)")); break;
 case DW_DS_trailing_separate: printf (gettext ("(trailing separate)")); break;
 default: printf (gettext ("(unrecognised)")); break;
 }
      break;

    case DW_AT_defaulted:
      printf ("\t");
      switch (uvalue)
 {
 case DW_DEFAULTED_no: printf (gettext ("(no)")); break;
 case DW_DEFAULTED_in_class: printf (gettext ("(in class)")); break;
 case DW_DEFAULTED_out_of_class: printf (gettext ("(out of class)")); break;
 default: printf (gettext ("(unrecognised)")); break;
 }
      break;

    case DW_AT_discr_list:
      printf ("\t");
      display_discr_list (form, uvalue, data, level);
      break;

    case DW_AT_frame_base:
      have_frame_base = 1;

    case DW_AT_location:
    case DW_AT_loclists_base:
    case DW_AT_rnglists_base:
    case DW_AT_str_offsets_base:
    case DW_AT_string_length:
    case DW_AT_return_addr:
    case DW_AT_data_member_location:
    case DW_AT_vtable_elem_location:
    case DW_AT_segment:
    case DW_AT_static_link:
    case DW_AT_use_location:
    case DW_AT_call_value:
    case DW_AT_GNU_call_site_value:
    case DW_AT_call_data_value:
    case DW_AT_GNU_call_site_data_value:
    case DW_AT_call_target:
    case DW_AT_GNU_call_site_target:
    case DW_AT_call_target_clobbered:
    case DW_AT_GNU_call_site_target_clobbered:
      if ((dwarf_version < 4
    && (form == DW_FORM_data4 || form == DW_FORM_data8))
   || form == DW_FORM_sec_offset
   || form == DW_FORM_loclistx)
 {
   if (attribute != DW_AT_rnglists_base
       && attribute != DW_AT_str_offsets_base)
     printf (gettext (" (location list)"));
 }

    case DW_AT_allocated:
    case DW_AT_associated:
    case DW_AT_data_location:
    case DW_AT_byte_stride:
    case DW_AT_upper_bound:
    case DW_AT_lower_bound:
    case DW_AT_rank:
      if (block_start)
 {
   int need_frame_base;

   printf ("\t(");
   need_frame_base = decode_location_expression (block_start,
       pointer_size,
       offset_size,
       dwarf_version,
       uvalue,
       cu_offset, section);
   printf (")");
   if (need_frame_base && !have_frame_base)
     printf (gettext (" [without DW_AT_frame_base]"));
 }
      break;

    case DW_AT_data_bit_offset:
    case DW_AT_byte_size:
    case DW_AT_bit_size:
    case DW_AT_string_length_byte_size:
    case DW_AT_string_length_bit_size:
    case DW_AT_bit_stride:
      if (form == DW_FORM_exprloc)
 {
   printf ("\t(");
   (void) decode_location_expression (block_start, pointer_size,
          offset_size, dwarf_version,
          uvalue, cu_offset, section);
   printf (")");
 }
      break;

    case DW_AT_import:
      {
 unsigned long abbrev_number;
 abbrev_entry *entry;

 entry = get_type_abbrev_from_form (form, uvalue, cu_offset, end,
        section, & abbrev_number, 
# 3429 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 ((void *)0)
# 3429 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                     , 
# 3429 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                       ((void *)0)
# 3429 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           );
 if (entry == 
# 3430 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 3430 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 )
   {
     if (form != DW_FORM_GNU_ref_alt)
       warn (gettext ("Offset %#" 
# 3433 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 3433 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " used as value for DW_AT_import attribute of DIE at offset %#tx is too big.\n"),
      uvalue,
      orig_data - section->start);
   }
 else
   {
     printf (gettext ("\t[Abbrev Number: %ld"), abbrev_number);
     printf (" (%s)", get_TAG_name (entry->tag));
     printf ("]");
   }
      }
      break;

    default:
      break;
    }

  return data;
}

static unsigned char *
read_and_display_attr (unsigned long attribute,
         unsigned long form,
         int64_t implicit_const,
         unsigned char *start,
         unsigned char *data,
         unsigned char *end,
         uint64_t cu_offset,
         uint64_t pointer_size,
         uint64_t offset_size,
         int dwarf_version,
         debug_info *debug_info_p,
         int do_loc,
         struct dwarf_section *section,
         struct cu_tu_set *this_set,
         int level)
{
  if (!do_loc)
    printf ("   %-18s:", get_AT_name (attribute));
  data = read_and_display_attr_value (attribute, form, implicit_const,
          start, data, end,
          cu_offset, pointer_size, offset_size,
          dwarf_version, debug_info_p,
          do_loc, section, this_set, ' ', level);
  if (!do_loc)
    printf ("\n");
  return data;
}





static 
# 3486 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool

# 3487 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
load_debug_section_with_follow (enum dwarf_section_display_enum sec_enum,
    void * handle)
{
  if (load_debug_section (sec_enum, handle))
    {
      if (debug_displays[sec_enum].section.filename == 
# 3492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                      ((void *)0)
# 3492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                          )
 {

   separate_info * i;

   for (i = first_separate_info; i != 
# 3497 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 3497 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         ; i = i->next)
     if (i->handle == handle)
       {
  debug_displays[sec_enum].section.filename = i->filename;
  break;
       }
 }

      return 
# 3505 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            1
# 3505 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }

  if (do_follow_links)
    {
      separate_info * i;

      for (i = first_separate_info; i != 
# 3512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                        ((void *)0)
# 3512 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                            ; i = i->next)
 {
   if (load_debug_section (sec_enum, i->handle))
     {
       debug_displays[sec_enum].section.filename = i->filename;



       return 
# 3520 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             1
# 3520 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ;
     }
 }
    }

  return 
# 3525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        0
# 3525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             ;
}

static void
introduce (struct dwarf_section * section, 
# 3529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          _Bool 
# 3529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               raw)
{
  if (raw)
    {
      if (do_follow_links && section->filename)
 printf (gettext ("Raw dump of debug contents of section %s (loaded from %s):\n\n"),
  section->name, section->filename);
      else
 printf (gettext ("Raw dump of debug contents of section %s:\n\n"), section->name);
    }
  else
    {
      if (do_follow_links && section->filename)
 printf (gettext ("Contents of the %s section (loaded from %s):\n\n"),
  section->name, section->filename);
      else
 printf (gettext ("Contents of the %s section:\n\n"), section->name);
    }
}



static void
free_debug_information (debug_info *ent)
{
  if (ent->max_loc_offsets)
    {
      free (ent->loc_offsets);
      free (ent->loc_views);
      free (ent->have_frame_base);
    }
  if (ent->max_range_lists)
    free (ent->range_lists);
}
# 3574 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
static 
# 3574 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool

# 3575 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
process_debug_info (struct dwarf_section * section,
      void *file,
      enum dwarf_section_display_enum abbrev_sec,
      
# 3578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     _Bool 
# 3578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          do_loc,
      
# 3579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     _Bool 
# 3579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          do_types)
{
  unsigned char *start = section->start;
  unsigned char *end = start + section->size;
  unsigned char *section_begin;
  unsigned int unit;
  unsigned int num_units = 0;



  for (section_begin = start, num_units = 0; section_begin < end;
       num_units ++)
    {
      uint64_t length;




      do { size_t amount = (4); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 3597 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 3597 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (section_begin) <= (end)
# 3597 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 3597 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (section_begin) <= (end)
# 3597 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 3597 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(section_begin) <= (end)"
# 3597 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3597, __extension__ __PRETTY_FUNCTION__); }))
# 3597 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (section_begin); if ((section_begin) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((section_begin), amount); if (
# 3597 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 3597 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (section_begin) += amount; } while (0);

      if (length == 0xffffffff)
 do { size_t amount = (8); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 3600 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void) sizeof ((
# 3600 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(section_begin) <= (end)
# 3600 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ? 1 : 0), __extension__ ({ if (
# 3600 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(section_begin) <= (end)
# 3600 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ; else __assert_fail (
# 3600 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
"(section_begin) <= (end)"
# 3600 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
, "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3600, __extension__ __PRETTY_FUNCTION__); }))
# 3600 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
; size_t avail = (end) - (section_begin); if ((section_begin) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((section_begin), amount); if (
# 3600 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
1
# 3600 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
) (section_begin) += amount; } while (0);
      else if (length >= 0xfffffff0 && length < 0xffffffff)
 {
   warn (gettext ("Reserved length value (%#" 
# 3603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 3603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ") found in section %s\n"),
  length, section->name);
   return 
# 3605 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         0
# 3605 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
 }




      if (length > (size_t) (end - section_begin))
 {
   warn (gettext ("Corrupt unit length (got %#" 
# 3613 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 3613 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " expected at most %#tx) in section %s\n")
                                              ,
  length, end - section_begin, section->name);
   return 
# 3616 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         0
# 3616 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
 }
      section_begin += length;
    }

  if (num_units == 0)
    {
      error (gettext ("No comp units in %s section ?\n"), section->name);
      return 
# 3624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            0
# 3624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ;
    }

  if ((do_loc || do_debug_loc || do_debug_ranges || do_debug_info)
      && num_debug_info_entries == 0
      && ! do_types)
    {


      debug_information = (debug_info *) cmalloc (num_units,
        sizeof (* debug_information));
      if (debug_information == 
# 3635 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              ((void *)0)
# 3635 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  )
 {
   error (gettext ("Not enough memory for a debug info array of %u entries\n"),
   num_units);
   alloc_num_debug_info_entries = num_debug_info_entries = 0;
   return 
# 3640 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         0
# 3640 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
 }






      memset (debug_information, 0, num_units * sizeof (*debug_information));

      alloc_num_debug_info_entries = num_units;
    }

  if (!do_loc)
    {
      load_debug_section_with_follow (str, file);
      load_debug_section_with_follow (line_str, file);
      load_debug_section_with_follow (str_dwo, file);
      load_debug_section_with_follow (str_index, file);
      load_debug_section_with_follow (str_index_dwo, file);
      load_debug_section_with_follow (debug_addr, file);
    }

  load_debug_section_with_follow (abbrev_sec, file);
  load_debug_section_with_follow (loclists, file);
  load_debug_section_with_follow (rnglists, file);
  load_debug_section_with_follow (loclists_dwo, file);
  load_debug_section_with_follow (rnglists_dwo, file);

  if (debug_displays [abbrev_sec].section.start == 
# 3669 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                  ((void *)0)
# 3669 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      )
    {
      warn (gettext ("Unable to locate %s section!\n"),
     debug_displays [abbrev_sec].section.uncompressed_name);
      return 
# 3673 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            0
# 3673 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ;
    }

  if (!do_loc && dwarf_start_die == 0)
    introduce (section, 
# 3677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       0
# 3677 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            );

  free_all_abbrevs ();





  for (section_begin = start; start < end;)
    {
      DWARF2_Internal_CompUnit compunit;
      unsigned char *hdrptr;
      uint64_t abbrev_base;
      size_t abbrev_size;
      uint64_t cu_offset;
      unsigned int offset_size;
      struct cu_tu_set *this_set;
      unsigned char *end_cu;

      hdrptr = start;
      cu_offset = start - section_begin;

      do { size_t amount = (4); if (sizeof (compunit.cu_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_length)); amount = sizeof (compunit.cu_length); } if (1) 
# 3699 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 3699 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 3699 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 3699 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 3699 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 3699 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 3699 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3699, __extension__ __PRETTY_FUNCTION__); }))
# 3699 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_length) = 0; else (compunit.cu_length) = (byte_get) ((hdrptr), amount); if (
# 3699 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 3699 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      if (compunit.cu_length == 0xffffffff)
 {
   do { size_t amount = (8); if (sizeof (compunit.cu_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_length)); amount = sizeof (compunit.cu_length); } if (1) 
# 3703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 3703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end)
# 3703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 3703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end)
# 3703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 3703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (end)"
# 3703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3703, __extension__ __PRETTY_FUNCTION__); }))
# 3703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_length) = 0; else (compunit.cu_length) = (byte_get) ((hdrptr), amount); if (
# 3703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 3703 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   offset_size = 8;
 }
      else
 offset_size = 4;
      end_cu = hdrptr + compunit.cu_length;

      do { size_t amount = (2); if (sizeof (compunit.cu_version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_version)); amount = sizeof (compunit.cu_version); } if (1) 
# 3710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 3710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_cu)
# 3710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 3710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_cu)
# 3710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 3710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end_cu)"
# 3710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3710, __extension__ __PRETTY_FUNCTION__); }))
# 3710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_version) = 0; else (compunit.cu_version) = (byte_get) ((hdrptr), amount); if (
# 3710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 3710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      this_set = find_cu_tu_set_v2 (cu_offset, do_types);

      if (compunit.cu_version < 5)
 {
   compunit.cu_unit_type = DW_UT_compile;

   compunit.cu_pointer_size = -1;
 }
      else
 {
   do { size_t amount = (1); if (sizeof (compunit.cu_unit_type) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_unit_type)); amount = sizeof (compunit.cu_unit_type); } if (1) 
# 3722 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 3722 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3722 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 3722 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3722 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 3722 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (end_cu)"
# 3722 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3722, __extension__ __PRETTY_FUNCTION__); }))
# 3722 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_unit_type) = 0; else (compunit.cu_unit_type) = (byte_get) ((hdrptr), amount); if (
# 3722 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 3722 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   do_types = (compunit.cu_unit_type == DW_UT_type);

   do { size_t amount = (1); if (sizeof (compunit.cu_pointer_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_pointer_size)); amount = sizeof (compunit.cu_pointer_size); } if (1) 
# 3725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 3725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 3725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 3725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (end_cu)"
# 3725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3725, __extension__ __PRETTY_FUNCTION__); }))
# 3725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_pointer_size) = 0; else (compunit.cu_pointer_size) = (byte_get) ((hdrptr), amount); if (
# 3725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 3725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
 }

      do { size_t amount = (offset_size); if (sizeof (compunit.cu_abbrev_offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_abbrev_offset)); amount = sizeof (compunit.cu_abbrev_offset); } if (1) 
# 3728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 3728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_cu)
# 3728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 3728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_cu)
# 3728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 3728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end_cu)"
# 3728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3728, __extension__ __PRETTY_FUNCTION__); }))
# 3728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_abbrev_offset) = 0; else (compunit.cu_abbrev_offset) = (byte_get) ((hdrptr), amount); if (
# 3728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 3728 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0)
               ;

      if (compunit.cu_unit_type == DW_UT_split_compile
   || compunit.cu_unit_type == DW_UT_skeleton)
 {
   uint64_t dwo_id;
   do { size_t amount = (8); if (sizeof (dwo_id) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (dwo_id)); amount = sizeof (dwo_id); } if (1) 
# 3735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 3735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 3735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 3735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (end_cu)"
# 3735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3735, __extension__ __PRETTY_FUNCTION__); }))
# 3735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (dwo_id) = 0; else (dwo_id) = (byte_get) ((hdrptr), amount); if (
# 3735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 3735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
 }

      if (this_set == 
# 3738 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 3738 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         )
 {
   abbrev_base = 0;
   abbrev_size = debug_displays [abbrev_sec].section.size;
 }
      else
 {
   abbrev_base = this_set->section_offsets [DW_SECT_ABBREV];
   abbrev_size = this_set->section_sizes [DW_SECT_ABBREV];
 }

      abbrev_list *list;
      abbrev_list *free_list;
      list = find_and_process_abbrev_set (&debug_displays[abbrev_sec].section,
       abbrev_base, abbrev_size,
       compunit.cu_abbrev_offset,
       &free_list);
      start = end_cu;
      if (list != 
# 3756 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 ((void *)0) 
# 3756 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      && list->first_abbrev != 
# 3756 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                               ((void *)0)
# 3756 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                   )
 record_abbrev_list_for_cu (cu_offset, start - section_begin,
       list, free_list);
      else if (free_list != 
# 3759 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           ((void *)0)
# 3759 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               )
 free_abbrev_list (free_list);
    }

  for (start = section_begin, unit = 0; start < end; unit++)
    {
      DWARF2_Internal_CompUnit compunit;
      unsigned char *hdrptr;
      unsigned char *tags;
      int level, last_level, saved_level;
      uint64_t cu_offset;
      unsigned int offset_size;
      uint64_t signature = 0;
      uint64_t type_offset = 0;
      struct cu_tu_set *this_set;
      uint64_t abbrev_base;
      size_t abbrev_size;
      unsigned char *end_cu;

      hdrptr = start;
      cu_offset = start - section_begin;

      do { size_t amount = (4); if (sizeof (compunit.cu_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_length)); amount = sizeof (compunit.cu_length); } if (1) 
# 3781 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 3781 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 3781 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 3781 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 3781 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 3781 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 3781 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3781, __extension__ __PRETTY_FUNCTION__); }))
# 3781 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_length) = 0; else (compunit.cu_length) = (byte_get) ((hdrptr), amount); if (
# 3781 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 3781 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      if (compunit.cu_length == 0xffffffff)
 {
   do { size_t amount = (8); if (sizeof (compunit.cu_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_length)); amount = sizeof (compunit.cu_length); } if (1) 
# 3785 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 3785 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end)
# 3785 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 3785 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end)
# 3785 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 3785 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (end)"
# 3785 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3785, __extension__ __PRETTY_FUNCTION__); }))
# 3785 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_length) = 0; else (compunit.cu_length) = (byte_get) ((hdrptr), amount); if (
# 3785 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 3785 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   offset_size = 8;
 }
      else
 offset_size = 4;
      end_cu = hdrptr + compunit.cu_length;

      do { size_t amount = (2); if (sizeof (compunit.cu_version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_version)); amount = sizeof (compunit.cu_version); } if (1) 
# 3792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 3792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_cu)
# 3792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 3792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_cu)
# 3792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 3792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end_cu)"
# 3792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3792, __extension__ __PRETTY_FUNCTION__); }))
# 3792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_version) = 0; else (compunit.cu_version) = (byte_get) ((hdrptr), amount); if (
# 3792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 3792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      this_set = find_cu_tu_set_v2 (cu_offset, do_types);

      if (compunit.cu_version < 5)
 {
   compunit.cu_unit_type = DW_UT_compile;

   compunit.cu_pointer_size = -1;
 }
      else
 {
   do { size_t amount = (1); if (sizeof (compunit.cu_unit_type) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_unit_type)); amount = sizeof (compunit.cu_unit_type); } if (1) 
# 3804 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 3804 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3804 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 3804 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3804 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 3804 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (end_cu)"
# 3804 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3804, __extension__ __PRETTY_FUNCTION__); }))
# 3804 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_unit_type) = 0; else (compunit.cu_unit_type) = (byte_get) ((hdrptr), amount); if (
# 3804 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 3804 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   do_types = (compunit.cu_unit_type == DW_UT_type);

   do { size_t amount = (1); if (sizeof (compunit.cu_pointer_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_pointer_size)); amount = sizeof (compunit.cu_pointer_size); } if (1) 
# 3807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 3807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 3807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 3807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (end_cu)"
# 3807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3807, __extension__ __PRETTY_FUNCTION__); }))
# 3807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_pointer_size) = 0; else (compunit.cu_pointer_size) = (byte_get) ((hdrptr), amount); if (
# 3807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 3807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
 }

      do { size_t amount = (offset_size); if (sizeof (compunit.cu_abbrev_offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_abbrev_offset)); amount = sizeof (compunit.cu_abbrev_offset); } if (1) 
# 3810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 3810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_cu)
# 3810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 3810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_cu)
# 3810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 3810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end_cu)"
# 3810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3810, __extension__ __PRETTY_FUNCTION__); }))
# 3810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_abbrev_offset) = 0; else (compunit.cu_abbrev_offset) = (byte_get) ((hdrptr), amount); if (
# 3810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 3810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      if (this_set == 
# 3812 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 3812 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         )
 {
   abbrev_base = 0;
   abbrev_size = debug_displays [abbrev_sec].section.size;
 }
      else
 {
   abbrev_base = this_set->section_offsets [DW_SECT_ABBREV];
   abbrev_size = this_set->section_sizes [DW_SECT_ABBREV];
 }

      if (compunit.cu_version < 5)
 do { size_t amount = (1); if (sizeof (compunit.cu_pointer_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (compunit.cu_pointer_size)); amount = sizeof (compunit.cu_pointer_size); } if (1) 
# 3824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void) sizeof ((
# 3824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(hdrptr) <= (end_cu)
# 3824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ? 1 : 0), __extension__ ({ if (
# 3824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(hdrptr) <= (end_cu)
# 3824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ; else __assert_fail (
# 3824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
"(hdrptr) <= (end_cu)"
# 3824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
, "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3824, __extension__ __PRETTY_FUNCTION__); }))
# 3824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (compunit.cu_pointer_size) = 0; else (compunit.cu_pointer_size) = (byte_get) ((hdrptr), amount); if (
# 3824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
1
# 3824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
) (hdrptr) += amount; } while (0);

      
# 3826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     _Bool 
# 3826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          do_dwo_id = 
# 3826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                      0
# 3826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           ;
      uint64_t dwo_id = 0;
      if (compunit.cu_unit_type == DW_UT_split_compile
   || compunit.cu_unit_type == DW_UT_skeleton)
 {
   do { size_t amount = (8); if (sizeof (dwo_id) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (dwo_id)); amount = sizeof (dwo_id); } if (1) 
# 3831 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 3831 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3831 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 3831 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3831 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 3831 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (end_cu)"
# 3831 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3831, __extension__ __PRETTY_FUNCTION__); }))
# 3831 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (dwo_id) = 0; else (dwo_id) = (byte_get) ((hdrptr), amount); if (
# 3831 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 3831 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   do_dwo_id = 
# 3832 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              1
# 3832 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  ;
 }


      if (compunit.cu_pointer_size < 2 || compunit.cu_pointer_size > 8)
 {
   warn (gettext ("Invalid pointer size (%d) in compunit header, using %d instead\n"),
  compunit.cu_pointer_size, offset_size);
   compunit.cu_pointer_size = offset_size;
 }

      if (do_types)
 {
   do { size_t amount = (8); if (sizeof (signature) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (signature)); amount = sizeof (signature); } if (1) 
# 3845 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 3845 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3845 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 3845 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3845 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 3845 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (end_cu)"
# 3845 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3845, __extension__ __PRETTY_FUNCTION__); }))
# 3845 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (signature) = 0; else (signature) = (byte_get) ((hdrptr), amount); if (
# 3845 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 3845 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   do { size_t amount = (offset_size); if (sizeof (type_offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (type_offset)); amount = sizeof (type_offset); } if (1) 
# 3846 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 3846 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3846 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 3846 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end_cu)
# 3846 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 3846 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (end_cu)"
# 3846 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 3846, __extension__ __PRETTY_FUNCTION__); }))
# 3846 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end_cu) - (hdrptr); if ((hdrptr) > (end_cu)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (type_offset) = 0; else (type_offset) = (byte_get) ((hdrptr), amount); if (
# 3846 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 3846 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
 }

      if (dwarf_start_die >= (size_t) (end_cu - section_begin))
 {
   start = end_cu;
   continue;
 }

      if ((do_loc || do_debug_loc || do_debug_ranges || do_debug_info)
   && num_debug_info_entries == 0
   && alloc_num_debug_info_entries > unit
   && ! do_types)
 {
   free_debug_information (&debug_information[unit]);
   memset (&debug_information[unit], 0, sizeof (*debug_information));
   debug_information[unit].pointer_size = compunit.cu_pointer_size;
   debug_information[unit].offset_size = offset_size;
   debug_information[unit].dwarf_version = compunit.cu_version;
   debug_information[unit].cu_offset = cu_offset;
   debug_information[unit].addr_base = (unsigned int) -1;
   debug_information[unit].ranges_base = (unsigned int) -1;
 }

      if (!do_loc && dwarf_start_die == 0)
 {
   printf (gettext ("  Compilation Unit @ offset %#" 
# 3872 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 3872 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          ":\n"),
    cu_offset);
   printf (gettext ("   Length:        %#" 
# 3874 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 3874 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " (%s)\n"),
    compunit.cu_length,
    offset_size == 8 ? "64-bit" : "32-bit");
   printf (gettext ("   Version:       %d\n"), compunit.cu_version);
   if (compunit.cu_version >= 5)
     {
       const char *name = get_DW_UT_name (compunit.cu_unit_type);

       printf (gettext ("   Unit Type:     %s (%x)\n"),
        null_name (name),
        compunit.cu_unit_type);
     }
   printf (gettext ("   Abbrev Offset: %#" 
# 3886 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 3886 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "\n"),
    compunit.cu_abbrev_offset);
   printf (gettext ("   Pointer Size:  %d\n"), compunit.cu_pointer_size);
   if (do_types)
     {
       printf (gettext ("   Signature:     %#" 
# 3891 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 3891 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              "\n"), signature);
       printf (gettext ("   Type Offset:   %#" 
# 3892 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 3892 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              "\n"), type_offset);
     }
   if (do_dwo_id)
     printf (gettext ("   DWO ID:        %#" 
# 3895 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 3895 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            "\n"), dwo_id);
   if (this_set != 
# 3896 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  ((void *)0)
# 3896 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      )
     {
       uint64_t *offsets = this_set->section_offsets;
       size_t *sizes = this_set->section_sizes;

       printf (gettext ("   Section contributions:\n"));
       printf (gettext ("    .debug_abbrev.dwo:       %#" 
# 3902 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 3902 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              "  %#zx\n"),
        offsets[DW_SECT_ABBREV], sizes[DW_SECT_ABBREV]);
       printf (gettext ("    .debug_line.dwo:         %#" 
# 3904 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 3904 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              "  %#zx\n"),
        offsets[DW_SECT_LINE], sizes[DW_SECT_LINE]);
       printf (gettext ("    .debug_loc.dwo:          %#" 
# 3906 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 3906 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              "  %#zx\n"),
        offsets[DW_SECT_LOC], sizes[DW_SECT_LOC]);
       printf (gettext ("    .debug_str_offsets.dwo:  %#" 
# 3908 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 3908 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              "  %#zx\n"),
        offsets[DW_SECT_STR_OFFSETS], sizes[DW_SECT_STR_OFFSETS]);
     }
 }

      tags = hdrptr;
      start = end_cu;

      if (compunit.cu_version < 2 || compunit.cu_version > 5)
 {
   warn (gettext ("CU at offset %#" 
# 3918 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 3918 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " contains corrupt or " "unsupported version number: %d.\n")
                                        ,
  cu_offset, compunit.cu_version);
   continue;
 }

      if (compunit.cu_unit_type != DW_UT_compile
   && compunit.cu_unit_type != DW_UT_partial
   && compunit.cu_unit_type != DW_UT_type
   && compunit.cu_unit_type != DW_UT_split_compile
   && compunit.cu_unit_type != DW_UT_skeleton)
 {
   warn (gettext ("CU at offset %#" 
# 3930 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 3930 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " contains corrupt or " "unsupported unit type: %d.\n")
                                   ,
  cu_offset, compunit.cu_unit_type);
   continue;
 }


      abbrev_list *list;
      list = find_and_process_abbrev_set (&debug_displays[abbrev_sec].section,
       abbrev_base, abbrev_size,
       compunit.cu_abbrev_offset, 
# 3940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 ((void *)0)
# 3940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                     );
      level = 0;
      last_level = level;
      saved_level = -1;
      while (tags < start)
 {
   unsigned long abbrev_number;
   unsigned long die_offset;
   abbrev_entry *entry;
   abbrev_attr *attr;
   int do_printing = 1;

   die_offset = tags - section_begin;

   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (tags, start, 
# 3954 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 3954 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); tags += _len; (abbrev_number) = _val; if ((abbrev_number) != _val) _status |= 2; report_leb_status (_status); } while (0);



   if (abbrev_number == 0)
     {

       if (level == 0 && start == end)
  {
    unsigned char *chk;

    for (chk = tags; chk < start; chk++)
      if (*chk != 0)
        break;
    if (chk == start)
      break;
  }

       if (!do_loc && die_offset >= dwarf_start_die
    && (dwarf_cutoff_level == -1
        || level < dwarf_cutoff_level))
  printf (gettext (" <%d><%lx>: Abbrev Number: 0\n"),
   level, die_offset);

       --level;
       if (level < 0)
  {
    static unsigned num_bogus_warns = 0;

    if (num_bogus_warns < 3)
      {
        warn (gettext ("Bogus end-of-siblings marker detected at offset %lx in %s section\n"),
       die_offset, section->name);
        num_bogus_warns ++;
        if (num_bogus_warns == 3)
   warn (gettext ("Further warnings about bogus end-of-sibling markers suppressed\n"));
      }
  }
       if (dwarf_start_die != 0 && level < saved_level)
  return 
# 3993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        1
# 3993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ;
       continue;
     }

   if (!do_loc)
     {
       if (dwarf_start_die != 0 && die_offset < dwarf_start_die)
  do_printing = 0;
       else
  {
    if (dwarf_start_die != 0 && die_offset == dwarf_start_die)
      saved_level = level;
    do_printing = (dwarf_cutoff_level == -1
     || level < dwarf_cutoff_level);
    if (do_printing)
      printf (gettext (" <%d><%lx>: Abbrev Number: %lu"),
       level, die_offset, abbrev_number);
    else if (dwarf_cutoff_level == -1
      || last_level < dwarf_cutoff_level)
      printf (gettext (" <%d><%lx>: ...\n"), level, die_offset);
    last_level = level;
  }
     }



   entry = 
# 4019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 4019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
   if (list != 
# 4020 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              ((void *)0)
# 4020 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  )
     for (entry = list->first_abbrev; entry != 
# 4021 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                              ((void *)0)
# 4021 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                  ; entry = entry->next)
       if (entry->number == abbrev_number)
  break;

   if (entry == 
# 4025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               ((void *)0)
# 4025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   )
     {
       if (!do_loc && do_printing)
  {
    printf ("\n");
    fflush (
# 4030 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           stdout
# 4030 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 );
  }
       warn (gettext ("DIE at offset %#lx refers to abbreviation number %lu which does not exist\n"),
      die_offset, abbrev_number);
       return 
# 4034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             0
# 4034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  ;
     }

   if (!do_loc && do_printing)
     printf (" (%s)\n", get_TAG_name (entry->tag));

   switch (entry->tag)
     {
     default:
       need_base_address = 0;
       break;
     case DW_TAG_compile_unit:
     case DW_TAG_skeleton_unit:
       need_base_address = 1;
       need_dwo_info = do_loc;
       break;
     case DW_TAG_entry_point:
     case DW_TAG_subprogram:
       need_base_address = 0;

       have_frame_base = 0;
       break;
     }

   debug_info *debug_info_p =
     (debug_information && unit < alloc_num_debug_info_entries)
     ? debug_information + unit : 
# 4060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 ((void *)0)
# 4060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                     ;

   
# 4062 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 4062 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  !debug_info_p || (debug_info_p->num_loc_offsets == debug_info_p->num_loc_views)
# 4062 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 4062 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  !debug_info_p || (debug_info_p->num_loc_offsets == debug_info_p->num_loc_views)
# 4062 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 4062 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "!debug_info_p || (debug_info_p->num_loc_offsets == debug_info_p->num_loc_views)"
# 4062 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4062, __extension__ __PRETTY_FUNCTION__); }))

                                        
# 4064 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       ;

   for (attr = entry->first_attr;
        attr && attr->attribute;
        attr = attr->next)
     {
       if (! do_loc && do_printing)

  printf ("    <%tx>", tags - section_begin);
       tags = read_and_display_attr (attr->attribute,
         attr->form,
         attr->implicit_const,
         section_begin,
         tags,
         start,
         cu_offset,
         compunit.cu_pointer_size,
         offset_size,
         compunit.cu_version,
         debug_info_p,
         do_loc || ! do_printing,
         section,
         this_set,
         level);
     }




   if (debug_info_p)
     switch (debug_info_p->num_loc_offsets - debug_info_p->num_loc_views)
       {
       case 1:
  debug_info_p->loc_views [debug_info_p->num_loc_views] = -1;
  debug_info_p->num_loc_views++;
  
# 4099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 debug_info_p->num_loc_views == debug_info_p->num_loc_offsets
# 4099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 debug_info_p->num_loc_views == debug_info_p->num_loc_offsets
# 4099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "debug_info_p->num_loc_views == debug_info_p->num_loc_offsets"
# 4099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4099, __extension__ __PRETTY_FUNCTION__); }))
                                    
# 4100 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   ;
  break;

       case 0:
  break;

       case -1:
  warn(gettext ("DIE has locviews without loclist\n"));
  debug_info_p->num_loc_views--;
  break;

       default:
  
# 4112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 0
# 4112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 0
# 4112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "0"
# 4112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4112, __extension__ __PRETTY_FUNCTION__); }))
# 4112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ;
     }

   if (entry->children)
     ++level;
 }
      if (list != 
# 4118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 ((void *)0)
# 4118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     )
 free_abbrev_list (list);
    }



  if ((do_loc || do_debug_loc || do_debug_ranges || do_debug_info)
      && num_debug_info_entries == 0
      && ! do_types)
    {
      if (num_units > alloc_num_debug_info_entries)
 num_debug_info_entries = alloc_num_debug_info_entries;
      else
 num_debug_info_entries = num_units;
    }

  if (!do_loc)
    printf ("\n");

  return 
# 4137 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        1
# 4137 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ;
}







static unsigned int
load_debug_info (void * file)
{


  if (num_debug_info_entries == (unsigned int) -1)
    return 0;


  if (num_debug_info_entries > 0)
    return num_debug_info_entries;


  (void) load_cu_tu_indexes (file);

  if (load_debug_section_with_follow (info, file)
      && process_debug_info (&debug_displays [info].section, file, abbrev, 
# 4162 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                          1
# 4162 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                              , 
# 4162 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                0
# 4162 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                     ))
    return num_debug_info_entries;

  if (load_debug_section_with_follow (info_dwo, file)
      && process_debug_info (&debug_displays [info_dwo].section, file,
        abbrev_dwo, 
# 4167 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   1
# 4167 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 4167 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         0
# 4167 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                              ))
    return num_debug_info_entries;

  num_debug_info_entries = (unsigned int) -1;
  return 0;
}






static unsigned char *
read_debug_line_header (struct dwarf_section * section,
   unsigned char * data,
   unsigned char * end,
   DWARF2_Internal_LineInfo * linfo,
   unsigned char ** end_of_sequence)
{
  unsigned char *hdrptr;



  hdrptr = data;


  do { size_t amount = (4); if (sizeof (linfo->li_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_length)); amount = sizeof (linfo->li_length); } if (1) 
# 4193 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4193 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4193 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4193 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4193 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4193 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(hdrptr) <= (end)"
# 4193 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4193, __extension__ __PRETTY_FUNCTION__); }))
# 4193 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_length) = 0; else (linfo->li_length) = (byte_get) ((hdrptr), amount); if (
# 4193 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 4193 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (hdrptr) += amount; } while (0);

  if (linfo->li_length == 0xffffffff)
    {

      do { size_t amount = (8); if (sizeof (linfo->li_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_length)); amount = sizeof (linfo->li_length); } if (1) 
# 4198 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 4198 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 4198 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 4198 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 4198 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 4198 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 4198 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4198, __extension__ __PRETTY_FUNCTION__); }))
# 4198 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_length) = 0; else (linfo->li_length) = (byte_get) ((hdrptr), amount); if (
# 4198 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 4198 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      linfo->li_offset_size = 8;
    }
  else
    linfo->li_offset_size = 4;

  if (linfo->li_length > (size_t) (end - hdrptr))
    {






      if (reloc_at (section, (hdrptr - section->start) - linfo->li_offset_size))
 {
   linfo->li_length = end - hdrptr;
 }
      else
 {
   warn (gettext ("The length field (%#" 
# 4218 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 4218 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ")" " in the debug_line header is wrong" " - the section is too small\n")

                                    ,
  linfo->li_length);
   return 
# 4222 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         ((void *)0)
# 4222 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             ;
 }
    }
  end = hdrptr + linfo->li_length;


  do { size_t amount = (2); if (sizeof (linfo->li_version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_version)); amount = sizeof (linfo->li_version); } if (1) 
# 4228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(hdrptr) <= (end)"
# 4228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4228, __extension__ __PRETTY_FUNCTION__); }))
# 4228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_version) = 0; else (linfo->li_version) = (byte_get) ((hdrptr), amount); if (
# 4228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 4228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (hdrptr) += amount; } while (0);

  if (linfo->li_version != 2
      && linfo->li_version != 3
      && linfo->li_version != 4
      && linfo->li_version != 5)
    {
      warn (gettext ("Only DWARF version 2, 3, 4 and 5 line info " "is currently supported.\n")
                                   );
      return 
# 4237 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 4237 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }

  if (linfo->li_version >= 5)
    {
      do { size_t amount = (1); if (sizeof (linfo->li_address_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_address_size)); amount = sizeof (linfo->li_address_size); } if (1) 
# 4242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 4242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 4242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 4242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 4242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 4242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 4242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4242, __extension__ __PRETTY_FUNCTION__); }))
# 4242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_address_size) = 0; else (linfo->li_address_size) = (byte_get) ((hdrptr), amount); if (
# 4242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 4242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      do { size_t amount = (1); if (sizeof (linfo->li_segment_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_segment_size)); amount = sizeof (linfo->li_segment_size); } if (1) 
# 4244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 4244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 4244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 4244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 4244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 4244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 4244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4244, __extension__ __PRETTY_FUNCTION__); }))
# 4244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_segment_size) = 0; else (linfo->li_segment_size) = (byte_get) ((hdrptr), amount); if (
# 4244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 4244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      if (linfo->li_segment_size != 0)
 {
   warn (gettext ("The %s section contains " "unsupported segment selector size: %d.\n")
                                               ,
  section->name, linfo->li_segment_size);
   return 
# 4250 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         ((void *)0)
# 4250 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             ;
 }
    }

  do { size_t amount = (linfo->li_offset_size); if (sizeof (linfo->li_prologue_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_prologue_length)); amount = sizeof (linfo->li_prologue_length); } if (1) 
# 4254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(hdrptr) <= (end)"
# 4254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4254, __extension__ __PRETTY_FUNCTION__); }))
# 4254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_prologue_length) = 0; else (linfo->li_prologue_length) = (byte_get) ((hdrptr), amount); if (
# 4254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 4254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (hdrptr) += amount; } while (0)
                               ;
  do { size_t amount = (1); if (sizeof (linfo->li_min_insn_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_min_insn_length)); amount = sizeof (linfo->li_min_insn_length); } if (1) 
# 4256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(hdrptr) <= (end)"
# 4256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4256, __extension__ __PRETTY_FUNCTION__); }))
# 4256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_min_insn_length) = 0; else (linfo->li_min_insn_length) = (byte_get) ((hdrptr), amount); if (
# 4256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 4256 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (hdrptr) += amount; } while (0);

  if (linfo->li_version >= 4)
    {
      do { size_t amount = (1); if (sizeof (linfo->li_max_ops_per_insn) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_max_ops_per_insn)); amount = sizeof (linfo->li_max_ops_per_insn); } if (1) 
# 4260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 4260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 4260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 4260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 4260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 4260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 4260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4260, __extension__ __PRETTY_FUNCTION__); }))
# 4260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_max_ops_per_insn) = 0; else (linfo->li_max_ops_per_insn) = (byte_get) ((hdrptr), amount); if (
# 4260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 4260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      if (linfo->li_max_ops_per_insn == 0)
 {
   warn (gettext ("Invalid maximum operations per insn.\n"));
   return 
# 4265 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         ((void *)0)
# 4265 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             ;
 }
    }
  else
    linfo->li_max_ops_per_insn = 1;

  do { size_t amount = (1); if (sizeof (linfo->li_default_is_stmt) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_default_is_stmt)); amount = sizeof (linfo->li_default_is_stmt); } if (1) 
# 4271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(hdrptr) <= (end)"
# 4271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4271, __extension__ __PRETTY_FUNCTION__); }))
# 4271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_default_is_stmt) = 0; else (linfo->li_default_is_stmt) = (byte_get) ((hdrptr), amount); if (
# 4271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 4271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (hdrptr) += amount; } while (0);
  do { size_t amount = (1); if (sizeof (linfo->li_line_base) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_line_base)); amount = sizeof (linfo->li_line_base); } if (1) 
# 4272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(hdrptr) <= (end)"
# 4272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4272, __extension__ __PRETTY_FUNCTION__); }))
# 4272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_line_base) = 0; else (linfo->li_line_base) = (byte_get_signed) ((hdrptr), amount); if (
# 4272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 4272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (hdrptr) += amount; } while (0);
  do { size_t amount = (1); if (sizeof (linfo->li_line_range) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_line_range)); amount = sizeof (linfo->li_line_range); } if (1) 
# 4273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(hdrptr) <= (end)"
# 4273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4273, __extension__ __PRETTY_FUNCTION__); }))
# 4273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_line_range) = 0; else (linfo->li_line_range) = (byte_get) ((hdrptr), amount); if (
# 4273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 4273 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (hdrptr) += amount; } while (0);
  do { size_t amount = (1); if (sizeof (linfo->li_opcode_base) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (linfo->li_opcode_base)); amount = sizeof (linfo->li_opcode_base); } if (1) 
# 4274 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4274 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4274 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4274 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 4274 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4274 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(hdrptr) <= (end)"
# 4274 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4274, __extension__ __PRETTY_FUNCTION__); }))
# 4274 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (linfo->li_opcode_base) = 0; else (linfo->li_opcode_base) = (byte_get) ((hdrptr), amount); if (
# 4274 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 4274 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (hdrptr) += amount; } while (0);

  *end_of_sequence = end;
  return hdrptr;
}

static unsigned char *
display_formatted_table (unsigned char *data,
    unsigned char *start,
    unsigned char *end,
    const DWARF2_Internal_LineInfo *linfo,
    struct dwarf_section *section,
    
# 4286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   _Bool 
# 4286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        is_dir)
{
  unsigned char *format_start, format_count, *format, formati;
  uint64_t data_count, datai;
  unsigned int namepass, last_entry = 0;
  const char * table_name = is_dir ? ("Directory Table") : ("File Name Table");

  do { size_t amount = (1); if (sizeof (format_count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (format_count)); amount = sizeof (format_count); } if (1) 
# 4293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (data) <= (end)
# 4293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (data) <= (end)
# 4293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(data) <= (end)"
# 4293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4293, __extension__ __PRETTY_FUNCTION__); }))
# 4293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (format_count) = 0; else (format_count) = (byte_get) ((data), amount); if (
# 4293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 4293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (data) += amount; } while (0);
  if (do_checks && format_count > 5)
    warn (gettext ("Unexpectedly large number of columns in the %s (%u)\n"),
   table_name, format_count);

  format_start = data;
  for (formati = 0; formati < format_count; formati++)
    {
      do { unsigned int _len; read_leb128 (data, end, 
# 4301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 4301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, 
# 4301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void *)0)
# 4301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ); data += _len; } while (0);
      do { unsigned int _len; read_leb128 (data, end, 
# 4302 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 4302 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, 
# 4302 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void *)0)
# 4302 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ); data += _len; } while (0);
      if (data >= end)
 {
   warn (gettext ("%s: Corrupt format description entry\n"), table_name);
   return data;
 }
    }

  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 4310 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 4310 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (data_count) = _val; if ((data_count) != _val) _status |= 2; report_leb_status (_status); } while (0);
  if (data_count == 0)
    {
      printf (gettext ("\n The %s is empty.\n"), table_name);
      return data;
    }
  else if (data >= end)
    {
      warn (gettext ("%s: Corrupt entry count - expected %#" 
# 4318 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 4318 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           " but none found\n")
                           , table_name, data_count);
      return data;
    }

  else if (format_count == 0)
    {
      warn (gettext ("%s: format count is zero, but the table is not empty\n"),
     table_name);
      return end;
    }

  printf (gettext ("\n The %s (offset %#tx, lines %" 
# 4330 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         "l" "u" 
# 4330 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
         ", columns %u):\n"),
   table_name, data - start, data_count, format_count);

  printf (gettext ("  Entry"));

  for (namepass = 0; namepass < 2; namepass++)
    {
      format = format_start;
      for (formati = 0; formati < format_count; formati++)
 {
   uint64_t content_type;

   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (format, end, 
# 4342 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 4342 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); format += _len; (content_type) = _val; if ((content_type) != _val) _status |= 2; report_leb_status (_status); } while (0);
   if ((content_type == DW_LNCT_path) == (namepass == 1))
     switch (content_type)
       {
       case DW_LNCT_path:
  printf (gettext ("\tName"));
  break;
       case DW_LNCT_directory_index:
  printf (gettext ("\tDir"));
  break;
       case DW_LNCT_timestamp:
  printf (gettext ("\tTime"));
  break;
       case DW_LNCT_size:
  printf (gettext ("\tSize"));
  break;
       case DW_LNCT_MD5:
  printf (gettext ("\tMD5\t\t\t"));
  break;
       default:
  printf (gettext ("\t(Unknown format content type %" 
# 4362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         "l" "u" 
# 4362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
         ")"),
   content_type);
       }
   do { unsigned int _len; read_leb128 (format, end, 
# 4365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 4365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, 
# 4365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void *)0)
# 4365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ); format += _len; } while (0);
 }
    }
  putchar ('\n');

  for (datai = 0; datai < data_count; datai++)
    {
      unsigned char *datapass = data;

      printf ("  %d", last_entry++);

      for (namepass = 0; namepass < 2; namepass++)
 {
   format = format_start;
   data = datapass;
   for (formati = 0; formati < format_count; formati++)
     {
       uint64_t content_type, form;

       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (format, end, 
# 4384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 4384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); format += _len; (content_type) = _val; if ((content_type) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (format, end, 
# 4385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 4385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); format += _len; (form) = _val; if ((form) != _val) _status |= 2; report_leb_status (_status); } while (0);
       data = read_and_display_attr_value (0, form, 0, start, data, end,
        0, 0, linfo->li_offset_size,
        linfo->li_version, 
# 4388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          ((void *)0)
# 4388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                              ,
       ((content_type == DW_LNCT_path) != (namepass == 1)),
        section, 
# 4390 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                ((void *)0)
# 4390 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    , '\t', -1);
     }
 }

      if (data >= end && (datai < data_count - 1))
 {
   warn (gettext ("\n%s: Corrupt entries list\n"), table_name);
   return data;
 }
      putchar ('\n');
    }
  return data;
}

static int
display_debug_sup (struct dwarf_section * section,
     void * file __attribute__ ((__unused__)))
{
  unsigned char * start = section->start;
  unsigned char * end = section->start + section->size;
  unsigned int version;
  char is_supplementary;
  const unsigned char * sup_filename;
  size_t sup_filename_len;
  unsigned int num_read;
  int status;
  uint64_t checksum_len;


  introduce (section, 
# 4419 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     1
# 4419 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         );
  if (section->size < 4)
    {
      error (gettext ("corrupt .debug_sup section: size is too small\n"));
      return 0;
    }


  do { size_t amount = (2); if (sizeof (version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (version)); amount = sizeof (version); } if (1) 
# 4427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (start) <= (end)
# 4427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (start) <= (end)
# 4427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(start) <= (end)"
# 4427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4427, __extension__ __PRETTY_FUNCTION__); }))
# 4427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (version) = 0; else (version) = (byte_get) ((start), amount); if (
# 4427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 4427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (start) += amount; } while (0);
  if (version < 5)
    warn (gettext ("corrupt .debug_sup section: version < 5"));

  do { size_t amount = (1); if (sizeof (is_supplementary) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (is_supplementary)); amount = sizeof (is_supplementary); } if (1) 
# 4431 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 4431 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (start) <= (end)
# 4431 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 4431 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (start) <= (end)
# 4431 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 4431 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(start) <= (end)"
# 4431 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4431, __extension__ __PRETTY_FUNCTION__); }))
# 4431 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (is_supplementary) = 0; else (is_supplementary) = (byte_get) ((start), amount); if (
# 4431 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 4431 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (start) += amount; } while (0);
  if (is_supplementary != 0 && is_supplementary != 1)
    warn (gettext ("corrupt .debug_sup section: is_supplementary not 0 or 1\n"));

  sup_filename = start;
  if (is_supplementary && sup_filename[0] != 0)
    warn (gettext ("corrupt .debug_sup section: filename not empty in supplementary section\n"));

  sup_filename_len = strnlen ((const char *) start, end - start);
  if (sup_filename_len == (size_t) (end - start))
    {
      error (gettext ("corrupt .debug_sup section: filename is not NUL terminated\n"));
      return 0;
    }
  start += sup_filename_len + 1;

  checksum_len = read_leb128 (start, end, 
# 4447 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                         0 
# 4447 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                             , & num_read, & status);
  if (status)
    {
      error (gettext ("corrupt .debug_sup section: bad LEB128 field for checksum length\n"));
      checksum_len = 0;
    }
  start += num_read;
  if (checksum_len > (size_t) (end - start))
    {
      error (gettext ("corrupt .debug_sup section: checksum length is longer than the remaining section length\n"));
      checksum_len = end - start;
    }
  else if (checksum_len < (size_t) (end - start))
    {
      warn (gettext ("corrupt .debug_sup section: there are %#" 
# 4461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "x" 
# 4461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           " extra, unused bytes at the end of the section\n")
                                                          ,
     (end - start) - checksum_len);
    }

  printf (gettext ("  Version:      %u\n"), version);
  printf (gettext ("  Is Supp:      %u\n"), is_supplementary);
  printf (gettext ("  Filename:     %s\n"), sup_filename);
  printf (gettext ("  Checksum Len: %" 
# 4469 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         "l" "u" 
# 4469 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
         "\n"), checksum_len);
  if (checksum_len > 0)
    {
      printf (gettext ("  Checksum:     "));
      while (checksum_len--)
 printf ("0x%x ", * start++ );
      printf ("\n");
    }
  return 1;
}

static int
display_debug_lines_raw (struct dwarf_section * section,
    unsigned char * data,
    unsigned char * end,
    void * file)
{
  unsigned char *start = section->start;
  int verbose_view = 0;

  introduce (section, 
# 4489 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     1
# 4489 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         );

  while (data < end)
    {
      static DWARF2_Internal_LineInfo saved_linfo;
      DWARF2_Internal_LineInfo linfo;
      unsigned char *standard_opcodes;
      unsigned char *end_of_sequence;
      int i;

      if (startswith (section->name, ".debug_line.")


   && strcmp (section->name, ".debug_line.dwo") != 0)
 {
# 4514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   end_of_sequence = end;
   standard_opcodes = 
# 4515 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 4515 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;
   linfo = saved_linfo;

   if (linfo.li_line_range == 0)
     {
       warn (gettext ("Partial .debug_line. section encountered without a prior full .debug_line section\n"));
       return 0;
     }
   reset_state_machine (linfo.li_default_is_stmt);
 }
      else
 {
   unsigned char * hdrptr;

   if ((hdrptr = read_debug_line_header (section, data, end, & linfo,
      & end_of_sequence)) == 
# 4530 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            ((void *)0)
# 4530 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                )
     return 0;

   printf (gettext ("  Offset:                      %#tx\n"), data - start);
   printf (gettext ("  Length:                      %" 
# 4534 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "d" 
# 4534 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "\n"), linfo.li_length);
   printf (gettext ("  DWARF Version:               %d\n"), linfo.li_version);
   if (linfo.li_version >= 5)
     {
       printf (gettext ("  Address size (bytes):        %d\n"), linfo.li_address_size);
       printf (gettext ("  Segment selector (bytes):    %d\n"), linfo.li_segment_size);
     }
   printf (gettext ("  Prologue Length:             %d\n"), (int) linfo.li_prologue_length);
   printf (gettext ("  Minimum Instruction Length:  %d\n"), linfo.li_min_insn_length);
   if (linfo.li_version >= 4)
     printf (gettext ("  Maximum Ops per Instruction: %d\n"), linfo.li_max_ops_per_insn);
   printf (gettext ("  Initial value of 'is_stmt':  %d\n"), linfo.li_default_is_stmt);
   printf (gettext ("  Line Base:                   %d\n"), linfo.li_line_base);
   printf (gettext ("  Line Range:                  %d\n"), linfo.li_line_range);
   printf (gettext ("  Opcode Base:                 %d\n"), linfo.li_opcode_base);


   if (linfo.li_line_range == 0)
     {
       warn (gettext ("Line range of 0 is invalid, using 1 instead\n"));
       linfo.li_line_range = 1;
     }

   reset_state_machine (linfo.li_default_is_stmt);


   standard_opcodes = hdrptr;


   if (standard_opcodes + linfo.li_opcode_base >= end)
     {
       warn (gettext ("Line Base extends beyond end of section\n"));
       return 0;
     }

   printf (gettext ("\n Opcodes:\n"));

   for (i = 1; i < linfo.li_opcode_base; i++)
     printf (ngettext ("  Opcode %d has %d arg\n",
         "  Opcode %d has %d args\n",
         standard_opcodes[i - 1]),
      i, standard_opcodes[i - 1]);


   data = standard_opcodes + linfo.li_opcode_base - 1;

   if (linfo.li_version >= 5)
     {
       load_debug_section_with_follow (line_str, file);

       data = display_formatted_table (data, start, end, &linfo, section,
           
# 4585 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          1
# 4585 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              );
       data = display_formatted_table (data, start, end, &linfo, section,
           
# 4587 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          0
# 4587 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               );
     }
   else
     {
       if (*data == 0)
  printf (gettext ("\n The Directory Table is empty.\n"));
       else
  {
    unsigned int last_dir_entry = 0;

    printf (gettext ("\n The Directory Table (offset %#tx):\n"),
     data - start);

    while (data < end && *data != 0)
      {
        printf ("  %d\t%.*s\n", ++last_dir_entry, (int) (end - data), data);

        data += strnlen ((char *) data, end - data);
        if (data < end)
   data++;
      }


    if (data >= end - 1)
      break;
  }


       if (data < end)
  data++;


       if (data >= end || *data == 0)
  printf (gettext ("\n The File Name Table is empty.\n"));
       else
  {
    printf (gettext ("\n The File Name Table (offset %#tx):\n"),
     data - start);
    printf (gettext ("  Entry\tDir\tTime\tSize\tName\n"));

    while (data < end && *data != 0)
      {
        unsigned char *name;
        uint64_t val;

        printf ("  %d\t", ++state_machine_regs.last_file_entry);
        name = data;
        data += strnlen ((char *) data, end - data);
        if (data < end)
   data++;

        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 4638 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 4638 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
        printf ("%" 
# 4639 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   "l" "u" 
# 4639 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          "\t", val);
        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 4640 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 4640 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
        printf ("%" 
# 4641 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   "l" "u" 
# 4641 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          "\t", val);
        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 4642 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 4642 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
        printf ("%" 
# 4643 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   "l" "u" 
# 4643 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          "\t", val);
        printf ("%.*s\n", (int)(end - name), name);

        if (data >= end)
   {
     warn (gettext ("Corrupt file name table entry\n"));
     break;
   }
      }
  }


       if (data < end)
  data++;
     }

   putchar ('\n');
   saved_linfo = linfo;
 }


      if (data >= end_of_sequence)
 printf (gettext (" No Line Number Statements.\n"));
      else
 {
   printf (gettext (" Line Number Statements:\n"));

   while (data < end_of_sequence)
     {
       unsigned char op_code;
       int adv;
       uint64_t uladv;

       printf ("  [0x%08tx]", data - start);

       op_code = *data++;

       if (op_code >= linfo.li_opcode_base)
  {
    op_code -= linfo.li_opcode_base;
    uladv = (op_code / linfo.li_line_range);
    if (linfo.li_max_ops_per_insn == 1)
      {
        uladv *= linfo.li_min_insn_length;
        state_machine_regs.address += uladv;
        if (uladv)
   state_machine_regs.view = 0;
        printf (gettext ("  Special opcode %d: " "advance Address by %" 
# 4690 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               "l" "u" 
# 4690 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               " to %#" 
# 4690 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               "l" "x" 
# 4690 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               "%s")

                         ,
         op_code, uladv, state_machine_regs.address,
         verbose_view && uladv
         ? gettext (" (reset view)") : "");
      }
    else
      {
        unsigned addrdelta
   = ((state_machine_regs.op_index + uladv)
       / linfo.li_max_ops_per_insn)
   * linfo.li_min_insn_length;

        state_machine_regs.address += addrdelta;
        state_machine_regs.op_index
   = (state_machine_regs.op_index + uladv)
   % linfo.li_max_ops_per_insn;
        if (addrdelta)
   state_machine_regs.view = 0;
        printf (gettext ("  Special opcode %d: " "advance Address by %" 
# 4710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               "l" "u" 
# 4710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               " to %#" 
# 4710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               "l" "x" 
# 4710 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               "[%d]%s")

                             ,
         op_code, uladv, state_machine_regs.address,
         state_machine_regs.op_index,
         verbose_view && addrdelta
         ? gettext (" (reset view)") : "");
      }
    adv = (op_code % linfo.li_line_range) + linfo.li_line_base;
    state_machine_regs.line += adv;
    printf (gettext (" and Line by %d to %d"),
     adv, state_machine_regs.line);
    if (verbose_view || state_machine_regs.view)
      printf (gettext (" (view %u)\n"), state_machine_regs.view);
    else
      putchar ('\n');
    state_machine_regs.view++;
  }
       else
  switch (op_code)
    {
    case DW_LNS_extended_op:
      data += process_extended_line_op (data,
            linfo.li_default_is_stmt,
            end);
      break;

    case DW_LNS_copy:
      printf (gettext ("  Copy"));
      if (verbose_view || state_machine_regs.view)
        printf (gettext (" (view %u)\n"), state_machine_regs.view);
      else
        putchar ('\n');
      state_machine_regs.view++;
      break;

    case DW_LNS_advance_pc:
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 4747 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 4747 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (uladv) = _val; if ((uladv) != _val) _status |= 2; report_leb_status (_status); } while (0);
      if (linfo.li_max_ops_per_insn == 1)
        {
   uladv *= linfo.li_min_insn_length;
   state_machine_regs.address += uladv;
   if (uladv)
     state_machine_regs.view = 0;
   printf (gettext ("  Advance PC by %" 
# 4754 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "u" 
# 4754 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " to %#" 
# 4754 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 4754 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "%s\n")
                             ,
    uladv, state_machine_regs.address,
    verbose_view && uladv
    ? gettext (" (reset view)") : "");
        }
      else
        {
   unsigned addrdelta
     = ((state_machine_regs.op_index + uladv)
        / linfo.li_max_ops_per_insn)
     * linfo.li_min_insn_length;
   state_machine_regs.address
     += addrdelta;
   state_machine_regs.op_index
     = (state_machine_regs.op_index + uladv)
     % linfo.li_max_ops_per_insn;
   if (addrdelta)
     state_machine_regs.view = 0;
   printf (gettext ("  Advance PC by %" 
# 4773 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "u" 
# 4773 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " to %#" 
# 4773 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 4773 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "[%d]%s\n")
                                 ,
    uladv, state_machine_regs.address,
    state_machine_regs.op_index,
    verbose_view && addrdelta
    ? gettext (" (reset view)") : "");
        }
      break;

    case DW_LNS_advance_line:
      do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 4783 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 4783 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (adv) = _val; if ((adv) != _val) _status |= 2; report_leb_status (_status); } while (0);
      state_machine_regs.line += adv;
      printf (gettext ("  Advance Line by %d to %d\n"),
       adv, state_machine_regs.line);
      break;

    case DW_LNS_set_file:
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 4790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 4790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (uladv) = _val; if ((uladv) != _val) _status |= 2; report_leb_status (_status); } while (0);
      printf (gettext ("  Set File Name to entry %" 
# 4791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "u" 
# 4791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             " in the File Name Table\n")
                                     , uladv);
      state_machine_regs.file = uladv;
      break;

    case DW_LNS_set_column:
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 4797 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 4797 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (uladv) = _val; if ((uladv) != _val) _status |= 2; report_leb_status (_status); } while (0);
      printf (gettext ("  Set column to %" 
# 4798 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "u" 
# 4798 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"), uladv);
      state_machine_regs.column = uladv;
      break;

    case DW_LNS_negate_stmt:
      adv = state_machine_regs.is_stmt;
      adv = ! adv;
      printf (gettext ("  Set is_stmt to %d\n"), adv);
      state_machine_regs.is_stmt = adv;
      break;

    case DW_LNS_set_basic_block:
      printf (gettext ("  Set basic block\n"));
      state_machine_regs.basic_block = 1;
      break;

    case DW_LNS_const_add_pc:
      uladv = ((255 - linfo.li_opcode_base) / linfo.li_line_range);
      if (linfo.li_max_ops_per_insn)
        {
   uladv *= linfo.li_min_insn_length;
   state_machine_regs.address += uladv;
   if (uladv)
     state_machine_regs.view = 0;
   printf (gettext ("  Advance PC by constant %" 
# 4822 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "u" 
# 4822 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " to %#" 
# 4822 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 4822 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "%s\n")
                             ,
    uladv, state_machine_regs.address,
    verbose_view && uladv
    ? gettext (" (reset view)") : "");
        }
      else
        {
   unsigned addrdelta
     = ((state_machine_regs.op_index + uladv)
        / linfo.li_max_ops_per_insn)
     * linfo.li_min_insn_length;
   state_machine_regs.address
     += addrdelta;
   state_machine_regs.op_index
     = (state_machine_regs.op_index + uladv)
     % linfo.li_max_ops_per_insn;
   if (addrdelta)
     state_machine_regs.view = 0;
   printf (gettext ("  Advance PC by constant %" 
# 4841 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "u" 
# 4841 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " to %#" 
# 4841 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 4841 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "[%d]%s\n")
                                 ,
    uladv, state_machine_regs.address,
    state_machine_regs.op_index,
    verbose_view && addrdelta
    ? gettext (" (reset view)") : "");
        }
      break;

    case DW_LNS_fixed_advance_pc:
      do { size_t amount = (2); if (sizeof (uladv) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uladv)); amount = sizeof (uladv); } if (1) 
# 4851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 4851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 4851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 4851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (end)
# 4851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 4851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (end)"
# 4851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4851, __extension__ __PRETTY_FUNCTION__); }))
# 4851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uladv) = 0; else (uladv) = (byte_get) ((data), amount); if (
# 4851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 4851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      state_machine_regs.address += uladv;
      state_machine_regs.op_index = 0;
      printf (gettext ("  Advance PC by fixed size amount %" 
# 4854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "u" 
# 4854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             " to %#" 
# 4854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "x" 
# 4854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n")
                              ,
       uladv, state_machine_regs.address);

      break;

    case DW_LNS_set_prologue_end:
      printf (gettext ("  Set prologue_end to true\n"));
      break;

    case DW_LNS_set_epilogue_begin:
      printf (gettext ("  Set epilogue_begin to true\n"));
      break;

    case DW_LNS_set_isa:
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 4869 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 4869 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); data += _len; (uladv) = _val; if ((uladv) != _val) _status |= 2; report_leb_status (_status); } while (0);
      printf (gettext ("  Set ISA to %" 
# 4870 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "u" 
# 4870 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"), uladv);
      break;

    default:
      printf (gettext ("  Unknown opcode %d with operands: "), op_code);

      if (standard_opcodes != 
# 4876 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             ((void *)0)
# 4876 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                 )
        for (i = standard_opcodes[op_code - 1]; i > 0 ; --i)
   {
     do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 4879 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    0
# 4879 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    , &_len, &_status); data += _len; (uladv) = _val; if ((uladv) != _val) _status |= 2; report_leb_status (_status); } while (0);
     printf ("%#" 
# 4880 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 "l" "x" 
# 4880 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        "%s", uladv, i == 1 ? "" : ", ");
   }
      putchar ('\n');
      break;
    }
     }
   putchar ('\n');
 }
    }

  return 1;
}

typedef struct
{
  char *name;
  unsigned int directory_index;
  unsigned int modification_date;
  unsigned int length;
} File_Entry;



static int
display_debug_lines_decoded (struct dwarf_section * section,
        unsigned char * start,
        unsigned char * data,
        unsigned char * end,
        void * fileptr)
{
  static DWARF2_Internal_LineInfo saved_linfo;

  introduce (section, 
# 4912 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 4912 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  while (data < end)
    {

      DWARF2_Internal_LineInfo linfo;
      unsigned char *standard_opcodes;
      unsigned char *end_of_sequence;
      int i;
      File_Entry *file_table = 
# 4921 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              ((void *)0)
# 4921 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  ;
      unsigned int n_files = 0;
      char **directory_table = 
# 4923 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              ((void *)0)
# 4923 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  ;
      unsigned int n_directories = 0;

      if (startswith (section->name, ".debug_line.")


   && strcmp (section->name, ".debug_line.dwo") != 0)
 {

   end_of_sequence = end;
   standard_opcodes = 
# 4933 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 4933 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;
   linfo = saved_linfo;

   if (linfo.li_line_range == 0)
     {
       warn (gettext ("Partial .debug_line. section encountered without a prior full .debug_line section\n"));
       return 0;
     }
   reset_state_machine (linfo.li_default_is_stmt);
 }
      else
 {
   unsigned char *hdrptr;

   if ((hdrptr = read_debug_line_header (section, data, end, & linfo,
      & end_of_sequence)) == 
# 4948 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            ((void *)0)
# 4948 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                )
       return 0;


   if (linfo.li_line_range == 0)
     {
       warn (gettext ("Line range of 0 is invalid, using 1 instead\n"));
       linfo.li_line_range = 1;
     }
   reset_state_machine (linfo.li_default_is_stmt);


   standard_opcodes = hdrptr;


   data = standard_opcodes + linfo.li_opcode_base - 1;

   if (data >= end)
     {
       warn (gettext ("opcode base of %d extends beyond end of section\n"),
      linfo.li_opcode_base);
       return 0;
     }

   if (linfo.li_version >= 5)
     {
       unsigned char *format_start, *format;
       unsigned int format_count, formati, entryi;

       load_debug_section_with_follow (line_str, fileptr);


       do { size_t amount = (1); if (sizeof (format_count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (format_count)); amount = sizeof (format_count); } if (1) 
# 4980 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 4980 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 4980 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 4980 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 4980 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 4980 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(data) <= (end)"
# 4980 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 4980, __extension__ __PRETTY_FUNCTION__); }))
# 4980 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (format_count) = 0; else (format_count) = (byte_get) ((data), amount); if (
# 4980 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 4980 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (data) += amount; } while (0);
       if (do_checks && format_count > 1)
  warn (gettext ("Unexpectedly large number of columns in the directory name table (%u)\n"),
        format_count);
       format_start = data;
       for (formati = 0; formati < format_count; formati++)
  {
    do { unsigned int _len; read_leb128 (data, end, 
# 4987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 4987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 4987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 4987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); data += _len; } while (0);
    do { unsigned int _len; read_leb128 (data, end, 
# 4988 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 4988 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 4988 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 4988 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); data += _len; } while (0);
  }

       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 4991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 4991 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); data += _len; (n_directories) = _val; if ((n_directories) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (data >= end)
  {
    warn (gettext ("Corrupt directories list\n"));
    break;
  }

       if (n_directories == 0)
  directory_table = 
# 4999 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 4999 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       ;
       else if (n_directories > section->size)
  {
    warn (gettext ("number of directories (0x%x) exceeds size of section %s\n"),
   n_directories, section->name);
    return 0;
  }
       else
  directory_table = (char **)
    xcalloc (n_directories, sizeof (unsigned char *));

       for (entryi = 0; entryi < n_directories; entryi++)
  {
    char **pathp = &directory_table[entryi];

    format = format_start;
    for (formati = 0; formati < format_count; formati++)
      {
        uint64_t content_type, form;
        uint64_t uvalue;

        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (format, end, 
# 5020 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5020 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); format += _len; (content_type) = _val; if ((content_type) != _val) _status |= 2; report_leb_status (_status); } while (0);
        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (format, end, 
# 5021 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5021 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); format += _len; (form) = _val; if ((form) != _val) _status |= 2; report_leb_status (_status); } while (0);
        if (data >= end)
   {
     warn (gettext ("Corrupt directories list\n"));
     break;
   }
        switch (content_type)
   {
   case DW_LNCT_path:
     switch (form)
       {
       case DW_FORM_string:
         *pathp = (char *) data;
         break;
       case DW_FORM_line_strp:
         do { size_t amount = (linfo.li_offset_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 5036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void) sizeof ((
# 5036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        (data) <= (end)
# 5036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ) ? 1 : 0), __extension__ ({ if (
# 5036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        (data) <= (end)
# 5036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ) ; else __assert_fail (
# 5036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        "(data) <= (end)"
# 5036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5036, __extension__ __PRETTY_FUNCTION__); }))
# 5036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 5036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        0
# 5036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ) (data) += amount; } while (0)
              ;

         *pathp = (char *)
           fetch_indirect_line_string (uvalue);
         break;
       }
     break;
   }
        data = read_and_display_attr_value (0, form, 0, start,
         data, end, 0, 0,
         linfo.li_offset_size,
         linfo.li_version,
         
# 5049 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 5049 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            , 1, section,
         
# 5050 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 5050 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            , '\t', -1);
      }
    if (data >= end)
      {
        warn (gettext ("Corrupt directories list\n"));
        break;
      }
  }


       do { size_t amount = (1); if (sizeof (format_count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (format_count)); amount = sizeof (format_count); } if (1) 
# 5060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 5060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 5060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 5060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (end)
# 5060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 5060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(data) <= (end)"
# 5060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5060, __extension__ __PRETTY_FUNCTION__); }))
# 5060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (format_count) = 0; else (format_count) = (byte_get) ((data), amount); if (
# 5060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 5060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (data) += amount; } while (0);
       if (do_checks && format_count > 5)
  warn (gettext ("Unexpectedly large number of columns in the file name table (%u)\n"),
        format_count);

       format_start = data;
       for (formati = 0; formati < format_count; formati++)
  {
    do { unsigned int _len; read_leb128 (data, end, 
# 5068 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 5068 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 5068 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 5068 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); data += _len; } while (0);
    do { unsigned int _len; read_leb128 (data, end, 
# 5069 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 5069 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 5069 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 5069 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); data += _len; } while (0);
  }

       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 5072 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 5072 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); data += _len; (n_files) = _val; if ((n_files) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (data >= end && n_files > 0)
  {
    warn (gettext ("Corrupt file name list\n"));
    break;
  }

       if (n_files == 0)
  file_table = 
# 5080 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              ((void *)0)
# 5080 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  ;
       else if (n_files > section->size)
  {
    warn (gettext ("number of files (0x%x) exceeds size of section %s\n"),
   n_files, section->name);
    return 0;
  }
       else
  file_table = (File_Entry *) xcalloc (n_files,
           sizeof (File_Entry));

       for (entryi = 0; entryi < n_files; entryi++)
  {
    File_Entry *file = &file_table[entryi];

    format = format_start;
    for (formati = 0; formati < format_count; formati++)
      {
        uint64_t content_type, form;
        uint64_t uvalue;
        unsigned char *tmp;

        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (format, end, 
# 5102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); format += _len; (content_type) = _val; if ((content_type) != _val) _status |= 2; report_leb_status (_status); } while (0);
        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (format, end, 
# 5103 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5103 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); format += _len; (form) = _val; if ((form) != _val) _status |= 2; report_leb_status (_status); } while (0);
        if (data >= end)
   {
     warn (gettext ("Corrupt file name list\n"));
     break;
   }
        switch (content_type)
   {
   case DW_LNCT_path:
     switch (form)
       {
       case DW_FORM_string:
         file->name = (char *) data;
         break;
       case DW_FORM_line_strp:
         do { size_t amount = (linfo.li_offset_size); if (sizeof (uvalue) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uvalue)); amount = sizeof (uvalue); } if (1) 
# 5118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void) sizeof ((
# 5118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        (data) <= (end)
# 5118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ) ? 1 : 0), __extension__ ({ if (
# 5118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        (data) <= (end)
# 5118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ) ; else __assert_fail (
# 5118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        "(data) <= (end)"
# 5118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5118, __extension__ __PRETTY_FUNCTION__); }))
# 5118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uvalue) = 0; else (uvalue) = (byte_get) ((data), amount); if (
# 5118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        0
# 5118 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ) (data) += amount; } while (0)
              ;

         file->name = (char *)
        fetch_indirect_line_string (uvalue);
         break;
       }
     break;
   case DW_LNCT_directory_index:
     switch (form)
       {
       case DW_FORM_data1:
         do { size_t amount = (1); if (sizeof (file->directory_index) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (file->directory_index)); amount = sizeof (file->directory_index); } if (1) 
# 5130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void) sizeof ((
# 5130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        (data) <= (end)
# 5130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ) ? 1 : 0), __extension__ ({ if (
# 5130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        (data) <= (end)
# 5130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ) ; else __assert_fail (
# 5130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        "(data) <= (end)"
# 5130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5130, __extension__ __PRETTY_FUNCTION__); }))
# 5130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (file->directory_index) = 0; else (file->directory_index) = (byte_get) ((data), amount); if (
# 5130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        0
# 5130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ) (data) += amount; } while (0)
              ;
         break;
       case DW_FORM_data2:
         do { size_t amount = (2); if (sizeof (file->directory_index) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (file->directory_index)); amount = sizeof (file->directory_index); } if (1) 
# 5134 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void) sizeof ((
# 5134 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        (data) <= (end)
# 5134 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ) ? 1 : 0), __extension__ ({ if (
# 5134 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        (data) <= (end)
# 5134 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ) ; else __assert_fail (
# 5134 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        "(data) <= (end)"
# 5134 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5134, __extension__ __PRETTY_FUNCTION__); }))
# 5134 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (file->directory_index) = 0; else (file->directory_index) = (byte_get) ((data), amount); if (
# 5134 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        0
# 5134 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ) (data) += amount; } while (0)
              ;
         break;
       case DW_FORM_udata:
         tmp = data;
         do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (tmp, end, 
# 5139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        0
# 5139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        , &_len, &_status); tmp += _len; (file->directory_index) = _val; if ((file->directory_index) != _val) _status |= 2; report_leb_status (_status); } while (0);
         break;
       }
     break;
   }
        data = read_and_display_attr_value (0, form, 0, start,
         data, end, 0, 0,
         linfo.li_offset_size,
         linfo.li_version,
         
# 5148 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 5148 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            , 1, section,
         
# 5149 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 5149 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            , '\t', -1);
      }
    if (data >= end)
      {
        warn (gettext ("Corrupt file name list\n"));
        break;
      }
  }
     }
   else
     {
       if (*data != 0)
  {
    char *ptr_directory_table = (char *) data;

    while (data < end && *data != 0)
      {
        data += strnlen ((char *) data, end - data);
        if (data < end)
   data++;
        n_directories++;
      }


    if (data >= end)
      {
        warn (gettext ("directory table ends unexpectedly\n"));
        n_directories = 0;
        break;
      }


    directory_table = (char **)
      xmalloc (n_directories * sizeof (unsigned char *));

    i = 0;
    while (*ptr_directory_table != 0)
      {
        directory_table[i] = ptr_directory_table;
        ptr_directory_table += strlen (ptr_directory_table) + 1;
        i++;
      }
  }

       data++;


       if (data < end && *data != 0)
  {
    unsigned char *ptr_file_name_table = data;

    while (data < end && *data != 0)
      {


        data += strnlen ((char *) data, end - data);
        if (data < end)
   data++;
        do { unsigned int _len; read_leb128 (data, end, 
# 5207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, 
# 5207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 5207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ); data += _len; } while (0);
        do { unsigned int _len; read_leb128 (data, end, 
# 5208 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5208 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, 
# 5208 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 5208 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ); data += _len; } while (0);
        do { unsigned int _len; read_leb128 (data, end, 
# 5209 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5209 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, 
# 5209 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 5209 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ); data += _len; } while (0);
        n_files++;
      }

    if (data >= end)
      {
        warn (gettext ("file table ends unexpectedly\n"));
        n_files = 0;
        break;
      }


    file_table = (File_Entry *) xmalloc (n_files * sizeof (File_Entry));

    i = 0;
    while (*ptr_file_name_table != 0)
      {
        file_table[i].name = (char *) ptr_file_name_table;
        ptr_file_name_table
   += strlen ((char *) ptr_file_name_table) + 1;


        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (ptr_file_name_table, end, 
# 5231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); ptr_file_name_table += _len; (file_table[i].directory_index) = _val; if ((file_table[i].directory_index) != _val) _status |= 2; report_leb_status (_status); } while (0)
                              ;
        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (ptr_file_name_table, end, 
# 5233 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5233 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); ptr_file_name_table += _len; (file_table[i].modification_date) = _val; if ((file_table[i].modification_date) != _val) _status |= 2; report_leb_status (_status); } while (0)
                              ;
        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (ptr_file_name_table, end, 
# 5235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5235 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); ptr_file_name_table += _len; (file_table[i].length) = _val; if ((file_table[i].length) != _val) _status |= 2; report_leb_status (_status); } while (0)
                              ;
        i++;
      }
    i = 0;
  }


       data++;
     }


   if (file_table == 
# 5247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    ((void *)0)
# 5247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        )
     printf (gettext ("CU: No directory table\n"));
   else if (directory_table == 
# 5249 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              ((void *)0)
# 5249 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  )
     printf (gettext ("CU: %s:\n"), null_name (file_table[0].name));
   else
     {
       unsigned int ix = file_table[0].directory_index;
       const char *directory;

       if (ix == 0 && linfo.li_version < 5)
  directory = ".";

       else if (n_directories == 0)
  directory = gettext ("<unknown>");
       else
  {
    if (linfo.li_version < 5)
      --ix;
    if (ix >= n_directories)
      {
        warn (gettext ("directory index %u " ">= number of directories %u\n")
                                         ,
       ix, n_directories);
        directory = gettext ("<corrupt>");
      }
    else
      directory = directory_table[ix];
  }
       if (do_wide)
  printf (gettext ("CU: %s/%s:\n"),
   null_name (directory),
   null_name (file_table[0].name));
       else
  printf ("%s:\n", null_name (file_table[0].name));
     }

   if (n_files > 0)
     {
       if (do_wide)
  printf (gettext ("File name                            Line number    Starting address    View    Stmt\n"));
       else
  printf (gettext ("File name                        Line number    Starting address    View    Stmt\n"));
     }
   else
     printf (gettext ("CU: Empty file name table\n"));
   saved_linfo = linfo;
 }


      while (data < end_of_sequence)
 {
   unsigned char op_code;
   int xop;
   int adv;
   unsigned long int uladv;
   int is_special_opcode = 0;

   op_code = *data++;
   xop = op_code;

   if (op_code >= linfo.li_opcode_base)
     {
       op_code -= linfo.li_opcode_base;
       uladv = (op_code / linfo.li_line_range);
       if (linfo.li_max_ops_per_insn == 1)
  {
    uladv *= linfo.li_min_insn_length;
    state_machine_regs.address += uladv;
    if (uladv)
      state_machine_regs.view = 0;
  }
       else
  {
    unsigned addrdelta
      = ((state_machine_regs.op_index + uladv)
         / linfo.li_max_ops_per_insn)
      * linfo.li_min_insn_length;
    state_machine_regs.address
      += addrdelta;
    state_machine_regs.op_index
      = (state_machine_regs.op_index + uladv)
      % linfo.li_max_ops_per_insn;
    if (addrdelta)
      state_machine_regs.view = 0;
  }

       adv = (op_code % linfo.li_line_range) + linfo.li_line_base;
       state_machine_regs.line += adv;
       is_special_opcode = 1;

     }
   else
     switch (op_code)
       {
       case DW_LNS_extended_op:
  {
    unsigned int ext_op_code_len;
    unsigned char ext_op_code;
    unsigned char *op_code_end;
    unsigned char *op_code_data = data;

    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (op_code_data, end_of_sequence, 
# 5348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 5348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); op_code_data += _len; (ext_op_code_len) = _val; if ((ext_op_code_len) != _val) _status |= 2; report_leb_status (_status); } while (0);
    op_code_end = op_code_data + ext_op_code_len;
    if (ext_op_code_len == 0 || op_code_end > end_of_sequence)
      {
        warn (gettext ("Badly formed extended line op encountered!\n"));
        break;
      }
    ext_op_code = *op_code_data++;
    xop = ext_op_code;
    xop = -xop;

    switch (ext_op_code)
      {
      case DW_LNE_end_sequence:

        break;
      case DW_LNE_set_address:
        do { size_t amount = (op_code_end - op_code_data); if (sizeof (state_machine_regs.address) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (state_machine_regs.address)); amount = sizeof (state_machine_regs.address); } if (1) 
# 5365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void) sizeof ((
# 5365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (op_code_data) <= (op_code_end)
# 5365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ? 1 : 0), __extension__ ({ if (
# 5365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (op_code_data) <= (op_code_end)
# 5365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ; else __assert_fail (
# 5365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       "(op_code_data) <= (op_code_end)"
# 5365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5365, __extension__ __PRETTY_FUNCTION__); }))
# 5365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ; size_t avail = (op_code_end) - (op_code_data); if ((op_code_data) > (op_code_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (state_machine_regs.address) = 0; else (state_machine_regs.address) = (byte_get) ((op_code_data), amount); if (
# 5365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       1
# 5365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ) (op_code_data) += amount; } while (0)


                      ;
        state_machine_regs.op_index = 0;
        state_machine_regs.view = 0;
        break;
      case DW_LNE_define_file:
        file_table = (File_Entry *) xrealloc
   (file_table, (n_files + 1) * sizeof (File_Entry));

        ++state_machine_regs.last_file_entry;

        file_table[n_files].name = (char *) op_code_data;
        op_code_data += strlen ((char *) op_code_data) + 1;

        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (op_code_data, op_code_end, 
# 5381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); op_code_data += _len; (file_table[n_files].directory_index) = _val; if ((file_table[n_files].directory_index) != _val) _status |= 2; report_leb_status (_status); } while (0)
                               ;

        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (op_code_data, op_code_end, 
# 5384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); op_code_data += _len; (file_table[n_files].modification_date) = _val; if ((file_table[n_files].modification_date) != _val) _status |= 2; report_leb_status (_status); } while (0)
                               ;

        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (op_code_data, op_code_end, 
# 5387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); op_code_data += _len; (file_table[n_files].length) = _val; if ((file_table[n_files].length) != _val) _status |= 2; report_leb_status (_status); } while (0)
                               ;
        n_files++;
        break;

      case DW_LNE_set_discriminator:
      case DW_LNE_HP_set_sequence:

        break;

      default:
        printf (gettext ("UNKNOWN (%u): length %ld\n"),
         ext_op_code, (long int) (op_code_data - data));
        break;
      }
    data = op_code_end;
    break;
  }
       case DW_LNS_copy:

  break;

       case DW_LNS_advance_pc:
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 5410 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 5410 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (uladv) = _val; if ((uladv) != _val) _status |= 2; report_leb_status (_status); } while (0);
  if (linfo.li_max_ops_per_insn == 1)
    {
      uladv *= linfo.li_min_insn_length;
      state_machine_regs.address += uladv;
      if (uladv)
        state_machine_regs.view = 0;
    }
  else
    {
      unsigned addrdelta
        = ((state_machine_regs.op_index + uladv)
    / linfo.li_max_ops_per_insn)
        * linfo.li_min_insn_length;
      state_machine_regs.address
        += addrdelta;
      state_machine_regs.op_index
        = (state_machine_regs.op_index + uladv)
        % linfo.li_max_ops_per_insn;
      if (addrdelta)
        state_machine_regs.view = 0;
    }
  break;

       case DW_LNS_advance_line:
  do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 5435 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 5435 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (adv) = _val; if ((adv) != _val) _status |= 2; report_leb_status (_status); } while (0);
  state_machine_regs.line += adv;
  break;

       case DW_LNS_set_file:
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 5440 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 5440 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (uladv) = _val; if ((uladv) != _val) _status |= 2; report_leb_status (_status); } while (0);
  state_machine_regs.file = uladv;

  unsigned file = state_machine_regs.file;
  if (linfo.li_version < 5)
    --file;

  if (file_table == 
# 5447 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0) 
# 5447 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        || n_files == 0)
    printf (gettext ("\n [Use file table entry %d]\n"), file);

  else if (file >= n_files)
    {
      warn (gettext ("file index %u >= number of files %u\n"),
     file, n_files);
      printf (gettext ("\n <over large file table index %u>"), file);
    }
  else
    {
      unsigned dir = file_table[file].directory_index;
      if (dir == 0 && linfo.li_version < 5)





        printf ("\n./%s:[++]\n",
         null_name (file_table[file].name));
      else if (directory_table == 
# 5467 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 ((void *)0) 
# 5467 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      || n_directories == 0)
        printf (gettext ("\n [Use file %s " "in directory table entry %d]\n")
                                     ,
         null_name (file_table[file].name), dir);
      else
        {
   if (linfo.li_version < 5)
     --dir;

   if (dir >= n_directories)
     {
       warn (gettext ("directory index %u " ">= number of directories %u\n")
                                        ,
      dir, n_directories);
       printf (gettext ("\n <over large directory table entry " "%u>\n")
                  , dir);
     }
   else
     printf ("\n%s/%s:\n",
      null_name (directory_table[dir]),
      null_name (file_table[file].name));
        }
    }
  break;

       case DW_LNS_set_column:
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 5493 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 5493 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (uladv) = _val; if ((uladv) != _val) _status |= 2; report_leb_status (_status); } while (0);
  state_machine_regs.column = uladv;
  break;

       case DW_LNS_negate_stmt:
  adv = state_machine_regs.is_stmt;
  adv = ! adv;
  state_machine_regs.is_stmt = adv;
  break;

       case DW_LNS_set_basic_block:
  state_machine_regs.basic_block = 1;
  break;

       case DW_LNS_const_add_pc:
  uladv = ((255 - linfo.li_opcode_base) / linfo.li_line_range);
  if (linfo.li_max_ops_per_insn == 1)
    {
      uladv *= linfo.li_min_insn_length;
      state_machine_regs.address += uladv;
      if (uladv)
        state_machine_regs.view = 0;
    }
  else
    {
      unsigned addrdelta
        = ((state_machine_regs.op_index + uladv)
    / linfo.li_max_ops_per_insn)
        * linfo.li_min_insn_length;
      state_machine_regs.address
        += addrdelta;
      state_machine_regs.op_index
        = (state_machine_regs.op_index + uladv)
        % linfo.li_max_ops_per_insn;
      if (addrdelta)
        state_machine_regs.view = 0;
    }
  break;

       case DW_LNS_fixed_advance_pc:
  do { size_t amount = (2); if (sizeof (uladv) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uladv)); amount = sizeof (uladv); } if (1) 
# 5533 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 5533 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (data) <= (end)
# 5533 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 5533 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (data) <= (end)
# 5533 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 5533 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(data) <= (end)"
# 5533 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5533, __extension__ __PRETTY_FUNCTION__); }))
# 5533 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (data); if ((data) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uladv) = 0; else (uladv) = (byte_get) ((data), amount); if (
# 5533 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 5533 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (data) += amount; } while (0);
  state_machine_regs.address += uladv;
  state_machine_regs.op_index = 0;

  break;

       case DW_LNS_set_prologue_end:
  break;

       case DW_LNS_set_epilogue_begin:
  break;

       case DW_LNS_set_isa:
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 5546 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 5546 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); data += _len; (uladv) = _val; if ((uladv) != _val) _status |= 2; report_leb_status (_status); } while (0);
  printf (gettext ("  Set ISA to %lu\n"), uladv);
  break;

       default:
  printf (gettext ("  Unknown opcode %d with operands: "), op_code);

  if (standard_opcodes != 
# 5553 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 5553 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             )
    for (i = standard_opcodes[op_code - 1]; i > 0 ; --i)
      {
        uint64_t val;

        do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (data, end, 
# 5558 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 5558 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       , &_len, &_status); data += _len; (val) = _val; if ((val) != _val) _status |= 2; report_leb_status (_status); } while (0);
        printf ("%#" 
# 5559 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    "l" "x" 
# 5559 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           "%s", val, i == 1 ? "" : ", ");
      }
  putchar ('\n');
  break;
       }



   if ((is_special_opcode) || (xop == -DW_LNE_end_sequence)
       || (xop == DW_LNS_copy))
     {
       const unsigned int MAX_FILENAME_LENGTH = 35;
       char *fileName = 
# 5571 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 5571 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           ;
       char *newFileName = 
# 5572 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          ((void *)0)
# 5572 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                              ;
       size_t fileNameLength;

       if (file_table)
  {
    unsigned indx = state_machine_regs.file;

    if (linfo.li_version < 5)
      --indx;

    if (indx >= n_files)
      {
        warn (gettext ("file index %u >= number of files %u\n"),
       indx, n_files);
        fileName = gettext ("<corrupt>");
      }
    else
      fileName = (char *) file_table[indx].name;
  }
       if (!fileName)
  fileName = gettext ("<unknown>");

       fileNameLength = strlen (fileName);
       newFileName = fileName;
       if (fileNameLength > MAX_FILENAME_LENGTH && !do_wide)
  {
    newFileName = (char *) xmalloc (MAX_FILENAME_LENGTH + 1);

    memcpy (newFileName,
     fileName + fileNameLength - MAX_FILENAME_LENGTH,
     MAX_FILENAME_LENGTH);
    newFileName[MAX_FILENAME_LENGTH] = 0;
  }





       if (!do_wide || fileNameLength <= MAX_FILENAME_LENGTH)
  {
    if (linfo.li_max_ops_per_insn == 1)
      {
        if (xop == -DW_LNE_end_sequence)
   printf ("%-31s  %11s  %#18" 
# 5615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              "l" "x"
# 5615 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                    ,
    newFileName, "-",
    state_machine_regs.address);
        else
   printf ("%-31s  %11d  %#18" 
# 5619 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              "l" "x"
# 5619 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                    ,
    newFileName, state_machine_regs.line,
    state_machine_regs.address);
      }
    else
      {
        if (xop == -DW_LNE_end_sequence)
   printf ("%-31s  %11s  %#18" 
# 5626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              "l" "x" 
# 5626 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                     "[%d]",
    newFileName, "-",
    state_machine_regs.address,
    state_machine_regs.op_index);
        else
   printf ("%-31s  %11d  %#18" 
# 5631 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              "l" "x" 
# 5631 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                     "[%d]",
    newFileName, state_machine_regs.line,
    state_machine_regs.address,
    state_machine_regs.op_index);
      }
  }
       else
  {
    if (linfo.li_max_ops_per_insn == 1)
      {
        if (xop == -DW_LNE_end_sequence)
   printf ("%s  %11s  %#18" 
# 5642 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           "l" "x"
# 5642 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                 ,
    newFileName, "-",
    state_machine_regs.address);
        else
   printf ("%s  %11d  %#18" 
# 5646 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           "l" "x"
# 5646 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                 ,
    newFileName, state_machine_regs.line,
    state_machine_regs.address);
      }
    else
      {
        if (xop == -DW_LNE_end_sequence)
   printf ("%s  %11s  %#18" 
# 5653 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           "l" "x" 
# 5653 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  "[%d]",
    newFileName, "-",
    state_machine_regs.address,
    state_machine_regs.op_index);
        else
   printf ("%s  %11d  %#18" 
# 5658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                           "l" "x" 
# 5658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  "[%d]",
    newFileName, state_machine_regs.line,
    state_machine_regs.address,
    state_machine_regs.op_index);
      }
  }

       if (xop != -DW_LNE_end_sequence)
  {
    if (state_machine_regs.view)
      printf ("  %6u", state_machine_regs.view);
    else
      printf ("        ");

    if (state_machine_regs.is_stmt)
      printf ("       x");
  }

       putchar ('\n');
       state_machine_regs.view++;

       if (xop == -DW_LNE_end_sequence)
  {
    reset_state_machine (linfo.li_default_is_stmt);
    putchar ('\n');
  }

       if (newFileName != fileName)
  free (newFileName);
     }
 }

      if (file_table)
 {
   free (file_table);
   file_table = 
# 5693 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               ((void *)0)
# 5693 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   ;
   n_files = 0;
 }

      if (directory_table)
 {
   free (directory_table);
   directory_table = 
# 5700 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    ((void *)0)
# 5700 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ;
   n_directories = 0;
 }

      putchar ('\n');
    }

  return 1;
}

static int
display_debug_lines (struct dwarf_section *section, void *file)
{
  unsigned char *data = section->start;
  unsigned char *end = data + section->size;
  int retValRaw = 1;
  int retValDecoded = 1;

  if (do_debug_lines == 0)
    do_debug_lines |= 1;

  if (do_debug_lines & 1)
    retValRaw = display_debug_lines_raw (section, data, end, file);

  if (do_debug_lines & 2)
    retValDecoded = display_debug_lines_decoded (section, data, data, end, file);

  if (!retValRaw || !retValDecoded)
    return 0;

  return 1;
}

static debug_info *
find_debug_info_for_offset (uint64_t offset)
{
  unsigned int i;

  if (num_debug_info_entries == (unsigned int) -1)
    return 
# 5739 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 5739 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;

  for (i = 0; i < num_debug_info_entries; i++)
    if (debug_information[i].cu_offset == offset)
      return debug_information + i;

  return 
# 5745 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 5745 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ;
}

static const char *
get_gdb_index_symbol_kind_name (gdb_index_symbol_kind kind)
{

  static const char * const kinds[] =
  {
    ("no info"),
    ("type"),
    ("variable"),
    ("function"),
    ("other"),
    ("unused5"),
    ("unused6"),
    ("unused7")
  };

  return gettext (kinds[kind]);
}

static int
display_debug_pubnames_worker (struct dwarf_section *section,
          void *file __attribute__ ((__unused__)),
          int is_gnu)
{
  DWARF2_Internal_PubNames names;
  unsigned char *start = section->start;
  unsigned char *end = start + section->size;



  load_debug_info (file);

  introduce (section, 
# 5780 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 5780 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  while (start < end)
    {
      unsigned char *data;
      unsigned long sec_off = start - section->start;
      unsigned int offset_size;

      do { size_t amount = (4); if (sizeof (names.pn_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (names.pn_length)); amount = sizeof (names.pn_length); } if (1) 
# 5788 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 5788 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 5788 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 5788 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 5788 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 5788 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (end)"
# 5788 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5788, __extension__ __PRETTY_FUNCTION__); }))
# 5788 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (names.pn_length) = 0; else (names.pn_length) = (byte_get) ((start), amount); if (
# 5788 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 5788 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      if (names.pn_length == 0xffffffff)
 {
   do { size_t amount = (8); if (sizeof (names.pn_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (names.pn_length)); amount = sizeof (names.pn_length); } if (1) 
# 5791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 5791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (end)
# 5791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 5791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (end)
# 5791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 5791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (end)"
# 5791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5791, __extension__ __PRETTY_FUNCTION__); }))
# 5791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (names.pn_length) = 0; else (names.pn_length) = (byte_get) ((start), amount); if (
# 5791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 5791 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   offset_size = 8;
 }
      else
 offset_size = 4;

      if (names.pn_length > (size_t) (end - start))
 {
   warn (gettext ("Debug info is corrupted, " "%s header at %#lx has length %#" 
# 5799 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 5799 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        "\n")
                                                  ,
  section->name, sec_off, names.pn_length);
   break;
 }

      data = start;
      start += names.pn_length;

      do { size_t amount = (2); if (sizeof (names.pn_version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (names.pn_version)); amount = sizeof (names.pn_version); } if (1) 
# 5808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 5808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (start)
# 5808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 5808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (start)
# 5808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 5808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (start)"
# 5808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5808, __extension__ __PRETTY_FUNCTION__); }))
# 5808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (start) - (data); if ((data) > (start)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (names.pn_version) = 0; else (names.pn_version) = (byte_get) ((data), amount); if (
# 5808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 5808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);
      do { size_t amount = (offset_size); if (sizeof (names.pn_offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (names.pn_offset)); amount = sizeof (names.pn_offset); } if (1) 
# 5809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 5809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (start)
# 5809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 5809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (start)
# 5809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 5809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (start)"
# 5809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5809, __extension__ __PRETTY_FUNCTION__); }))
# 5809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (start) - (data); if ((data) > (start)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (names.pn_offset) = 0; else (names.pn_offset) = (byte_get) ((data), amount); if (
# 5809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 5809 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);

      if (num_debug_info_entries != (unsigned int) -1
   && num_debug_info_entries > 0
   && find_debug_info_for_offset (names.pn_offset) == 
# 5813 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                     ((void *)0)
# 5813 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         )
 warn (gettext (".debug_info offset of %#" 
# 5814 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      "l" "x" 
# 5814 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      " in %s section does not point to a CU header.\n")
                                                    ,
       names.pn_offset, section->name);

      do { size_t amount = (offset_size); if (sizeof (names.pn_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (names.pn_size)); amount = sizeof (names.pn_size); } if (1) 
# 5818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 5818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (start)
# 5818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 5818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (data) <= (start)
# 5818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 5818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(data) <= (start)"
# 5818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5818, __extension__ __PRETTY_FUNCTION__); }))
# 5818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (start) - (data); if ((data) > (start)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (names.pn_size) = 0; else (names.pn_size) = (byte_get) ((data), amount); if (
# 5818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 5818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (data) += amount; } while (0);

      printf (gettext ("  Length:                              %" 
# 5820 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "d" 
# 5820 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"),
       names.pn_length);
      printf (gettext ("  Version:                             %d\n"),
       names.pn_version);
      printf (gettext ("  Offset into .debug_info section:     %#" 
# 5824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "x" 
# 5824 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"),
       names.pn_offset);
      printf (gettext ("  Size of area in .debug_info section: %" 
# 5826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "d" 
# 5826 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"),
       names.pn_size);

      if (names.pn_version != 2 && names.pn_version != 3)
 {
   static int warned = 0;

   if (! warned)
     {
       warn (gettext ("Only DWARF 2 and 3 pubnames are currently supported\n"));
       warned = 1;
     }

   continue;
 }

      if (is_gnu)
 printf (gettext ("\n    Offset  Kind          Name\n"));
      else
 printf (gettext ("\n    Offset\tName\n"));

      while (1)
 {
   size_t maxprint;
   uint64_t offset;

   do { size_t amount = (offset_size); if (sizeof (offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (offset)); amount = sizeof (offset); } if (1) 
# 5852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 5852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (start)
# 5852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 5852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (data) <= (start)
# 5852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 5852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(data) <= (start)"
# 5852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5852, __extension__ __PRETTY_FUNCTION__); }))
# 5852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (start) - (data); if ((data) > (start)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (offset) = 0; else (offset) = (byte_get) ((data), amount); if (
# 5852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 5852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (data) += amount; } while (0);

   if (offset == 0)
     break;

   if (data >= start)
     break;
   maxprint = (start - data) - 1;

   if (is_gnu)
     {
       unsigned int kind_data;
       gdb_index_symbol_kind kind;
       const char *kind_name;
       int is_static;

       do { size_t amount = (1); if (sizeof (kind_data) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (kind_data)); amount = sizeof (kind_data); } if (1) 
# 5868 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 5868 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (start)
# 5868 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 5868 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (data) <= (start)
# 5868 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 5868 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(data) <= (start)"
# 5868 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 5868, __extension__ __PRETTY_FUNCTION__); }))
# 5868 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (start) - (data); if ((data) > (start)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (kind_data) = 0; else (kind_data) = (byte_get) ((data), amount); if (
# 5868 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 5868 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (data) += amount; } while (0);
       maxprint --;




       kind_data <<= 24;
       kind = ((gdb_index_symbol_kind) (((kind_data) >> 28) & 7));
       kind_name = get_gdb_index_symbol_kind_name (kind);
       is_static = (((kind_data) >> 31) & 1);
       printf ("    %-6" 
# 5878 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                        "l" "x" 
# 5878 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               "  %s,%-10s  %.*s\n",
        offset, is_static ? gettext ("s") : gettext ("g"),
        kind_name, (int) maxprint, data);
     }
   else
     printf ("    %-6" 
# 5883 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                      "l" "x" 
# 5883 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             "\t%.*s\n",
      offset, (int) maxprint, data);

   data += strnlen ((char *) data, maxprint);
   if (data < start)
     data++;
   if (data >= start)
     break;
 }
    }

  printf ("\n");
  return 1;
}

static int
display_debug_pubnames (struct dwarf_section *section, void *file)
{
  return display_debug_pubnames_worker (section, file, 0);
}

static int
display_debug_gnu_pubnames (struct dwarf_section *section, void *file)
{
  return display_debug_pubnames_worker (section, file, 1);
}

static int
display_debug_macinfo (struct dwarf_section *section,
         void *file __attribute__ ((__unused__)))
{
  unsigned char *start = section->start;
  unsigned char *end = start + section->size;
  unsigned char *curr = start;
  enum dwarf_macinfo_record_type op;

  introduce (section, 
# 5919 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 5919 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  while (curr < end)
    {
      unsigned int lineno;
      const unsigned char *string;

      op = (enum dwarf_macinfo_record_type) *curr;
      curr++;

      switch (op)
 {
 case DW_MACINFO_start_file:
   {
     unsigned int filenum;

     do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 5935 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    0
# 5935 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    , &_len, &_status); curr += _len; (lineno) = _val; if ((lineno) != _val) _status |= 2; report_leb_status (_status); } while (0);
     do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 5936 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    0
# 5936 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    , &_len, &_status); curr += _len; (filenum) = _val; if ((filenum) != _val) _status |= 2; report_leb_status (_status); } while (0);
     printf (gettext (" DW_MACINFO_start_file - lineno: %d filenum: %d\n"),
      lineno, filenum);
   }
   break;

 case DW_MACINFO_end_file:
   printf (gettext (" DW_MACINFO_end_file\n"));
   break;

 case DW_MACINFO_define:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 5947 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 5947 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); curr += _len; (lineno) = _val; if ((lineno) != _val) _status |= 2; report_leb_status (_status); } while (0);
   string = curr;
   curr += strnlen ((char *) string, end - string);
   printf (gettext (" DW_MACINFO_define - lineno : %d macro : %*s\n"),
    lineno, (int) (curr - string), string);
   if (curr < end)
     curr++;
   break;

 case DW_MACINFO_undef:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 5957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 5957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); curr += _len; (lineno) = _val; if ((lineno) != _val) _status |= 2; report_leb_status (_status); } while (0);
   string = curr;
   curr += strnlen ((char *) string, end - string);
   printf (gettext (" DW_MACINFO_undef - lineno : %d macro : %*s\n"),
    lineno, (int) (curr - string), string);
   if (curr < end)
     curr++;
   break;

 case DW_MACINFO_vendor_ext:
   {
     unsigned int constant;

     do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 5970 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    0
# 5970 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    , &_len, &_status); curr += _len; (constant) = _val; if ((constant) != _val) _status |= 2; report_leb_status (_status); } while (0);
     string = curr;
     curr += strnlen ((char *) string, end - string);
     printf (gettext (" DW_MACINFO_vendor_ext - constant : %d string : %*s\n"),
      constant, (int) (curr - string), string);
     if (curr < end)
       curr++;
   }
   break;
 }
    }

  return 1;
}





static unsigned char *
get_line_filename_and_dirname (uint64_t line_offset,
          uint64_t fileidx,
          unsigned char **dir_name)
{
  struct dwarf_section *section = &debug_displays [line].section;
  unsigned char *hdrptr, *dirtable, *file_name;
  unsigned int offset_size;
  unsigned int version, opcode_base;
  uint64_t length, diridx;
  const unsigned char * end;

  *dir_name = 
# 6001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 6001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ;
  if (section->start == 
# 6002 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
      
# 6003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     || line_offset >= section->size
      || fileidx == 0)
    return 
# 6005 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 6005 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;

  hdrptr = section->start + line_offset;
  end = section->start + section->size;

  do { size_t amount = (4); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 6010 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 6010 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 6010 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 6010 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 6010 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 6010 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(hdrptr) <= (end)"
# 6010 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6010, __extension__ __PRETTY_FUNCTION__); }))
# 6010 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((hdrptr), amount); if (
# 6010 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 6010 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (hdrptr) += amount; } while (0);
  if (length == 0xffffffff)
    {

      do { size_t amount = (8); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 6014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 6014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 6014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 6014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 6014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 6014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 6014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6014, __extension__ __PRETTY_FUNCTION__); }))
# 6014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((hdrptr), amount); if (
# 6014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 6014 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      offset_size = 8;
    }
  else
    offset_size = 4;

  if (length > (size_t) (end - hdrptr)
      || length < 2 + offset_size + 1 + 3 + 1)
    return 
# 6022 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 6022 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
  end = hdrptr + length;

  do { size_t amount = (2); if (sizeof (version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (version)); amount = sizeof (version); } if (1) 
# 6025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 6025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 6025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 6025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 6025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 6025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(hdrptr) <= (end)"
# 6025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6025, __extension__ __PRETTY_FUNCTION__); }))
# 6025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (version) = 0; else (version) = (byte_get) ((hdrptr), amount); if (
# 6025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 6025 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (hdrptr) += amount; } while (0);
  if (version != 2 && version != 3 && version != 4)
    return 
# 6027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 6027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
  hdrptr += offset_size + 1;
  if (version >= 4)
    hdrptr++;
  hdrptr += 3;

  do { size_t amount = (1); if (sizeof (opcode_base) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (opcode_base)); amount = sizeof (opcode_base); } if (1) 
# 6033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 6033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 6033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 6033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (hdrptr) <= (end)
# 6033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 6033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(hdrptr) <= (end)"
# 6033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6033, __extension__ __PRETTY_FUNCTION__); }))
# 6033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (opcode_base) = 0; else (opcode_base) = (byte_get) ((hdrptr), amount); if (
# 6033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 6033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (hdrptr) += amount; } while (0);
  if (opcode_base == 0
      || opcode_base - 1 >= (size_t) (end - hdrptr))
    return 
# 6036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 6036 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;

  hdrptr += opcode_base - 1;

  dirtable = hdrptr;

  while (*hdrptr != '\0')
    {
      hdrptr += strnlen ((char *) hdrptr, end - hdrptr);
      if (hdrptr < end)
 hdrptr++;
      if (hdrptr >= end)
 return 
# 6048 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 6048 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ;
    }
  hdrptr++;


  for (; hdrptr < end && *hdrptr != '\0' && fileidx > 1; fileidx--)
    {
      hdrptr += strnlen ((char *) hdrptr, end - hdrptr);
      if (hdrptr < end)
 hdrptr++;
      do { unsigned int _len; read_leb128 (hdrptr, end, 
# 6058 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 6058 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, 
# 6058 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void *)0)
# 6058 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ); hdrptr += _len; } while (0);
      do { unsigned int _len; read_leb128 (hdrptr, end, 
# 6059 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 6059 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, 
# 6059 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void *)0)
# 6059 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ); hdrptr += _len; } while (0);
      do { unsigned int _len; read_leb128 (hdrptr, end, 
# 6060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 6060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, 
# 6060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void *)0)
# 6060 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ); hdrptr += _len; } while (0);
    }
  if (hdrptr >= end || *hdrptr == '\0')
    return 
# 6063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 6063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;

  file_name = hdrptr;
  hdrptr += strnlen ((char *) hdrptr, end - hdrptr);
  if (hdrptr < end)
    hdrptr++;
  if (hdrptr >= end)
    return 
# 6070 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 6070 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (hdrptr, end, 
# 6071 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 6071 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); hdrptr += _len; (diridx) = _val; if ((diridx) != _val) _status |= 2; report_leb_status (_status); } while (0);
  if (diridx == 0)
    return file_name;
  for (; dirtable < end && *dirtable != '\0' && diridx > 1; diridx--)
    {
      dirtable += strnlen ((char *) dirtable, end - dirtable);
      if (dirtable < end)
 dirtable++;
    }
  if (dirtable >= end || *dirtable == '\0')
    return 
# 6081 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 6081 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
  *dir_name = dirtable;
  return file_name;
}

static int
display_debug_macro (struct dwarf_section *section,
       void *file)
{
  unsigned char *start = section->start;
  unsigned char *end = start + section->size;
  unsigned char *curr = start;
  unsigned char *extended_op_buf[256];
  
# 6094 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 _Bool 
# 6094 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      is_dwo = 
# 6094 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               0
# 6094 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    ;
  const char *suffix = strrchr (section->name, '.');

  if (suffix && strcmp (suffix, ".dwo") == 0)
    is_dwo = 
# 6098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            1
# 6098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;

  load_debug_section_with_follow (str, file);
  load_debug_section_with_follow (line, file);
  load_debug_section_with_follow (str_index, file);

  introduce (section, 
# 6104 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 6104 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  while (curr < end)
    {
      unsigned int lineno, version, flags;
      unsigned int offset_size;
      const unsigned char *string;
      uint64_t line_offset = 0, sec_offset = curr - start, offset;
      unsigned char **extended_ops = 
# 6112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                    ((void *)0)
# 6112 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                        ;

      do { size_t amount = (2); if (sizeof (version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (version)); amount = sizeof (version); } if (1) 
# 6114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 6114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (curr) <= (end)
# 6114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 6114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (curr) <= (end)
# 6114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 6114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(curr) <= (end)"
# 6114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6114, __extension__ __PRETTY_FUNCTION__); }))
# 6114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (version) = 0; else (version) = (byte_get) ((curr), amount); if (
# 6114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 6114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (curr) += amount; } while (0);
      if (version != 4 && version != 5)
 {
   error (gettext ("Expected to find a version number of 4 or 5 in section %s but found %d instead\n"),
   section->name, version);
   return 0;
 }

      do { size_t amount = (1); if (sizeof (flags) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (flags)); amount = sizeof (flags); } if (1) 
# 6122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 6122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (curr) <= (end)
# 6122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 6122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (curr) <= (end)
# 6122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 6122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(curr) <= (end)"
# 6122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6122, __extension__ __PRETTY_FUNCTION__); }))
# 6122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (flags) = 0; else (flags) = (byte_get) ((curr), amount); if (
# 6122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 6122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (curr) += amount; } while (0);
      offset_size = (flags & 1) ? 8 : 4;
      printf (gettext ("  Offset:                      %#" 
# 6124 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "x" 
# 6124 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"), sec_offset);
      printf (gettext ("  Version:                     %d\n"), version);
      printf (gettext ("  Offset size:                 %d\n"), offset_size);
      if (flags & 2)
 {
   do { size_t amount = (offset_size); if (sizeof (line_offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (line_offset)); amount = sizeof (line_offset); } if (1) 
# 6129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 6129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (end)
# 6129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 6129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (end)
# 6129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 6129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(curr) <= (end)"
# 6129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6129, __extension__ __PRETTY_FUNCTION__); }))
# 6129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (line_offset) = 0; else (line_offset) = (byte_get) ((curr), amount); if (
# 6129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 6129 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (curr) += amount; } while (0);
   printf (gettext ("  Offset into .debug_line:     %#" 
# 6130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 6130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "\n"),
    line_offset);
 }
      if (flags & 4)
 {
   unsigned int i, count, op;
   uint64_t nargs, n;

   do { size_t amount = (1); if (sizeof (count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (count)); amount = sizeof (count); } if (1) 
# 6138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 6138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (end)
# 6138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 6138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (end)
# 6138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 6138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(curr) <= (end)"
# 6138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6138, __extension__ __PRETTY_FUNCTION__); }))
# 6138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (count) = 0; else (count) = (byte_get) ((curr), amount); if (
# 6138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 6138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (curr) += amount; } while (0);

   memset (extended_op_buf, 0, sizeof (extended_op_buf));
   extended_ops = extended_op_buf;
   if (count)
     {
       printf (gettext ("  Extension opcode arguments:\n"));
       for (i = 0; i < count; i++)
  {
    do { size_t amount = (1); if (sizeof (op) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (op)); amount = sizeof (op); } if (1) 
# 6147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void) sizeof ((
# 6147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   (curr) <= (end)
# 6147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ) ? 1 : 0), __extension__ ({ if (
# 6147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   (curr) <= (end)
# 6147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ) ; else __assert_fail (
# 6147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   "(curr) <= (end)"
# 6147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6147, __extension__ __PRETTY_FUNCTION__); }))
# 6147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (op) = 0; else (op) = (byte_get) ((curr), amount); if (
# 6147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   1
# 6147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ) (curr) += amount; } while (0);
    extended_ops[op] = curr;
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6149 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 6149 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); curr += _len; (nargs) = _val; if ((nargs) != _val) _status |= 2; report_leb_status (_status); } while (0);
    if (nargs == 0)
      printf (gettext ("    DW_MACRO_%02x has no arguments\n"), op);
    else
      {
        printf (gettext ("    DW_MACRO_%02x arguments: "), op);
        for (n = 0; n < nargs; n++)
   {
     unsigned int form;

     do { size_t amount = (1); if (sizeof (form) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (form)); amount = sizeof (form); } if (1) 
# 6159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    ((void) sizeof ((
# 6159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    (curr) <= (end)
# 6159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    ) ? 1 : 0), __extension__ ({ if (
# 6159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    (curr) <= (end)
# 6159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    ) ; else __assert_fail (
# 6159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    "(curr) <= (end)"
# 6159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6159, __extension__ __PRETTY_FUNCTION__); }))
# 6159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (form) = 0; else (form) = (byte_get) ((curr), amount); if (
# 6159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    1
# 6159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    ) (curr) += amount; } while (0);
     printf ("%s%s", get_FORM_name (form),
      n == nargs - 1 ? "\n" : ", ");
     switch (form)
       {
       case DW_FORM_data1:
       case DW_FORM_data2:
       case DW_FORM_data4:
       case DW_FORM_data8:
       case DW_FORM_sdata:
       case DW_FORM_udata:
       case DW_FORM_block:
       case DW_FORM_block1:
       case DW_FORM_block2:
       case DW_FORM_block4:
       case DW_FORM_flag:
       case DW_FORM_string:
       case DW_FORM_strp:
       case DW_FORM_sec_offset:
         break;
       default:
         error (gettext ("Invalid extension opcode form %s\n"),
         get_FORM_name (form));
         return 0;
       }
   }
      }
  }
     }
 }
      printf ("\n");

      while (1)
 {
   unsigned int op;

   if (curr >= end)
     {
       error (gettext (".debug_macro section not zero terminated\n"));
       return 0;
     }

   do { size_t amount = (1); if (sizeof (op) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (op)); amount = sizeof (op); } if (1) 
# 6201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 6201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (end)
# 6201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 6201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (end)
# 6201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 6201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(curr) <= (end)"
# 6201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6201, __extension__ __PRETTY_FUNCTION__); }))
# 6201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (op) = 0; else (op) = (byte_get) ((curr), amount); if (
# 6201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 6201 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (curr) += amount; } while (0);
   if (op == 0)
     break;

   switch (op)
     {
     case DW_MACRO_define:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6208 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 6208 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); curr += _len; (lineno) = _val; if ((lineno) != _val) _status |= 2; report_leb_status (_status); } while (0);
       string = curr;
       curr += strnlen ((char *) string, end - string);
       printf (gettext (" DW_MACRO_define - lineno : %d macro : %*s\n"),
        lineno, (int) (curr - string), string);
       if (curr < end)
  curr++;
       break;

     case DW_MACRO_undef:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6218 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 6218 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); curr += _len; (lineno) = _val; if ((lineno) != _val) _status |= 2; report_leb_status (_status); } while (0);
       string = curr;
       curr += strnlen ((char *) string, end - string);
       printf (gettext (" DW_MACRO_undef - lineno : %d macro : %*s\n"),
        lineno, (int) (curr - string), string);
       if (curr < end)
  curr++;
       break;

     case DW_MACRO_start_file:
       {
  unsigned int filenum;
  unsigned char *file_name = 
# 6230 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            ((void *)0)
# 6230 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                , *dir_name = 
# 6230 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                              ((void *)0)
# 6230 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                  ;

  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6232 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 6232 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); curr += _len; (lineno) = _val; if ((lineno) != _val) _status |= 2; report_leb_status (_status); } while (0);
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6233 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 6233 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); curr += _len; (filenum) = _val; if ((filenum) != _val) _status |= 2; report_leb_status (_status); } while (0);

  if ((flags & 2) == 0)
    error (gettext ("DW_MACRO_start_file used, but no .debug_line offset provided.\n"));
  else
    file_name
      = get_line_filename_and_dirname (line_offset, filenum,
           &dir_name);
  if (file_name == 
# 6241 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  ((void *)0)
# 6241 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      )
    printf (gettext (" DW_MACRO_start_file - lineno: %d filenum: %d\n"),
     lineno, filenum);
  else
    printf (gettext (" DW_MACRO_start_file - lineno: %d filenum: %d filename: %s%s%s\n"),
     lineno, filenum,
     dir_name != 
# 6247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                ((void *)0) 
# 6247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     ? (const char *) dir_name : "",
     dir_name != 
# 6248 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                ((void *)0) 
# 6248 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     ? "/" : "", file_name);
       }
       break;

     case DW_MACRO_end_file:
       printf (gettext (" DW_MACRO_end_file\n"));
       break;

     case DW_MACRO_define_strp:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 6257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); curr += _len; (lineno) = _val; if ((lineno) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (version == 4 && is_dwo)
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6259 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 6259 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); curr += _len; (offset) = _val; if ((offset) != _val) _status |= 2; report_leb_status (_status); } while (0);
       else
  do { size_t amount = (offset_size); if (sizeof (offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (offset)); amount = sizeof (offset); } if (1) 
# 6261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 6261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (curr) <= (end)
# 6261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 6261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (curr) <= (end)
# 6261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 6261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(curr) <= (end)"
# 6261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6261, __extension__ __PRETTY_FUNCTION__); }))
# 6261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (offset) = 0; else (offset) = (byte_get) ((curr), amount); if (
# 6261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 6261 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (curr) += amount; } while (0);
       string = fetch_indirect_string (offset);
       printf (gettext (" DW_MACRO_define_strp - lineno : %d macro : %s\n"),
        lineno, string);
       break;

     case DW_MACRO_undef_strp:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 6268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); curr += _len; (lineno) = _val; if ((lineno) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (version == 4 && is_dwo)
  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6270 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 6270 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); curr += _len; (offset) = _val; if ((offset) != _val) _status |= 2; report_leb_status (_status); } while (0);
       else
  do { size_t amount = (offset_size); if (sizeof (offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (offset)); amount = sizeof (offset); } if (1) 
# 6272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 6272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (curr) <= (end)
# 6272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 6272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (curr) <= (end)
# 6272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 6272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(curr) <= (end)"
# 6272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6272, __extension__ __PRETTY_FUNCTION__); }))
# 6272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (offset) = 0; else (offset) = (byte_get) ((curr), amount); if (
# 6272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 6272 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (curr) += amount; } while (0);
       string = fetch_indirect_string (offset);
       printf (gettext (" DW_MACRO_undef_strp - lineno : %d macro : %s\n"),
        lineno, string);
       break;

     case DW_MACRO_import:
       do { size_t amount = (offset_size); if (sizeof (offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (offset)); amount = sizeof (offset); } if (1) 
# 6279 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 6279 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (curr) <= (end)
# 6279 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 6279 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (curr) <= (end)
# 6279 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 6279 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(curr) <= (end)"
# 6279 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6279, __extension__ __PRETTY_FUNCTION__); }))
# 6279 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (offset) = 0; else (offset) = (byte_get) ((curr), amount); if (
# 6279 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 6279 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (curr) += amount; } while (0);
       printf (gettext (" DW_MACRO_import - offset : %#" 
# 6280 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 6280 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              "\n"),
        offset);
       break;

     case DW_MACRO_define_sup:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6285 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 6285 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); curr += _len; (lineno) = _val; if ((lineno) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { size_t amount = (offset_size); if (sizeof (offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (offset)); amount = sizeof (offset); } if (1) 
# 6286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 6286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (curr) <= (end)
# 6286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 6286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (curr) <= (end)
# 6286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 6286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(curr) <= (end)"
# 6286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6286, __extension__ __PRETTY_FUNCTION__); }))
# 6286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (offset) = 0; else (offset) = (byte_get) ((curr), amount); if (
# 6286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 6286 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (curr) += amount; } while (0);
       printf (gettext (" DW_MACRO_define_sup - lineno : %d" " macro offset : %#" 
# 6287 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 6287 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              "\n")
                                    ,
        lineno, offset);
       break;

     case DW_MACRO_undef_sup:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 6293 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); curr += _len; (lineno) = _val; if ((lineno) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { size_t amount = (offset_size); if (sizeof (offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (offset)); amount = sizeof (offset); } if (1) 
# 6294 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 6294 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (curr) <= (end)
# 6294 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 6294 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (curr) <= (end)
# 6294 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 6294 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(curr) <= (end)"
# 6294 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6294, __extension__ __PRETTY_FUNCTION__); }))
# 6294 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (offset) = 0; else (offset) = (byte_get) ((curr), amount); if (
# 6294 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 6294 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (curr) += amount; } while (0);
       printf (gettext (" DW_MACRO_undef_sup - lineno : %d" " macro offset : %#" 
# 6295 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 6295 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              "\n")
                                    ,
        lineno, offset);
       break;

     case DW_MACRO_import_sup:
       do { size_t amount = (offset_size); if (sizeof (offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (offset)); amount = sizeof (offset); } if (1) 
# 6301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 6301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (curr) <= (end)
# 6301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 6301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (curr) <= (end)
# 6301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 6301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(curr) <= (end)"
# 6301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6301, __extension__ __PRETTY_FUNCTION__); }))
# 6301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (offset) = 0; else (offset) = (byte_get) ((curr), amount); if (
# 6301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 6301 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (curr) += amount; } while (0);
       printf (gettext (" DW_MACRO_import_sup - offset : %#" 
# 6302 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 6302 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              "\n"),
        offset);
       break;

     case DW_MACRO_define_strx:
     case DW_MACRO_undef_strx:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6308 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 6308 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); curr += _len; (lineno) = _val; if ((lineno) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (curr, end, 
# 6309 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 6309 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); curr += _len; (offset) = _val; if ((offset) != _val) _status |= 2; report_leb_status (_status); } while (0);
       string = (const unsigned char *)
  fetch_indexed_string (offset, 
# 6311 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 6311 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , offset_size, 
# 6311 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                  0
# 6311 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                       , 0);
       if (op == DW_MACRO_define_strx)
  printf (" DW_MACRO_define_strx ");
       else
  printf (" DW_MACRO_undef_strx ");
       if (do_wide)
  printf (gettext ("(with offset %#" 
# 6317 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         "l" "x" 
# 6317 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
         ") "), offset);
       printf (gettext ("lineno : %d macro : %s\n"),
        lineno, string);
       break;

     default:
       if (op >= DW_MACRO_lo_user && op <= DW_MACRO_hi_user)
  {
    printf (gettext (" <Target Specific macro op: %#x - UNHANDLED"), op);
    break;
  }

       if (extended_ops == 
# 6329 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          ((void *)0) 
# 6329 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               || extended_ops[op] == 
# 6329 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                      ((void *)0)
# 6329 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                          )
  {
    error (gettext (" Unknown macro opcode %02x seen\n"), op);
    return 0;
  }
       else
  {

    uint64_t nargs, n;
    unsigned char *desc = extended_ops[op];
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (desc, end, 
# 6339 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 6339 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); desc += _len; (nargs) = _val; if ((nargs) != _val) _status |= 2; report_leb_status (_status); } while (0);
    if (nargs == 0)
      {
        printf (gettext (" DW_MACRO_%02x\n"), op);
        break;
      }
    printf (gettext (" DW_MACRO_%02x -"), op);
    for (n = 0; n < nargs; n++)
      {
        int val;


        do { size_t amount = (1); if (sizeof (val) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (val)); amount = sizeof (val); } if (1) 
# 6351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void) sizeof ((
# 6351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (desc) <= (end)
# 6351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ? 1 : 0), __extension__ ({ if (
# 6351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (desc) <= (end)
# 6351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ; else __assert_fail (
# 6351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       "(desc) <= (end)"
# 6351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6351, __extension__ __PRETTY_FUNCTION__); }))
# 6351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ; size_t avail = (end) - (desc); if ((desc) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (val) = 0; else (val) = (byte_get) ((desc), amount); if (
# 6351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       1
# 6351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ) (desc) += amount; } while (0);
        curr
   = read_and_display_attr_value (0, val, 0,
             start, curr, end, 0, 0,
             offset_size, version,
             
# 6356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 6356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                , 0, section,
             
# 6357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 6357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                , ' ', -1);
        if (n != nargs - 1)
   printf (",");
      }
    printf ("\n");
  }
       break;
     }
 }

      printf ("\n");
    }

  return 1;
}

static int
display_debug_abbrev (struct dwarf_section *section,
        void *file __attribute__ ((__unused__)))
{
  abbrev_entry *entry;
  unsigned char *start = section->start;

  introduce (section, 
# 6380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 6380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  do
    {
      uint64_t offset = start - section->start;
      abbrev_list *list = find_and_process_abbrev_set (section, 0,
             section->size, offset,
             
# 6387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 6387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                );
      if (list == 
# 6388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 ((void *)0)
# 6388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     )
 break;

      if (list->first_abbrev)
 printf (gettext ("  Number TAG (%#" 
# 6392 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 6392 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ")\n"), offset);

      for (entry = list->first_abbrev; entry; entry = entry->next)
 {
   abbrev_attr *attr;

   printf ("   %ld      %s    [%s]\n",
    entry->number,
    get_TAG_name (entry->tag),
    entry->children ? gettext ("has children") : gettext ("no children"));

   for (attr = entry->first_attr; attr; attr = attr->next)
     {
       printf ("    %-18s %s",
        get_AT_name (attr->attribute),
        get_FORM_name (attr->form));
       if (attr->form == DW_FORM_implicit_const)
  printf (": %" 
# 6409 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               "l" "d"
# 6409 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     , attr->implicit_const);
       putchar ('\n');
     }
 }
      start = list->start_of_next_abbrevs;
      free_abbrev_list (list);
    }
  while (start);

  printf ("\n");

  return 1;
}




static 
# 6426 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool

# 6427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
is_max_address (uint64_t addr, unsigned int pointer_size)
{
  uint64_t mask = ~(~(uint64_t) 0 << 1 << (pointer_size * 8 - 1));
  return ((addr & mask) == mask);
}




static void
display_view_pair_list (struct dwarf_section *section,
   unsigned char **vstart_ptr,
   unsigned int debug_info_entry,
   unsigned char *vlistend)
{
  unsigned char *vstart = *vstart_ptr;
  unsigned char *section_end = section->start + section->size;
  unsigned int pointer_size = debug_information [debug_info_entry].pointer_size;

  if (vlistend < section_end)
    section_end = vlistend;

  putchar ('\n');

  while (vstart < section_end)
    {
      uint64_t off = vstart - section->start;
      uint64_t vbegin, vend;

      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (vstart, section_end, 
# 6456 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 6456 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); vstart += _len; (vbegin) = _val; if ((vbegin) != _val) _status |= 2; report_leb_status (_status); } while (0);
      if (vstart == section_end)
 break;

      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (vstart, section_end, 
# 6460 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 6460 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); vstart += _len; (vend) = _val; if ((vend) != _val) _status |= 2; report_leb_status (_status); } while (0);
      printf ("    %8.8" 
# 6461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                        "l" "x" 
# 6461 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               " ", off);

      print_view (vbegin, pointer_size);
      print_view (vend, pointer_size);
      printf (gettext ("location view pair\n"));
    }

  putchar ('\n');
  *vstart_ptr = vstart;
}



static void
display_loc_list (struct dwarf_section *section,
    unsigned char **start_ptr,
    unsigned int debug_info_entry,
    uint64_t offset,
    uint64_t base_address,
    unsigned char **vstart_ptr,
    int has_frame_base)
{
  unsigned char *start = *start_ptr, *vstart = *vstart_ptr;
  unsigned char *section_end = section->start + section->size;
  uint64_t cu_offset;
  unsigned int pointer_size;
  unsigned int offset_size;
  int dwarf_version;
  uint64_t begin;
  uint64_t end;
  unsigned short length;
  int need_frame_base;

  if (debug_info_entry >= num_debug_info_entries)
    {
      warn (gettext ("No debug information available for loc lists of entry: %u\n"),
     debug_info_entry);
      return;
    }

  cu_offset = debug_information [debug_info_entry].cu_offset;
  pointer_size = debug_information [debug_info_entry].pointer_size;
  offset_size = debug_information [debug_info_entry].offset_size;
  dwarf_version = debug_information [debug_info_entry].dwarf_version;

  if (pointer_size < 2 || pointer_size > 8)
    {
      warn (gettext ("Invalid pointer size (%d) in debug info for entry %d\n"),
     pointer_size, debug_info_entry);
      return;
    }

  while (1)
    {
      uint64_t off = offset + (start - *start_ptr);
      uint64_t vbegin = -1, vend = -1;

      if (2 * pointer_size > (size_t) (section_end - start))
 {
   warn (gettext ("Location list starting at offset %#" 
# 6520 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 6520 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " is not terminated.\n")
                            , offset);
   break;
 }

      printf ("    ");
      print_hex (off, 4);

      do { size_t amount = (pointer_size); if (sizeof (begin) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (begin)); amount = sizeof (begin); } if (1) 
# 6528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 6528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 6528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 6528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (section_end)"
# 6528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6528, __extension__ __PRETTY_FUNCTION__); }))
# 6528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (begin) = 0; else (begin) = (byte_get) ((start), amount); if (
# 6528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 6528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      do { size_t amount = (pointer_size); if (sizeof (end) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (end)); amount = sizeof (end); } if (1) 
# 6529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 6529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 6529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 6529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (section_end)"
# 6529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6529, __extension__ __PRETTY_FUNCTION__); }))
# 6529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (end) = 0; else (end) = (byte_get) ((start), amount); if (
# 6529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 6529 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      if (begin == 0 && end == 0)
 {






   if (! reloc_at (section, off)
       && ! reloc_at (section, off + pointer_size))
     {
       printf (gettext ("<End of list>\n"));
       break;
     }
 }


      if (is_max_address (begin, pointer_size)
   && !is_max_address (end, pointer_size))
 {
   base_address = end;
   print_hex (begin, pointer_size);
   print_hex (end, pointer_size);
   printf (gettext ("(base address)\n"));
   continue;
 }

      if (vstart)
 {
   off = offset + (vstart - *start_ptr);

   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (vstart, section_end, 
# 6562 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6562 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); vstart += _len; (vbegin) = _val; if ((vbegin) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_view (vbegin, pointer_size);

   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (vstart, section_end, 
# 6565 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6565 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); vstart += _len; (vend) = _val; if ((vend) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_view (vend, pointer_size);

   printf (gettext ("views at %8.8" 
# 6568 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 6568 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " for:\n    %*s "), off, 8, "");
 }

      if (2 > (size_t) (section_end - start))
 {
   warn (gettext ("Location list starting at offset %#" 
# 6573 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 6573 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " is not terminated.\n")
                            , offset);
   break;
 }

      do { size_t amount = (2); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 6578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 6578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 6578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 6578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (section_end)"
# 6578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6578, __extension__ __PRETTY_FUNCTION__); }))
# 6578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((start), amount); if (
# 6578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 6578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      if (length > (size_t) (section_end - start))
 {
   warn (gettext ("Location list starting at offset %#" 
# 6582 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 6582 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " is not terminated.\n")
                            , offset);
   break;
 }

      print_hex (begin + base_address, pointer_size);
      print_hex (end + base_address, pointer_size);

      putchar ('(');
      need_frame_base = decode_location_expression (start,
          pointer_size,
          offset_size,
          dwarf_version,
          length,
          cu_offset, section);
      putchar (')');

      if (need_frame_base && !has_frame_base)
 printf (gettext (" [without DW_AT_frame_base]"));

      if (begin == end && vbegin == vend)
 fputs (gettext (" (start == end)"), 
# 6603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             stdout
# 6603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   );
      else if (begin > end || (begin == end && vbegin > vend))
 fputs (gettext (" (start > end)"), 
# 6605 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            stdout
# 6605 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  );

      putchar ('\n');

      start += length;
    }

  *start_ptr = start;
  *vstart_ptr = vstart;
}



static void
display_loclists_list (struct dwarf_section * section,
         unsigned char ** start_ptr,
         unsigned int debug_info_entry,
         uint64_t offset,
         uint64_t base_address,
         unsigned char ** vstart_ptr,
         int has_frame_base)
{
  unsigned char *start = *start_ptr;
  unsigned char *vstart = *vstart_ptr;
  unsigned char *section_end = section->start + section->size;
  uint64_t cu_offset;
  unsigned int pointer_size;
  unsigned int offset_size;
  unsigned int dwarf_version;


  uint64_t begin = -1, vbegin = -1;
  uint64_t end = -1, vend = -1;
  uint64_t length;
  int need_frame_base;

  if (debug_info_entry >= num_debug_info_entries)
    {
      warn (gettext ("No debug information available for " "loclists lists of entry: %u\n")
                                       ,
     debug_info_entry);
      return;
    }

  cu_offset = debug_information [debug_info_entry].cu_offset;
  pointer_size = debug_information [debug_info_entry].pointer_size;
  offset_size = debug_information [debug_info_entry].offset_size;
  dwarf_version = debug_information [debug_info_entry].dwarf_version;

  if (pointer_size < 2 || pointer_size > 8)
    {
      warn (gettext ("Invalid pointer size (%d) in debug info for entry %d\n"),
     pointer_size, debug_info_entry);
      return;
    }

  while (1)
    {
      uint64_t off = offset + (start - *start_ptr);
      enum dwarf_location_list_entry_type llet;

      if (start + 1 > section_end)
 {
   warn (gettext ("Location list starting at offset %#" 
# 6668 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 6668 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " is not terminated.\n")
                            , offset);
   break;
 }

      printf ("    ");
      print_hex (off, 4);

      do { size_t amount = (1); if (sizeof (llet) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (llet)); amount = sizeof (llet); } if (1) 
# 6676 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 6676 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6676 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 6676 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6676 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 6676 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (section_end)"
# 6676 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6676, __extension__ __PRETTY_FUNCTION__); }))
# 6676 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (llet) = 0; else (llet) = (byte_get) ((start), amount); if (
# 6676 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 6676 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      if (vstart && (llet == DW_LLE_offset_pair
       || llet == DW_LLE_start_end
       || llet == DW_LLE_start_length))
 {
   off = offset + (vstart - *start_ptr);

   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (vstart, section_end, 
# 6684 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6684 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); vstart += _len; (vbegin) = _val; if ((vbegin) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_view (vbegin, pointer_size);

   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (vstart, section_end, 
# 6687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); vstart += _len; (vend) = _val; if ((vend) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_view (vend, pointer_size);

   printf (gettext ("views at %8.8" 
# 6690 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 6690 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " for:\n    %*s "), off, 8, "");
 }

      switch (llet)
 {
 case DW_LLE_end_of_list:
   printf (gettext ("<End of list>\n"));
   break;

 case DW_LLE_base_addressx:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6700 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6700 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (base_address) = _val; if ((base_address) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_hex (base_address, pointer_size);
   printf (gettext ("(index into .debug_addr) "));
   base_address = fetch_indexed_addr (base_address, pointer_size);
   print_hex (base_address, pointer_size);
   printf (gettext ("(base address)\n"));
   break;

 case DW_LLE_startx_endx:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6709 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6709 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (begin) = _val; if ((begin) != _val) _status |= 2; report_leb_status (_status); } while (0);
   begin = fetch_indexed_addr (begin, pointer_size);
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6711 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6711 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (end) = _val; if ((end) != _val) _status |= 2; report_leb_status (_status); } while (0);
   end = fetch_indexed_addr (end, pointer_size);
   break;

 case DW_LLE_startx_length:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6716 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6716 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (begin) = _val; if ((begin) != _val) _status |= 2; report_leb_status (_status); } while (0);
   begin = fetch_indexed_addr (begin, pointer_size);
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6718 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6718 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (end) = _val; if ((end) != _val) _status |= 2; report_leb_status (_status); } while (0);
   end += begin;
   break;

 case DW_LLE_default_location:
   begin = end = 0;
   break;

 case DW_LLE_offset_pair:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6727 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6727 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (begin) = _val; if ((begin) != _val) _status |= 2; report_leb_status (_status); } while (0);
   begin += base_address;
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6729 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6729 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (end) = _val; if ((end) != _val) _status |= 2; report_leb_status (_status); } while (0);
   end += base_address;
   break;

 case DW_LLE_base_address:
   do { size_t amount = (pointer_size); if (sizeof (base_address) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (base_address)); amount = sizeof (base_address); } if (1) 
# 6734 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 6734 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6734 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 6734 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6734 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 6734 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (section_end)"
# 6734 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6734, __extension__ __PRETTY_FUNCTION__); }))
# 6734 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (base_address) = 0; else (base_address) = (byte_get) ((start), amount); if (
# 6734 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 6734 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0)
                 ;
   print_hex (base_address, pointer_size);
   printf (gettext ("(base address)\n"));
   break;

 case DW_LLE_start_end:
   do { size_t amount = (pointer_size); if (sizeof (begin) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (begin)); amount = sizeof (begin); } if (1) 
# 6741 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 6741 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6741 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 6741 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6741 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 6741 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (section_end)"
# 6741 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6741, __extension__ __PRETTY_FUNCTION__); }))
# 6741 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (begin) = 0; else (begin) = (byte_get) ((start), amount); if (
# 6741 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 6741 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   do { size_t amount = (pointer_size); if (sizeof (end) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (end)); amount = sizeof (end); } if (1) 
# 6742 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 6742 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6742 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 6742 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6742 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 6742 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (section_end)"
# 6742 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6742, __extension__ __PRETTY_FUNCTION__); }))
# 6742 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (end) = 0; else (end) = (byte_get) ((start), amount); if (
# 6742 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 6742 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   break;

 case DW_LLE_start_length:
   do { size_t amount = (pointer_size); if (sizeof (begin) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (begin)); amount = sizeof (begin); } if (1) 
# 6746 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 6746 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6746 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 6746 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6746 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 6746 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (section_end)"
# 6746 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6746, __extension__ __PRETTY_FUNCTION__); }))
# 6746 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (begin) = 0; else (begin) = (byte_get) ((start), amount); if (
# 6746 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 6746 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6747 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6747 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (end) = _val; if ((end) != _val) _status |= 2; report_leb_status (_status); } while (0);
   end += begin;
   break;


 case DW_LLE_GNU_view_pair:
   if (vstart)
     printf (gettext ("View pair entry in loclist with locviews attribute\n"));
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6755 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6755 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (vbegin) = _val; if ((vbegin) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_view (vbegin, pointer_size);

   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6758 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6758 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (vend) = _val; if ((vend) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_view (vend, pointer_size);

   printf (gettext ("views for:\n"));
   continue;


 default:
   error (gettext ("Invalid location list entry type %d\n"), llet);
   return;
 }

      if (llet == DW_LLE_end_of_list)
 break;

      if (llet == DW_LLE_base_address
   || llet == DW_LLE_base_addressx)
 continue;

      if (start == section_end)
 {
   warn (gettext ("Location list starting at offset %#" 
# 6779 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 6779 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " is not terminated.\n")
                            , offset);
   break;
 }
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6783 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 6783 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); start += _len; (length) = _val; if ((length) != _val) _status |= 2; report_leb_status (_status); } while (0);

      if (length > (size_t) (section_end - start))
 {
   warn (gettext ("Location list starting at offset %#" 
# 6787 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 6787 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " is not terminated.\n")
                            , offset);
   break;
 }

      print_hex (begin, pointer_size);
      print_hex (end, pointer_size);

      putchar ('(');
      need_frame_base = decode_location_expression (start,
          pointer_size,
          offset_size,
          dwarf_version,
          length,
          cu_offset, section);
      putchar (')');

      if (need_frame_base && !has_frame_base)
 printf (gettext (" [without DW_AT_frame_base]"));

      if (begin == end && vbegin == vend)
 fputs (gettext (" (start == end)"), 
# 6808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             stdout
# 6808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   );
      else if (begin > end || (begin == end && vbegin > vend))
 fputs (gettext (" (start > end)"), 
# 6810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            stdout
# 6810 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  );

      putchar ('\n');

      start += length;
      vbegin = vend = -1;
    }

  if (vbegin != (uint64_t) -1 || vend != (uint64_t) -1)
    printf (gettext ("Trailing view pair not used in a range"));

  *start_ptr = start;
  *vstart_ptr = vstart;
}




static void
print_addr_index (unsigned int idx, unsigned int len)
{
  static char buf[15];
  snprintf (buf, sizeof (buf), "[%d]", idx);
  printf ("%*s ", len, buf);
}





static void
display_loc_list_dwo (struct dwarf_section *section,
        unsigned char **start_ptr,
        unsigned int debug_info_entry,
        uint64_t offset,
        unsigned char **vstart_ptr,
        int has_frame_base)
{
  unsigned char *start = *start_ptr, *vstart = *vstart_ptr;
  unsigned char *section_end = section->start + section->size;
  uint64_t cu_offset;
  unsigned int pointer_size;
  unsigned int offset_size;
  int dwarf_version;
  int entry_type;
  unsigned short length;
  int need_frame_base;
  unsigned int idx;

  if (debug_info_entry >= num_debug_info_entries)
    {
      warn (gettext ("No debug information for loc lists of entry: %u\n"),
     debug_info_entry);
      return;
    }

  cu_offset = debug_information [debug_info_entry].cu_offset;
  pointer_size = debug_information [debug_info_entry].pointer_size;
  offset_size = debug_information [debug_info_entry].offset_size;
  dwarf_version = debug_information [debug_info_entry].dwarf_version;

  if (pointer_size < 2 || pointer_size > 8)
    {
      warn (gettext ("Invalid pointer size (%d) in debug info for entry %d\n"),
     pointer_size, debug_info_entry);
      return;
    }

  while (1)
    {
      printf ("    ");
      print_hex (offset + (start - *start_ptr), 4);

      if (start >= section_end)
 {
   warn (gettext ("Location list starting at offset %#" 
# 6885 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 6885 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " is not terminated.\n")
                            , offset);
   break;
 }

      do { size_t amount = (1); if (sizeof (entry_type) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (entry_type)); amount = sizeof (entry_type); } if (1) 
# 6890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 6890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 6890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 6890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (section_end)"
# 6890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6890, __extension__ __PRETTY_FUNCTION__); }))
# 6890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (entry_type) = 0; else (entry_type) = (byte_get) ((start), amount); if (
# 6890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 6890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      if (vstart)
 switch (entry_type)
   {
   default:
     break;

   case 2:
   case 3:
   case 4:
     {
       uint64_t view;
       uint64_t off = offset + (vstart - *start_ptr);

       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (vstart, section_end, 
# 6905 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 6905 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); vstart += _len; (view) = _val; if ((view) != _val) _status |= 2; report_leb_status (_status); } while (0);
       print_view (view, 8);

       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (vstart, section_end, 
# 6908 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 6908 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); vstart += _len; (view) = _val; if ((view) != _val) _status |= 2; report_leb_status (_status); } while (0);
       print_view (view, 8);

       printf (gettext ("views at %8.8" 
# 6911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 6911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              " for:\n    %*s "), off, 8, "");

     }
     break;
   }

      switch (entry_type)
 {
 case 0:
   *start_ptr = start;
   *vstart_ptr = vstart;
   printf (gettext ("<End of list>\n"));
   return;
 case 1:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6925 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6925 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (idx) = _val; if ((idx) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_addr_index (idx, 8);
   printf ("%*s", 9 + (vstart ? 2 * 6 : 0), "");
   printf (gettext ("(base address selection entry)\n"));
   continue;
 case 2:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6931 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6931 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (idx) = _val; if ((idx) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_addr_index (idx, 8);
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6933 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6933 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (idx) = _val; if ((idx) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_addr_index (idx, 8);
   break;
 case 3:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, section_end, 
# 6937 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 6937 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (idx) = _val; if ((idx) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_addr_index (idx, 8);
   do { size_t amount = (4); if (sizeof (idx) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (idx)); amount = sizeof (idx); } if (1) 
# 6939 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 6939 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6939 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 6939 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6939 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 6939 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (section_end)"
# 6939 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6939, __extension__ __PRETTY_FUNCTION__); }))
# 6939 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (idx) = 0; else (idx) = (byte_get) ((start), amount); if (
# 6939 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 6939 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   printf ("%08x ", idx);
   break;
 case 4:
   do { size_t amount = (4); if (sizeof (idx) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (idx)); amount = sizeof (idx); } if (1) 
# 6943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 6943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 6943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 6943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (section_end)"
# 6943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6943, __extension__ __PRETTY_FUNCTION__); }))
# 6943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (idx) = 0; else (idx) = (byte_get) ((start), amount); if (
# 6943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 6943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   printf ("%08x ", idx);
   do { size_t amount = (4); if (sizeof (idx) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (idx)); amount = sizeof (idx); } if (1) 
# 6945 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 6945 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6945 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 6945 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (section_end)
# 6945 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 6945 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (section_end)"
# 6945 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6945, __extension__ __PRETTY_FUNCTION__); }))
# 6945 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (idx) = 0; else (idx) = (byte_get) ((start), amount); if (
# 6945 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 6945 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   printf ("%08x ", idx);
   break;
 default:
   warn (gettext ("Unknown location list entry type 0x%x.\n"), entry_type);
   *start_ptr = start;
   *vstart_ptr = vstart;
   return;
 }

      if (2 > (size_t) (section_end - start))
 {
   warn (gettext ("Location list starting at offset %#" 
# 6957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 6957 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " is not terminated.\n")
                            , offset);
   break;
 }

      do { size_t amount = (2); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 6962 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 6962 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6962 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 6962 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (section_end)
# 6962 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 6962 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (section_end)"
# 6962 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 6962, __extension__ __PRETTY_FUNCTION__); }))
# 6962 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (section_end) - (start); if ((start) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((start), amount); if (
# 6962 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 6962 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      if (length > (size_t) (section_end - start))
 {
   warn (gettext ("Location list starting at offset %#" 
# 6965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 6965 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " is not terminated.\n")
                            , offset);
   break;
 }

      putchar ('(');
      need_frame_base = decode_location_expression (start,
          pointer_size,
          offset_size,
          dwarf_version,
          length,
          cu_offset, section);
      putchar (')');

      if (need_frame_base && !has_frame_base)
 printf (gettext (" [without DW_AT_frame_base]"));

      putchar ('\n');

      start += length;
    }

  *start_ptr = start;
  *vstart_ptr = vstart;
}




static uint64_t *loc_offsets, *loc_views;

static int
loc_offsets_compar (const void *ap, const void *bp)
{
  uint64_t a = loc_offsets[*(const unsigned int *) ap];
  uint64_t b = loc_offsets[*(const unsigned int *) bp];

  int ret = (a > b) - (b > a);
  if (ret)
    return ret;

  a = loc_views[*(const unsigned int *) ap];
  b = loc_views[*(const unsigned int *) bp];

  ret = (a > b) - (b > a);

  return ret;
}

static int
display_offset_entry_loclists (struct dwarf_section *section)
{
  unsigned char * start = section->start;
  unsigned char * const end = start + section->size;

  introduce (section, 
# 7020 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 7020 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  do
    {
      uint64_t length;
      unsigned short version;
      unsigned char address_size;
      unsigned char segment_selector_size;
      uint32_t offset_entry_count;
      uint32_t i;
      
# 7030 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     _Bool 
# 7030 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          is_64bit;

      printf (gettext ("Table at Offset %#tx\n"), start - section->start);

      do { size_t amount = (4); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 7034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 7034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 7034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (end)"
# 7034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7034, __extension__ __PRETTY_FUNCTION__); }))
# 7034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((start), amount); if (
# 7034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7034 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      if (length == 0xffffffff)
 {
   is_64bit = 
# 7037 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             1
# 7037 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ;
   do { size_t amount = (8); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 7038 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7038 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (end)
# 7038 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7038 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (end)
# 7038 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7038 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (end)"
# 7038 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7038, __extension__ __PRETTY_FUNCTION__); }))
# 7038 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((start), amount); if (
# 7038 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7038 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
 }
      else
 is_64bit = 
# 7041 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           0
# 7041 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;

      do { size_t amount = (2); if (sizeof (version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (version)); amount = sizeof (version); } if (1) 
# 7043 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7043 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 7043 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7043 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 7043 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7043 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (end)"
# 7043 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7043, __extension__ __PRETTY_FUNCTION__); }))
# 7043 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (version) = 0; else (version) = (byte_get) ((start), amount); if (
# 7043 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7043 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      do { size_t amount = (1); if (sizeof (address_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (address_size)); amount = sizeof (address_size); } if (1) 
# 7044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 7044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 7044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (end)"
# 7044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7044, __extension__ __PRETTY_FUNCTION__); }))
# 7044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (address_size) = 0; else (address_size) = (byte_get) ((start), amount); if (
# 7044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      do { size_t amount = (1); if (sizeof (segment_selector_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (segment_selector_size)); amount = sizeof (segment_selector_size); } if (1) 
# 7045 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7045 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 7045 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7045 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 7045 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7045 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (end)"
# 7045 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7045, __extension__ __PRETTY_FUNCTION__); }))
# 7045 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (segment_selector_size) = 0; else (segment_selector_size) = (byte_get) ((start), amount); if (
# 7045 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7045 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      do { size_t amount = (4); if (sizeof (offset_entry_count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (offset_entry_count)); amount = sizeof (offset_entry_count); } if (1) 
# 7046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 7046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 7046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (end)"
# 7046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7046, __extension__ __PRETTY_FUNCTION__); }))
# 7046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (offset_entry_count) = 0; else (offset_entry_count) = (byte_get) ((start), amount); if (
# 7046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      printf (gettext ("  Length:          %#" 
# 7048 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "x" 
# 7048 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"), length);
      printf (gettext ("  DWARF version:   %u\n"), version);
      printf (gettext ("  Address size:    %u\n"), address_size);
      printf (gettext ("  Segment size:    %u\n"), segment_selector_size);
      printf (gettext ("  Offset entries:  %u\n"), offset_entry_count);

      if (version < 5)
 {
   warn (gettext ("The %s section contains a corrupt or " "unsupported version number: %d.\n")
                                        ,
  section->name, version);
   return 0;
 }

      if (segment_selector_size != 0)
 {
   warn (gettext ("The %s section contains an " "unsupported segment selector size: %d.\n")
                                               ,
  section->name, segment_selector_size);
   return 0;
 }

      if (offset_entry_count == 0)
 {
   warn (gettext ("The %s section contains a table without offset\n"),
  section->name);
   return 0;
 }

      printf (gettext ("\n   Offset Entries starting at %#tx:\n"),
       start - section->start);

      for (i = 0; i < offset_entry_count; i++)
 {
   uint64_t entry;

   do { size_t amount = (is_64bit ? 8 : 4); if (sizeof (entry) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (entry)); amount = sizeof (entry); } if (1) 
# 7084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (end)
# 7084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (end)
# 7084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (end)"
# 7084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7084, __extension__ __PRETTY_FUNCTION__); }))
# 7084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (entry) = 0; else (entry) = (byte_get) ((start), amount); if (
# 7084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7084 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   printf (gettext ("    [%6u] %#" 
# 7085 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 7085 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "\n"), i, entry);
 }

      putchar ('\n');

      uint32_t j;

      for (j = 1, i = 0; i < offset_entry_count;)
 {
   unsigned char lle;
   uint64_t base_address = 0;
   uint64_t begin;
   uint64_t finish;
   uint64_t off = start - section->start;

   if (j != i)
     {
       printf (gettext ("   Offset Entry %u\n"), i);
       j = i;
     }

   printf ("    ");
   print_hex (off, 4);

   do { size_t amount = (1); if (sizeof (lle) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (lle)); amount = sizeof (lle); } if (1) 
# 7109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (end)
# 7109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (end)
# 7109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (end)"
# 7109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7109, __extension__ __PRETTY_FUNCTION__); }))
# 7109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (lle) = 0; else (lle) = (byte_get) ((start), amount); if (
# 7109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7109 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);

   switch (lle)
     {
     case DW_LLE_end_of_list:
       printf (gettext ("<End of list>\n\n"));
       i ++;
       continue;

     case DW_LLE_base_addressx:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 7119 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 7119 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (base_address) = _val; if ((base_address) != _val) _status |= 2; report_leb_status (_status); } while (0);
       print_hex (base_address, address_size);
       printf (gettext ("(index into .debug_addr) "));
       base_address = fetch_indexed_addr (base_address, address_size);
       print_hex (base_address, address_size);
       printf (gettext ("(base address)\n"));
       continue;

     case DW_LLE_startx_endx:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 7128 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 7128 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (begin) = _val; if ((begin) != _val) _status |= 2; report_leb_status (_status); } while (0);
       begin = fetch_indexed_addr (begin, address_size);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 7130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 7130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (finish) = _val; if ((finish) != _val) _status |= 2; report_leb_status (_status); } while (0);
       finish = fetch_indexed_addr (finish, address_size);
       break;

     case DW_LLE_startx_length:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 7135 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 7135 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (begin) = _val; if ((begin) != _val) _status |= 2; report_leb_status (_status); } while (0);
       begin = fetch_indexed_addr (begin, address_size);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 7137 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 7137 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (finish) = _val; if ((finish) != _val) _status |= 2; report_leb_status (_status); } while (0);
       finish += begin;
       break;

     case DW_LLE_offset_pair:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 7142 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 7142 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (begin) = _val; if ((begin) != _val) _status |= 2; report_leb_status (_status); } while (0);
       begin += base_address;
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 7144 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 7144 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (finish) = _val; if ((finish) != _val) _status |= 2; report_leb_status (_status); } while (0);
       finish += base_address;
       break;

     case DW_LLE_default_location:
       begin = finish = 0;
       break;

     case DW_LLE_base_address:
       do { size_t amount = (address_size); if (sizeof (base_address) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (base_address)); amount = sizeof (base_address); } if (1) 
# 7153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 7153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (end)
# 7153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 7153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (end)
# 7153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 7153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(start) <= (end)"
# 7153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7153, __extension__ __PRETTY_FUNCTION__); }))
# 7153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (base_address) = 0; else (base_address) = (byte_get) ((start), amount); if (
# 7153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 7153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (start) += amount; } while (0);
       print_hex (base_address, address_size);
       printf (gettext ("(base address)\n"));
       continue;

     case DW_LLE_start_end:
       do { size_t amount = (address_size); if (sizeof (begin) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (begin)); amount = sizeof (begin); } if (1) 
# 7159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 7159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (end)
# 7159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 7159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (end)
# 7159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 7159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(start) <= (end)"
# 7159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7159, __extension__ __PRETTY_FUNCTION__); }))
# 7159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (begin) = 0; else (begin) = (byte_get) ((start), amount); if (
# 7159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 7159 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (start) += amount; } while (0);
       do { size_t amount = (address_size); if (sizeof (finish) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (finish)); amount = sizeof (finish); } if (1) 
# 7160 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 7160 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (end)
# 7160 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 7160 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (end)
# 7160 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 7160 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(start) <= (end)"
# 7160 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7160, __extension__ __PRETTY_FUNCTION__); }))
# 7160 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (finish) = 0; else (finish) = (byte_get) ((start), amount); if (
# 7160 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 7160 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (start) += amount; } while (0);
       break;

     case DW_LLE_start_length:
       do { size_t amount = (address_size); if (sizeof (begin) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (begin)); amount = sizeof (begin); } if (1) 
# 7164 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 7164 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (end)
# 7164 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 7164 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (end)
# 7164 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 7164 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(start) <= (end)"
# 7164 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7164, __extension__ __PRETTY_FUNCTION__); }))
# 7164 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (begin) = 0; else (begin) = (byte_get) ((start), amount); if (
# 7164 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 7164 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (start) += amount; } while (0);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 7165 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 7165 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (finish) = _val; if ((finish) != _val) _status |= 2; report_leb_status (_status); } while (0);
       finish += begin;
       break;

     default:
       error (gettext ("Invalid location list entry type %d\n"), lle);
       return 0;
     }

   if (start == end)
     {
       warn (gettext ("Location list starting at offset %#" 
# 7176 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 7176 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " is not terminated.\n")
                                , off);
       break;
     }

   print_hex (begin, address_size);
   print_hex (finish, address_size);

   if (begin == finish)
     fputs (gettext ("(start == end)"), 
# 7185 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                stdout
# 7185 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      );
   else if (begin > finish)
     fputs (gettext ("(start > end)"), 
# 7187 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               stdout
# 7187 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                     );


   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 7190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 7190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (length) = _val; if ((length) != _val) _status |= 2; report_leb_status (_status); } while (0);

   if (length > (size_t) (end - start))
     {
       warn (gettext ("Location list starting at offset %#" 
# 7194 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 7194 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " is not terminated.\n")
                                , off);
       break;
     }

   (void) decode_location_expression (start, address_size, address_size,
          version, length, 0, section);
   start += length;
   putchar ('\n');
 }

      putchar ('\n');
    }
  while (start < end);

  return 1;
}

static int
display_debug_loc (struct dwarf_section *section, void *file)
{
  unsigned char *start = section->start, *vstart = 
# 7215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                  ((void *)0)
# 7215 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      ;
  uint64_t bytes;
  unsigned char *section_begin = start;
  unsigned int num_loc_list = 0;
  uint64_t last_offset = 0;
  uint64_t last_view = 0;
  unsigned int first = 0;
  unsigned int i;
  unsigned int j;
  int seen_first_offset = 0;
  int locs_sorted = 1;
  unsigned char *next = start, *vnext = vstart;
  unsigned int *array = 
# 7227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 7227 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           ;
  const char *suffix = strrchr (section->name, '.');
  
# 7229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 _Bool 
# 7229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      is_dwo = 
# 7229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               0
# 7229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    ;
  int is_loclists = strstr (section->name, "debug_loclists") != 
# 7230 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                               ((void *)0)
# 7230 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                   ;
  uint64_t header_size = 0;

  if (suffix && strcmp (suffix, ".dwo") == 0)
    is_dwo = 
# 7234 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            1
# 7234 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;

  bytes = section->size;

  if (bytes == 0)
    {
      printf (gettext ("\nThe %s section is empty.\n"), section->name);
      return 0;
    }

  if (is_loclists)
    {
      unsigned char *hdrptr = section_begin;
      uint64_t ll_length;
      unsigned short ll_version;
      unsigned char *end = section_begin + section->size;
      unsigned char address_size, segment_selector_size;
      uint32_t offset_entry_count;

      do { size_t amount = (4); if (sizeof (ll_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (ll_length)); amount = sizeof (ll_length); } if (1) 
# 7253 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7253 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7253 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7253 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7253 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7253 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 7253 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7253, __extension__ __PRETTY_FUNCTION__); }))
# 7253 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (ll_length) = 0; else (ll_length) = (byte_get) ((hdrptr), amount); if (
# 7253 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7253 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      if (ll_length == 0xffffffff)
 do { size_t amount = (8); if (sizeof (ll_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (ll_length)); amount = sizeof (ll_length); } if (1) 
# 7255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void) sizeof ((
# 7255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(hdrptr) <= (end)
# 7255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ? 1 : 0), __extension__ ({ if (
# 7255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
(hdrptr) <= (end)
# 7255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
) ; else __assert_fail (
# 7255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
"(hdrptr) <= (end)"
# 7255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
, "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7255, __extension__ __PRETTY_FUNCTION__); }))
# 7255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (ll_length) = 0; else (ll_length) = (byte_get) ((hdrptr), amount); if (
# 7255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
1
# 7255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
) (hdrptr) += amount; } while (0);

      do { size_t amount = (2); if (sizeof (ll_version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (ll_version)); amount = sizeof (ll_version); } if (1) 
# 7257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 7257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7257, __extension__ __PRETTY_FUNCTION__); }))
# 7257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (ll_version) = 0; else (ll_version) = (byte_get) ((hdrptr), amount); if (
# 7257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7257 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      if (ll_version != 5)
 {
   warn (gettext ("The %s section contains corrupt or " "unsupported version number: %d.\n")
                                        ,
  section->name, ll_version);
   return 0;
 }

      do { size_t amount = (1); if (sizeof (address_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (address_size)); amount = sizeof (address_size); } if (1) 
# 7266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 7266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7266, __extension__ __PRETTY_FUNCTION__); }))
# 7266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (address_size) = 0; else (address_size) = (byte_get) ((hdrptr), amount); if (
# 7266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7266 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      do { size_t amount = (1); if (sizeof (segment_selector_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (segment_selector_size)); amount = sizeof (segment_selector_size); } if (1) 
# 7268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 7268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7268, __extension__ __PRETTY_FUNCTION__); }))
# 7268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (segment_selector_size) = 0; else (segment_selector_size) = (byte_get) ((hdrptr), amount); if (
# 7268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      if (segment_selector_size != 0)
 {
   warn (gettext ("The %s section contains " "unsupported segment selector size: %d.\n")
                                               ,
  section->name, segment_selector_size);
   return 0;
 }

      do { size_t amount = (4); if (sizeof (offset_entry_count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (offset_entry_count)); amount = sizeof (offset_entry_count); } if (1) 
# 7277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 7277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7277, __extension__ __PRETTY_FUNCTION__); }))
# 7277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (offset_entry_count) = 0; else (offset_entry_count) = (byte_get) ((hdrptr), amount); if (
# 7277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7277 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      if (offset_entry_count != 0)
 return display_offset_entry_loclists (section);

      header_size = hdrptr - section_begin;
    }

  if (load_debug_info (file) == 0)
    {
      warn (gettext ("Unable to load/parse the .debug_info section, so cannot interpret the %s section.\n"),
     section->name);
      return 0;
    }




  for (i = 0; i < num_debug_info_entries; i++)
    {
      unsigned int num;

      num = debug_information [i].num_loc_offsets;
      if (num > num_loc_list)
 num_loc_list = num;


      if (locs_sorted && num != 0)
 {
   if (!seen_first_offset)
     {

       last_offset = debug_information [i].loc_offsets [0];
       last_view = debug_information [i].loc_views [0];
       first = i;
       seen_first_offset = 1;
       j = 1;
     }
   else
     j = 0;

   for (; j < num; j++)
     {
       if (last_offset >
    debug_information [i].loc_offsets [j]
    || (last_offset == debug_information [i].loc_offsets [j]
        && last_view > debug_information [i].loc_views [j]))
  {
    locs_sorted = 0;
    break;
  }
       last_offset = debug_information [i].loc_offsets [j];
       last_view = debug_information [i].loc_views [j];
     }
 }
    }

  if (!seen_first_offset)
    error (gettext ("No location lists in .debug_info section!\n"));

  if (debug_information [first].num_loc_offsets > 0
      && debug_information [first].loc_offsets [0] != header_size
      && debug_information [first].loc_views [0] != header_size)
    warn (gettext ("Location lists in %s section start at %#" 
# 7340 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         "l" "x" 
# 7340 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
         " rather than %#" 
# 7340 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         "l" "x" 
# 7340 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
         "\n")
                                   ,
   section->name, debug_information [first].loc_offsets [0],
   header_size);

  if (!locs_sorted)
    array = (unsigned int *) xcmalloc (num_loc_list, sizeof (unsigned int));

  introduce (section, 
# 7348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 7348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  if (reloc_at (section, 0))
    printf (gettext (" Warning: This section has relocations - addresses seen here may not be accurate.\n\n"));

  printf (gettext ("    Offset   Begin            End              Expression\n"));

  for (i = first; i < num_debug_info_entries; i++)
    {
      uint64_t offset = 0, voffset = 0;
      uint64_t base_address;
      unsigned int k;
      int has_frame_base;

      if (!locs_sorted)
 {
   for (k = 0; k < debug_information [i].num_loc_offsets; k++)
     array[k] = k;
   loc_offsets = debug_information [i].loc_offsets;
   loc_views = debug_information [i].loc_views;
   qsort (array, debug_information [i].num_loc_offsets,
   sizeof (*array), loc_offsets_compar);
 }



      if (debug_information [i].dwarf_version == 5)
 {
   j = locs_sorted ? 0 : array [0];

   if (debug_information [i].num_loc_offsets)
     offset = debug_information [i].loc_offsets [j];

   if (debug_information [i].num_loc_views)
     voffset = debug_information [i].loc_views [j];


   if (((start - section_begin) + header_size == offset)
       || ((start -section_begin) + header_size == voffset))
     start += header_size;
 }

      int adjacent_view_loclists = 1;
      for (k = 0; k < debug_information [i].num_loc_offsets; k++)
 {
   j = locs_sorted ? k : array[k];
   if (k
       && (debug_information [i].loc_offsets [locs_sorted
          ? k - 1 : array [k - 1]]
    == debug_information [i].loc_offsets [j])
       && (debug_information [i].loc_views [locs_sorted
         ? k - 1 : array [k - 1]]
    == debug_information [i].loc_views [j]))
     continue;
   has_frame_base = debug_information [i].have_frame_base [j];
   offset = debug_information [i].loc_offsets [j];
   next = section_begin + offset;
   voffset = debug_information [i].loc_views [j];
   if (voffset != (uint64_t) -1)
     vnext = section_begin + voffset;
   else
     vnext = 
# 7409 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 7409 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
   base_address = debug_information [i].base_address;

   if (vnext && vnext < next)
     {
       vstart = vnext;
       display_view_pair_list (section, &vstart, i, next);
       if (start == vnext)
  start = vstart;
     }

   if (start < next)
     {
       if (vnext && vnext < next)
  warn (gettext ("There is a hole [%#tx - %#" 
# 7423 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       "l" "x" 
# 7423 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       "]" " in %s section.\n")
                       ,
        start - section_begin, voffset, section->name);
       else
  warn (gettext ("There is a hole [%#tx - %#" 
# 7427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       "l" "x" 
# 7427 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       "]" " in %s section.\n")
                       ,
        start - section_begin, offset, section->name);
     }
   else if (start > next)
     warn (gettext ("There is an overlap [%#tx - %#" 
# 7432 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 7432 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "]" " in %s section.\n")
                          ,
    start - section_begin, offset, section->name);
   start = next;
   vstart = vnext;

   if (offset >= bytes)
     {
       warn (gettext ("Offset %#" 
# 7440 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 7440 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " is bigger than %s section size.\n"),
      offset, section->name);
       continue;
     }

   if (vnext && voffset >= bytes)
     {
       warn (gettext ("View Offset %#" 
# 7447 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 7447 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " is bigger than %s section size.\n"),
      voffset, section->name);
       continue;
     }

   if (!is_loclists)
     {
       if (is_dwo)
  display_loc_list_dwo (section, &start, i, offset,
          &vstart, has_frame_base);
       else
  display_loc_list (section, &start, i, offset, base_address,
      &vstart, has_frame_base);
     }
   else
     {
       if (is_dwo)
  warn (gettext ("DWO is not yet supported.\n"));
       else
  display_loclists_list (section, &start, i, offset, base_address,
           &vstart, has_frame_base);
     }
# 7477 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   if (adjacent_view_loclists && vnext
       && vnext != start && vstart != next)
     {
       adjacent_view_loclists = 0;
       warn (gettext ("Hole and overlap detection requires adjacent view lists and loclists.\n"));
     }

   if (vnext && vnext == start)
     display_view_pair_list (section, &start, i, vstart);
 }
    }

  if (start < section->start + section->size)
    warn (ngettext ("There is %ld unused byte at the end of section %s\n",
      "There are %ld unused bytes at the end of section %s\n",
      (long) (section->start + section->size - start)),
   (long) (section->start + section->size - start), section->name);
  putchar ('\n');
  free (array);
  return 1;
}

static int
display_debug_str (struct dwarf_section *section,
     void *file __attribute__ ((__unused__)))
{
  unsigned char *start = section->start;
  uint64_t bytes = section->size;
  uint64_t addr = section->address;

  if (bytes == 0)
    {
      printf (gettext ("\nThe %s section is empty.\n"), section->name);
      return 0;
    }

  introduce (section, 
# 7513 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 7513 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  while (bytes)
    {
      int j;
      int k;
      int lbytes;

      lbytes = (bytes > 16 ? 16 : bytes);

      printf ("  0x%8.8" 
# 7523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                        "l" "x" 
# 7523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               " ", addr);

      for (j = 0; j < 16; j++)
 {
   if (j < lbytes)
     printf ("%2.2x", start[j]);
   else
     printf ("  ");

   if ((j & 3) == 3)
     printf (" ");
 }

      for (j = 0; j < lbytes; j++)
 {
   k = start[j];
   if (k >= ' ' && k < 0x80)
     printf ("%c", k);
   else
     printf (".");
 }

      putchar ('\n');

      start += lbytes;
      addr += lbytes;
      bytes -= lbytes;
    }

  putchar ('\n');

  return 1;
}

static int
display_debug_info (struct dwarf_section *section, void *file)
{
  return process_debug_info (section, file, section->abbrev_sec, 
# 7560 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                0
# 7560 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                     , 
# 7560 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                       0
# 7560 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                            );
}

static int
display_debug_types (struct dwarf_section *section, void *file)
{
  return process_debug_info (section, file, section->abbrev_sec, 
# 7566 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                0
# 7566 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                     , 
# 7566 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                       1
# 7566 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                           );
}

static int
display_trace_info (struct dwarf_section *section, void *file)
{
  return process_debug_info (section, file, section->abbrev_sec, 
# 7572 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                0
# 7572 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                     , 
# 7572 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                       1
# 7572 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                           );
}

static int
display_debug_aranges (struct dwarf_section *section,
         void *file __attribute__ ((__unused__)))
{
  unsigned char *start = section->start;
  unsigned char *end = start + section->size;

  introduce (section, 
# 7582 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 7582 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );



  load_debug_info (file);

  while (start < end)
    {
      unsigned char *hdrptr;
      DWARF2_Internal_ARange arange;
      unsigned char *addr_ranges;
      uint64_t length;
      uint64_t address;
      uint64_t sec_off;
      unsigned char address_size;
      unsigned int offset_size;
      unsigned char *end_ranges;

      hdrptr = start;
      sec_off = hdrptr - section->start;

      do { size_t amount = (4); if (sizeof (arange.ar_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (arange.ar_length)); amount = sizeof (arange.ar_length); } if (1) 
# 7603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end)
# 7603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end)"
# 7603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7603, __extension__ __PRETTY_FUNCTION__); }))
# 7603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (arange.ar_length) = 0; else (arange.ar_length) = (byte_get) ((hdrptr), amount); if (
# 7603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7603 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      if (arange.ar_length == 0xffffffff)
 {
   do { size_t amount = (8); if (sizeof (arange.ar_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (arange.ar_length)); amount = sizeof (arange.ar_length); } if (1) 
# 7606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end)
# 7606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (end)
# 7606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (end)"
# 7606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7606, __extension__ __PRETTY_FUNCTION__); }))
# 7606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (hdrptr); if ((hdrptr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (arange.ar_length) = 0; else (arange.ar_length) = (byte_get) ((hdrptr), amount); if (
# 7606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7606 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   offset_size = 8;
 }
      else
 offset_size = 4;

      if (arange.ar_length > (size_t) (end - hdrptr))
 {
   warn (gettext ("Debug info is corrupted, %s header at %#" 
# 7614 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 7614 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " has length %#" 
# 7614 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 7614 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        "\n")
                                 ,
  section->name, sec_off, arange.ar_length);
   break;
 }
      end_ranges = hdrptr + arange.ar_length;

      do { size_t amount = (2); if (sizeof (arange.ar_version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (arange.ar_version)); amount = sizeof (arange.ar_version); } if (1) 
# 7621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_ranges)
# 7621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_ranges)
# 7621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end_ranges)"
# 7621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7621, __extension__ __PRETTY_FUNCTION__); }))
# 7621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end_ranges) - (hdrptr); if ((hdrptr) > (end_ranges)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (arange.ar_version) = 0; else (arange.ar_version) = (byte_get) ((hdrptr), amount); if (
# 7621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7621 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      do { size_t amount = (offset_size); if (sizeof (arange.ar_info_offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (arange.ar_info_offset)); amount = sizeof (arange.ar_info_offset); } if (1) 
# 7622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_ranges)
# 7622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_ranges)
# 7622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end_ranges)"
# 7622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7622, __extension__ __PRETTY_FUNCTION__); }))
# 7622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end_ranges) - (hdrptr); if ((hdrptr) > (end_ranges)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (arange.ar_info_offset) = 0; else (arange.ar_info_offset) = (byte_get) ((hdrptr), amount); if (
# 7622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7622 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0)
                   ;

      if (num_debug_info_entries != (unsigned int) -1
   && num_debug_info_entries > 0
   && find_debug_info_for_offset (arange.ar_info_offset) == 
# 7627 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                           ((void *)0)
# 7627 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                               )
 warn (gettext (".debug_info offset of %#" 
# 7628 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      "l" "x" 
# 7628 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      " in %s section does not point to a CU header.\n")
                                                    ,
       arange.ar_info_offset, section->name);

      do { size_t amount = (1); if (sizeof (arange.ar_pointer_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (arange.ar_pointer_size)); amount = sizeof (arange.ar_pointer_size); } if (1) 
# 7632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_ranges)
# 7632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_ranges)
# 7632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end_ranges)"
# 7632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7632, __extension__ __PRETTY_FUNCTION__); }))
# 7632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end_ranges) - (hdrptr); if ((hdrptr) > (end_ranges)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (arange.ar_pointer_size) = 0; else (arange.ar_pointer_size) = (byte_get) ((hdrptr), amount); if (
# 7632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7632 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      do { size_t amount = (1); if (sizeof (arange.ar_segment_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (arange.ar_segment_size)); amount = sizeof (arange.ar_segment_size); } if (1) 
# 7633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_ranges)
# 7633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (end_ranges)
# 7633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (end_ranges)"
# 7633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7633, __extension__ __PRETTY_FUNCTION__); }))
# 7633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end_ranges) - (hdrptr); if ((hdrptr) > (end_ranges)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (arange.ar_segment_size) = 0; else (arange.ar_segment_size) = (byte_get) ((hdrptr), amount); if (
# 7633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      if (arange.ar_version != 2 && arange.ar_version != 3)
 {




   if (arange.ar_version)
     warn (gettext ("Only DWARF 2 and 3 aranges are currently supported.\n"));
   break;
 }

      printf (gettext ("  Length:                   %" 
# 7646 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "d" 
# 7646 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"), arange.ar_length);
      printf (gettext ("  Version:                  %d\n"), arange.ar_version);
      printf (gettext ("  Offset into .debug_info:  %#" 
# 7648 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "x" 
# 7648 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"),
       arange.ar_info_offset);
      printf (gettext ("  Pointer Size:             %d\n"), arange.ar_pointer_size);
      printf (gettext ("  Segment Size:             %d\n"), arange.ar_segment_size);

      address_size = arange.ar_pointer_size + arange.ar_segment_size;


      if (address_size == 0 || address_size > 8)
 {
   error (gettext ("Invalid address size in %s section!\n"),
   section->name);
   break;
 }




      if ((address_size & (address_size - 1)) != 0)
 {
   warn (gettext ("Pointer size + Segment size is not a power of two.\n"));
   break;
 }

      if (address_size > 4)
 printf (gettext ("\n    Address            Length\n"));
      else
 printf (gettext ("\n    Address    Length\n"));

      addr_ranges = hdrptr;


      addr_ranges += (2 * address_size - 1
        - (hdrptr - start - 1) % (2 * address_size));

      while (2 * address_size <= end_ranges - addr_ranges)
 {
   do { size_t amount = (address_size); if (sizeof (address) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (address)); amount = sizeof (address); } if (1) 
# 7685 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7685 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (addr_ranges) <= (end_ranges)
# 7685 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7685 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (addr_ranges) <= (end_ranges)
# 7685 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7685 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(addr_ranges) <= (end_ranges)"
# 7685 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7685, __extension__ __PRETTY_FUNCTION__); }))
# 7685 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end_ranges) - (addr_ranges); if ((addr_ranges) > (end_ranges)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (address) = 0; else (address) = (byte_get) ((addr_ranges), amount); if (
# 7685 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7685 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (addr_ranges) += amount; } while (0)
                ;
   do { size_t amount = (address_size); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 7687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (addr_ranges) <= (end_ranges)
# 7687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (addr_ranges) <= (end_ranges)
# 7687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(addr_ranges) <= (end_ranges)"
# 7687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7687, __extension__ __PRETTY_FUNCTION__); }))
# 7687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end_ranges) - (addr_ranges); if ((addr_ranges) > (end_ranges)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((addr_ranges), amount); if (
# 7687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7687 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (addr_ranges) += amount; } while (0)
                ;
   printf ("    ");
   print_hex (address, address_size);
   print_hex_ns (length, address_size);
   putchar ('\n');
 }

      start = end_ranges;
    }

  printf ("\n");

  return 1;
}


static int
comp_addr_base (const void * v0, const void * v1)
{
  debug_info *info0 = *(debug_info **) v0;
  debug_info *info1 = *(debug_info **) v1;
  return info0->addr_base - info1->addr_base;
}


static int
display_debug_addr (struct dwarf_section *section,
      void *file)
{
  debug_info **debug_addr_info;
  unsigned char *entry;
  unsigned char *end;
  unsigned int i;
  unsigned int count;
  unsigned char * header;

  if (section->size == 0)
    {
      printf (gettext ("\nThe %s section is empty.\n"), section->name);
      return 0;
    }

  if (load_debug_info (file) == 0)
    {
      warn (gettext ("Unable to load/parse the .debug_info section, so cannot interpret the %s section.\n"),
     section->name);
      return 0;
    }

  introduce (section, 
# 7737 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 7737 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );





  debug_addr_info = (debug_info **) xcalloc ((num_debug_info_entries + 1),
          sizeof (debug_info *));

  count = 0;
  for (i = 0; i < num_debug_info_entries; i++)
    if (debug_information [i].addr_base != (unsigned int) -1)
      {

 if (debug_information[i].addr_base >= section->size)
   warn (gettext ("Corrupt address base (%#" 
# 7752 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 7752 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ")" " found in debug section %u\n")
                                   ,
  debug_information[i].addr_base, i);
 else
   debug_addr_info [count++] = debug_information + i;
      }


  debug_addr_info [count] = (debug_info *) xmalloc (sizeof (debug_info));
  debug_addr_info [count]->addr_base = section->size;
  qsort (debug_addr_info, count, sizeof (debug_info *), comp_addr_base);

  header = section->start;
  for (i = 0; i < count; i++)
    {
      unsigned int idx;
      unsigned int address_size = debug_addr_info [i]->pointer_size;

      printf (gettext ("  For compilation unit at offset %#" 
# 7770 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "x" 
# 7770 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             ":\n"),
       debug_addr_info [i]->cu_offset);

      printf (gettext ("\tIndex\tAddress\n"));
      entry = section->start + debug_addr_info [i]->addr_base;
      if (debug_addr_info [i]->dwarf_version >= 5)
 {
   size_t header_size = entry - header;
   unsigned char *curr_header = header;
   uint64_t length;
   int version;
   int segment_selector_size;

   if (header_size != 8 && header_size != 16)
     {
       warn (gettext ("Corrupt %s section: expecting header size of 8 or 16, but found %zd instead\n"),
      section->name, header_size);
       return 0;
     }

   do { size_t amount = (4); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 7790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr_header) <= (entry)
# 7790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr_header) <= (entry)
# 7790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(curr_header) <= (entry)"
# 7790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7790, __extension__ __PRETTY_FUNCTION__); }))
# 7790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (entry) - (curr_header); if ((curr_header) > (entry)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((curr_header), amount); if (
# 7790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7790 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (curr_header) += amount; } while (0);
   if (length == 0xffffffff)
     do { size_t amount = (8); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 7792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    ((void) sizeof ((
# 7792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    (curr_header) <= (entry)
# 7792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    ) ? 1 : 0), __extension__ ({ if (
# 7792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    (curr_header) <= (entry)
# 7792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    ) ; else __assert_fail (
# 7792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    "(curr_header) <= (entry)"
# 7792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7792, __extension__ __PRETTY_FUNCTION__); }))
# 7792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    ; size_t avail = (entry) - (curr_header); if ((curr_header) > (entry)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((curr_header), amount); if (
# 7792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    1
# 7792 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    ) (curr_header) += amount; } while (0);
   if (length > (size_t) (section->start + section->size - curr_header)
       || length < (size_t) (entry - curr_header))
     {
       warn (gettext ("Corrupt %s section: unit_length field of %#" 
# 7796 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 7796 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            " is invalid\n")
                        , section->name, length);
       return 0;
     }
   end = curr_header + length;
   do { size_t amount = (2); if (sizeof (version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (version)); amount = sizeof (version); } if (1) 
# 7801 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7801 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr_header) <= (entry)
# 7801 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7801 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr_header) <= (entry)
# 7801 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7801 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(curr_header) <= (entry)"
# 7801 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7801, __extension__ __PRETTY_FUNCTION__); }))
# 7801 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (entry) - (curr_header); if ((curr_header) > (entry)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (version) = 0; else (version) = (byte_get) ((curr_header), amount); if (
# 7801 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7801 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (curr_header) += amount; } while (0);
   if (version != 5)
     warn (gettext ("Corrupt %s section: expecting version number 5 in header but found %d instead\n"),
    section->name, version);

   do { size_t amount = (1); if (sizeof (address_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (address_size)); amount = sizeof (address_size); } if (1) 
# 7806 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7806 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr_header) <= (entry)
# 7806 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7806 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr_header) <= (entry)
# 7806 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7806 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(curr_header) <= (entry)"
# 7806 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7806, __extension__ __PRETTY_FUNCTION__); }))
# 7806 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (entry) - (curr_header); if ((curr_header) > (entry)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (address_size) = 0; else (address_size) = (byte_get) ((curr_header), amount); if (
# 7806 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7806 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (curr_header) += amount; } while (0);
   do { size_t amount = (1); if (sizeof (segment_selector_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (segment_selector_size)); amount = sizeof (segment_selector_size); } if (1) 
# 7807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr_header) <= (entry)
# 7807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr_header) <= (entry)
# 7807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(curr_header) <= (entry)"
# 7807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7807, __extension__ __PRETTY_FUNCTION__); }))
# 7807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (entry) - (curr_header); if ((curr_header) > (entry)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (segment_selector_size) = 0; else (segment_selector_size) = (byte_get) ((curr_header), amount); if (
# 7807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7807 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (curr_header) += amount; } while (0);
   address_size += segment_selector_size;
 }
      else
 end = section->start + debug_addr_info [i + 1]->addr_base;

      header = end;
      idx = 0;

      if (address_size < 1 || address_size > sizeof (uint64_t))
 {
   warn (gettext ("Corrupt %s section: address size (%x) is wrong"),
  section->name, address_size);
   return 0;
 }

      while ((size_t) (end - entry) >= address_size)
 {
   uint64_t base = byte_get (entry, address_size);
   printf (gettext ("\t%d:\t"), idx);
   print_hex_ns (base, address_size);
   printf ("\n");
   entry += address_size;
   idx++;
 }
    }
  printf ("\n");

  free (debug_addr_info);
  return 1;
}



static int
display_debug_str_offsets (struct dwarf_section *section,
      void *file __attribute__ ((__unused__)))
{
  unsigned long idx;

  if (section->size == 0)
    {
      printf (gettext ("\nThe %s section is empty.\n"), section->name);
      return 0;
    }

  unsigned char *start = section->start;
  unsigned char *end = start + section->size;
  unsigned char *curr = start;
  uint64_t debug_str_offsets_hdr_len;

  const char *suffix = strrchr (section->name, '.');
  
# 7859 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 _Bool 
# 7859 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      dwo = suffix && strcmp (suffix, ".dwo") == 0;

  if (dwo)
    load_debug_section_with_follow (str_dwo, file);
  else
    load_debug_section_with_follow (str, file);

  introduce (section, 
# 7866 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 7866 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  while (curr < end)
    {
      uint64_t length;
      uint64_t entry_length;

      do { size_t amount = (4); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 7873 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7873 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (curr) <= (end)
# 7873 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7873 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (curr) <= (end)
# 7873 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7873 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(curr) <= (end)"
# 7873 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7873, __extension__ __PRETTY_FUNCTION__); }))
# 7873 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((curr), amount); if (
# 7873 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7873 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (curr) += amount; } while (0);

      if (length == 0xffffffff)
 {
   do { size_t amount = (8); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 7877 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7877 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (end)
# 7877 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7877 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (end)
# 7877 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7877 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(curr) <= (end)"
# 7877 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7877, __extension__ __PRETTY_FUNCTION__); }))
# 7877 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (curr); if ((curr) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((curr), amount); if (
# 7877 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7877 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (curr) += amount; } while (0);
   entry_length = 8;
   debug_str_offsets_hdr_len = 16;
 }
      else
 {
   entry_length = 4;
   debug_str_offsets_hdr_len = 8;
 }

      unsigned char *entries_end;
      if (length == 0)
 {


   length = section->size;
   curr = section->start;
   entries_end = end;

   printf (gettext ("    Length: %#" 
# 7896 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 7896 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "\n"), length);
   printf (gettext ("       Index   Offset [String]\n"));
 }
      else
 {
   if (length <= (size_t) (end - curr))
     entries_end = curr + length;
   else
     {
       warn (gettext ("Section %s is too small %#" 
# 7905 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 7905 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            "\n"),
      section->name, section->size);
       entries_end = end;
     }

   int version;
   do { size_t amount = (2); if (sizeof (version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (version)); amount = sizeof (version); } if (1) 
# 7911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (entries_end)
# 7911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (entries_end)
# 7911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(curr) <= (entries_end)"
# 7911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7911, __extension__ __PRETTY_FUNCTION__); }))
# 7911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (entries_end) - (curr); if ((curr) > (entries_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (version) = 0; else (version) = (byte_get) ((curr), amount); if (
# 7911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7911 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (curr) += amount; } while (0);
   if (version != 5)
     warn (gettext ("Unexpected version number in str_offset header: %#x\n"), version);

   int padding;
   do { size_t amount = (2); if (sizeof (padding) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (padding)); amount = sizeof (padding); } if (1) 
# 7916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (entries_end)
# 7916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (entries_end)
# 7916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(curr) <= (entries_end)"
# 7916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7916, __extension__ __PRETTY_FUNCTION__); }))
# 7916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (entries_end) - (curr); if ((curr) > (entries_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (padding) = 0; else (padding) = (byte_get) ((curr), amount); if (
# 7916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (curr) += amount; } while (0);
   if (padding != 0)
     warn (gettext ("Unexpected value in str_offset header's padding field: %#x\n"), padding);

   printf (gettext ("    Length: %#" 
# 7920 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 7920 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "\n"), length);
   printf (gettext ("    Version: %#x\n"), version);
   printf (gettext ("       Index   Offset [String]\n"));
 }

      for (idx = 0; curr < entries_end; idx++)
 {
   uint64_t offset;
   const unsigned char * string;

   if ((size_t) (entries_end - curr) < entry_length)

     return 0;

   do { size_t amount = (entry_length); if (sizeof (offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (offset)); amount = sizeof (offset); } if (1) 
# 7934 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 7934 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (entries_end)
# 7934 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 7934 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (curr) <= (entries_end)
# 7934 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 7934 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(curr) <= (entries_end)"
# 7934 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7934, __extension__ __PRETTY_FUNCTION__); }))
# 7934 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (entries_end) - (curr); if ((curr) > (entries_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (offset) = 0; else (offset) = (byte_get) ((curr), amount); if (
# 7934 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 7934 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (curr) += amount; } while (0);
   if (dwo)
     string = (const unsigned char *)
       fetch_indexed_string (idx, 
# 7937 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 ((void *)0)
# 7937 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                     , entry_length, dwo, debug_str_offsets_hdr_len);
   else
     string = fetch_indirect_string (offset);

   printf ("    %8lu ", idx);
   print_hex (offset, entry_length);
   printf (" %s\n", string);
 }
    }

  return 1;
}




struct range_entry
{

  uint64_t ranges_offset;


  debug_info *debug_info_p;
};



static int
range_entry_compar (const void *ap, const void *bp)
{
  const struct range_entry *a_re = (const struct range_entry *) ap;
  const struct range_entry *b_re = (const struct range_entry *) bp;
  const uint64_t a = a_re->ranges_offset;
  const uint64_t b = b_re->ranges_offset;

  return (a > b) - (b > a);
}

static void
display_debug_ranges_list (unsigned char * start,
      unsigned char * finish,
      unsigned int pointer_size,
      uint64_t offset,
      uint64_t base_address)
{
  while (start < finish)
    {
      uint64_t begin;
      uint64_t end;

      do { size_t amount = (pointer_size); if (sizeof (begin) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (begin)); amount = sizeof (begin); } if (1) 
# 7987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 7987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 7987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (finish)"
# 7987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7987, __extension__ __PRETTY_FUNCTION__); }))
# 7987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (begin) = 0; else (begin) = (byte_get) ((start), amount); if (
# 7987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7987 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      if (start >= finish)
 break;
      do { size_t amount = (pointer_size); if (sizeof (end) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (end)); amount = sizeof (end); } if (1) 
# 7990 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 7990 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 7990 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 7990 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 7990 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 7990 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (finish)"
# 7990 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 7990, __extension__ __PRETTY_FUNCTION__); }))
# 7990 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (end) = 0; else (end) = (byte_get_signed) ((start), amount); if (
# 7990 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 7990 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      printf ("    ");
      print_hex (offset, 4);

      if (begin == 0 && end == 0)
 {
   printf (gettext ("<End of list>\n"));
   break;
 }


      if (is_max_address (begin, pointer_size)
   && !is_max_address (end, pointer_size))
 {
   base_address = end;
   print_hex (begin, pointer_size);
   print_hex (end, pointer_size);
   printf ("(base address)\n");
   continue;
 }

      print_hex (begin + base_address, pointer_size);
      print_hex_ns (end + base_address, pointer_size);

      if (begin == end)
 fputs (gettext (" (start == end)"), 
# 8016 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             stdout
# 8016 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   );
      else if (begin > end)
 fputs (gettext (" (start > end)"), 
# 8018 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            stdout
# 8018 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  );

      putchar ('\n');
    }
}

static unsigned char *
display_debug_rnglists_list (unsigned char * start,
        unsigned char * finish,
        unsigned int pointer_size,
        uint64_t offset,
        uint64_t base_address,
        unsigned int offset_size)
{
  unsigned char *next = start;
  unsigned int debug_addr_section_hdr_len;

  if (offset_size == 4)
    debug_addr_section_hdr_len = 8;
  else
    debug_addr_section_hdr_len = 16;

  while (1)
    {
      uint64_t off = offset + (start - next);
      enum dwarf_range_list_entry rlet;

      uint64_t begin = -1, length, end = -1;

      if (start >= finish)
 {
   warn (gettext ("Range list starting at offset %#" 
# 8049 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 8049 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " is not terminated.\n")
                            , offset);
   break;
 }

      printf ("    ");
      print_hex (off, 4);

      do { size_t amount = (1); if (sizeof (rlet) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (rlet)); amount = sizeof (rlet); } if (1) 
# 8057 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 8057 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8057 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 8057 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8057 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 8057 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (finish)"
# 8057 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8057, __extension__ __PRETTY_FUNCTION__); }))
# 8057 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (rlet) = 0; else (rlet) = (byte_get) ((start), amount); if (
# 8057 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 8057 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      switch (rlet)
 {
 case DW_RLE_end_of_list:
   printf (gettext ("<End of list>\n"));
   break;
 case DW_RLE_base_addressx:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, finish, 
# 8065 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 8065 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (base_address) = _val; if ((base_address) != _val) _status |= 2; report_leb_status (_status); } while (0);
   print_hex (base_address, pointer_size);
   printf (gettext ("(base address index) "));
   base_address = fetch_indexed_addr ((base_address * pointer_size)
                        + debug_addr_section_hdr_len, pointer_size);
   print_hex (base_address, pointer_size);
   printf (gettext ("(base address)\n"));
   break;
 case DW_RLE_startx_endx:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, finish, 
# 8074 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 8074 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (begin) = _val; if ((begin) != _val) _status |= 2; report_leb_status (_status); } while (0);
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, finish, 
# 8075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 8075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (end) = _val; if ((end) != _val) _status |= 2; report_leb_status (_status); } while (0);
   begin = fetch_indexed_addr ((begin * pointer_size)
                 + debug_addr_section_hdr_len, pointer_size);
   end = fetch_indexed_addr ((begin * pointer_size)
                 + debug_addr_section_hdr_len, pointer_size);
   break;
 case DW_RLE_startx_length:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, finish, 
# 8082 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 8082 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (begin) = _val; if ((begin) != _val) _status |= 2; report_leb_status (_status); } while (0);
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, finish, 
# 8083 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 8083 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (length) = _val; if ((length) != _val) _status |= 2; report_leb_status (_status); } while (0);
   begin = fetch_indexed_addr ((begin * pointer_size)
                 + debug_addr_section_hdr_len, pointer_size);
   end = begin + length;
   break;
 case DW_RLE_offset_pair:
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, finish, 
# 8089 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 8089 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (begin) = _val; if ((begin) != _val) _status |= 2; report_leb_status (_status); } while (0);
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, finish, 
# 8090 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 8090 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (end) = _val; if ((end) != _val) _status |= 2; report_leb_status (_status); } while (0);
   break;
 case DW_RLE_base_address:
   do { size_t amount = (pointer_size); if (sizeof (base_address) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (base_address)); amount = sizeof (base_address); } if (1) 
# 8093 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 8093 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (finish)
# 8093 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 8093 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (finish)
# 8093 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 8093 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (finish)"
# 8093 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8093, __extension__ __PRETTY_FUNCTION__); }))
# 8093 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (base_address) = 0; else (base_address) = (byte_get) ((start), amount); if (
# 8093 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 8093 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   print_hex (base_address, pointer_size);
   printf (gettext ("(base address)\n"));
   break;
 case DW_RLE_start_end:
   do { size_t amount = (pointer_size); if (sizeof (begin) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (begin)); amount = sizeof (begin); } if (1) 
# 8098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 8098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (finish)
# 8098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 8098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (finish)
# 8098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 8098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (finish)"
# 8098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8098, __extension__ __PRETTY_FUNCTION__); }))
# 8098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (begin) = 0; else (begin) = (byte_get) ((start), amount); if (
# 8098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 8098 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   do { size_t amount = (pointer_size); if (sizeof (end) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (end)); amount = sizeof (end); } if (1) 
# 8099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 8099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (finish)
# 8099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 8099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (finish)
# 8099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 8099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (finish)"
# 8099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8099, __extension__ __PRETTY_FUNCTION__); }))
# 8099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (end) = 0; else (end) = (byte_get) ((start), amount); if (
# 8099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 8099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   break;
 case DW_RLE_start_length:
   do { size_t amount = (pointer_size); if (sizeof (begin) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (begin)); amount = sizeof (begin); } if (1) 
# 8102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 8102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (finish)
# 8102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 8102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (finish)
# 8102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 8102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (finish)"
# 8102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8102, __extension__ __PRETTY_FUNCTION__); }))
# 8102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (begin) = 0; else (begin) = (byte_get) ((start), amount); if (
# 8102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 8102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, finish, 
# 8103 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 8103 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); start += _len; (length) = _val; if ((length) != _val) _status |= 2; report_leb_status (_status); } while (0);
   end = begin + length;
   break;
 default:
   error (gettext ("Invalid range list entry type %d\n"), rlet);
   rlet = DW_RLE_end_of_list;
   break;
 }

      if (rlet == DW_RLE_end_of_list)
 break;
      if (rlet == DW_RLE_base_address || rlet == DW_RLE_base_addressx)
 continue;


      if (rlet == DW_RLE_offset_pair)
 {
   begin += base_address;
   end += base_address;
 }

      print_hex (begin, pointer_size);
      print_hex (end, pointer_size);

      if (begin == end)
 fputs (gettext (" (start == end)"), 
# 8128 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             stdout
# 8128 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   );
      else if (begin > end)
 fputs (gettext (" (start > end)"), 
# 8130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            stdout
# 8130 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  );

      putchar ('\n');
    }

  return start;
}

static int
display_debug_rnglists (struct dwarf_section *section)
{
  unsigned char *start = section->start;
  unsigned char *finish = start + section->size;

  while (start < finish)
    {
      unsigned char *table_start;
      uint64_t offset = start - section->start;
      unsigned char *end;
      uint64_t initial_length;
      unsigned char segment_selector_size;
      unsigned int offset_entry_count;
      unsigned int i;
      unsigned short version;
      unsigned char address_size = 0;
      unsigned char offset_size;


      do { size_t amount = (4); if (sizeof (initial_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (initial_length)); amount = sizeof (initial_length); } if (1) 
# 8158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 8158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 8158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 8158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (finish)"
# 8158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8158, __extension__ __PRETTY_FUNCTION__); }))
# 8158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (initial_length) = 0; else (initial_length) = (byte_get) ((start), amount); if (
# 8158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 8158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      if (initial_length == 0xffffffff)
 {

   do { size_t amount = (8); if (sizeof (initial_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (initial_length)); amount = sizeof (initial_length); } if (1) 
# 8163 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 8163 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (finish)
# 8163 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 8163 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (finish)
# 8163 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 8163 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (finish)"
# 8163 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8163, __extension__ __PRETTY_FUNCTION__); }))
# 8163 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (initial_length) = 0; else (initial_length) = (byte_get) ((start), amount); if (
# 8163 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 8163 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   offset_size = 8;
 }
      else
 offset_size = 4;

      if (initial_length > (size_t) (finish - start))
 {



   if (reloc_at (section, (start - section->start) - offset_size))
     initial_length = finish - start;
   else
     {
       warn (gettext ("The length field (%#" 
# 8178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 8178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ") in the debug_rnglists header is wrong" " - the section is too small\n")

                                        ,
      initial_length);
       return 0;
     }
 }

      end = start + initial_length;


      do { size_t amount = (2); if (sizeof (version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (version)); amount = sizeof (version); } if (1) 
# 8189 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 8189 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8189 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 8189 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8189 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 8189 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (finish)"
# 8189 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8189, __extension__ __PRETTY_FUNCTION__); }))
# 8189 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (version) = 0; else (version) = (byte_get) ((start), amount); if (
# 8189 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 8189 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      do { size_t amount = (1); if (sizeof (address_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (address_size)); amount = sizeof (address_size); } if (1) 
# 8190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 8190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 8190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 8190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (finish)"
# 8190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8190, __extension__ __PRETTY_FUNCTION__); }))
# 8190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (address_size) = 0; else (address_size) = (byte_get) ((start), amount); if (
# 8190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 8190 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      do { size_t amount = (1); if (sizeof (segment_selector_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (segment_selector_size)); amount = sizeof (segment_selector_size); } if (1) 
# 8191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 8191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 8191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 8191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (finish)"
# 8191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8191, __extension__ __PRETTY_FUNCTION__); }))
# 8191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (segment_selector_size) = 0; else (segment_selector_size) = (byte_get) ((start), amount); if (
# 8191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 8191 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      do { size_t amount = (4); if (sizeof (offset_entry_count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (offset_entry_count)); amount = sizeof (offset_entry_count); } if (1) 
# 8192 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 8192 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8192 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 8192 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (finish)
# 8192 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 8192 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (finish)"
# 8192 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8192, __extension__ __PRETTY_FUNCTION__); }))
# 8192 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (offset_entry_count) = 0; else (offset_entry_count) = (byte_get) ((start), amount); if (
# 8192 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 8192 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      printf (gettext (" Table at Offset: %#" 
# 8194 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "x" 
# 8194 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             ":\n"), offset);
      printf (gettext ("  Length:          %#" 
# 8195 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "x" 
# 8195 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             "\n"), initial_length);
      printf (gettext ("  DWARF version:   %u\n"), version);
      printf (gettext ("  Address size:    %u\n"), address_size);
      printf (gettext ("  Segment size:    %u\n"), segment_selector_size);
      printf (gettext ("  Offset entries:  %u\n"), offset_entry_count);


      if (segment_selector_size != 0)
 {
   warn (gettext ("The %s section contains " "unsupported segment selector size: %d.\n")
                                               ,
  section->name, segment_selector_size);
   return 0;
 }

      if (version < 5)
 {
   warn (gettext ("Only DWARF version 5+ debug_rnglists info " "is currently supported.\n")
                                );
   return 0;
 }

      table_start = start;

      if (offset_entry_count != 0)
 {
   printf (gettext ("\n   Offsets starting at %#tx:\n"),
    start - section->start);

   for (i = 0; i < offset_entry_count; i++)
     {
       uint64_t entry;

       do { size_t amount = (offset_size); if (sizeof (entry) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (entry)); amount = sizeof (entry); } if (1) 
# 8228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 8228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (finish)
# 8228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 8228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (finish)
# 8228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 8228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(start) <= (finish)"
# 8228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8228, __extension__ __PRETTY_FUNCTION__); }))
# 8228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (finish) - (start); if ((start) > (finish)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (entry) = 0; else (entry) = (byte_get) ((start), amount); if (
# 8228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 8228 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (start) += amount; } while (0);
       printf (gettext ("    [%6u] %#" 
# 8229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              "l" "x" 
# 8229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              "\n"), i, entry);
     }
 }
      else
 offset_entry_count = 1;

      for (i = 0; i < offset_entry_count; i++)
 {
   uint64_t indx = start - table_start;

   offset = start - section->start;
   printf (gettext ("\n  Offset: %#" 
# 8240 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 8240 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          ", Index: %#" 
# 8240 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "x" 
# 8240 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          "\n"),
    offset, indx);
   printf (gettext ("    Offset   Begin    End\n"));
   start = display_debug_rnglists_list
     (start, end, address_size, offset, 0, offset_size);
   if (start >= end)
     break;
 }

      start = end;

      if (start < finish)
 putchar ('\n');
    }

  putchar ('\n');
  return 1;
}

static int
display_debug_ranges (struct dwarf_section *section,
        void *file __attribute__ ((__unused__)))
{
  unsigned char *start = section->start;
  unsigned char *last_start = start;
  uint64_t bytes = section->size;
  unsigned char *section_begin = start;
  unsigned char *finish = start + bytes;
  unsigned int num_range_list, i;
  struct range_entry *range_entries;
  struct range_entry *range_entry_fill;
  int is_rnglists = strstr (section->name, "debug_rnglists") != 
# 8271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                               ((void *)0)
# 8271 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                   ;

  unsigned char address_size = 0;
  uint64_t last_offset = 0;

  if (bytes == 0)
    {
      printf (gettext ("\nThe %s section is empty.\n"), section->name);
      return 0;
    }

  introduce (section, 
# 8282 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 8282 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  if (is_rnglists)
    return display_debug_rnglists (section);

  if (load_debug_info (file) == 0)
    {
      warn (gettext ("Unable to load/parse the .debug_info section, so cannot interpret the %s section.\n"),
     section->name);
      return 0;
    }

  num_range_list = 0;
  for (i = 0; i < num_debug_info_entries; i++)
    num_range_list += debug_information [i].num_range_lists;

  if (num_range_list == 0)
    {


      printf (gettext ("No range lists in .debug_info section.\n"));
      return 1;
    }

  range_entries = (struct range_entry *)
      xmalloc (sizeof (*range_entries) * num_range_list);
  range_entry_fill = range_entries;

  for (i = 0; i < num_debug_info_entries; i++)
    {
      debug_info *debug_info_p = &debug_information[i];
      unsigned int j;

      for (j = 0; j < debug_info_p->num_range_lists; j++)
 {
   range_entry_fill->ranges_offset = debug_info_p->range_lists[j];
   range_entry_fill->debug_info_p = debug_info_p;
   range_entry_fill++;
 }
    }

  qsort (range_entries, num_range_list, sizeof (*range_entries),
  range_entry_compar);

  if (dwarf_check != 0 && range_entries[0].ranges_offset != 0)
    warn (gettext ("Range lists in %s section start at %#" 
# 8327 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         "l" "x" 
# 8327 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
         "\n"),
   section->name, range_entries[0].ranges_offset);

  putchar ('\n');
  printf (gettext ("    Offset   Begin    End\n"));

  for (i = 0; i < num_range_list; i++)
    {
      struct range_entry *range_entry = &range_entries[i];
      debug_info *debug_info_p = range_entry->debug_info_p;
      unsigned int pointer_size;
      uint64_t offset;
      unsigned char *next;
      uint64_t base_address;

      pointer_size = (is_rnglists ? address_size : debug_info_p->pointer_size);
      offset = range_entry->ranges_offset;
      base_address = debug_info_p->base_address;


      if (pointer_size < 2 || pointer_size > 8)
 {
   warn (gettext ("Corrupt pointer size (%d) in debug entry at offset %#" 
# 8349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 8349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        "\n"),
  pointer_size, offset);
   continue;
 }

      if (offset > (size_t) (finish - section_begin))
 {
   warn (gettext ("Corrupt offset (%#" 
# 8356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 8356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ") in range entry %u\n"),
  offset, i);
   continue;
 }

      next = section_begin + offset + debug_info_p->rnglists_base;






      if (i > 0 && last_offset == offset)
 continue;
      last_offset = offset;

      if (dwarf_check != 0 && i > 0)
 {
   if (start < next)
     warn (gettext ("There is a hole [%#tx - %#tx] in %s section.\n"),
    start - section_begin, next - section_begin, section->name);
   else if (start > next)
     {
       if (next == last_start)
  continue;
       warn (gettext ("There is an overlap [%#tx - %#tx] in %s section.\n"),
      start - section_begin, next - section_begin, section->name);
     }
 }

      start = next;
      last_start = next;

      display_debug_ranges_list
 (start, finish, pointer_size, offset, base_address);
    }
  putchar ('\n');

  free (range_entries);

  return 1;
}

typedef struct Frame_Chunk
{
  struct Frame_Chunk *next;
  unsigned char *chunk_start;
  unsigned int ncols;

  short int *col_type;
  int64_t *col_offset;
  char *augmentation;
  unsigned int code_factor;
  int data_factor;
  uint64_t pc_begin;
  uint64_t pc_range;
  unsigned int cfa_reg;
  uint64_t cfa_offset;
  unsigned int ra;
  unsigned char fde_encoding;
  unsigned char cfa_exp;
  unsigned char ptr_size;
  unsigned char segment_size;
}
Frame_Chunk;

typedef const char *(*dwarf_regname_lookup_ftype) (unsigned int);
static dwarf_regname_lookup_ftype dwarf_regnames_lookup_func;
static const char *const *dwarf_regnames;
static unsigned int dwarf_regnames_count;
static 
# 8426 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool 
# 8426 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           is_aarch64;
# 8435 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
static int
frame_need_space (Frame_Chunk *fc, unsigned int reg)
{
  unsigned int prev = fc->ncols;

  if (reg < (unsigned int) fc->ncols)
    return 0;

  if (dwarf_regnames_count > 0
      && reg > dwarf_regnames_count)
    return -1;

  fc->ncols = reg + 1;


  if (fc->ncols == 0)
    return -1;


  if (fc->ncols > 1024 && dwarf_regnames_count == 0)
    {
      error (gettext ("Unfeasibly large register number: %u\n"), reg);
      fc->ncols = 0;


      return -1;
    }

  fc->col_type = xcrealloc (fc->col_type, fc->ncols,
       sizeof (*fc->col_type));
  fc->col_offset = xcrealloc (fc->col_offset, fc->ncols,
         sizeof (*fc->col_offset));

  if (fc->col_type == 
# 8468 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0) 
# 8468 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          || fc->col_offset == 
# 8468 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                               ((void *)0)
# 8468 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                   )
    {
      error (gettext ("Out of memory allocating %u columns in dwarf frame arrays\n"),
      fc->ncols);
      fc->ncols = 0;
      return -1;
    }

  while (prev < fc->ncols)
    {
      fc->col_type[prev] = (-1);
      fc->col_offset[prev] = 0;
      prev++;
    }
  return 1;
}

static const char *const dwarf_regnames_i386[] =
{
  "eax", "ecx", "edx", "ebx",
  "esp", "ebp", "esi", "edi",
  "eip", "eflags", 
# 8489 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  ((void *)0)
# 8489 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      ,
  "st0", "st1", "st2", "st3",
  "st4", "st5", "st6", "st7",
  
# 8492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ,
  "xmm0", "xmm1", "xmm2", "xmm3",
  "xmm4", "xmm5", "xmm6", "xmm7",
  "mm0", "mm1", "mm2", "mm3",
  "mm4", "mm5", "mm6", "mm7",
  "fcw", "fsw", "mxcsr",
  "es", "cs", "ss", "ds", "fs", "gs", 
# 8498 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8498 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8498 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8498 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  "tr", "ldtr",
  
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8500 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8501 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8502 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8503 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8504 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8505 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8505 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8505 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8505 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8505 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8505 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ,
  "k0", "k1", "k2", "k3", "k4", "k5", "k6", "k7"
};

static const char *const dwarf_regnames_iamcu[] =
{
  "eax", "ecx", "edx", "ebx",
  "esp", "ebp", "esi", "edi",
  "eip", "eflags", 
# 8513 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  ((void *)0)
# 8513 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      ,
  
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8514 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8515 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8515 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8515 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8515 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ,
  
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8517 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8518 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8518 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8518 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8518 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8518 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8518 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ,
  "es", "cs", "ss", "ds", "fs", "gs", 
# 8519 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8519 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8519 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8519 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  "tr", "ldtr",
  
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8521 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8522 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8524 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8525 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8526 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8526 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8526 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8526 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8526 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8526 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ,
  
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8527 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)

# 8528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
};

static void
init_dwarf_regnames_i386 (void)
{
  dwarf_regnames = dwarf_regnames_i386;
  dwarf_regnames_count = (sizeof (dwarf_regnames_i386) / sizeof ((dwarf_regnames_i386)[0]));
  dwarf_regnames_lookup_func = regname_internal_by_table_only;
}

static void
init_dwarf_regnames_iamcu (void)
{
  dwarf_regnames = dwarf_regnames_iamcu;
  dwarf_regnames_count = (sizeof (dwarf_regnames_iamcu) / sizeof ((dwarf_regnames_iamcu)[0]));
  dwarf_regnames_lookup_func = regname_internal_by_table_only;
}

static const char *const DW_CFA_GNU_window_save_name[] =
{
  "DW_CFA_GNU_window_save",
  "DW_CFA_AARCH64_negate_ra_state"
};

static const char *const dwarf_regnames_x86_64[] =
{
  "rax", "rdx", "rcx", "rbx",
  "rsi", "rdi", "rbp", "rsp",
  "r8", "r9", "r10", "r11",
  "r12", "r13", "r14", "r15",
  "rip",
  "xmm0", "xmm1", "xmm2", "xmm3",
  "xmm4", "xmm5", "xmm6", "xmm7",
  "xmm8", "xmm9", "xmm10", "xmm11",
  "xmm12", "xmm13", "xmm14", "xmm15",
  "st0", "st1", "st2", "st3",
  "st4", "st5", "st6", "st7",
  "mm0", "mm1", "mm2", "mm3",
  "mm4", "mm5", "mm6", "mm7",
  "rflags",
  "es", "cs", "ss", "ds", "fs", "gs", 
# 8568 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8568 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8568 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8568 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  "fs.base", "gs.base", 
# 8569 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 8569 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           , 
# 8569 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             ((void *)0)
# 8569 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                 ,
  "tr", "ldtr",
  "mxcsr", "fcw", "fsw",
  "xmm16", "xmm17", "xmm18", "xmm19",
  "xmm20", "xmm21", "xmm22", "xmm23",
  "xmm24", "xmm25", "xmm26", "xmm27",
  "xmm28", "xmm29", "xmm30", "xmm31",
  
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8576 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8577 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8578 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 , 
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       , 
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             , 
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                               ((void *)0)
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   , 
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               ,
  
# 8580 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8580 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8580 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8580 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8580 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8580 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ,
  "k0", "k1", "k2", "k3", "k4", "k5", "k6", "k7"
};

static void
init_dwarf_regnames_x86_64 (void)
{
  dwarf_regnames = dwarf_regnames_x86_64;
  dwarf_regnames_count = (sizeof (dwarf_regnames_x86_64) / sizeof ((dwarf_regnames_x86_64)[0]));
  dwarf_regnames_lookup_func = regname_internal_by_table_only;
}

static const char *const dwarf_regnames_aarch64[] =
{
   "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7",
   "x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15",
  "x16", "x17", "x18", "x19", "x20", "x21", "x22", "x23",
  "x24", "x25", "x26", "x27", "x28", "x29", "x30", "sp",
   
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void *)0)
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , "elr", 
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                ((void *)0)
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    , 
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           , 
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              ((void *)0)
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  , 
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                            ((void *)0)
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                , 
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                   ((void *)0)
# 8598 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                       ,
   
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void *)0)
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , 
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         ((void *)0)
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             , 
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                ((void *)0)
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    , 
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           , 
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              ((void *)0)
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  , 
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     ((void *)0)
# 8599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , "vg", "ffr",
   "p0", "p1", "p2", "p3", "p4", "p5", "p6", "p7",
   "p8", "p9", "p10", "p11", "p12", "p13", "p14", "p15",
   "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7",
   "v8", "v9", "v10", "v11", "v12", "v13", "v14", "v15",
  "v16", "v17", "v18", "v19", "v20", "v21", "v22", "v23",
  "v24", "v25", "v26", "v27", "v28", "v29", "v30", "v31",
   "z0", "z1", "z2", "z3", "z4", "z5", "z6", "z7",
   "z8", "z9", "z10", "z11", "z12", "z13", "z14", "z15",
  "z16", "z17", "z18", "z19", "z20", "z21", "z22", "z23",
  "z24", "z25", "z26", "z27", "z28", "z29", "z30", "z31",
};

static void
init_dwarf_regnames_aarch64 (void)
{
  dwarf_regnames = dwarf_regnames_aarch64;
  dwarf_regnames_count = (sizeof (dwarf_regnames_aarch64) / sizeof ((dwarf_regnames_aarch64)[0]));
  dwarf_regnames_lookup_func = regname_internal_by_table_only;
  is_aarch64 = 
# 8618 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              1
# 8618 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  ;
}

static const char *const dwarf_regnames_s390[] =
{

  
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            , 
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               ((void *)0)
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   , 
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                      ((void *)0)
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          , 
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             ((void *)0)
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                 , 
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                    ((void *)0)
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                        , 
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               , 
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                  ((void *)0)
# 8624 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      ,
  
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            , 
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               ((void *)0)
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   , 
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                      ((void *)0)
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          , 
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             ((void *)0)
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                 , 
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                    ((void *)0)
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                        , 
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                               , 
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                  ((void *)0)
# 8625 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      ,
  "f0", "f2", "f4", "f6", "f1", "f3", "f5", "f7",
  "f8", "f10", "f12", "f14", "f9", "f11", "f13", "f15",
  "cr0", "cr1", "cr2", "cr3", "cr4", "cr5", "cr6", "cr7",
  "cr8", "cr9", "cr10", "cr11", "cr12", "cr13", "cr14", "cr15",
  "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7",
  "a8", "a9", "a10", "a11", "a12", "a13", "a14", "a15",
  "pswm", "pswa",
  
# 8633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)
# 8633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , 
# 8633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8633 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ,
  "v16", "v18", "v20", "v22", "v17", "v19", "v21", "v23",
  "v24", "v26", "v28", "v30", "v25", "v27", "v29", "v31",
};

static void
init_dwarf_regnames_s390 (void)
{
  dwarf_regnames = dwarf_regnames_s390;
  dwarf_regnames_count = (sizeof (dwarf_regnames_s390) / sizeof ((dwarf_regnames_s390)[0]));
  dwarf_regnames_lookup_func = regname_internal_by_table_only;
}

static const char *const dwarf_regnames_riscv[] =
{
 "zero", "ra", "sp", "gp", "tp", "t0", "t1", "t2",
 "s0", "s1", "a0", "a1", "a2", "a3", "a4", "a5",
 "a6", "a7", "s2", "s3", "s4", "s5", "s6", "s7",
 "s8", "s9", "s10", "s11", "t3", "t4", "t5", "t6",
 "ft0", "ft1", "ft2", "ft3", "ft4", "ft5", "ft6", "ft7",
 "fs0", "fs1",
 "fa0", "fa1", "fa2", "fa3", "fa4", "fa5", "fa6", "fa7",
 "fs2", "fs3", "fs4", "fs5", "fs6", "fs7", "fs8", "fs9",
 "fs10", "fs11",
 "ft8", "ft9", "ft10", "ft11",
 
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void *)0)
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    , 
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              ((void *)0)
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  , 
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         , 
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            ((void *)0)
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                , 
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                   ((void *)0)
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          ((void *)0)
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                              , 
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                 ((void *)0)
# 8658 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                     ,
 
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void *)0)
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    , 
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              ((void *)0)
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  , 
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         , 
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            ((void *)0)
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                , 
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                   ((void *)0)
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          ((void *)0)
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                              , 
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                 ((void *)0)
# 8659 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                     ,
 
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void *)0)
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    , 
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              ((void *)0)
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  , 
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         , 
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            ((void *)0)
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                , 
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                   ((void *)0)
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          ((void *)0)
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                              , 
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                 ((void *)0)
# 8660 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                     ,
 
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
((void *)0)
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    , 
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void *)0)
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           , 
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              ((void *)0)
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  , 
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         , 
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            ((void *)0)
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                , 
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                   ((void *)0)
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          ((void *)0)
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                              , 
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                 ((void *)0)
# 8661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                     ,
 "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7",
 "v8", "v9", "v10", "v11", "v12", "v13", "v14", "v15",
 "v16", "v17", "v18", "v19", "v20", "v21", "v22", "v23",
 "v24", "v25", "v26", "v27", "v28", "v29", "v30", "v31",
};




static const char *
regname_internal_riscv (unsigned int regno)
{
  const char *name = 
# 8674 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    ((void *)0)
# 8674 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ;


  if (regno < (sizeof (dwarf_regnames_riscv) / sizeof ((dwarf_regnames_riscv)[0])))
    name = dwarf_regnames_riscv [regno];
  else if (regno >= 4096 && regno <= 8191)
    {



      switch (regno)
 {


# 1 "./../include/opcode/riscv-opc.h" 1
# 3532 "./../include/opcode/riscv-opc.h"
case 0xc00 + 4096: name = "cycle"; break;
case 0xc01 + 4096: name = "time"; break;
case 0xc02 + 4096: name = "instret"; break;
case 0xc03 + 4096: name = "hpmcounter3"; break;
case 0xc04 + 4096: name = "hpmcounter4"; break;
case 0xc05 + 4096: name = "hpmcounter5"; break;
case 0xc06 + 4096: name = "hpmcounter6"; break;
case 0xc07 + 4096: name = "hpmcounter7"; break;
case 0xc08 + 4096: name = "hpmcounter8"; break;
case 0xc09 + 4096: name = "hpmcounter9"; break;
case 0xc0a + 4096: name = "hpmcounter10"; break;
case 0xc0b + 4096: name = "hpmcounter11"; break;
case 0xc0c + 4096: name = "hpmcounter12"; break;
case 0xc0d + 4096: name = "hpmcounter13"; break;
case 0xc0e + 4096: name = "hpmcounter14"; break;
case 0xc0f + 4096: name = "hpmcounter15"; break;
case 0xc10 + 4096: name = "hpmcounter16"; break;
case 0xc11 + 4096: name = "hpmcounter17"; break;
case 0xc12 + 4096: name = "hpmcounter18"; break;
case 0xc13 + 4096: name = "hpmcounter19"; break;
case 0xc14 + 4096: name = "hpmcounter20"; break;
case 0xc15 + 4096: name = "hpmcounter21"; break;
case 0xc16 + 4096: name = "hpmcounter22"; break;
case 0xc17 + 4096: name = "hpmcounter23"; break;
case 0xc18 + 4096: name = "hpmcounter24"; break;
case 0xc19 + 4096: name = "hpmcounter25"; break;
case 0xc1a + 4096: name = "hpmcounter26"; break;
case 0xc1b + 4096: name = "hpmcounter27"; break;
case 0xc1c + 4096: name = "hpmcounter28"; break;
case 0xc1d + 4096: name = "hpmcounter29"; break;
case 0xc1e + 4096: name = "hpmcounter30"; break;
case 0xc1f + 4096: name = "hpmcounter31"; break;
case 0xc80 + 4096: name = "cycleh"; break;
case 0xc81 + 4096: name = "timeh"; break;
case 0xc82 + 4096: name = "instreth"; break;
case 0xc83 + 4096: name = "hpmcounter3h"; break;
case 0xc84 + 4096: name = "hpmcounter4h"; break;
case 0xc85 + 4096: name = "hpmcounter5h"; break;
case 0xc86 + 4096: name = "hpmcounter6h"; break;
case 0xc87 + 4096: name = "hpmcounter7h"; break;
case 0xc88 + 4096: name = "hpmcounter8h"; break;
case 0xc89 + 4096: name = "hpmcounter9h"; break;
case 0xc8a + 4096: name = "hpmcounter10h"; break;
case 0xc8b + 4096: name = "hpmcounter11h"; break;
case 0xc8c + 4096: name = "hpmcounter12h"; break;
case 0xc8d + 4096: name = "hpmcounter13h"; break;
case 0xc8e + 4096: name = "hpmcounter14h"; break;
case 0xc8f + 4096: name = "hpmcounter15h"; break;
case 0xc90 + 4096: name = "hpmcounter16h"; break;
case 0xc91 + 4096: name = "hpmcounter17h"; break;
case 0xc92 + 4096: name = "hpmcounter18h"; break;
case 0xc93 + 4096: name = "hpmcounter19h"; break;
case 0xc94 + 4096: name = "hpmcounter20h"; break;
case 0xc95 + 4096: name = "hpmcounter21h"; break;
case 0xc96 + 4096: name = "hpmcounter22h"; break;
case 0xc97 + 4096: name = "hpmcounter23h"; break;
case 0xc98 + 4096: name = "hpmcounter24h"; break;
case 0xc99 + 4096: name = "hpmcounter25h"; break;
case 0xc9a + 4096: name = "hpmcounter26h"; break;
case 0xc9b + 4096: name = "hpmcounter27h"; break;
case 0xc9c + 4096: name = "hpmcounter28h"; break;
case 0xc9d + 4096: name = "hpmcounter29h"; break;
case 0xc9e + 4096: name = "hpmcounter30h"; break;
case 0xc9f + 4096: name = "hpmcounter31h"; break;

case 0x100 + 4096: name = "sstatus"; break;
case 0x104 + 4096: name = "sie"; break;
case 0x105 + 4096: name = "stvec"; break;
case 0x106 + 4096: name = "scounteren"; break;
case 0x10a + 4096: name = "senvcfg"; break;
case 0x140 + 4096: name = "sscratch"; break;
case 0x141 + 4096: name = "sepc"; break;
case 0x142 + 4096: name = "scause"; break;
case 0x143 + 4096: name = "stval"; break;
case 0x144 + 4096: name = "sip"; break;
case 0x180 + 4096: name = "satp"; break;

case 0xf11 + 4096: name = "mvendorid"; break;
case 0xf12 + 4096: name = "marchid"; break;
case 0xf13 + 4096: name = "mimpid"; break;
case 0xf14 + 4096: name = "mhartid"; break;
case 0xf15 + 4096: name = "mconfigptr"; break;
case 0x300 + 4096: name = "mstatus"; break;
case 0x301 + 4096: name = "misa"; break;
case 0x302 + 4096: name = "medeleg"; break;
case 0x303 + 4096: name = "mideleg"; break;
case 0x304 + 4096: name = "mie"; break;
case 0x305 + 4096: name = "mtvec"; break;
case 0x306 + 4096: name = "mcounteren"; break;
case 0x310 + 4096: name = "mstatush"; break;
case 0x340 + 4096: name = "mscratch"; break;
case 0x341 + 4096: name = "mepc"; break;
case 0x342 + 4096: name = "mcause"; break;
case 0x343 + 4096: name = "mtval"; break;
case 0x344 + 4096: name = "mip"; break;
case 0x34a + 4096: name = "mtinst"; break;
case 0x34b + 4096: name = "mtval2"; break;
case 0x30a + 4096: name = "menvcfg"; break;
case 0x31a + 4096: name = "menvcfgh"; break;
case 0x747 + 4096: name = "mseccfg"; break;
case 0x757 + 4096: name = "mseccfgh"; break;
case 0x3a0 + 4096: name = "pmpcfg0"; break;
case 0x3a1 + 4096: name = "pmpcfg1"; break;
case 0x3a2 + 4096: name = "pmpcfg2"; break;
case 0x3a3 + 4096: name = "pmpcfg3"; break;
case 0x3a4 + 4096: name = "pmpcfg4"; break;
case 0x3a5 + 4096: name = "pmpcfg5"; break;
case 0x3a6 + 4096: name = "pmpcfg6"; break;
case 0x3a7 + 4096: name = "pmpcfg7"; break;
case 0x3a8 + 4096: name = "pmpcfg8"; break;
case 0x3a9 + 4096: name = "pmpcfg9"; break;
case 0x3aa + 4096: name = "pmpcfg10"; break;
case 0x3ab + 4096: name = "pmpcfg11"; break;
case 0x3ac + 4096: name = "pmpcfg12"; break;
case 0x3ad + 4096: name = "pmpcfg13"; break;
case 0x3ae + 4096: name = "pmpcfg14"; break;
case 0x3af + 4096: name = "pmpcfg15"; break;
case 0x3b0 + 4096: name = "pmpaddr0"; break;
case 0x3b1 + 4096: name = "pmpaddr1"; break;
case 0x3b2 + 4096: name = "pmpaddr2"; break;
case 0x3b3 + 4096: name = "pmpaddr3"; break;
case 0x3b4 + 4096: name = "pmpaddr4"; break;
case 0x3b5 + 4096: name = "pmpaddr5"; break;
case 0x3b6 + 4096: name = "pmpaddr6"; break;
case 0x3b7 + 4096: name = "pmpaddr7"; break;
case 0x3b8 + 4096: name = "pmpaddr8"; break;
case 0x3b9 + 4096: name = "pmpaddr9"; break;
case 0x3ba + 4096: name = "pmpaddr10"; break;
case 0x3bb + 4096: name = "pmpaddr11"; break;
case 0x3bc + 4096: name = "pmpaddr12"; break;
case 0x3bd + 4096: name = "pmpaddr13"; break;
case 0x3be + 4096: name = "pmpaddr14"; break;
case 0x3bf + 4096: name = "pmpaddr15"; break;
case 0x3c0 + 4096: name = "pmpaddr16"; break;
case 0x3c1 + 4096: name = "pmpaddr17"; break;
case 0x3c2 + 4096: name = "pmpaddr18"; break;
case 0x3c3 + 4096: name = "pmpaddr19"; break;
case 0x3c4 + 4096: name = "pmpaddr20"; break;
case 0x3c5 + 4096: name = "pmpaddr21"; break;
case 0x3c6 + 4096: name = "pmpaddr22"; break;
case 0x3c7 + 4096: name = "pmpaddr23"; break;
case 0x3c8 + 4096: name = "pmpaddr24"; break;
case 0x3c9 + 4096: name = "pmpaddr25"; break;
case 0x3ca + 4096: name = "pmpaddr26"; break;
case 0x3cb + 4096: name = "pmpaddr27"; break;
case 0x3cc + 4096: name = "pmpaddr28"; break;
case 0x3cd + 4096: name = "pmpaddr29"; break;
case 0x3ce + 4096: name = "pmpaddr30"; break;
case 0x3cf + 4096: name = "pmpaddr31"; break;
case 0x3d0 + 4096: name = "pmpaddr32"; break;
case 0x3d1 + 4096: name = "pmpaddr33"; break;
case 0x3d2 + 4096: name = "pmpaddr34"; break;
case 0x3d3 + 4096: name = "pmpaddr35"; break;
case 0x3d4 + 4096: name = "pmpaddr36"; break;
case 0x3d5 + 4096: name = "pmpaddr37"; break;
case 0x3d6 + 4096: name = "pmpaddr38"; break;
case 0x3d7 + 4096: name = "pmpaddr39"; break;
case 0x3d8 + 4096: name = "pmpaddr40"; break;
case 0x3d9 + 4096: name = "pmpaddr41"; break;
case 0x3da + 4096: name = "pmpaddr42"; break;
case 0x3db + 4096: name = "pmpaddr43"; break;
case 0x3dc + 4096: name = "pmpaddr44"; break;
case 0x3dd + 4096: name = "pmpaddr45"; break;
case 0x3de + 4096: name = "pmpaddr46"; break;
case 0x3df + 4096: name = "pmpaddr47"; break;
case 0x3e0 + 4096: name = "pmpaddr48"; break;
case 0x3e1 + 4096: name = "pmpaddr49"; break;
case 0x3e2 + 4096: name = "pmpaddr50"; break;
case 0x3e3 + 4096: name = "pmpaddr51"; break;
case 0x3e4 + 4096: name = "pmpaddr52"; break;
case 0x3e5 + 4096: name = "pmpaddr53"; break;
case 0x3e6 + 4096: name = "pmpaddr54"; break;
case 0x3e7 + 4096: name = "pmpaddr55"; break;
case 0x3e8 + 4096: name = "pmpaddr56"; break;
case 0x3e9 + 4096: name = "pmpaddr57"; break;
case 0x3ea + 4096: name = "pmpaddr58"; break;
case 0x3eb + 4096: name = "pmpaddr59"; break;
case 0x3ec + 4096: name = "pmpaddr60"; break;
case 0x3ed + 4096: name = "pmpaddr61"; break;
case 0x3ee + 4096: name = "pmpaddr62"; break;
case 0x3ef + 4096: name = "pmpaddr63"; break;
case 0xb00 + 4096: name = "mcycle"; break;
case 0xb02 + 4096: name = "minstret"; break;
case 0xb03 + 4096: name = "mhpmcounter3"; break;
case 0xb04 + 4096: name = "mhpmcounter4"; break;
case 0xb05 + 4096: name = "mhpmcounter5"; break;
case 0xb06 + 4096: name = "mhpmcounter6"; break;
case 0xb07 + 4096: name = "mhpmcounter7"; break;
case 0xb08 + 4096: name = "mhpmcounter8"; break;
case 0xb09 + 4096: name = "mhpmcounter9"; break;
case 0xb0a + 4096: name = "mhpmcounter10"; break;
case 0xb0b + 4096: name = "mhpmcounter11"; break;
case 0xb0c + 4096: name = "mhpmcounter12"; break;
case 0xb0d + 4096: name = "mhpmcounter13"; break;
case 0xb0e + 4096: name = "mhpmcounter14"; break;
case 0xb0f + 4096: name = "mhpmcounter15"; break;
case 0xb10 + 4096: name = "mhpmcounter16"; break;
case 0xb11 + 4096: name = "mhpmcounter17"; break;
case 0xb12 + 4096: name = "mhpmcounter18"; break;
case 0xb13 + 4096: name = "mhpmcounter19"; break;
case 0xb14 + 4096: name = "mhpmcounter20"; break;
case 0xb15 + 4096: name = "mhpmcounter21"; break;
case 0xb16 + 4096: name = "mhpmcounter22"; break;
case 0xb17 + 4096: name = "mhpmcounter23"; break;
case 0xb18 + 4096: name = "mhpmcounter24"; break;
case 0xb19 + 4096: name = "mhpmcounter25"; break;
case 0xb1a + 4096: name = "mhpmcounter26"; break;
case 0xb1b + 4096: name = "mhpmcounter27"; break;
case 0xb1c + 4096: name = "mhpmcounter28"; break;
case 0xb1d + 4096: name = "mhpmcounter29"; break;
case 0xb1e + 4096: name = "mhpmcounter30"; break;
case 0xb1f + 4096: name = "mhpmcounter31"; break;
case 0xb80 + 4096: name = "mcycleh"; break;
case 0xb82 + 4096: name = "minstreth"; break;
case 0xb83 + 4096: name = "mhpmcounter3h"; break;
case 0xb84 + 4096: name = "mhpmcounter4h"; break;
case 0xb85 + 4096: name = "mhpmcounter5h"; break;
case 0xb86 + 4096: name = "mhpmcounter6h"; break;
case 0xb87 + 4096: name = "mhpmcounter7h"; break;
case 0xb88 + 4096: name = "mhpmcounter8h"; break;
case 0xb89 + 4096: name = "mhpmcounter9h"; break;
case 0xb8a + 4096: name = "mhpmcounter10h"; break;
case 0xb8b + 4096: name = "mhpmcounter11h"; break;
case 0xb8c + 4096: name = "mhpmcounter12h"; break;
case 0xb8d + 4096: name = "mhpmcounter13h"; break;
case 0xb8e + 4096: name = "mhpmcounter14h"; break;
case 0xb8f + 4096: name = "mhpmcounter15h"; break;
case 0xb90 + 4096: name = "mhpmcounter16h"; break;
case 0xb91 + 4096: name = "mhpmcounter17h"; break;
case 0xb92 + 4096: name = "mhpmcounter18h"; break;
case 0xb93 + 4096: name = "mhpmcounter19h"; break;
case 0xb94 + 4096: name = "mhpmcounter20h"; break;
case 0xb95 + 4096: name = "mhpmcounter21h"; break;
case 0xb96 + 4096: name = "mhpmcounter22h"; break;
case 0xb97 + 4096: name = "mhpmcounter23h"; break;
case 0xb98 + 4096: name = "mhpmcounter24h"; break;
case 0xb99 + 4096: name = "mhpmcounter25h"; break;
case 0xb9a + 4096: name = "mhpmcounter26h"; break;
case 0xb9b + 4096: name = "mhpmcounter27h"; break;
case 0xb9c + 4096: name = "mhpmcounter28h"; break;
case 0xb9d + 4096: name = "mhpmcounter29h"; break;
case 0xb9e + 4096: name = "mhpmcounter30h"; break;
case 0xb9f + 4096: name = "mhpmcounter31h"; break;
case 0x320 + 4096: name = "mcountinhibit"; break;
case 0x323 + 4096: name = "mhpmevent3"; break;
case 0x324 + 4096: name = "mhpmevent4"; break;
case 0x325 + 4096: name = "mhpmevent5"; break;
case 0x326 + 4096: name = "mhpmevent6"; break;
case 0x327 + 4096: name = "mhpmevent7"; break;
case 0x328 + 4096: name = "mhpmevent8"; break;
case 0x329 + 4096: name = "mhpmevent9"; break;
case 0x32a + 4096: name = "mhpmevent10"; break;
case 0x32b + 4096: name = "mhpmevent11"; break;
case 0x32c + 4096: name = "mhpmevent12"; break;
case 0x32d + 4096: name = "mhpmevent13"; break;
case 0x32e + 4096: name = "mhpmevent14"; break;
case 0x32f + 4096: name = "mhpmevent15"; break;
case 0x330 + 4096: name = "mhpmevent16"; break;
case 0x331 + 4096: name = "mhpmevent17"; break;
case 0x332 + 4096: name = "mhpmevent18"; break;
case 0x333 + 4096: name = "mhpmevent19"; break;
case 0x334 + 4096: name = "mhpmevent20"; break;
case 0x335 + 4096: name = "mhpmevent21"; break;
case 0x336 + 4096: name = "mhpmevent22"; break;
case 0x337 + 4096: name = "mhpmevent23"; break;
case 0x338 + 4096: name = "mhpmevent24"; break;
case 0x339 + 4096: name = "mhpmevent25"; break;
case 0x33a + 4096: name = "mhpmevent26"; break;
case 0x33b + 4096: name = "mhpmevent27"; break;
case 0x33c + 4096: name = "mhpmevent28"; break;
case 0x33d + 4096: name = "mhpmevent29"; break;
case 0x33e + 4096: name = "mhpmevent30"; break;
case 0x33f + 4096: name = "mhpmevent31"; break;

case 0x600 + 4096: name = "hstatus"; break;
case 0x602 + 4096: name = "hedeleg"; break;
case 0x603 + 4096: name = "hideleg"; break;
case 0x604 + 4096: name = "hie"; break;
case 0x606 + 4096: name = "hcounteren"; break;
case 0x607 + 4096: name = "hgeie"; break;
case 0x643 + 4096: name = "htval"; break;
case 0x644 + 4096: name = "hip"; break;
case 0x645 + 4096: name = "hvip"; break;
case 0x64a + 4096: name = "htinst"; break;
case 0xe12 + 4096: name = "hgeip"; break;
case 0x60a + 4096: name = "henvcfg"; break;
case 0x61a + 4096: name = "henvcfgh"; break;
case 0x680 + 4096: name = "hgatp"; break;
case 0x605 + 4096: name = "htimedelta"; break;
case 0x615 + 4096: name = "htimedeltah"; break;
case 0x200 + 4096: name = "vsstatus"; break;
case 0x204 + 4096: name = "vsie"; break;
case 0x205 + 4096: name = "vstvec"; break;
case 0x240 + 4096: name = "vsscratch"; break;
case 0x241 + 4096: name = "vsepc"; break;
case 0x242 + 4096: name = "vscause"; break;
case 0x243 + 4096: name = "vstval"; break;
case 0x244 + 4096: name = "vsip"; break;
case 0x280 + 4096: name = "vsatp"; break;

case 0x350 + 4096: name = "miselect"; break;
case 0x351 + 4096: name = "mireg"; break;
case 0x35c + 4096: name = "mtopei"; break;
case 0xfb0 + 4096: name = "mtopi"; break;
case 0x308 + 4096: name = "mvien"; break;
case 0x309 + 4096: name = "mvip"; break;
case 0x313 + 4096: name = "midelegh"; break;
case 0x314 + 4096: name = "mieh"; break;
case 0x318 + 4096: name = "mvienh"; break;
case 0x319 + 4096: name = "mviph"; break;
case 0x354 + 4096: name = "miph"; break;

case 0x30c + 4096: name = "mstateen0"; break;
case 0x30d + 4096: name = "mstateen1"; break;
case 0x30e + 4096: name = "mstateen2"; break;
case 0x30f + 4096: name = "mstateen3"; break;
case 0x10c + 4096: name = "sstateen0"; break;
case 0x10d + 4096: name = "sstateen1"; break;
case 0x10e + 4096: name = "sstateen2"; break;
case 0x10f + 4096: name = "sstateen3"; break;
case 0x60c + 4096: name = "hstateen0"; break;
case 0x60d + 4096: name = "hstateen1"; break;
case 0x60e + 4096: name = "hstateen2"; break;
case 0x60f + 4096: name = "hstateen3"; break;
case 0x31c + 4096: name = "mstateen0h"; break;
case 0x31d + 4096: name = "mstateen1h"; break;
case 0x31e + 4096: name = "mstateen2h"; break;
case 0x31f + 4096: name = "mstateen3h"; break;
case 0x61c + 4096: name = "hstateen0h"; break;
case 0x61d + 4096: name = "hstateen1h"; break;
case 0x61e + 4096: name = "hstateen2h"; break;
case 0x61f + 4096: name = "hstateen3h"; break;

case 0x150 + 4096: name = "siselect"; break;
case 0x151 + 4096: name = "sireg"; break;
case 0x15c + 4096: name = "stopei"; break;
case 0xdb0 + 4096: name = "stopi"; break;
case 0x114 + 4096: name = "sieh"; break;
case 0x154 + 4096: name = "siph"; break;
case 0x608 + 4096: name = "hvien"; break;
case 0x609 + 4096: name = "hvictl"; break;
case 0x646 + 4096: name = "hviprio1"; break;
case 0x647 + 4096: name = "hviprio2"; break;
case 0x250 + 4096: name = "vsiselect"; break;
case 0x251 + 4096: name = "vsireg"; break;
case 0x25c + 4096: name = "vstopei"; break;
case 0xeb0 + 4096: name = "vstopi"; break;
case 0x613 + 4096: name = "hidelegh"; break;
case 0x618 + 4096: name = "hvienh"; break;
case 0x655 + 4096: name = "hviph"; break;
case 0x656 + 4096: name = "hviprio1h"; break;
case 0x657 + 4096: name = "hviprio2h"; break;
case 0x214 + 4096: name = "vsieh"; break;
case 0x254 + 4096: name = "vsiph"; break;

case 0xda0 + 4096: name = "scountovf"; break;
case 0x723 + 4096: name = "mhpmevent3h"; break;
case 0x724 + 4096: name = "mhpmevent4h"; break;
case 0x725 + 4096: name = "mhpmevent5h"; break;
case 0x726 + 4096: name = "mhpmevent6h"; break;
case 0x727 + 4096: name = "mhpmevent7h"; break;
case 0x728 + 4096: name = "mhpmevent8h"; break;
case 0x729 + 4096: name = "mhpmevent9h"; break;
case 0x72a + 4096: name = "mhpmevent10h"; break;
case 0x72b + 4096: name = "mhpmevent11h"; break;
case 0x72c + 4096: name = "mhpmevent12h"; break;
case 0x72d + 4096: name = "mhpmevent13h"; break;
case 0x72e + 4096: name = "mhpmevent14h"; break;
case 0x72f + 4096: name = "mhpmevent15h"; break;
case 0x730 + 4096: name = "mhpmevent16h"; break;
case 0x731 + 4096: name = "mhpmevent17h"; break;
case 0x732 + 4096: name = "mhpmevent18h"; break;
case 0x733 + 4096: name = "mhpmevent19h"; break;
case 0x734 + 4096: name = "mhpmevent20h"; break;
case 0x735 + 4096: name = "mhpmevent21h"; break;
case 0x736 + 4096: name = "mhpmevent22h"; break;
case 0x737 + 4096: name = "mhpmevent23h"; break;
case 0x738 + 4096: name = "mhpmevent24h"; break;
case 0x739 + 4096: name = "mhpmevent25h"; break;
case 0x73a + 4096: name = "mhpmevent26h"; break;
case 0x73b + 4096: name = "mhpmevent27h"; break;
case 0x73c + 4096: name = "mhpmevent28h"; break;
case 0x73d + 4096: name = "mhpmevent29h"; break;
case 0x73e + 4096: name = "mhpmevent30h"; break;
case 0x73f + 4096: name = "mhpmevent31h"; break;

case 0x14d + 4096: name = "stimecmp"; break;
case 0x15d + 4096: name = "stimecmph"; break;
case 0x24d + 4096: name = "vstimecmp"; break;
case 0x25d + 4096: name = "vstimecmph"; break;

case 0x380 + 4096: name = "mbase"; break;
case 0x381 + 4096: name = "mbound"; break;
case 0x382 + 4096: name = "mibase"; break;
case 0x383 + 4096: name = "mibound"; break;
case 0x384 + 4096: name = "mdbase"; break;
case 0x385 + 4096: name = "mdbound"; break;
case 0x321 + 4096: name = "mscounteren"; break;
case 0x322 + 4096: name = "mhcounteren"; break;
case 0x0 + 4096: name = "ustatus"; break;
case 0x4 + 4096: name = "uie"; break;
case 0x5 + 4096: name = "utvec"; break;
case 0x40 + 4096: name = "uscratch"; break;
case 0x41 + 4096: name = "uepc"; break;
case 0x42 + 4096: name = "ucause"; break;
case 0x43 + 4096: name = "utval"; break;
case 0x44 + 4096: name = "uip"; break;
case 0x102 + 4096: name = "sedeleg"; break;
case 0x103 + 4096: name = "sideleg"; break;

case 0x1 + 4096: name = "fflags"; break;
case 0x2 + 4096: name = "frm"; break;
case 0x3 + 4096: name = "fcsr"; break;

case 0x7b0 + 4096: name = "dcsr"; break;
case 0x7b1 + 4096: name = "dpc"; break;
case 0x7b2 + 4096: name = "dscratch0"; break;
case 0x7b3 + 4096: name = "dscratch1"; break;
case 0x7a0 + 4096: name = "tselect"; break;
case 0x7a1 + 4096: name = "tdata1"; break;
case 0x7a2 + 4096: name = "tdata2"; break;
case 0x7a3 + 4096: name = "tdata3"; break;
case 0x7a4 + 4096: name = "tinfo"; break;
case 0x7a5 + 4096: name = "tcontrol"; break;
case 0x6a8 + 4096: name = "hcontext"; break;
case 0x5a8 + 4096: name = "scontext"; break;
case 0x7a8 + 4096: name = "mcontext"; break;
case 0x7aa + 4096: name = "mscontext"; break;

case 0x015 + 4096: name = "seed"; break;

case 0x008 + 4096: name = "vstart"; break;
case 0x009 + 4096: name = "vxsat"; break;
case 0x00a + 4096: name = "vxrm"; break;
case 0x00f + 4096: name = "vcsr"; break;
case 0xc20 + 4096: name = "vl"; break;
case 0xc21 + 4096: name = "vtype"; break;
case 0xc22 + 4096: name = "vlenb"; break;
# 8689 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 2


 default:
   {
     static char csr_name[10];
     snprintf (csr_name, sizeof (csr_name), "csr%d", (regno - 4096));
     name = csr_name;
   }
   break;
 }
    }

  return name;
}

static void
init_dwarf_regnames_riscv (void)
{
  dwarf_regnames = 
# 8707 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  ((void *)0)
# 8707 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      ;
  dwarf_regnames_count = 8192;
  dwarf_regnames_lookup_func = regname_internal_riscv;
}

void
init_dwarf_regnames_by_elf_machine_code (unsigned int e_machine)
{
  dwarf_regnames_lookup_func = 
# 8715 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              ((void *)0)
# 8715 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  ;
  is_aarch64 = 
# 8716 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              0
# 8716 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   ;

  switch (e_machine)
    {
    case 3:
      init_dwarf_regnames_i386 ();
      break;

    case 6:
      init_dwarf_regnames_iamcu ();
      break;

    case 62:
    case 180:
    case 181:
      init_dwarf_regnames_x86_64 ();
      break;

    case 183:
      init_dwarf_regnames_aarch64 ();
      break;

    case 22:
      init_dwarf_regnames_s390 ();
      break;

    case 243:
      init_dwarf_regnames_riscv ();
      break;

    default:
      break;
    }
}




void
init_dwarf_regnames_by_bfd_arch_and_mach (enum bfd_architecture arch,
       unsigned long mach)
{
  dwarf_regnames_lookup_func = 
# 8758 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              ((void *)0)
# 8758 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  ;
  is_aarch64 = 
# 8759 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              0
# 8759 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   ;

  switch (arch)
    {
    case bfd_arch_i386:
      switch (mach)
 {
 case (1 << 3):
 case ((1 << 3) | (1 << 0)):
 case (1 << 4):
 case ((1 << 4) | (1 << 0)):
   init_dwarf_regnames_x86_64 ();
   break;

 default:
   init_dwarf_regnames_i386 ();
   break;
 }
      break;

    case bfd_arch_iamcu:
      init_dwarf_regnames_iamcu ();
      break;

    case bfd_arch_aarch64:
      init_dwarf_regnames_aarch64();
      break;

    case bfd_arch_s390:
      init_dwarf_regnames_s390 ();
      break;

    case bfd_arch_riscv:
      init_dwarf_regnames_riscv ();
      break;

    default:
      break;
    }
}

static const char *
regname_internal_by_table_only (unsigned int regno)
{
  if (dwarf_regnames != 
# 8803 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
      
# 8804 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     && regno < dwarf_regnames_count
      && dwarf_regnames [regno] != 
# 8805 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                  ((void *)0)
# 8805 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      )
    return dwarf_regnames [regno];

  return 
# 8808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 8808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ;
}

static const char *
regname (unsigned int regno, int name_only_p)
{
  static char reg[64];

  const char *name = 
# 8816 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    ((void *)0)
# 8816 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ;

  if (dwarf_regnames_lookup_func != 
# 8818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                   ((void *)0)
# 8818 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       )
    name = dwarf_regnames_lookup_func (regno);

  if (name != 
# 8821 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 8821 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 )
    {
      if (name_only_p)
 return name;
      snprintf (reg, sizeof (reg), "r%d (%s)", regno, name);
    }
  else
    snprintf (reg, sizeof (reg), "r%d", regno);
  return reg;
}

static void
frame_display_row (Frame_Chunk *fc, int *need_col_headers, unsigned int *max_regs)
{
  unsigned int r;
  char tmp[100];

  if (*max_regs != fc->ncols)
    *max_regs = fc->ncols;

  if (*need_col_headers)
    {
      *need_col_headers = 0;

      printf ("%-*s CFA      ", eh_addr_size * 2, "   LOC");

      for (r = 0; r < *max_regs; r++)
 if (fc->col_type[r] != (-1))
   {
     if (r == fc->ra)
       printf ("ra    ");
     else
       printf ("%-5s ", regname (r, 1));
   }

      printf ("\n");
    }

  print_hex (fc->pc_begin, eh_addr_size);
  if (fc->cfa_exp)
    strcpy (tmp, "exp");
  else
    sprintf (tmp, "%s%+d", regname (fc->cfa_reg, 1), (int) fc->cfa_offset);
  printf ("%-8s ", tmp);

  for (r = 0; r < fc->ncols; r++)
    {
      if (fc->col_type[r] != (-1))
 {
   switch (fc->col_type[r])
     {
     case DW_CFA_undefined:
       strcpy (tmp, "u");
       break;
     case DW_CFA_same_value:
       strcpy (tmp, "s");
       break;
     case DW_CFA_offset:
       sprintf (tmp, "c%+" 
# 8879 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          "l" "d"
# 8879 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                , fc->col_offset[r]);
       break;
     case DW_CFA_val_offset:
       sprintf (tmp, "v%+" 
# 8882 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          "l" "d"
# 8882 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                , fc->col_offset[r]);
       break;
     case DW_CFA_register:
       sprintf (tmp, "%s", regname (fc->col_offset[r], 0));
       break;
     case DW_CFA_expression:
       strcpy (tmp, "exp");
       break;
     case DW_CFA_val_expression:
       strcpy (tmp, "vexp");
       break;
     default:
       strcpy (tmp, "n/a");
       break;
     }
   printf ("%-5s ", tmp);
 }
    }
  printf ("\n");
}



static unsigned char *
read_cie (unsigned char *start, unsigned char *end,
   Frame_Chunk **p_cie, int *p_version,
   uint64_t *p_aug_len, unsigned char **p_aug)
{
  int version;
  Frame_Chunk *fc;
  unsigned char *augmentation_data = 
# 8912 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                    ((void *)0)
# 8912 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                        ;
  uint64_t augmentation_data_len = 0;

  * p_cie = 
# 8915 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           ((void *)0)
# 8915 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               ;

  if (start >= end)
    return end;

  fc = (Frame_Chunk *) xmalloc (sizeof (Frame_Chunk));
  memset (fc, 0, sizeof (Frame_Chunk));

  fc->col_type = xmalloc (sizeof (*fc->col_type));
  fc->col_offset = xmalloc (sizeof (*fc->col_offset));

  version = *start++;

  fc->augmentation = (char *) start;


  while (start < end)
    if (* start ++ == '\0')
      break;
  if (start == end)
    {
      warn (gettext ("No terminator for augmentation name\n"));
      goto fail;
    }

  if (strcmp (fc->augmentation, "eh") == 0)
    {
      if (eh_addr_size > (size_t) (end - start))
 goto fail;
      start += eh_addr_size;
    }

  if (version >= 4)
    {
      if (2 > (size_t) (end - start))
 goto fail;
      do { size_t amount = (1); if (sizeof (fc->ptr_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (fc->ptr_size)); amount = sizeof (fc->ptr_size); } if (1) 
# 8951 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 8951 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 8951 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 8951 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 8951 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 8951 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (end)"
# 8951 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8951, __extension__ __PRETTY_FUNCTION__); }))
# 8951 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (fc->ptr_size) = 0; else (fc->ptr_size) = (byte_get) ((start), amount); if (
# 8951 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 8951 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
      if (fc->ptr_size < 1 || fc->ptr_size > 8)
 {
   warn (gettext ("Invalid pointer size (%d) in CIE data\n"), fc->ptr_size);
   goto fail;
 }

      do { size_t amount = (1); if (sizeof (fc->segment_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (fc->segment_size)); amount = sizeof (fc->segment_size); } if (1) 
# 8958 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 8958 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 8958 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 8958 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 8958 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 8958 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (end)"
# 8958 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8958, __extension__ __PRETTY_FUNCTION__); }))
# 8958 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (fc->segment_size) = 0; else (fc->segment_size) = (byte_get) ((start), amount); if (
# 8958 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 8958 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      if (fc->segment_size > 8 || fc->segment_size + fc->ptr_size > 8)
 {
   warn (gettext ("Invalid segment size (%d) in CIE data\n"), fc->segment_size);
   goto fail;
 }

      eh_addr_size = fc->ptr_size;
    }
  else
    {
      fc->ptr_size = eh_addr_size;
      fc->segment_size = 0;
    }

  do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 8974 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 8974 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); start += _len; (fc->code_factor) = _val; if ((fc->code_factor) != _val) _status |= 2; report_leb_status (_status); } while (0);
  do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 8975 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 8975 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 , &_len, &_status); start += _len; (fc->data_factor) = _val; if ((fc->data_factor) != _val) _status |= 2; report_leb_status (_status); } while (0);

  if (start >= end)
    goto fail;

  if (version == 1)
    {
      do { size_t amount = (1); if (sizeof (fc->ra) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (fc->ra)); amount = sizeof (fc->ra); } if (1) 
# 8982 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 8982 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 8982 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 8982 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 8982 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 8982 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (end)"
# 8982 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 8982, __extension__ __PRETTY_FUNCTION__); }))
# 8982 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (fc->ra) = 0; else (fc->ra) = (byte_get) ((start), amount); if (
# 8982 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 8982 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);
    }
  else
    {
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 8986 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 8986 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); start += _len; (fc->ra) = _val; if ((fc->ra) != _val) _status |= 2; report_leb_status (_status); } while (0);
    }

  if (fc->augmentation[0] == 'z')
    {
      if (start >= end)
 goto fail;
      do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, end, 
# 8993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 8993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     , &_len, &_status); start += _len; (augmentation_data_len) = _val; if ((augmentation_data_len) != _val) _status |= 2; report_leb_status (_status); } while (0);
      augmentation_data = start;

      if (augmentation_data_len > (size_t) (end - start))
 {
   warn (gettext ("Augmentation data too long: %#" 
# 8998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 8998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ", expected at most %#tx\n")
                                ,
  augmentation_data_len, end - start);
   goto fail;
 }
      start += augmentation_data_len;
    }

  if (augmentation_data_len)
    {
      unsigned char *p;
      unsigned char *q;
      unsigned char *qend;

      p = (unsigned char *) fc->augmentation + 1;
      q = augmentation_data;
      qend = q + augmentation_data_len;

      while (p < end && q < qend)
 {
   if (*p == 'L')
     q++;
   else if (*p == 'P')
     q += 1 + size_of_encoded_value (*q);
   else if (*p == 'R')
     fc->fde_encoding = *q++;
   else if (*p == 'S')
     ;
   else if (*p == 'B')
     ;
   else
     break;
   p++;
 }


    }

  *p_cie = fc;
  if (p_version)
    *p_version = version;
  if (p_aug_len)
    {
      *p_aug_len = augmentation_data_len;
      *p_aug = augmentation_data;
    }
  return start;

 fail:
  free (fc->col_offset);
  free (fc->col_type);
  free (fc);
  return end;
}






static void
display_data (size_t printed, const unsigned char *data, size_t len)
{
  if (do_wide || len < ((80 - printed) / 3))
    for (printed = 0; printed < len; ++printed)
      printf (" %02x", data[printed]);
  else
    {
      for (printed = 0; printed < len; ++printed)
 {
   if (printed % (80 / 3) == 0)
     putchar ('\n');
   printf (" %02x", data[printed]);
 }
    }
}




static void
display_augmentation_data (const unsigned char * data, uint64_t len)
{
  size_t i;

  i = printf (gettext ("  Augmentation data:    "));
  display_data (i, data, len);
}

static int
display_debug_frames (struct dwarf_section *section,
        void *file __attribute__ ((__unused__)))
{
  unsigned char *start = section->start;
  unsigned char *end = start + section->size;
  unsigned char *section_start = start;
  Frame_Chunk *chunks = 
# 9094 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 9094 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           , *forward_refs = 
# 9094 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                             ((void *)0)
# 9094 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                 ;
  Frame_Chunk *remembered_state = 
# 9095 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                 ((void *)0)
# 9095 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                     ;
  Frame_Chunk *rs;
  
# 9097 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 _Bool 
# 9097 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      is_eh = strcmp (section->name, ".eh_frame") == 0;
  unsigned int max_regs = 0;
  const char *bad_reg = gettext ("bad register: ");
  unsigned int saved_eh_addr_size = eh_addr_size;

  introduce (section, 
# 9102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 9102 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  while (start < end)
    {
      unsigned char *saved_start;
      unsigned char *block_end;
      uint64_t length;
      uint64_t cie_id;
      Frame_Chunk *fc;
      Frame_Chunk *cie;
      int need_col_headers = 1;
      unsigned char *augmentation_data = 
# 9113 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                        ((void *)0)
# 9113 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                            ;
      uint64_t augmentation_data_len = 0;
      unsigned int encoded_ptr_size = saved_eh_addr_size;
      unsigned int offset_size;
      
# 9117 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     _Bool 
# 9117 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          all_nops;
      static Frame_Chunk fde_fc;

      saved_start = start;

      do { size_t amount = (4); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 9122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 9122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 9122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 9122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (end)
# 9122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 9122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (end)"
# 9122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9122, __extension__ __PRETTY_FUNCTION__); }))
# 9122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((start), amount); if (
# 9122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 9122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      if (length == 0)
 {
   printf ("\n%08tx ZERO terminator\n\n",
      saved_start - section_start);




   while (start < end && * start == 0)
     ++ start;
   continue;
 }

      if (length == 0xffffffff)
 {
   do { size_t amount = (8); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 9139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 9139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (end)
# 9139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 9139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (end)
# 9139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 9139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (end)"
# 9139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9139, __extension__ __PRETTY_FUNCTION__); }))
# 9139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (end) - (start); if ((start) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((start), amount); if (
# 9139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 9139 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0);
   offset_size = 8;
 }
      else
 offset_size = 4;

      if (length > (size_t) (end - start))
 {
   warn ("Invalid length %#" 
# 9147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            "l" "x" 
# 9147 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                   " in FDE at %#tx\n",
  length, saved_start - section_start);
   block_end = end;
 }
      else
 block_end = start + length;

      do { size_t amount = (offset_size); if (sizeof (cie_id) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (cie_id)); amount = sizeof (cie_id); } if (1) 
# 9154 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 9154 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (block_end)
# 9154 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 9154 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (start) <= (block_end)
# 9154 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 9154 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(start) <= (block_end)"
# 9154 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9154, __extension__ __PRETTY_FUNCTION__); }))
# 9154 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (block_end) - (start); if ((start) > (block_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (cie_id) = 0; else (cie_id) = (byte_get) ((start), amount); if (
# 9154 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 9154 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (start) += amount; } while (0);

      if (is_eh ? (cie_id == 0) : ((offset_size == 4 && cie_id == 0xffffffff)
       || (offset_size == 8 && cie_id == 0xffffffffffffffffULL)))
 {
   int version;
   unsigned int mreg;

   start = read_cie (start, block_end, &cie, &version,
       &augmentation_data_len, &augmentation_data);

   if (cie == 
# 9165 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 9165 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 )
     break;

   fc = cie;
   fc->next = chunks;
   chunks = fc;
   fc->chunk_start = saved_start;
   mreg = max_regs > 0 ? max_regs - 1 : 0;
   if (mreg < fc->ra)
     mreg = fc->ra;
   if (frame_need_space (fc, mreg) < 0)
     break;
   if (fc->fde_encoding)
     encoded_ptr_size = size_of_encoded_value (fc->fde_encoding);

   printf ("\n%08tx ", saved_start - section_start);
   print_hex (length, fc->ptr_size);
   print_hex (cie_id, offset_size);

   if (do_debug_frames_interp)
     {
       printf ("CIE \"%s\" cf=%d df=%d ra=%d\n", fc->augmentation,
        fc->code_factor, fc->data_factor, fc->ra);
     }
   else
     {
       printf ("CIE\n");
       printf ("  Version:               %d\n", version);
       printf ("  Augmentation:          \"%s\"\n", fc->augmentation);
       if (version >= 4)
  {
    printf ("  Pointer Size:          %u\n", fc->ptr_size);
    printf ("  Segment Size:          %u\n", fc->segment_size);
  }
       printf ("  Code alignment factor: %u\n", fc->code_factor);
       printf ("  Data alignment factor: %d\n", fc->data_factor);
       printf ("  Return address column: %d\n", fc->ra);

       if (augmentation_data_len)
  display_augmentation_data (augmentation_data, augmentation_data_len);

       putchar ('\n');
     }
 }
      else
 {
   unsigned char *look_for;
   unsigned long segment_selector;
   uint64_t cie_off;

   cie_off = cie_id;
   if (is_eh)
     {
       uint64_t sign = (uint64_t) 1 << (offset_size * 8 - 1);
       cie_off = (cie_off ^ sign) - sign;
       cie_off = start - 4 - section_start - cie_off;
     }

   look_for = section_start + cie_off;
   if (cie_off <= (size_t) (saved_start - section_start))
     {
       for (cie = chunks; cie ; cie = cie->next)
  if (cie->chunk_start == look_for)
    break;
     }
   else if (cie_off >= section->size)
     cie = 
# 9231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 9231 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
   else
     {
       for (cie = forward_refs; cie ; cie = cie->next)
  if (cie->chunk_start == look_for)
    break;
       if (!cie)
  {
    unsigned int off_size;
    unsigned char *cie_scan;

    cie_scan = look_for;
    off_size = 4;
    do { size_t amount = (4); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 9244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void) sizeof ((
# 9244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   (cie_scan) <= (end)
# 9244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ) ? 1 : 0), __extension__ ({ if (
# 9244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   (cie_scan) <= (end)
# 9244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ) ; else __assert_fail (
# 9244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   "(cie_scan) <= (end)"
# 9244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9244, __extension__ __PRETTY_FUNCTION__); }))
# 9244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ; size_t avail = (end) - (cie_scan); if ((cie_scan) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((cie_scan), amount); if (
# 9244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   1
# 9244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ) (cie_scan) += amount; } while (0);
    if (length == 0xffffffff)
      {
        do { size_t amount = (8); if (sizeof (length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (length)); amount = sizeof (length); } if (1) 
# 9247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void) sizeof ((
# 9247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (cie_scan) <= (end)
# 9247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ? 1 : 0), __extension__ ({ if (
# 9247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (cie_scan) <= (end)
# 9247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ; else __assert_fail (
# 9247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       "(cie_scan) <= (end)"
# 9247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9247, __extension__ __PRETTY_FUNCTION__); }))
# 9247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ; size_t avail = (end) - (cie_scan); if ((cie_scan) > (end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (length) = 0; else (length) = (byte_get) ((cie_scan), amount); if (
# 9247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       1
# 9247 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ) (cie_scan) += amount; } while (0);
        off_size = 8;
      }
    if (length != 0 && length <= (size_t) (end - cie_scan))
      {
        uint64_t c_id;
        unsigned char *cie_end = cie_scan + length;

        do { size_t amount = (off_size); if (sizeof (c_id) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (c_id)); amount = sizeof (c_id); } if (1) 
# 9255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void) sizeof ((
# 9255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (cie_scan) <= (cie_end)
# 9255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ? 1 : 0), __extension__ ({ if (
# 9255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (cie_scan) <= (cie_end)
# 9255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ; else __assert_fail (
# 9255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       "(cie_scan) <= (cie_end)"
# 9255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9255, __extension__ __PRETTY_FUNCTION__); }))
# 9255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ; size_t avail = (cie_end) - (cie_scan); if ((cie_scan) > (cie_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (c_id) = 0; else (c_id) = (byte_get) ((cie_scan), amount); if (
# 9255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       1
# 9255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ) (cie_scan) += amount; } while (0)
                  ;
        if (is_eh
     ? c_id == 0
     : ((off_size == 4 && c_id == 0xffffffff)
        || (off_size == 8 && c_id == 0xffffffffffffffffULL)))
   {
     int version;
     unsigned int mreg;

     read_cie (cie_scan, cie_end, &cie, &version,
        &augmentation_data_len, &augmentation_data);

     if (cie == 
# 9268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               ((void *)0)
# 9268 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   )
       {
         warn (gettext ("Failed to read CIE information\n"));
         break;
       }
     cie->next = forward_refs;
     forward_refs = cie;
     cie->chunk_start = look_for;
     mreg = max_regs > 0 ? max_regs - 1 : 0;
     if (mreg < cie->ra)
       mreg = cie->ra;
     if (frame_need_space (cie, mreg) < 0)
       {
         warn (gettext ("Invalid max register\n"));
         break;
       }
     if (cie->fde_encoding)
       encoded_ptr_size
         = size_of_encoded_value (cie->fde_encoding);
   }
      }
  }
     }

   fc = &fde_fc;
   memset (fc, 0, sizeof (Frame_Chunk));

   if (!cie)
     {
       fc->ncols = 0;
       fc->col_type = xmalloc (sizeof (*fc->col_type));
       fc->col_offset = xmalloc (sizeof (*fc->col_offset));
       if (frame_need_space (fc, max_regs > 0 ? max_regs - 1 : 0) < 0)
  {
    warn (gettext ("Invalid max register\n"));
    break;
  }
       cie = fc;
       fc->augmentation = "";
       fc->fde_encoding = 0;
       fc->ptr_size = eh_addr_size;
       fc->segment_size = 0;
     }
   else
     {
       fc->ncols = cie->ncols;
       fc->col_type = xcmalloc (fc->ncols, sizeof (*fc->col_type));
       fc->col_offset = xcmalloc (fc->ncols, sizeof (*fc->col_offset));
       memcpy (fc->col_type, cie->col_type,
        fc->ncols * sizeof (*fc->col_type));
       memcpy (fc->col_offset, cie->col_offset,
        fc->ncols * sizeof (*fc->col_offset));
       fc->augmentation = cie->augmentation;
       fc->ptr_size = cie->ptr_size;
       eh_addr_size = cie->ptr_size;
       fc->segment_size = cie->segment_size;
       fc->code_factor = cie->code_factor;
       fc->data_factor = cie->data_factor;
       fc->cfa_reg = cie->cfa_reg;
       fc->cfa_offset = cie->cfa_offset;
       fc->ra = cie->ra;
       if (frame_need_space (fc, max_regs > 0 ? max_regs - 1: 0) < 0)
  {
    warn (gettext ("Invalid max register\n"));
    break;
  }
       fc->fde_encoding = cie->fde_encoding;
     }

   if (fc->fde_encoding)
     encoded_ptr_size = size_of_encoded_value (fc->fde_encoding);

   segment_selector = 0;
   if (fc->segment_size)
     {
       if (fc->segment_size > sizeof (segment_selector))
  {

    warn (gettext ("Probably corrupt segment size: %d - using 4 instead\n"), fc->segment_size);
    fc->segment_size = 4;
  }
       do { size_t amount = (fc->segment_size); if (sizeof (segment_selector) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (segment_selector)); amount = sizeof (segment_selector); } if (1) 
# 9349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 9349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (block_end)
# 9349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 9349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (block_end)
# 9349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 9349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(start) <= (block_end)"
# 9349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9349, __extension__ __PRETTY_FUNCTION__); }))
# 9349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (block_end) - (start); if ((start) > (block_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (segment_selector) = 0; else (segment_selector) = (byte_get) ((start), amount); if (
# 9349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 9349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (start) += amount; } while (0)
                                     ;
     }

   fc->pc_begin = get_encoded_value (&start, fc->fde_encoding, section,
         block_end);





   do { size_t amount = (encoded_ptr_size); if (sizeof (fc->pc_range) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (fc->pc_range)); amount = sizeof (fc->pc_range); } if (1) 
# 9360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 9360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (block_end)
# 9360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 9360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (start) <= (block_end)
# 9360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 9360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(start) <= (block_end)"
# 9360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9360, __extension__ __PRETTY_FUNCTION__); }))
# 9360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (block_end) - (start); if ((start) > (block_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (fc->pc_range) = 0; else (fc->pc_range) = (byte_get) ((start), amount); if (
# 9360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 9360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (start) += amount; } while (0)
               ;

   if (cie->augmentation[0] == 'z')
     {
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (augmentation_data_len) = _val; if ((augmentation_data_len) != _val) _status |= 2; report_leb_status (_status); } while (0);
       augmentation_data = start;

       if (augmentation_data_len > (size_t) (block_end - start))
  {
    warn (gettext ("Augmentation data too long: %#" 
# 9370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         "l" "x" 
# 9370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
         ", " "expected at most %#tx\n")
                               ,
   augmentation_data_len, block_end - start);
    start = block_end;
    augmentation_data = 
# 9374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 9374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           ;
    augmentation_data_len = 0;
  }
       start += augmentation_data_len;
     }

   printf ("\n%08tx ", saved_start - section_start);
   print_hex (length, fc->ptr_size);
   print_hex (cie_id, offset_size);
   printf ("FDE ");

   if (cie->chunk_start)
     printf ("cie=%08tx", cie->chunk_start - section_start);
   else


     printf (gettext ("cie=invalid "));

   printf (" pc=");
   if (fc->segment_size)
     printf ("%04lx:", segment_selector);

   print_hex_ns (fc->pc_begin, fc->ptr_size);
   printf ("..");
   print_hex_ns (fc->pc_begin + fc->pc_range, fc->ptr_size);
   printf ("\n");

   if (! do_debug_frames_interp && augmentation_data_len)
     {
       display_augmentation_data (augmentation_data, augmentation_data_len);
       putchar ('\n');
     }
 }
# 9415 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      if (1 || do_debug_frames_interp)
 {


   unsigned char *tmp = start;

   while (start < block_end)
     {
       unsigned int reg, op, opa;
       unsigned long temp;

       op = *start++;
       opa = op & 0x3f;
       if (op & 0xc0)
  op &= 0xc0;



       reg = -1u;
       switch (op)
  {
  case DW_CFA_advance_loc:
    break;
  case DW_CFA_offset:
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9439 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9439 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9439 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9439 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    reg = opa;
    break;
  case DW_CFA_restore:
    reg = opa;
    break;
  case DW_CFA_set_loc:
    if ((size_t) (block_end - start) < encoded_ptr_size)
      start = block_end;
    else
      start += encoded_ptr_size;
    break;
  case DW_CFA_advance_loc1:
    if ((size_t) (block_end - start) < 1)
      start = block_end;
    else
      start += 1;
    break;
  case DW_CFA_advance_loc2:
    if ((size_t) (block_end - start) < 2)
      start = block_end;
    else
      start += 2;
    break;
  case DW_CFA_advance_loc4:
    if ((size_t) (block_end - start) < 4)
      start = block_end;
    else
      start += 4;
    break;
  case DW_CFA_offset_extended:
  case DW_CFA_val_offset:
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9471 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9471 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9472 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9472 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9472 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9472 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    break;
  case DW_CFA_restore_extended:
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9475 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9475 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
    break;
  case DW_CFA_undefined:
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9478 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9478 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
    break;
  case DW_CFA_same_value:
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9481 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9481 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
    break;
  case DW_CFA_register:
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9484 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9484 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9485 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9485 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9485 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9485 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    break;
  case DW_CFA_def_cfa:
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9489 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9489 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9489 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9489 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    break;
  case DW_CFA_def_cfa_register:
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9492 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    break;
  case DW_CFA_def_cfa_offset:
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9495 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9495 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9495 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9495 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    break;
  case DW_CFA_def_cfa_expression:
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9498 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9498 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); start += _len; (temp) = _val; if ((temp) != _val) _status |= 2; report_leb_status (_status); } while (0);
    if ((size_t) (block_end - start) < temp)
      start = block_end;
    else
      start += temp;
    break;
  case DW_CFA_expression:
  case DW_CFA_val_expression:
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9506 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9506 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9507 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9507 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); start += _len; (temp) = _val; if ((temp) != _val) _status |= 2; report_leb_status (_status); } while (0);
    if ((size_t) (block_end - start) < temp)
      start = block_end;
    else
      start += temp;
    break;
  case DW_CFA_offset_extended_sf:
  case DW_CFA_val_offset_sf:
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9515 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9515 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   1
# 9516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9516 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    break;
  case DW_CFA_def_cfa_sf:
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9519 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9519 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9519 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9519 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9520 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   1
# 9520 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9520 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9520 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    break;
  case DW_CFA_def_cfa_offset_sf:
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   1
# 9523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9523 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    break;
  case DW_CFA_MIPS_advance_loc8:
    if ((size_t) (block_end - start) < 8)
      start = block_end;
    else
      start += 8;
    break;
  case DW_CFA_GNU_args_size:
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9532 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9532 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9532 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9532 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    break;
  case DW_CFA_GNU_negative_offset_extended:
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9535 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9535 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
    do { unsigned int _len; read_leb128 (start, block_end, 
# 9536 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 9536 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, 
# 9536 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void *)0)
# 9536 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ); start += _len; } while (0);
    break;
  default:
    break;
  }
       if (reg != -1u && frame_need_space (fc, reg) >= 0)
  {



    if (reg >= cie->ncols
        || cie->col_type[reg] == (-1))
      fc->col_type[reg] = DW_CFA_undefined;
    else
      fc->col_type[reg] = cie->col_type[reg];
  }
     }
   start = tmp;
 }

      all_nops = 
# 9556 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                1
# 9556 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    ;




      while (start < block_end)
 {
   unsigned op, opa;



   unsigned int reg;
   int64_t sofs;
   uint64_t ofs;
   const char *reg_prefix = "";

   op = *start++;
   opa = op & 0x3f;
   if (op & 0xc0)
     op &= 0xc0;


   if (op != DW_CFA_nop)
     all_nops = 
# 9579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               0
# 9579 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    ;



   switch (op)
     {
     case DW_CFA_advance_loc:
       opa *= fc->code_factor;
       if (do_debug_frames_interp)
  frame_display_row (fc, &need_col_headers, &max_regs);
       else
  {
    printf ("  DW_CFA_advance_loc: %d to ", opa);
    print_hex_ns (fc->pc_begin + opa, fc->ptr_size);
    printf ("\n");
  }
       fc->pc_begin += opa;
       break;

     case DW_CFA_offset:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9599 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (ofs) = _val; if ((ofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       ofs *= fc->data_factor;
       if (opa >= fc->ncols)
  reg_prefix = bad_reg;
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  printf ("  DW_CFA_offset: %s%s at cfa%+" 
# 9604 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          "l" "d" 
# 9604 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                 "\n",
   reg_prefix, regname (opa, 0), ofs);
       if (*reg_prefix == '\0')
  {
    fc->col_type[opa] = DW_CFA_offset;
    fc->col_offset[opa] = ofs;
  }
       break;

     case DW_CFA_restore:
       if (opa >= fc->ncols)
  reg_prefix = bad_reg;
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  printf ("  DW_CFA_restore: %s%s\n",
   reg_prefix, regname (opa, 0));
       if (*reg_prefix != '\0')
  break;

       if (opa >= cie->ncols
    || cie->col_type[opa] == (-1))
  {
    fc->col_type[opa] = DW_CFA_undefined;
    fc->col_offset[opa] = 0;
  }
       else
  {
    fc->col_type[opa] = cie->col_type[opa];
    fc->col_offset[opa] = cie->col_offset[opa];
  }
       break;

     case DW_CFA_set_loc:
       ofs = get_encoded_value (&start, fc->fde_encoding, section,
           block_end);
       if (do_debug_frames_interp)
  frame_display_row (fc, &need_col_headers, &max_regs);
       else
  {
    printf ("  DW_CFA_set_loc: ");
    print_hex_ns (ofs, fc->ptr_size);
    printf ("\n");
  }
       fc->pc_begin = ofs;
       break;

     case DW_CFA_advance_loc1:
       do { size_t amount = (1); if (sizeof (ofs) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (ofs)); amount = sizeof (ofs); } if (1) 
# 9650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 9650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (block_end)
# 9650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 9650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (block_end)
# 9650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 9650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(start) <= (block_end)"
# 9650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9650, __extension__ __PRETTY_FUNCTION__); }))
# 9650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (block_end) - (start); if ((start) > (block_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (ofs) = 0; else (ofs) = (byte_get) ((start), amount); if (
# 9650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 9650 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (start) += amount; } while (0);
       ofs *= fc->code_factor;
       if (do_debug_frames_interp)
  frame_display_row (fc, &need_col_headers, &max_regs);
       else
  {
    printf ("  DW_CFA_advance_loc1: %" 
# 9656 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                      "l" "d" 
# 9656 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                             " to ", ofs);
    print_hex_ns (fc->pc_begin + ofs, fc->ptr_size);
    printf ("\n");
  }
       fc->pc_begin += ofs;
       break;

     case DW_CFA_advance_loc2:
       do { size_t amount = (2); if (sizeof (ofs) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (ofs)); amount = sizeof (ofs); } if (1) 
# 9664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 9664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (block_end)
# 9664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 9664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (block_end)
# 9664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 9664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(start) <= (block_end)"
# 9664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9664, __extension__ __PRETTY_FUNCTION__); }))
# 9664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (block_end) - (start); if ((start) > (block_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (ofs) = 0; else (ofs) = (byte_get) ((start), amount); if (
# 9664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 9664 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (start) += amount; } while (0);
       ofs *= fc->code_factor;
       if (do_debug_frames_interp)
  frame_display_row (fc, &need_col_headers, &max_regs);
       else
  {
    printf ("  DW_CFA_advance_loc2: %" 
# 9670 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                      "l" "d" 
# 9670 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                             " to ", ofs);
    print_hex_ns (fc->pc_begin + ofs, fc->ptr_size);
    printf ("\n");
  }
       fc->pc_begin += ofs;
       break;

     case DW_CFA_advance_loc4:
       do { size_t amount = (4); if (sizeof (ofs) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (ofs)); amount = sizeof (ofs); } if (1) 
# 9678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 9678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (block_end)
# 9678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 9678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (block_end)
# 9678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 9678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(start) <= (block_end)"
# 9678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9678, __extension__ __PRETTY_FUNCTION__); }))
# 9678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (block_end) - (start); if ((start) > (block_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (ofs) = 0; else (ofs) = (byte_get) ((start), amount); if (
# 9678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 9678 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (start) += amount; } while (0);
       ofs *= fc->code_factor;
       if (do_debug_frames_interp)
  frame_display_row (fc, &need_col_headers, &max_regs);
       else
  {
    printf ("  DW_CFA_advance_loc4: %" 
# 9684 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                      "l" "d" 
# 9684 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                             " to ", ofs);
    print_hex_ns (fc->pc_begin + ofs, fc->ptr_size);
    printf ("\n");
  }
       fc->pc_begin += ofs;
       break;

     case DW_CFA_offset_extended:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9692 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9692 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9693 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9693 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (ofs) = _val; if ((ofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       ofs *= fc->data_factor;
       if (reg >= fc->ncols)
  reg_prefix = bad_reg;
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  printf ("  DW_CFA_offset_extended: %s%s at cfa%+" 
# 9698 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                   "l" "d" 
# 9698 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                          "\n",
   reg_prefix, regname (reg, 0), ofs);
       if (*reg_prefix == '\0')
  {
    fc->col_type[reg] = DW_CFA_offset;
    fc->col_offset[reg] = ofs;
  }
       break;

     case DW_CFA_val_offset:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9708 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9708 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9709 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9709 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (ofs) = _val; if ((ofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       ofs *= fc->data_factor;
       if (reg >= fc->ncols)
  reg_prefix = bad_reg;
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  printf ("  DW_CFA_val_offset: %s%s is cfa%+" 
# 9714 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                              "l" "d" 
# 9714 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                     "\n",
   reg_prefix, regname (reg, 0), ofs);
       if (*reg_prefix == '\0')
  {
    fc->col_type[reg] = DW_CFA_val_offset;
    fc->col_offset[reg] = ofs;
  }
       break;

     case DW_CFA_restore_extended:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9724 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9724 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (reg >= fc->ncols)
  reg_prefix = bad_reg;
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  printf ("  DW_CFA_restore_extended: %s%s\n",
   reg_prefix, regname (reg, 0));
       if (*reg_prefix != '\0')
  break;

       if (reg >= cie->ncols
    || cie->col_type[reg] == (-1))
  {
    fc->col_type[reg] = DW_CFA_undefined;
    fc->col_offset[reg] = 0;
  }
       else
  {
    fc->col_type[reg] = cie->col_type[reg];
    fc->col_offset[reg] = cie->col_offset[reg];
  }
       break;

     case DW_CFA_undefined:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9747 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9747 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (reg >= fc->ncols)
  reg_prefix = bad_reg;
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  printf ("  DW_CFA_undefined: %s%s\n",
   reg_prefix, regname (reg, 0));
       if (*reg_prefix == '\0')
  {
    fc->col_type[reg] = DW_CFA_undefined;
    fc->col_offset[reg] = 0;
  }
       break;

     case DW_CFA_same_value:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9761 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9761 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (reg >= fc->ncols)
  reg_prefix = bad_reg;
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  printf ("  DW_CFA_same_value: %s%s\n",
   reg_prefix, regname (reg, 0));
       if (*reg_prefix == '\0')
  {
    fc->col_type[reg] = DW_CFA_same_value;
    fc->col_offset[reg] = 0;
  }
       break;

     case DW_CFA_register:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9775 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9775 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9776 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9776 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (ofs) = _val; if ((ofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (reg >= fc->ncols)
  reg_prefix = bad_reg;
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  {
    printf ("  DW_CFA_register: %s%s in ",
     reg_prefix, regname (reg, 0));
    puts (regname (ofs, 0));
  }
       if (*reg_prefix == '\0')
  {
    fc->col_type[reg] = DW_CFA_register;
    fc->col_offset[reg] = ofs;
  }
       break;

     case DW_CFA_remember_state:
       if (! do_debug_frames_interp)
  printf ("  DW_CFA_remember_state\n");
       rs = (Frame_Chunk *) xmalloc (sizeof (Frame_Chunk));
       rs->cfa_offset = fc->cfa_offset;
       rs->cfa_reg = fc->cfa_reg;
       rs->ra = fc->ra;
       rs->cfa_exp = fc->cfa_exp;
       rs->ncols = fc->ncols;
       rs->col_type = xcmalloc (rs->ncols, sizeof (*rs->col_type));
       rs->col_offset = xcmalloc (rs->ncols, sizeof (*rs->col_offset));
       memcpy (rs->col_type, fc->col_type,
        rs->ncols * sizeof (*fc->col_type));
       memcpy (rs->col_offset, fc->col_offset,
        rs->ncols * sizeof (*fc->col_offset));
       rs->next = remembered_state;
       remembered_state = rs;
       break;

     case DW_CFA_restore_state:
       if (! do_debug_frames_interp)
  printf ("  DW_CFA_restore_state\n");
       rs = remembered_state;
       if (rs)
  {
    remembered_state = rs->next;
    fc->cfa_offset = rs->cfa_offset;
    fc->cfa_reg = rs->cfa_reg;
    fc->ra = rs->ra;
    fc->cfa_exp = rs->cfa_exp;
    if (frame_need_space (fc, rs->ncols - 1) < 0)
      {
        warn (gettext ("Invalid column number in saved frame state\n"));
        fc->ncols = 0;
      }
    else
      {
        memcpy (fc->col_type, rs->col_type,
         rs->ncols * sizeof (*rs->col_type));
        memcpy (fc->col_offset, rs->col_offset,
         rs->ncols * sizeof (*rs->col_offset));
      }
    free (rs->col_type);
    free (rs->col_offset);
    free (rs);
  }
       else if (do_debug_frames_interp)
  printf ("Mismatched DW_CFA_restore_state\n");
       break;

     case DW_CFA_def_cfa:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9843 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9843 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (fc->cfa_reg) = _val; if ((fc->cfa_reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9844 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9844 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (fc->cfa_offset) = _val; if ((fc->cfa_offset) != _val) _status |= 2; report_leb_status (_status); } while (0);
       fc->cfa_exp = 0;
       if (! do_debug_frames_interp)
  printf ("  DW_CFA_def_cfa: %s ofs %d\n",
   regname (fc->cfa_reg, 0), (int) fc->cfa_offset);
       break;

     case DW_CFA_def_cfa_register:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9852 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (fc->cfa_reg) = _val; if ((fc->cfa_reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       fc->cfa_exp = 0;
       if (! do_debug_frames_interp)
  printf ("  DW_CFA_def_cfa_register: %s\n",
   regname (fc->cfa_reg, 0));
       break;

     case DW_CFA_def_cfa_offset:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9860 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9860 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (fc->cfa_offset) = _val; if ((fc->cfa_offset) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (! do_debug_frames_interp)
  printf ("  DW_CFA_def_cfa_offset: %d\n", (int) fc->cfa_offset);
       break;

     case DW_CFA_nop:
       if (! do_debug_frames_interp)
  printf ("  DW_CFA_nop\n");
       break;

     case DW_CFA_def_cfa_expression:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9871 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9871 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (ofs) = _val; if ((ofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (ofs > (size_t) (block_end - start))
  {
    printf (gettext ("  %s: <corrupt len %" 
# 9874 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "u" 
# 9874 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ">\n"),
     "DW_CFA_def_cfa_expression", ofs);
    break;
  }
       if (! do_debug_frames_interp)
  {
    printf ("  DW_CFA_def_cfa_expression (");
    decode_location_expression (start, eh_addr_size, 0, -1,
           ofs, 0, section);
    printf (")\n");
  }
       fc->cfa_exp = 1;
       start += ofs;
       break;

     case DW_CFA_expression:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9890 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9891 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9891 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (ofs) = _val; if ((ofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (reg >= fc->ncols)
  reg_prefix = bad_reg;


       if (ofs > (size_t) (block_end - start))
  {
    printf (gettext ("  %s: <corrupt len %" 
# 9898 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           "l" "u" 
# 9898 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
           ">\n"),
     "DW_CFA_expression", ofs);
    break;
  }
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  {
    printf ("  DW_CFA_expression: %s%s (",
     reg_prefix, regname (reg, 0));
    decode_location_expression (start, eh_addr_size, 0, -1,
           ofs, 0, section);
    printf (")\n");
  }
       if (*reg_prefix == '\0')
  fc->col_type[reg] = DW_CFA_expression;
       start += ofs;
       break;

     case DW_CFA_val_expression:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9916 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9917 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9917 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (ofs) = _val; if ((ofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (reg >= fc->ncols)
  reg_prefix = bad_reg;
       if (ofs > (size_t) (block_end - start))
  {
    printf ("  %s: <corrupt len %" 
# 9922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                  "l" "u" 
# 9922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         ">\n",
     "DW_CFA_val_expression", ofs);
    break;
  }
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  {
    printf ("  DW_CFA_val_expression: %s%s (",
     reg_prefix, regname (reg, 0));
    decode_location_expression (start, eh_addr_size, 0, -1,
           ofs, 0, section);
    printf (")\n");
  }
       if (*reg_prefix == '\0')
  fc->col_type[reg] = DW_CFA_val_expression;
       start += ofs;
       break;

     case DW_CFA_offset_extended_sf:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9940 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9941 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 9941 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (sofs) = _val; if ((sofs) != _val) _status |= 2; report_leb_status (_status); } while (0);



       ofs = sofs;
       ofs *= fc->data_factor;
       if (reg >= fc->ncols)
  reg_prefix = bad_reg;
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  printf ("  DW_CFA_offset_extended_sf: %s%s at cfa%+" 
# 9950 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                      "l" "d" 
# 9950 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                             "\n",
   reg_prefix, regname (reg, 0), ofs);
       if (*reg_prefix == '\0')
  {
    fc->col_type[reg] = DW_CFA_offset;
    fc->col_offset[reg] = ofs;
  }
       break;

     case DW_CFA_val_offset_sf:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9960 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9960 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9961 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 9961 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (sofs) = _val; if ((sofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       ofs = sofs;
       ofs *= fc->data_factor;
       if (reg >= fc->ncols)
  reg_prefix = bad_reg;
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  printf ("  DW_CFA_val_offset_sf: %s%s is cfa%+" 
# 9967 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                 "l" "d" 
# 9967 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        "\n",
   reg_prefix, regname (reg, 0), ofs);
       if (*reg_prefix == '\0')
  {
    fc->col_type[reg] = DW_CFA_val_offset;
    fc->col_offset[reg] = ofs;
  }
       break;

     case DW_CFA_def_cfa_sf:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9977 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 9977 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (fc->cfa_reg) = _val; if ((fc->cfa_reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9978 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 9978 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (sofs) = _val; if ((sofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       ofs = sofs;
       ofs *= fc->data_factor;
       fc->cfa_offset = ofs;
       fc->cfa_exp = 0;
       if (! do_debug_frames_interp)
  printf ("  DW_CFA_def_cfa_sf: %s ofs %" 
# 9984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                         "l" "d" 
# 9984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                "\n",
   regname (fc->cfa_reg, 0), ofs);
       break;

     case DW_CFA_def_cfa_offset_sf:
       do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 9989 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 9989 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (sofs) = _val; if ((sofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       ofs = sofs;
       ofs *= fc->data_factor;
       fc->cfa_offset = ofs;
       if (! do_debug_frames_interp)
  printf ("  DW_CFA_def_cfa_offset_sf: %" 
# 9994 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                         "l" "d" 
# 9994 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                "\n", ofs);
       break;

     case DW_CFA_MIPS_advance_loc8:
       do { size_t amount = (8); if (sizeof (ofs) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (ofs)); amount = sizeof (ofs); } if (1) 
# 9998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 9998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (block_end)
# 9998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 9998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (start) <= (block_end)
# 9998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 9998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(start) <= (block_end)"
# 9998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 9998, __extension__ __PRETTY_FUNCTION__); }))
# 9998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (block_end) - (start); if ((start) > (block_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (ofs) = 0; else (ofs) = (byte_get) ((start), amount); if (
# 9998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 9998 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (start) += amount; } while (0);
       ofs *= fc->code_factor;
       if (do_debug_frames_interp)
  frame_display_row (fc, &need_col_headers, &max_regs);
       else
  {
    printf ("  DW_CFA_MIPS_advance_loc8: %" 
# 10004 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           "l" "d" 
# 10004 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                  " to ", ofs);
    print_hex_ns (fc->pc_begin + ofs, fc->ptr_size);
    printf ("\n");
  }
       fc->pc_begin += ofs;
       break;

     case DW_CFA_GNU_window_save:
       if (! do_debug_frames_interp)
  printf ("  %s\n", DW_CFA_GNU_window_save_name[is_aarch64]);
       break;

     case DW_CFA_GNU_args_size:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 10017 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 10017 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (ofs) = _val; if ((ofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (! do_debug_frames_interp)
  printf ("  DW_CFA_GNU_args_size: %" 
# 10019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     "l" "u" 
# 10019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                            "\n", ofs);
       break;

     case DW_CFA_GNU_negative_offset_extended:
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 10023 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 10023 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (reg) = _val; if ((reg) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { int64_t _val; unsigned int _len; int _status; _val = read_leb128 (start, block_end, 
# 10024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      1
# 10024 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); start += _len; (sofs) = _val; if ((sofs) != _val) _status |= 2; report_leb_status (_status); } while (0);
       ofs = sofs;
       ofs = -ofs * fc->data_factor;
       if (reg >= fc->ncols)
  reg_prefix = bad_reg;
       if (! do_debug_frames_interp || *reg_prefix != '\0')
  printf ("  DW_CFA_GNU_negative_offset_extended: %s%s "
   "at cfa%+" 
# 10031 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             "l" "d" 
# 10031 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    "\n",
   reg_prefix, regname (reg, 0), ofs);
       if (*reg_prefix == '\0')
  {
    fc->col_type[reg] = DW_CFA_offset;
    fc->col_offset[reg] = ofs;
  }
       break;

     default:
       if (op >= DW_CFA_lo_user && op <= DW_CFA_hi_user)
  printf (gettext ("  DW_CFA_??? (User defined call frame op: %#x)\n"), op);
       else
  warn (gettext ("Unsupported or unknown Dwarf Call Frame Instruction number: %#x\n"), op);
       start = block_end;
     }
 }


      if (do_debug_frames_interp && ! all_nops)
 frame_display_row (fc, &need_col_headers, &max_regs);

      if (fde_fc.col_type != 
# 10053 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            ((void *)0)
# 10053 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                )
 {
   free (fde_fc.col_type);
   fde_fc.col_type = 
# 10056 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    ((void *)0)
# 10056 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ;
 }
      if (fde_fc.col_offset != 
# 10058 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              ((void *)0)
# 10058 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  )
 {
   free (fde_fc.col_offset);
   fde_fc.col_offset = 
# 10061 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                      ((void *)0)
# 10061 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          ;
 }

      start = block_end;
      eh_addr_size = saved_eh_addr_size;
    }

  printf ("\n");

  while (remembered_state != 
# 10070 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            ((void *)0)
# 10070 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                )
    {
      rs = remembered_state;
      remembered_state = rs->next;
      free (rs->col_type);
      free (rs->col_offset);
      rs->next = 
# 10076 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                ((void *)0)
# 10076 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    ;
      free (rs);
    }

  while (chunks != 
# 10080 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  ((void *)0)
# 10080 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                      )
    {
      rs = chunks;
      chunks = rs->next;
      free (rs->col_type);
      free (rs->col_offset);
      rs->next = 
# 10086 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                ((void *)0)
# 10086 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    ;
      free (rs);
    }

  while (forward_refs != 
# 10090 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                        ((void *)0)
# 10090 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            )
    {
      rs = forward_refs;
      forward_refs = rs->next;
      free (rs->col_type);
      free (rs->col_offset);
      rs->next = 
# 10096 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                ((void *)0)
# 10096 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    ;
      free (rs);
    }

  return 1;
}



static int
display_debug_names (struct dwarf_section *section, void *file)
{
  unsigned char *hdrptr = section->start;
  uint64_t unit_length;
  unsigned char *unit_start;
  const unsigned char *const section_end = section->start + section->size;
  unsigned char *unit_end;

  introduce (section, 
# 10114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 10114 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  load_debug_section_with_follow (str, file);

  for (; hdrptr < section_end; hdrptr = unit_end)
    {
      unsigned int offset_size;
      uint16_t dwarf_version, padding;
      uint32_t comp_unit_count, local_type_unit_count, foreign_type_unit_count;
      uint64_t bucket_count, name_count, abbrev_table_size;
      uint32_t augmentation_string_size;
      unsigned int i;
      
# 10126 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     _Bool 
# 10126 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          augmentation_printable;
      const char *augmentation_string;
      size_t total;

      unit_start = hdrptr;


      do { size_t amount = (4); if (sizeof (unit_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (unit_length)); amount = sizeof (unit_length); } if (1) 
# 10133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 10133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (section_end)
# 10133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 10133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (section_end)
# 10133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 10133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (section_end)"
# 10133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10133, __extension__ __PRETTY_FUNCTION__); }))
# 10133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (section_end) - (hdrptr); if ((hdrptr) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (unit_length) = 0; else (unit_length) = (byte_get) ((hdrptr), amount); if (
# 10133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 10133 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      if (unit_length == 0xffffffff)
 {

   do { size_t amount = (8); if (sizeof (unit_length) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (unit_length)); amount = sizeof (unit_length); } if (1) 
# 10138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 10138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (section_end)
# 10138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 10138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (section_end)
# 10138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 10138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (section_end)"
# 10138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10138, __extension__ __PRETTY_FUNCTION__); }))
# 10138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (section_end) - (hdrptr); if ((hdrptr) > (section_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (unit_length) = 0; else (unit_length) = (byte_get) ((hdrptr), amount); if (
# 10138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 10138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   offset_size = 8;
 }
      else
 offset_size = 4;

      if (unit_length > (size_t) (section_end - hdrptr)
   || unit_length < 2 + 2 + 4 * 7)
 {
 too_short:
   warn (gettext ("Debug info is corrupted, %s header at %#tx" " has length %#" 
# 10148 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 10148 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        "\n")
                                 ,
  section->name, unit_start - section->start, unit_length);
   return 0;
 }
      unit_end = hdrptr + unit_length;


      do { size_t amount = (2); if (sizeof (dwarf_version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (dwarf_version)); amount = sizeof (dwarf_version); } if (1) 
# 10156 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 10156 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10156 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 10156 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10156 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 10156 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (unit_end)"
# 10156 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10156, __extension__ __PRETTY_FUNCTION__); }))
# 10156 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (dwarf_version) = 0; else (dwarf_version) = (byte_get) ((hdrptr), amount); if (
# 10156 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 10156 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      printf (gettext ("Version %d\n"), (int) dwarf_version);



      if (dwarf_version != 5)
 {
   warn (gettext ("Only DWARF version 5 .debug_names " "is currently supported.\n")
                                );
   return 0;
 }

      do { size_t amount = (2); if (sizeof (padding) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (padding)); amount = sizeof (padding); } if (1) 
# 10168 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 10168 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10168 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 10168 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10168 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 10168 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (unit_end)"
# 10168 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10168, __extension__ __PRETTY_FUNCTION__); }))
# 10168 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (padding) = 0; else (padding) = (byte_get) ((hdrptr), amount); if (
# 10168 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 10168 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      if (padding != 0)
 warn (gettext ("Padding field of .debug_names must be 0 (found 0x%x)\n"),
       padding);

      do { size_t amount = (4); if (sizeof (comp_unit_count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (comp_unit_count)); amount = sizeof (comp_unit_count); } if (1) 
# 10173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 10173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 10173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 10173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (unit_end)"
# 10173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10173, __extension__ __PRETTY_FUNCTION__); }))
# 10173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (comp_unit_count) = 0; else (comp_unit_count) = (byte_get) ((hdrptr), amount); if (
# 10173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 10173 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      if (comp_unit_count == 0)
 warn (gettext ("Compilation unit count must be >= 1 in .debug_names\n"));

      do { size_t amount = (4); if (sizeof (local_type_unit_count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (local_type_unit_count)); amount = sizeof (local_type_unit_count); } if (1) 
# 10177 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 10177 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10177 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 10177 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10177 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 10177 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (unit_end)"
# 10177 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10177, __extension__ __PRETTY_FUNCTION__); }))
# 10177 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (local_type_unit_count) = 0; else (local_type_unit_count) = (byte_get) ((hdrptr), amount); if (
# 10177 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 10177 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      do { size_t amount = (4); if (sizeof (foreign_type_unit_count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (foreign_type_unit_count)); amount = sizeof (foreign_type_unit_count); } if (1) 
# 10178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 10178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 10178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 10178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (unit_end)"
# 10178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10178, __extension__ __PRETTY_FUNCTION__); }))
# 10178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (foreign_type_unit_count) = 0; else (foreign_type_unit_count) = (byte_get) ((hdrptr), amount); if (
# 10178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 10178 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      do { size_t amount = (4); if (sizeof (bucket_count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (bucket_count)); amount = sizeof (bucket_count); } if (1) 
# 10179 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 10179 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10179 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 10179 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10179 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 10179 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (unit_end)"
# 10179 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10179, __extension__ __PRETTY_FUNCTION__); }))
# 10179 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (bucket_count) = 0; else (bucket_count) = (byte_get) ((hdrptr), amount); if (
# 10179 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 10179 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      do { size_t amount = (4); if (sizeof (name_count) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (name_count)); amount = sizeof (name_count); } if (1) 
# 10180 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 10180 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10180 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 10180 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10180 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 10180 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (unit_end)"
# 10180 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10180, __extension__ __PRETTY_FUNCTION__); }))
# 10180 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (name_count) = 0; else (name_count) = (byte_get) ((hdrptr), amount); if (
# 10180 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 10180 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      do { size_t amount = (4); if (sizeof (abbrev_table_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (abbrev_table_size)); amount = sizeof (abbrev_table_size); } if (1) 
# 10181 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 10181 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10181 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 10181 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10181 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 10181 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (unit_end)"
# 10181 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10181, __extension__ __PRETTY_FUNCTION__); }))
# 10181 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (abbrev_table_size) = 0; else (abbrev_table_size) = (byte_get) ((hdrptr), amount); if (
# 10181 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 10181 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);

      do { size_t amount = (4); if (sizeof (augmentation_string_size) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (augmentation_string_size)); amount = sizeof (augmentation_string_size); } if (1) 
# 10183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 10183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 10183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (hdrptr) <= (unit_end)
# 10183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 10183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(hdrptr) <= (unit_end)"
# 10183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10183, __extension__ __PRETTY_FUNCTION__); }))
# 10183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (augmentation_string_size) = 0; else (augmentation_string_size) = (byte_get) ((hdrptr), amount); if (
# 10183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     1
# 10183 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (hdrptr) += amount; } while (0);
      if (augmentation_string_size % 4 != 0)
 {
   warn (gettext ("Augmentation string length %u must be rounded up " "to a multiple of 4 in .debug_names.\n")
                                            ,
  augmentation_string_size);
   augmentation_string_size += (-augmentation_string_size) & 3;
 }
      if (augmentation_string_size > (size_t) (unit_end - hdrptr))
 goto too_short;

      printf (gettext ("Augmentation string:"));

      augmentation_printable = 
# 10196 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                              1
# 10196 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  ;
      augmentation_string = (const char *) hdrptr;

      for (i = 0; i < augmentation_string_size; i++)
 {
   unsigned char uc;

   do { size_t amount = (1); if (sizeof (uc) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (uc)); amount = sizeof (uc); } if (1) 
# 10203 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 10203 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (unit_end)
# 10203 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 10203 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (unit_end)
# 10203 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 10203 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (unit_end)"
# 10203 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10203, __extension__ __PRETTY_FUNCTION__); }))
# 10203 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (uc) = 0; else (uc) = (byte_get) ((hdrptr), amount); if (
# 10203 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 10203 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   printf (" %02x", uc);

   if (uc != 0 && !(_sch_istable[(uc) & 0xff] & (unsigned short)(_sch_isprint)))
     augmentation_printable = 
# 10207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                             0
# 10207 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                  ;
 }

      if (augmentation_printable)
 {
   printf ("  (\"");
   for (i = 0;
        i < augmentation_string_size && augmentation_string[i];
        ++i)
     putchar (augmentation_string[i]);
   printf ("\")");
 }
      putchar ('\n');

      printf (gettext ("CU table:\n"));
      if (__builtin_mul_overflow (comp_unit_count, offset_size, &total)
   || total > (size_t) (unit_end - hdrptr))
 goto too_short;
      for (i = 0; i < comp_unit_count; i++)
 {
   uint64_t cu_offset;

   do { size_t amount = (offset_size); if (sizeof (cu_offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (cu_offset)); amount = sizeof (cu_offset); } if (1) 
# 10229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 10229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (unit_end)
# 10229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 10229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (unit_end)
# 10229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 10229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (unit_end)"
# 10229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10229, __extension__ __PRETTY_FUNCTION__); }))
# 10229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (cu_offset) = 0; else (cu_offset) = (byte_get) ((hdrptr), amount); if (
# 10229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 10229 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   printf ("[%3u] %#" 
# 10230 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     "l" "x" 
# 10230 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            "\n", i, cu_offset);
 }
      putchar ('\n');

      printf (gettext ("TU table:\n"));
      if (__builtin_mul_overflow (local_type_unit_count, offset_size, &total)
   || total > (size_t) (unit_end - hdrptr))
 goto too_short;
      for (i = 0; i < local_type_unit_count; i++)
 {
   uint64_t tu_offset;

   do { size_t amount = (offset_size); if (sizeof (tu_offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (tu_offset)); amount = sizeof (tu_offset); } if (1) 
# 10242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 10242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (unit_end)
# 10242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 10242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (unit_end)
# 10242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 10242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (unit_end)"
# 10242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10242, __extension__ __PRETTY_FUNCTION__); }))
# 10242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (tu_offset) = 0; else (tu_offset) = (byte_get) ((hdrptr), amount); if (
# 10242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 10242 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   printf ("[%3u] %#" 
# 10243 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     "l" "x" 
# 10243 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            "\n", i, tu_offset);
 }
      putchar ('\n');

      printf (gettext ("Foreign TU table:\n"));
      if (__builtin_mul_overflow (foreign_type_unit_count, 8, &total)
   || total > (size_t) (unit_end - hdrptr))
 goto too_short;
      for (i = 0; i < foreign_type_unit_count; i++)
 {
   uint64_t signature;

   do { size_t amount = (8); if (sizeof (signature) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (signature)); amount = sizeof (signature); } if (1) 
# 10255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 10255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (unit_end)
# 10255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 10255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (hdrptr) <= (unit_end)
# 10255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 10255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(hdrptr) <= (unit_end)"
# 10255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10255, __extension__ __PRETTY_FUNCTION__); }))
# 10255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (unit_end) - (hdrptr); if ((hdrptr) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (signature) = 0; else (signature) = (byte_get) ((hdrptr), amount); if (
# 10255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  1
# 10255 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (hdrptr) += amount; } while (0);
   printf (gettext ("[%3u] "), i);
   print_hex_ns (signature, 8);
   putchar ('\n');
 }
      putchar ('\n');

      uint64_t xtra = (bucket_count * sizeof (uint32_t)
         + name_count * (sizeof (uint32_t) + 2 * offset_size)
         + abbrev_table_size);
      if (xtra > (size_t) (unit_end - hdrptr))
 {
   warn (gettext ("Entry pool offset (%#" 
# 10267 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 10267 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        ") exceeds unit size %#tx " "for unit %#tx in the debug_names\n")
                                         ,
  xtra, unit_end - unit_start, unit_start - section->start);
   return 0;
 }
      const uint32_t *const hash_table_buckets = (uint32_t *) hdrptr;
      hdrptr += bucket_count * sizeof (uint32_t);
      const uint32_t *const hash_table_hashes = (uint32_t *) hdrptr;
      hdrptr += name_count * sizeof (uint32_t);
      unsigned char *const name_table_string_offsets = hdrptr;
      hdrptr += name_count * offset_size;
      unsigned char *const name_table_entry_offsets = hdrptr;
      hdrptr += name_count * offset_size;
      unsigned char *const abbrev_table = hdrptr;
      hdrptr += abbrev_table_size;
      const unsigned char *const abbrev_table_end = hdrptr;
      unsigned char *const entry_pool = hdrptr;

      size_t buckets_filled = 0;
      size_t bucketi;
      for (bucketi = 0; bucketi < bucket_count; bucketi++)
 {
   const uint32_t bucket = hash_table_buckets[bucketi];

   if (bucket != 0)
     ++buckets_filled;
 }
      printf (ngettext ("Used %zu of %lu bucket.\n",
   "Used %zu of %lu buckets.\n",
   (unsigned long) bucket_count),
       buckets_filled, (unsigned long) bucket_count);

      if (bucket_count != 0)
 {
   uint32_t hash_prev = 0;
   size_t hash_clash_count = 0;
   size_t longest_clash = 0;
   size_t this_length = 0;
   size_t hashi;
   for (hashi = 0; hashi < name_count; hashi++)
     {
       const uint32_t hash_this = hash_table_hashes[hashi];

       if (hashi > 0)
  {
    if (hash_prev % bucket_count == hash_this % bucket_count)
      {
        ++hash_clash_count;
        ++this_length;
        longest_clash = ((longest_clash) > (this_length) ? (longest_clash) : (this_length));
      }
    else
      this_length = 0;
  }
       hash_prev = hash_this;
     }
   printf (gettext ("Out of %" 
# 10323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "u" 
# 10323 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          " items there are %zu bucket clashes" " (longest of %zu entries).\n")
                                     ,
    name_count, hash_clash_count, longest_clash);

   if (name_count != buckets_filled + hash_clash_count)
     warn (gettext ("The name_count (%" 
# 10328 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          "l" "u" 
# 10328 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          ")" " is not the same as the used bucket_count" " (%zu) + the hash clash count (%zu)")

                                            ,
    name_count, buckets_filled, hash_clash_count);
 }

      struct abbrev_lookup_entry
      {
 uint64_t abbrev_tag;
 unsigned char *abbrev_lookup_ptr;
      };
      struct abbrev_lookup_entry *abbrev_lookup = 
# 10339 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                 ((void *)0)
# 10339 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                     ;
      size_t abbrev_lookup_used = 0;
      size_t abbrev_lookup_allocated = 0;

      unsigned char *abbrevptr = abbrev_table;
      for (;;)
 {
   uint64_t abbrev_tag;

   do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (abbrevptr, abbrev_table_end, 
# 10348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 10348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, &_status); abbrevptr += _len; (abbrev_tag) = _val; if ((abbrev_tag) != _val) _status |= 2; report_leb_status (_status); } while (0);
   if (abbrev_tag == 0)
     break;
   if (abbrev_lookup_used == abbrev_lookup_allocated)
     {
       abbrev_lookup_allocated = ((0x100) > (abbrev_lookup_allocated * 2) ? (0x100) : (abbrev_lookup_allocated * 2))
                                      ;
       abbrev_lookup = xrealloc (abbrev_lookup,
     (abbrev_lookup_allocated
      * sizeof (*abbrev_lookup)));
     }
   
# 10359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 10359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  abbrev_lookup_used < abbrev_lookup_allocated
# 10359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 10359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  abbrev_lookup_used < abbrev_lookup_allocated
# 10359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 10359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "abbrev_lookup_used < abbrev_lookup_allocated"
# 10359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10359, __extension__ __PRETTY_FUNCTION__); }))
# 10359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                       ;
   struct abbrev_lookup_entry *entry;
   for (entry = abbrev_lookup;
        entry < abbrev_lookup + abbrev_lookup_used;
        entry++)
     if (entry->abbrev_tag == abbrev_tag)
       {
  warn (gettext ("Duplicate abbreviation tag %" 
# 10366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       "l" "u" 
# 10366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       " in unit %#tx in the debug_names section\n")
                                                ,
        abbrev_tag, unit_start - section->start);
  break;
       }
   entry = &abbrev_lookup[abbrev_lookup_used++];
   entry->abbrev_tag = abbrev_tag;
   entry->abbrev_lookup_ptr = abbrevptr;


   do { unsigned int _len; read_leb128 (abbrevptr, abbrev_table_end, 
# 10376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 10376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  , &_len, 
# 10376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void *)0)
# 10376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ); abbrevptr += _len; } while (0);
   for (;;)
     {
       uint64_t xindex, form;

       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (abbrevptr, abbrev_table_end, 
# 10381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 10381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); abbrevptr += _len; (xindex) = _val; if ((xindex) != _val) _status |= 2; report_leb_status (_status); } while (0);
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (abbrevptr, abbrev_table_end, 
# 10382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 10382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); abbrevptr += _len; (form) = _val; if ((form) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (xindex == 0 && form == 0)
  break;
     }
 }

      printf (gettext ("\nSymbol table:\n"));
      uint32_t namei;
      for (namei = 0; namei < name_count; ++namei)
 {
   uint64_t string_offset, entry_offset;
   unsigned char *p;

   p = name_table_string_offsets + namei * offset_size;
   do { size_t amount = (offset_size); if (sizeof (string_offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (string_offset)); amount = sizeof (string_offset); } if (1) 
# 10396 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 10396 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (p) <= (unit_end)
# 10396 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 10396 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (p) <= (unit_end)
# 10396 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 10396 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(p) <= (unit_end)"
# 10396 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10396, __extension__ __PRETTY_FUNCTION__); }))
# 10396 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (unit_end) - (p); if ((p) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (string_offset) = 0; else (string_offset) = (byte_get) ((p), amount); if (
# 10396 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 10396 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (p) += amount; } while (0);
   p = name_table_entry_offsets + namei * offset_size;
   do { size_t amount = (offset_size); if (sizeof (entry_offset) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (entry_offset)); amount = sizeof (entry_offset); } if (1) 
# 10398 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 10398 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (p) <= (unit_end)
# 10398 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 10398 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (p) <= (unit_end)
# 10398 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 10398 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(p) <= (unit_end)"
# 10398 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10398, __extension__ __PRETTY_FUNCTION__); }))
# 10398 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (unit_end) - (p); if ((p) > (unit_end)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (entry_offset) = 0; else (entry_offset) = (byte_get) ((p), amount); if (
# 10398 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 10398 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (p) += amount; } while (0);

   printf ("[%3u] #%08x %s:", namei, hash_table_hashes[namei],
    fetch_indirect_string (string_offset));

   unsigned char *entryptr = entry_pool + entry_offset;





   int tagno = -2;

   uint64_t second_abbrev_tag = -1;
   for (;;)
     {
       uint64_t abbrev_tag;
       uint64_t dwarf_tag;
       const struct abbrev_lookup_entry *entry;

       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (entryptr, unit_end, 
# 10418 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 10418 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); entryptr += _len; (abbrev_tag) = _val; if ((abbrev_tag) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (tagno == -1)
  {
    second_abbrev_tag = abbrev_tag;
    tagno = 0;
    entryptr = entry_pool + entry_offset;
    continue;
  }
       if (abbrev_tag == 0)
  break;
       if (tagno >= 0)
  printf ("%s<%" 
# 10429 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                "l" "u" 
# 10429 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       ">",
   (tagno == 0 && second_abbrev_tag == 0 ? " " : "\n\t"),
   abbrev_tag);

       for (entry = abbrev_lookup;
     entry < abbrev_lookup + abbrev_lookup_used;
     entry++)
  if (entry->abbrev_tag == abbrev_tag)
    break;
       if (entry >= abbrev_lookup + abbrev_lookup_used)
  {
    warn (gettext ("Undefined abbreviation tag %" 
# 10440 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         "l" "d" 
# 10440 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
         " in unit %#tx in the debug_names section\n")
                                                  ,
   abbrev_tag,
   unit_start - section->start);
    break;
  }
       abbrevptr = entry->abbrev_lookup_ptr;
       do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (abbrevptr, abbrev_table_end, 
# 10447 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 10447 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      , &_len, &_status); abbrevptr += _len; (dwarf_tag) = _val; if ((dwarf_tag) != _val) _status |= 2; report_leb_status (_status); } while (0);
       if (tagno >= 0)
  printf (" %s", get_TAG_name (dwarf_tag));
       for (;;)
  {
    uint64_t xindex, form;

    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (abbrevptr, abbrev_table_end, 
# 10454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 10454 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); abbrevptr += _len; (xindex) = _val; if ((xindex) != _val) _status |= 2; report_leb_status (_status); } while (0);
    do { uint64_t _val; unsigned int _len; int _status; _val = read_leb128 (abbrevptr, abbrev_table_end, 
# 10455 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 10455 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   , &_len, &_status); abbrevptr += _len; (form) = _val; if ((form) != _val) _status |= 2; report_leb_status (_status); } while (0);
    if (xindex == 0 && form == 0)
      break;

    if (tagno >= 0)
      printf (" %s", get_IDX_name (xindex));
    entryptr = read_and_display_attr_value (0, form, 0,
         unit_start, entryptr, unit_end,
         0, 0, offset_size,
         dwarf_version, 
# 10464 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 10464 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           ,
         (tagno < 0), section,
         
# 10466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 10466 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            , '=', -1);
  }
       ++tagno;
     }
   if (tagno <= 0)
     printf (gettext (" <no entries>"));
   putchar ('\n');
 }

      free (abbrev_lookup);
    }

  return 1;
}

static int
display_debug_links (struct dwarf_section * section,
       void * file __attribute__ ((__unused__)))
{
  const unsigned char * filename;
  unsigned int filelen;

  introduce (section, 
# 10488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 10488 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );
# 10499 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  filename = section->start;
  filelen = strnlen ((const char *) filename, section->size);
  if (filelen == section->size)
    {
      warn (gettext ("The debuglink filename is corrupt/missing\n"));
      return 0;
    }

  printf (gettext ("  Separate debug info file: %s\n"), filename);

  if (startswith (section->name, ".gnu_debuglink"))
    {
      unsigned int crc32;
      unsigned int crc_offset;

      crc_offset = filelen + 1;
      crc_offset = (crc_offset + 3) & ~3;
      if (crc_offset + 4 > section->size)
 {
   warn (gettext ("CRC offset missing/truncated\n"));
   return 0;
 }

      crc32 = byte_get (filename + crc_offset, 4);

      printf (gettext ("  CRC value: %#x\n"), crc32);

      if (crc_offset + 4 < section->size)
 {
   warn (gettext ("There are %#" 
# 10528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        "l" "x" 
# 10528 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        " extraneous bytes at the end of the section\n")
                                                    ,
  section->size - (crc_offset + 4));
   return 0;
 }
    }
  else
    {
      const unsigned char *build_id = section->start + filelen + 1;
      size_t build_id_len = section->size - (filelen + 1);
      size_t printed;


      if (build_id_len < 0x14)
 {
   warn (gettext ("Build-ID is too short (%#zx bytes)\n"), build_id_len);
   return 0;
 }

      printed = printf (gettext ("  Build-ID (%#zx bytes):"), build_id_len);
      display_data (printed, build_id, build_id_len);
      putchar ('\n');
    }

  putchar ('\n');
  return 1;
}

static int
display_gdb_index (struct dwarf_section *section,
     void *file __attribute__ ((__unused__)))
{
  unsigned char *start = section->start;
  uint32_t version;
  uint32_t cu_list_offset, tu_list_offset;
  uint32_t address_table_offset, symbol_table_offset, constant_pool_offset;
  unsigned int cu_list_elements, tu_list_elements;
  unsigned int address_table_elements, symbol_table_slots;
  unsigned char *cu_list, *tu_list;
  unsigned char *address_table, *symbol_table, *constant_pool;
  unsigned int i;



  introduce (section, 
# 10572 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     0
# 10572 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                          );

  if (section->size < 6 * sizeof (uint32_t))
    {
      warn (gettext ("Truncated header in the %s section.\n"), section->name);
      return 0;
    }

  version = byte_get_little_endian (start, 4);
  printf (gettext ("Version %lu\n"), (unsigned long) version);



  if (version < 3 || version > 8)
    {
      warn (gettext ("Unsupported version %lu.\n"), (unsigned long) version);
      return 0;
    }
  if (version < 4)
    warn (gettext ("The address table data in version 3 may be wrong.\n"));
  if (version < 5)
    warn (gettext ("Version 4 does not support case insensitive lookups.\n"));
  if (version < 6)
    warn (gettext ("Version 5 does not include inlined functions.\n"));
  if (version < 7)
      warn (gettext ("Version 6 does not include symbol attributes.\n"));





  cu_list_offset = byte_get_little_endian (start + 4, 4);
  tu_list_offset = byte_get_little_endian (start + 8, 4);
  address_table_offset = byte_get_little_endian (start + 12, 4);
  symbol_table_offset = byte_get_little_endian (start + 16, 4);
  constant_pool_offset = byte_get_little_endian (start + 20, 4);

  if (cu_list_offset > section->size
      || tu_list_offset > section->size
      || address_table_offset > section->size
      || symbol_table_offset > section->size
      || constant_pool_offset > section->size
      || tu_list_offset < cu_list_offset
      || address_table_offset < tu_list_offset
      || symbol_table_offset < address_table_offset
      || constant_pool_offset < symbol_table_offset)
    {
      warn (gettext ("Corrupt header in the %s section.\n"), section->name);
      return 0;
    }

  cu_list_elements = (tu_list_offset - cu_list_offset) / 16;
  tu_list_elements = (address_table_offset - tu_list_offset) / 24;
  address_table_elements = (symbol_table_offset - address_table_offset) / 20;
  symbol_table_slots = (constant_pool_offset - symbol_table_offset) / 8;

  cu_list = start + cu_list_offset;
  tu_list = start + tu_list_offset;
  address_table = start + address_table_offset;
  symbol_table = start + symbol_table_offset;
  constant_pool = start + constant_pool_offset;

  printf (gettext ("\nCU table:\n"));
  for (i = 0; i < cu_list_elements; i++)
    {
      uint64_t cu_offset = byte_get_little_endian (cu_list + i * 16, 8);
      uint64_t cu_length = byte_get_little_endian (cu_list + i * 16 + 8, 8);

      printf ("[%3u] %#" 
# 10640 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                        "l" "x" 
# 10640 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               " - %#" 
# 10640 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                       "l" "x" 
# 10640 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                              "\n",
       i, cu_offset, cu_offset + cu_length - 1);
    }

  printf (gettext ("\nTU table:\n"));
  for (i = 0; i < tu_list_elements; i++)
    {
      uint64_t tu_offset = byte_get_little_endian (tu_list + i * 24, 8);
      uint64_t type_offset = byte_get_little_endian (tu_list + i * 24 + 8, 8);
      uint64_t signature = byte_get_little_endian (tu_list + i * 24 + 16, 8);

      printf ("[%3u] %#" 
# 10651 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                        "l" "x" 
# 10651 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                               " %#" 
# 10651 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                     "l" "x" 
# 10651 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                            " ",
       i, tu_offset, type_offset);
      print_hex_ns (signature, 8);
      printf ("\n");
    }

  printf (gettext ("\nAddress table:\n"));
  for (i = 0; i < address_table_elements; i++)
    {
      uint64_t low = byte_get_little_endian (address_table + i * 20, 8);
      uint64_t high = byte_get_little_endian (address_table + i * 20 + 8, 8);
      uint32_t cu_index = byte_get_little_endian (address_table + i * 20 + 16, 4);

      print_hex (low, 8);
      print_hex (high, 8);
      printf ("%" 
# 10666 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 "u" 
# 10666 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        "\n", cu_index);
    }

  printf (gettext ("\nSymbol table:\n"));
  for (i = 0; i < symbol_table_slots; ++i)
    {
      uint32_t name_offset = byte_get_little_endian (symbol_table + i * 8, 4);
      uint32_t cu_vector_offset = byte_get_little_endian (symbol_table + i * 8 + 4, 4);
      uint32_t num_cus, cu;

      if (name_offset != 0
   || cu_vector_offset != 0)
 {
   unsigned int j;


   if (name_offset >= section->size - constant_pool_offset)
     {
       printf (gettext ("[%3u] <corrupt offset: %x>"), i, name_offset);
       warn (gettext ("Corrupt name offset of 0x%x found for symbol table slot %d\n"),
      name_offset, i);
     }
   else
     printf ("[%3u] %.*s:", i,
      (int) (section->size - (constant_pool_offset + name_offset)),
      constant_pool + name_offset);

   if (section->size - constant_pool_offset < 4
       || cu_vector_offset > section->size - constant_pool_offset - 4)
     {
       printf (gettext ("<invalid CU vector offset: %x>\n"), cu_vector_offset);
       warn (gettext ("Corrupt CU vector offset of 0x%x found for symbol table slot %d\n"),
      cu_vector_offset, i);
       continue;
     }

   num_cus = byte_get_little_endian (constant_pool + cu_vector_offset, 4);

   if ((uint64_t) num_cus * 4 > section->size - (constant_pool_offset
       + cu_vector_offset + 4))
     {
       printf ("<invalid number of CUs: %d>\n", num_cus);
       warn (gettext ("Invalid number of CUs (0x%x) for symbol table slot %d\n"),
      num_cus, i);
       continue;
     }

   if (num_cus > 1)
     printf ("\n");

   for (j = 0; j < num_cus; ++j)
     {
       int is_static;
       gdb_index_symbol_kind kind;

       cu = byte_get_little_endian (constant_pool + cu_vector_offset + 4 + j * 4, 4);
       is_static = (((cu) >> 31) & 1);
       kind = ((gdb_index_symbol_kind) (((cu) >> 28) & 7));
       cu = ((cu) & ((1 << 24) - 1));

       if (cu >= cu_list_elements)
  printf ("%cT%lu", num_cus > 1 ? '\t' : ' ',
   (unsigned long) cu - cu_list_elements);
       else
  printf ("%c%lu", num_cus > 1 ? '\t' : ' ', (unsigned long) cu);

       printf (" [%s, %s]",
        is_static ? gettext ("static") : gettext ("global"),
        get_gdb_index_symbol_kind_name (kind));
       if (num_cus > 1)
  printf ("\n");
     }
   if (num_cus <= 1)
     printf ("\n");
 }
    }

  return 1;
}



static void
prealloc_cu_tu_list (unsigned int nshndx)
{
  if (nshndx == 0)

    nshndx = 1;

  if (shndx_pool == 
# 10755 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 10755 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       )
    {
      shndx_pool_size = nshndx;
      shndx_pool_used = 0;
      shndx_pool = (unsigned int *) xcmalloc (shndx_pool_size,
           sizeof (unsigned int));
    }
  else
    {
      shndx_pool_size = shndx_pool_used + nshndx;
      shndx_pool = (unsigned int *) xcrealloc (shndx_pool, shndx_pool_size,
            sizeof (unsigned int));
    }
}

static void
add_shndx_to_cu_tu_entry (unsigned int shndx)
{
  shndx_pool [shndx_pool_used++] = shndx;
}

static void
end_cu_tu_entry (void)
{
  shndx_pool [shndx_pool_used++] = 0;
}



static const char *
get_DW_SECT_short_name (unsigned int dw_sect)
{
  static char buf[16];

  switch (dw_sect)
    {
      case DW_SECT_INFO:
 return "info";
      case DW_SECT_TYPES:
 return "types";
      case DW_SECT_ABBREV:
 return "abbrev";
      case DW_SECT_LINE:
 return "line";
      case DW_SECT_LOC:
 return "loc";
      case DW_SECT_STR_OFFSETS:
 return "str_off";
      case DW_SECT_MACINFO:
 return "macinfo";
      case DW_SECT_MACRO:
 return "macro";
      default:
 break;
    }

  snprintf (buf, sizeof (buf), "%d", dw_sect);
  return buf;
}





static 
# 10819 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool

# 10820 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
process_cu_tu_index (struct dwarf_section *section, int do_display)
{
  unsigned char *phdr = section->start;
  unsigned char *limit = phdr + section->size;
  unsigned char *phash;
  unsigned char *pindex;
  unsigned char *ppool;
  unsigned int version;
  unsigned int ncols = 0;
  unsigned int nused;
  unsigned int nslots;
  unsigned int i;
  unsigned int j;
  uint64_t signature;
  size_t total;


  if (phdr == 
# 10837 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 10837 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 )
    {
      warn (gettext ("Section %s is empty\n"), section->name);
      return 
# 10840 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            0
# 10840 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ;
    }

  if (section->size < 24)
    {
      warn (gettext ("Section %s is too small to contain a CU/TU header\n"),
     section->name);
      return 
# 10847 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            0
# 10847 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ;
    }

  phash = phdr;
  do { size_t amount = (4); if (sizeof (version) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (version)); amount = sizeof (version); } if (1) 
# 10851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 10851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (phash) <= (limit)
# 10851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 10851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (phash) <= (limit)
# 10851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 10851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(phash) <= (limit)"
# 10851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10851, __extension__ __PRETTY_FUNCTION__); }))
# 10851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (limit) - (phash); if ((phash) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (version) = 0; else (version) = (byte_get) ((phash), amount); if (
# 10851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 10851 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (phash) += amount; } while (0);
  if (version >= 2)
    do { size_t amount = (4); if (sizeof (ncols) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (ncols)); amount = sizeof (ncols); } if (1) 
# 10853 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void) sizeof ((
# 10853 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   (phash) <= (limit)
# 10853 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ) ? 1 : 0), __extension__ ({ if (
# 10853 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   (phash) <= (limit)
# 10853 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ) ; else __assert_fail (
# 10853 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   "(phash) <= (limit)"
# 10853 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10853, __extension__ __PRETTY_FUNCTION__); }))
# 10853 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ; size_t avail = (limit) - (phash); if ((phash) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (ncols) = 0; else (ncols) = (byte_get) ((phash), amount); if (
# 10853 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   1
# 10853 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ) (phash) += amount; } while (0);
  do { size_t amount = (4); if (sizeof (nused) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (nused)); amount = sizeof (nused); } if (1) 
# 10854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 10854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (phash) <= (limit)
# 10854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 10854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (phash) <= (limit)
# 10854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 10854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(phash) <= (limit)"
# 10854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10854, __extension__ __PRETTY_FUNCTION__); }))
# 10854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (limit) - (phash); if ((phash) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (nused) = 0; else (nused) = (byte_get) ((phash), amount); if (
# 10854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 10854 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (phash) += amount; } while (0);
  do { size_t amount = (4); if (sizeof (nslots) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (nslots)); amount = sizeof (nslots); } if (1) 
# 10855 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 10855 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (phash) <= (limit)
# 10855 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 10855 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (phash) <= (limit)
# 10855 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 10855 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(phash) <= (limit)"
# 10855 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10855, __extension__ __PRETTY_FUNCTION__); }))
# 10855 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (limit) - (phash); if ((phash) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (nslots) = 0; else (nslots) = (byte_get) ((phash), amount); if (
# 10855 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 1
# 10855 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (phash) += amount; } while (0);

  pindex = phash + (size_t) nslots * 8;
  ppool = pindex + (size_t) nslots * 4;

  if (do_display)
    {
      introduce (section, 
# 10862 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         0
# 10862 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                              );

      printf (gettext ("  Version:                 %u\n"), version);
      if (version >= 2)
 printf (gettext ("  Number of columns:       %u\n"), ncols);
      printf (gettext ("  Number of used entries:  %u\n"), nused);
      printf (gettext ("  Number of slots:         %u\n\n"), nslots);
    }


  if (__builtin_mul_overflow ((size_t) nslots, 12, &total)
      || total > (size_t) (limit - phash))
    {
      warn (ngettext ("Section %s is too small for %u slot\n",
        "Section %s is too small for %u slots\n",
        nslots),
     section->name, nslots);
      return 
# 10879 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            0
# 10879 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ;
    }

  if (version == 1)
    {
      unsigned char *shndx_list;
      unsigned int shndx;

      if (!do_display)
 {
   prealloc_cu_tu_list ((limit - ppool) / 4);
   for (shndx_list = ppool + 4; shndx_list <= limit - 4; shndx_list += 4)
     {
       shndx = byte_get (shndx_list, 4);
       add_shndx_to_cu_tu_entry (shndx);
     }
   end_cu_tu_entry ();
 }
      else
 for (i = 0; i < nslots; i++)
   {
     do { size_t amount = (8); if (sizeof (signature) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (signature)); amount = sizeof (signature); } if (1) 
# 10900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    ((void) sizeof ((
# 10900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    (phash) <= (limit)
# 10900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    ) ? 1 : 0), __extension__ ({ if (
# 10900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    (phash) <= (limit)
# 10900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    ) ; else __assert_fail (
# 10900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    "(phash) <= (limit)"
# 10900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10900, __extension__ __PRETTY_FUNCTION__); }))
# 10900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    ; size_t avail = (limit) - (phash); if ((phash) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (signature) = 0; else (signature) = (byte_get) ((phash), amount); if (
# 10900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
    0
# 10900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    ) (phash) += amount; } while (0);
     if (signature != 0)
       {
  do { size_t amount = (4); if (sizeof (j) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (j)); amount = sizeof (j); } if (1) 
# 10903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 10903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (pindex) <= (limit)
# 10903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ? 1 : 0), __extension__ ({ if (
# 10903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 (pindex) <= (limit)
# 10903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ) ; else __assert_fail (
# 10903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "(pindex) <= (limit)"
# 10903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10903, __extension__ __PRETTY_FUNCTION__); }))
# 10903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ; size_t avail = (limit) - (pindex); if ((pindex) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (j) = 0; else (j) = (byte_get) ((pindex), amount); if (
# 10903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 0
# 10903 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 ) (pindex) += amount; } while (0);
  shndx_list = ppool + j * 4;

  if (shndx_list < ppool)
    {
      warn (gettext ("Section index pool located before start of section\n"));
      return 
# 10909 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            0
# 10909 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ;
    }

  printf (gettext ("  [%3d] Signature:  %#" 
# 10912 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         "l" "x" 
# 10912 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
         "  Sections: "),
   i, signature);
  for (;;)
    {
      if (shndx_list >= limit)
        {
   warn (gettext ("Section %s too small for shndx pool\n"),
         section->name);
   return 
# 10920 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         0
# 10920 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
        }
      do { size_t amount = (4); if (sizeof (shndx) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (shndx)); amount = sizeof (shndx); } if (1) 
# 10922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ((void) sizeof ((
# 10922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (shndx_list) <= (limit)
# 10922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ? 1 : 0), __extension__ ({ if (
# 10922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     (shndx_list) <= (limit)
# 10922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     ) ; else __assert_fail (
# 10922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     "(shndx_list) <= (limit)"
# 10922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10922, __extension__ __PRETTY_FUNCTION__); }))
# 10922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ; size_t avail = (limit) - (shndx_list); if ((shndx_list) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (shndx) = 0; else (shndx) = (byte_get) ((shndx_list), amount); if (
# 10922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     0
# 10922 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
     ) (shndx_list) += amount; } while (0);
      if (shndx == 0)
        break;
      printf (" %d", shndx);
      shndx_list += 4;
    }
  printf ("\n");
       }
     phash += 8;
     pindex += 4;
   }
    }
  else if (version == 2)
    {
      unsigned int val;
      unsigned int dw_sect;
      unsigned char *ph = phash;
      unsigned char *pi = pindex;
      unsigned char *poffsets = ppool + (size_t) ncols * 4;
      unsigned char *psizes = poffsets + (size_t) nused * ncols * 4;
      
# 10942 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
     _Bool 
# 10942 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          is_tu_index;
      struct cu_tu_set *this_set = 
# 10943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                  ((void *)0)
# 10943 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      ;
      unsigned int row;
      unsigned char *prow;
      size_t temp;

      is_tu_index = strcmp (section->name, ".debug_tu_index") == 0;




      if (nused == -1u
   || __builtin_mul_overflow ((size_t) ncols, 4, &temp)
   || __builtin_mul_overflow ((size_t) nused + 1, temp, &total)
   || total > (size_t) (limit - ppool)

   || __builtin_mul_overflow ((size_t) nused + 1, 4, &total)
   || total > (size_t) (limit - ppool))
 {
   warn (gettext ("Section %s too small for offset and size tables\n"),
  section->name);
   return 
# 10963 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         0
# 10963 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
 }

      if (do_display)
 {
   printf (gettext ("  Offset table\n"));
   printf ("  slot  %-16s  ",
   is_tu_index ? gettext ("signature") : gettext ("dwo_id"));
 }
      else
 {
   if (is_tu_index)
     {
       tu_count = nused;
       tu_sets = xcalloc2 (nused, sizeof (struct cu_tu_set));
       this_set = tu_sets;
     }
   else
     {
       cu_count = nused;
       cu_sets = xcalloc2 (nused, sizeof (struct cu_tu_set));
       this_set = cu_sets;
     }
 }

      if (do_display)
 {
   for (j = 0; j < ncols; j++)
     {
       unsigned char *p = ppool + j * 4;
       do { size_t amount = (4); if (sizeof (dw_sect) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (dw_sect)); amount = sizeof (dw_sect); } if (1) 
# 10993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void) sizeof ((
# 10993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (p) <= (limit)
# 10993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ? 1 : 0), __extension__ ({ if (
# 10993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      (p) <= (limit)
# 10993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ) ; else __assert_fail (
# 10993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      "(p) <= (limit)"
# 10993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 10993, __extension__ __PRETTY_FUNCTION__); }))
# 10993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ; size_t avail = (limit) - (p); if ((p) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (dw_sect) = 0; else (dw_sect) = (byte_get) ((p), amount); if (
# 10993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      0
# 10993 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
      ) (p) += amount; } while (0);
       printf (" %8s", get_DW_SECT_short_name (dw_sect));
     }
   printf ("\n");
 }

      for (i = 0; i < nslots; i++)
 {
   do { size_t amount = (8); if (sizeof (signature) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (signature)); amount = sizeof (signature); } if (1) 
# 11001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 11001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (ph) <= (limit)
# 11001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 11001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (ph) <= (limit)
# 11001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 11001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(ph) <= (limit)"
# 11001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 11001, __extension__ __PRETTY_FUNCTION__); }))
# 11001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (limit) - (ph); if ((ph) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (signature) = 0; else (signature) = (byte_get) ((ph), amount); if (
# 11001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 11001 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (ph) += amount; } while (0);

   do { size_t amount = (4); if (sizeof (row) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (row)); amount = sizeof (row); } if (1) 
# 11003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 11003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (pi) <= (limit)
# 11003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 11003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (pi) <= (limit)
# 11003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 11003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(pi) <= (limit)"
# 11003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 11003, __extension__ __PRETTY_FUNCTION__); }))
# 11003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (limit) - (pi); if ((pi) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (row) = 0; else (row) = (byte_get) ((pi), amount); if (
# 11003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 11003 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (pi) += amount; } while (0);
   if (row != 0)
     {

       if (row > nused)
  {
    warn (gettext ("Row index (%u) is larger than number of used entries (%u)\n"),
   row, nused);
    return 
# 11011 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          0
# 11011 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               ;
  }

       if (!do_display)
  {
    size_t num_copy = sizeof (uint64_t);

    memcpy (&this_set[row - 1].signature, ph, num_copy);
  }

       prow = poffsets + (row - 1) * ncols * 4;
       if (do_display)
  printf ("  [%3d] %#" 
# 11023 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                      "l" "x"
# 11023 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            , i, signature);
       for (j = 0; j < ncols; j++)
  {
    unsigned char *p = prow + j * 4;
    do { size_t amount = (4); if (sizeof (val) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (val)); amount = sizeof (val); } if (1) 
# 11027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void) sizeof ((
# 11027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   (p) <= (limit)
# 11027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ) ? 1 : 0), __extension__ ({ if (
# 11027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   (p) <= (limit)
# 11027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ) ; else __assert_fail (
# 11027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   "(p) <= (limit)"
# 11027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 11027, __extension__ __PRETTY_FUNCTION__); }))
# 11027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ; size_t avail = (limit) - (p); if ((p) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (val) = 0; else (val) = (byte_get) ((p), amount); if (
# 11027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 11027 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ) (p) += amount; } while (0);
    if (do_display)
      printf (" %8d", val);
    else
      {
        p = ppool + j * 4;
        do { size_t amount = (4); if (sizeof (dw_sect) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (dw_sect)); amount = sizeof (dw_sect); } if (1) 
# 11033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void) sizeof ((
# 11033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (p) <= (limit)
# 11033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ? 1 : 0), __extension__ ({ if (
# 11033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (p) <= (limit)
# 11033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ; else __assert_fail (
# 11033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       "(p) <= (limit)"
# 11033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 11033, __extension__ __PRETTY_FUNCTION__); }))
# 11033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ; size_t avail = (limit) - (p); if ((p) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (dw_sect) = 0; else (dw_sect) = (byte_get) ((p), amount); if (
# 11033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 11033 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ) (p) += amount; } while (0);


        if (dw_sect >= DW_SECT_MAX)
   warn (gettext ("Overlarge Dwarf section index detected: %u\n"), dw_sect);
        else
   this_set [row - 1].section_offsets [dw_sect] = val;
      }
  }

       if (do_display)
  printf ("\n");
     }
   ph += 8;
   pi += 4;
 }

      ph = phash;
      pi = pindex;
      if (do_display)
 {
   printf ("\n");
   printf (gettext ("  Size table\n"));
   printf ("  slot  %-16s  ",
   is_tu_index ? gettext ("signature") : gettext ("dwo_id"));
 }

      for (j = 0; j < ncols; j++)
 {
   unsigned char *p = ppool + j * 4;
   do { size_t amount = (4); if (sizeof (val) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (val)); amount = sizeof (val); } if (1) 
# 11063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 11063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (p) <= (limit)
# 11063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 11063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (p) <= (limit)
# 11063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 11063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(p) <= (limit)"
# 11063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 11063, __extension__ __PRETTY_FUNCTION__); }))
# 11063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (limit) - (p); if ((p) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (val) = 0; else (val) = (byte_get) ((p), amount); if (
# 11063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 11063 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (p) += amount; } while (0);
   if (do_display)
     printf (" %8s", get_DW_SECT_short_name (val));
 }

      if (do_display)
 printf ("\n");

      for (i = 0; i < nslots; i++)
 {
   do { size_t amount = (8); if (sizeof (signature) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (signature)); amount = sizeof (signature); } if (1) 
# 11073 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 11073 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (ph) <= (limit)
# 11073 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 11073 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (ph) <= (limit)
# 11073 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 11073 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(ph) <= (limit)"
# 11073 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 11073, __extension__ __PRETTY_FUNCTION__); }))
# 11073 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (limit) - (ph); if ((ph) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (signature) = 0; else (signature) = (byte_get) ((ph), amount); if (
# 11073 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 11073 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (ph) += amount; } while (0);

   do { size_t amount = (4); if (sizeof (row) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (row)); amount = sizeof (row); } if (1) 
# 11075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 11075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (pi) <= (limit)
# 11075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 11075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  (pi) <= (limit)
# 11075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 11075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "(pi) <= (limit)"
# 11075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 11075, __extension__ __PRETTY_FUNCTION__); }))
# 11075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ; size_t avail = (limit) - (pi); if ((pi) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (row) = 0; else (row) = (byte_get) ((pi), amount); if (
# 11075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  0
# 11075 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  ) (pi) += amount; } while (0);
   if (row != 0)
     {
       prow = psizes + (row - 1) * ncols * 4;

       if (do_display)
  printf ("  [%3d] %#" 
# 11081 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                      "l" "x"
# 11081 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            , i, signature);

       for (j = 0; j < ncols; j++)
  {
    unsigned char *p = prow + j * 4;




    if (p > (limit - 4))
      {
        if (do_display)
   printf ("\n");
        warn (gettext ("Too many rows/columns in DWARF index section %s\n"),
       section->name);
        return 
# 11096 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              0
# 11096 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   ;
      }

    do { size_t amount = (4); if (sizeof (val) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (val)); amount = sizeof (val); } if (1) 
# 11099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ((void) sizeof ((
# 11099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   (p) <= (limit)
# 11099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ) ? 1 : 0), __extension__ ({ if (
# 11099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   (p) <= (limit)
# 11099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   ) ; else __assert_fail (
# 11099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   "(p) <= (limit)"
# 11099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 11099, __extension__ __PRETTY_FUNCTION__); }))
# 11099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ; size_t avail = (limit) - (p); if ((p) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (val) = 0; else (val) = (byte_get) ((p), amount); if (
# 11099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
   0
# 11099 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   ) (p) += amount; } while (0);

    if (do_display)
      printf (" %8d", val);
    else
      {
        p = ppool + j * 4;
        do { size_t amount = (4); if (sizeof (dw_sect) < amount) { error (ngettext ("internal error: attempt to read %d byte " "of data in to %d sized variable", "internal error: attempt to read %d bytes " "of data in to %d sized variable", amount), (int) amount, (int) sizeof (dw_sect)); amount = sizeof (dw_sect); } if (1) 
# 11106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ((void) sizeof ((
# 11106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (p) <= (limit)
# 11106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ? 1 : 0), __extension__ ({ if (
# 11106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       (p) <= (limit)
# 11106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       ) ; else __assert_fail (
# 11106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       "(p) <= (limit)"
# 11106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 11106, __extension__ __PRETTY_FUNCTION__); }))
# 11106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ; size_t avail = (limit) - (p); if ((p) > (limit)) avail = 0; if (amount > avail) amount = avail; if (amount == 0) (dw_sect) = 0; else (dw_sect) = (byte_get) ((p), amount); if (
# 11106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       0
# 11106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       ) (p) += amount; } while (0);
        if (dw_sect >= DW_SECT_MAX)
   warn (gettext ("Overlarge Dwarf section index detected: %u\n"), dw_sect);
        else
        this_set [row - 1].section_sizes [dw_sect] = val;
      }
  }

       if (do_display)
  printf ("\n");
     }

   ph += 8;
   pi += 4;
 }
    }
  else if (do_display)
    printf (gettext ("  Unsupported version (%d)\n"), version);

  if (do_display)
      printf ("\n");

  return 
# 11128 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        1
# 11128 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ;
}

static int cu_tu_indexes_read = -1;





static 
# 11137 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool

# 11138 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
load_cu_tu_indexes (void *file)
{


  if (cu_tu_indexes_read == -1)
    {
      cu_tu_indexes_read = 
# 11144 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          1
# 11144 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                              ;

      if (load_debug_section_with_follow (dwp_cu_index, file))
 if (! process_cu_tu_index (&debug_displays [dwp_cu_index].section, 0))
   cu_tu_indexes_read = 
# 11148 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       0
# 11148 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            ;

      if (load_debug_section_with_follow (dwp_tu_index, file))
 if (! process_cu_tu_index (&debug_displays [dwp_tu_index].section, 0))
   cu_tu_indexes_read = 
# 11152 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       0
# 11152 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            ;
    }

  return (
# 11155 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
         _Bool
# 11155 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             ) cu_tu_indexes_read;
}



unsigned int *
find_cu_tu_set (void *file, unsigned int shndx)
{
  unsigned int i;

  if (! load_cu_tu_indexes (file))
    return 
# 11166 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 11166 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;


  for (i = 0; i < shndx_pool_used; i++)
    if (shndx_pool [i] == shndx)
      break;

  if (i >= shndx_pool_used)
    return 
# 11174 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 11174 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;


  while (i > 0 && shndx_pool [i - 1] != 0)
    i--;

  return shndx_pool + i;
}



static int
display_cu_index (struct dwarf_section *section, void *file __attribute__ ((__unused__)))
{
  return process_cu_tu_index (section, 1);
}

static int
display_debug_not_supported (struct dwarf_section *section,
        void *file __attribute__ ((__unused__)))
{
  printf (gettext ("Displaying the debug contents of section %s is not yet supported.\n"),
     section->name);

  return 1;
}





void *
cmalloc (uint64_t nmemb, size_t size)
{

  if (nmemb >= ~(size_t) 0 / size)
    return 
# 11210 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 11210 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;

  return xmalloc (nmemb * size);
}





void *
xcmalloc (uint64_t nmemb, size_t size)
{

  if (nmemb >= ~(size_t) 0 / size)
    {
      fprintf (
# 11225 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              stderr
# 11225 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    ,
        gettext ("Attempt to allocate an array with an excessive number of elements: %#" 
# 11226 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       "l" "x" 
# 11226 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       "\n"),
        nmemb);
      xexit (1);
    }

  return xmalloc (nmemb * size);
}





void *
xcrealloc (void *ptr, uint64_t nmemb, size_t size)
{

  if (nmemb >= ~(size_t) 0 / size)
    {
      error (gettext ("Attempt to re-allocate an array with an excessive number of elements: %#" 
# 11244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 11244 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            "\n"),
      nmemb);
      xexit (1);
    }

  return xrealloc (ptr, nmemb * size);
}



void *
xcalloc2 (uint64_t nmemb, size_t size)
{

  if (nmemb >= ~(size_t) 0 / size)
    {
      error (gettext ("Attempt to allocate a zero'ed array with an excessive number of elements: %#" 
# 11260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            "l" "x" 
# 11260 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            "\n"),
      nmemb);
      xexit (1);
    }

  return xcalloc (nmemb, size);
}

static unsigned long
calc_gnu_debuglink_crc32 (unsigned long crc,
     const unsigned char *buf,
     size_t len)
{
  static const unsigned long crc32_table[256] =
    {
      0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
      0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
      0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
      0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
      0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
      0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
      0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
      0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
      0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
      0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
      0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
      0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
      0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
      0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
      0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
      0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
      0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
      0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
      0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
      0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
      0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
      0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
      0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
      0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
      0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
      0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
      0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
      0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
      0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
      0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
      0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
      0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
      0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
      0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
      0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
      0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
      0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
      0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
      0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
      0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
      0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
      0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
      0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
      0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
      0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
      0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
      0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
      0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
      0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
      0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
      0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
      0x2d02ef8d
    };
  const unsigned char *end;

  crc = ~crc & 0xffffffff;
  for (end = buf + len; buf < end; ++ buf)
    crc = crc32_table[(crc ^ *buf) & 0xff] ^ (crc >> 8);
  return ~crc & 0xffffffff;
}

typedef 
# 11336 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
       _Bool 
# 11336 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            (*check_func_type) (const char *, void *);
typedef const char *(* parse_func_type) (struct dwarf_section *, void *);

static 
# 11339 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool

# 11340 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
check_gnu_debuglink (const char * pathname, void * crc_pointer)
{
  static unsigned char buffer[8 * 1024];
  FILE *f;
  size_t count;
  unsigned long crc = 0;
  void *sep_data;

  sep_data = open_debug_file (pathname);
  if (sep_data == 
# 11349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 ((void *)0)
# 11349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     )
    return 
# 11350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          0
# 11350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               ;


  f = fopen (pathname, "rb");
  if (f == 
# 11354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 11354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              )
    {

      close_debug_file (sep_data);
      warn (gettext ("Unable to reopen separate debug info file: %s\n"), pathname);
      return 
# 11359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            0
# 11359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ;
    }

  while ((count = fread (buffer, 1, sizeof (buffer), f)) > 0)
    crc = calc_gnu_debuglink_crc32 (crc, buffer, count);

  fclose (f);

  if (crc != * (unsigned long *) crc_pointer)
    {
      close_debug_file (sep_data);
      warn (gettext ("Separate debug info file %s found, but CRC does not match - ignoring\n"),
     pathname);
      return 
# 11372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            0
# 11372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 ;
    }

  return 
# 11375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        1
# 11375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ;
}

static const char *
parse_gnu_debuglink (struct dwarf_section * section, void * data)
{
  const char * name;
  unsigned int crc_offset;
  unsigned long * crc32 = (unsigned long *) data;



  name = (const char *) section->start;

  crc_offset = strnlen (name, section->size) + 1;
  if (crc_offset == 1)
    return 
# 11391 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 11391 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
  crc_offset = (crc_offset + 3) & ~3;
  if (crc_offset + 4 > section->size)
    return 
# 11394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 11394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;

  * crc32 = byte_get (section->start + crc_offset, 4);
  return name;
}

static 
# 11400 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      _Bool

# 11401 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
check_gnu_debugaltlink (const char * filename, void * data __attribute__ ((__unused__)))
{
  void * sep_data = open_debug_file (filename);

  if (sep_data == 
# 11405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 ((void *)0)
# 11405 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     )
    return 
# 11406 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          0
# 11406 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               ;




  return 
# 11411 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        1
# 11411 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ;
}

typedef struct build_id_data
{
  size_t len;
  const unsigned char *data;
} Build_id_data;

static const char *
parse_gnu_debugaltlink (struct dwarf_section * section, void * data)
{
  const char *name;
  size_t namelen;
  size_t id_len;
  Build_id_data *build_id_data;




  name = (const char *) section->start;
  namelen = strnlen (name, section->size) + 1;
  if (namelen == 1)
    return 
# 11434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 11434 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;
  if (namelen >= section->size)
    return 
# 11436 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 11436 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;

  id_len = section->size - namelen;
  if (id_len < 0x14)
    return 
# 11440 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          ((void *)0)
# 11440 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;

  build_id_data = (Build_id_data *) data;
  build_id_data->len = id_len;
  build_id_data->data = section->start + namelen;

  return name;
}

static void
add_separate_debug_file (const char * filename, void * handle)
{
  separate_info * i = xmalloc (sizeof * i);

  i->filename = filename;
  i->handle = handle;
  i->next = first_separate_info;
  first_separate_info = i;
}
# 11530 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
static void *
load_separate_debug_info (const char * main_filename,
     struct dwarf_section * xlink,
     parse_func_type parse_func,
     check_func_type check_func,
     void * func_data,
     void * file __attribute__ ((__unused__)))
{
  const char * separate_filename;
  char * debug_filename;
  char * canon_dir;
  size_t canon_dirlen;
  size_t dirlen;
  char * canon_filename;
  char * canon_debug_filename;
  
# 11545 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 _Bool 
# 11545 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
        self;

  if ((separate_filename = parse_func (xlink, func_data)) == 
# 11547 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                            ((void *)0)
# 11547 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                )
    {
      warn (gettext ("Corrupt debuglink section: %s\n"),
     xlink->name ? xlink->name : xlink->uncompressed_name);
      return 
# 11551 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 11551 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }




  canon_filename = lrealpath (main_filename);
  canon_dir = xstrdup (canon_filename);

  for (canon_dirlen = strlen (canon_dir); canon_dirlen > 0; canon_dirlen--)
    if ((((canon_dir[canon_dirlen - 1]) == '/') || (((canon_dir[canon_dirlen - 1]) == '\\') && (0))))
      break;
  canon_dir[canon_dirlen] = '\0';
# 11575 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  debug_filename = (char *) malloc (strlen ("/lib/debug") + 1
        + canon_dirlen
        + strlen (".debug/")

        + strlen ("/usr/lib/debug")


        + strlen ("/usr/lib/debug/usr")

        + strlen (separate_filename)
        + 1);
  if (debug_filename == 
# 11586 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 11586 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           )
    {
      warn (gettext ("Out of memory"));
      free (canon_dir);
      free (canon_filename);
      return 
# 11591 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 11591 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }


  sprintf (debug_filename, "%s", separate_filename);
  if (check_func (debug_filename, func_data))
    goto found;


  sprintf (debug_filename, ".debug/%s", separate_filename);
  if (check_func (debug_filename, func_data))
    goto found;


  sprintf (debug_filename, "%s%s", canon_dir, separate_filename);
  if (check_func (debug_filename, func_data))
    goto found;


  sprintf (debug_filename, "%s.debug/%s", canon_dir, separate_filename);
  if (check_func (debug_filename, func_data))
    goto found;



  sprintf (debug_filename, "%s/%s", "/usr/lib/debug", separate_filename);
  if (check_func (debug_filename, func_data))
    goto found;


  sprintf (debug_filename, "%s/%s/%s", "/usr/lib/debug", canon_dir, separate_filename);
  if (check_func (debug_filename, func_data))
    goto found;




  sprintf (debug_filename, "%s/%s", "/usr/lib/debug/usr", separate_filename);
  if (check_func (debug_filename, func_data))
    goto found;



  strcpy (debug_filename, "/lib/debug");
  dirlen = strlen ("/lib/debug") - 1;
  if (dirlen > 0 && "/lib/debug"[dirlen] != '/')
    strcat (debug_filename, "/");
  strcat (debug_filename, (const char *) separate_filename);

  if (check_func (debug_filename, func_data))
    goto found;
# 11661 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  if (do_debug_links)
    {

      warn (gettext ("could not find separate debug file '%s'\n"),
     separate_filename);
      warn (gettext ("tried: %s\n"), debug_filename);


      sprintf (debug_filename, "%s/%s", "/usr/lib/debug/usr",
        separate_filename);
      warn (gettext ("tried: %s\n"), debug_filename);



      sprintf (debug_filename, "%s/%s/%s", "/usr/lib/debug",
        canon_dir, separate_filename);
      warn (gettext ("tried: %s\n"), debug_filename);

      sprintf (debug_filename, "%s/%s", "/usr/lib/debug",
        separate_filename);
      warn (gettext ("tried: %s\n"), debug_filename);


      sprintf (debug_filename, "%s.debug/%s", canon_dir,
        separate_filename);
      warn (gettext ("tried: %s\n"), debug_filename);

      sprintf (debug_filename, "%s%s", canon_dir, separate_filename);
      warn (gettext ("tried: %s\n"), debug_filename);

      sprintf (debug_filename, ".debug/%s", separate_filename);
      warn (gettext ("tried: %s\n"), debug_filename);

      sprintf (debug_filename, "%s", separate_filename);
      warn (gettext ("tried: %s\n"), debug_filename);
# 11708 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
    }

  free (canon_dir);
  free (debug_filename);
  free (canon_filename);
  return 
# 11713 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        ((void *)0)
# 11713 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            ;

 found:
  free (canon_dir);

  canon_debug_filename = lrealpath (debug_filename);
  self = strcmp (canon_debug_filename, canon_filename) == 0;
  free (canon_filename);
  free (canon_debug_filename);
  if (self)
    {
      free (debug_filename);
      return 
# 11725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 11725 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }

  void * debug_handle;


  if ((debug_handle = open_debug_file (debug_filename)) == 
# 11731 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                          ((void *)0)
# 11731 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                              )
    {
      warn (gettext ("failed to open separate debug file: %s\n"), debug_filename);
      free (debug_filename);
      return 
# 11735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 11735 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }




  if (do_debug_links)
    printf (gettext ("\n%s: Found separate debug info file: %s\n"), main_filename, debug_filename);
  add_separate_debug_file (debug_filename, debug_handle);



  return debug_handle;
}



static void *
load_dwo_file (const char * main_filename, const char * name, const char * dir, const char * id __attribute__ ((__unused__)))
{
  char * separate_filename;
  void * separate_handle;

  if ((((((name)[0]) == '/') || ((((name)[0]) == '\\') && (0))) || ((name)[0] && ((name)[1] == ':') && (0))))
    separate_filename = strdup (name);
  else

    separate_filename = concat (dir, "/", name, 
# 11762 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                               ((void *)0)
# 11762 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                   );
  if (separate_filename == 
# 11763 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          ((void *)0)
# 11763 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                              )
    {
      warn (gettext ("Out of memory allocating dwo filename\n"));
      return 
# 11766 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 11766 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }

  if ((separate_handle = open_debug_file (separate_filename)) == 
# 11769 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 11769 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                    )
    {
      warn (gettext ("Unable to load dwo file: %s\n"), separate_filename);
      free (separate_filename);
      return 
# 11773 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 11773 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                ;
    }



  printf (gettext ("%s: Found separate debug object file: %s\n\n"), main_filename, separate_filename);

  add_separate_debug_file (separate_filename, separate_handle);

  return separate_handle;
}

static void *
try_build_id_prefix (const char * prefix, char * filename, const unsigned char * data, unsigned long id_len)
{
  char * f = filename;

  f += sprintf (f, "%s.build-id/%02x/", prefix, (unsigned) *data++);
  id_len --;
  while (id_len --)
    f += sprintf (f, "%02x", (unsigned) *data++);
  strcpy (f, ".debug");

  return open_debug_file (filename);
}



static void
load_build_id_debug_file (const char * main_filename __attribute__ ((__unused__)), void * main_file)
{
  if (! load_debug_section (note_gnu_build_id, main_file))
    return;

  struct dwarf_section * section = & debug_displays [note_gnu_build_id].section;
  if (section == 
# 11808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                ((void *)0)
# 11808 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                    )
    {
      warn (gettext ("Unable to load the .note.gnu.build-id section\n"));
      return;
    }

  if (section->start == 
# 11814 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0) 
# 11814 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            || section->size < 0x18)
    {
      warn (gettext (".note.gnu.build-id section is corrupt/empty\n"));
      return;
    }
# 11833 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  unsigned long build_id_size;
  build_id_size = byte_get (section->start + 4, 4);
  if (build_id_size < 8)
    {
      warn (gettext (".note.gnu.build-id data size is too small\n"));
      return;
    }

  if (build_id_size > (section->size - 16))
    {
      warn (gettext (".note.gnu.build-id data size is too big\n"));
      return;
    }

  char * filename;
  filename = xmalloc (strlen (".build-id/")
        + build_id_size * 2 + 2
        + strlen (".debug")


        + strlen ("/usrlib64/debug/usr")
        + 1);
  void * handle;

  static const char * prefixes[] =
    {
      "",
      ".debug/",
      "/usr/lib/debug/",
      "/usr/lib/debug/usr/",
      "/usr/lib64/debug/",
      "/usr/lib64/debug/usr"
    };
  long unsigned int i;

  for (i = 0; i < (sizeof (prefixes) / sizeof ((prefixes)[0])); i++)
    {
      handle = try_build_id_prefix (prefixes[i], filename,
        section->start + 16, build_id_size);
      if (handle != 
# 11872 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 11872 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       )
 break;
    }

  if (handle == 
# 11876 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               ((void *)0)
# 11876 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   )
    {





      free (filename);
      return;
    }

  add_separate_debug_file (filename, handle);
}



static void
load_debug_sup_file (const char * main_filename, void * file)
{
  if (! load_debug_section (debug_sup, file))
    return;

  struct dwarf_section * section;
  section = & debug_displays [debug_sup].section;
  
# 11900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void) sizeof ((
# 11900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 section != 
# 11900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)) ? 1 : 0), __extension__ ({ if (
# 11900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 section != 
# 11900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 ((void *)0)) ; else __assert_fail (
# 11900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
 "section != NULL"
# 11900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
 , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 11900, __extension__ __PRETTY_FUNCTION__); }))
# 11900 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;

  if (section->start == 
# 11902 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0) 
# 11902 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                            || section->size < 5)
    {
      warn (gettext (".debug_sup section is corrupt/empty\n"));
      return;
    }

  if (section->start[2] != 0)
    return;

  const char * filename = (const char *) section->start + 3;
  if (strnlen (filename, section->size - 3) == section->size - 3)
    {
      warn (gettext ("filename in .debug_sup section is corrupt\n"));
      return;
    }

  if (filename[0] != '/' && strchr (main_filename, '/'))
    {
      char * new_name;
      int new_len;

      new_len = asprintf (& new_name, "%.*s/%s",
     (int) (strrchr (main_filename, '/') - main_filename),
     main_filename,
     filename);
      if (new_len < 3)
 {
   warn (gettext ("unable to construct path for supplementary debug file"));
   if (new_len > -1)
     free (new_name);
   return;
 }
      filename = new_name;
    }
  else
    {


      filename = strdup (filename);
      if (filename == 
# 11941 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 11941 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         )
 {
   warn (gettext ("out of memory constructing filename for .debug_sup link\n"));
   return;
 }
    }

  void * handle = open_debug_file (filename);
  if (handle == 
# 11949 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               ((void *)0)
# 11949 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   )
    {
      warn (gettext ("unable to open file '%s' referenced from .debug_sup section\n"), filename);
      free ((void *) filename);
      return;
    }

  printf (gettext ("%s: Found supplementary debug file: %s\n\n"), main_filename, filename);


  add_separate_debug_file (filename, handle);
}






static void
check_for_and_load_links (void * file, const char * filename)
{
  void * handle = 
# 11970 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 ((void *)0)
# 11970 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     ;

  if (load_debug_section (gnu_debugaltlink, file))
    {
      Build_id_data build_id_data;

      handle = load_separate_debug_info (filename,
      & debug_displays[gnu_debugaltlink].section,
      parse_gnu_debugaltlink,
      check_gnu_debugaltlink,
      & build_id_data,
      file);
      if (handle)
 {
   
# 11984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 11984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  handle == first_separate_info->handle
# 11984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 11984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  handle == first_separate_info->handle
# 11984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 11984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "handle == first_separate_info->handle"
# 11984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 11984, __extension__ __PRETTY_FUNCTION__); }))
# 11984 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                ;
   check_for_and_load_links (first_separate_info->handle,
        first_separate_info->filename);
 }
    }

  if (load_debug_section (gnu_debuglink, file))
    {
      unsigned long crc32;

      handle = load_separate_debug_info (filename,
      & debug_displays[gnu_debuglink].section,
      parse_gnu_debuglink,
      check_gnu_debuglink,
      & crc32,
      file);
      if (handle)
 {
   
# 12002 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ((void) sizeof ((
# 12002 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  handle == first_separate_info->handle
# 12002 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ? 1 : 0), __extension__ ({ if (
# 12002 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  handle == first_separate_info->handle
# 12002 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  ) ; else __assert_fail (
# 12002 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
  "handle == first_separate_info->handle"
# 12002 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  , "/doner/binutils/binutils-515f23e/binutils/./dwarf.c", 12002, __extension__ __PRETTY_FUNCTION__); }))
# 12002 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                ;
   check_for_and_load_links (first_separate_info->handle,
        first_separate_info->filename);
 }
    }

  load_debug_sup_file (filename, file);

  load_build_id_debug_file (filename, file);
}







# 12018 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
_Bool

# 12019 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
load_separate_debug_files (void * file, const char * filename)
{

  if (! do_follow_links && ! do_debug_links)
    return 
# 12023 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          0
# 12023 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               ;


  if (load_debug_section (str, file)
      && load_debug_section (abbrev, file)
      && load_debug_section (info, file))
    {

      load_debug_section (debug_addr, file);

      load_debug_section (str_index, file);

      load_debug_section (loclists, file);

      load_debug_section (rnglists, file);

      free_dwo_info ();

      if (process_debug_info (& debug_displays[info].section, file, abbrev,
         
# 12042 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        1
# 12042 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
            , 
# 12042 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              0
# 12042 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   ))
 {
   
# 12044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
  _Bool 
# 12044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       introduced = 
# 12044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    0
# 12044 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;
   dwo_info *dwinfo;
   const char *dir = 
# 12046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                    ((void *)0)
# 12046 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                        ;
   const char *id = 
# 12047 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                   ((void *)0)
# 12047 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                       ;
   const char *name = 
# 12048 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 12048 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;

   for (dwinfo = first_dwo_info; dwinfo != 
# 12050 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          ((void *)0)
# 12050 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                              ; dwinfo = dwinfo->next)
     {

       switch (dwinfo->type)
  {
  case DWO_NAME:
    if (name != 
# 12056 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
               ((void *)0)
# 12056 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                   )
      warn (gettext ("Multiple DWO_NAMEs encountered for the same CU\n"));
    name = dwinfo->value;
    break;

  case DWO_DIR:


    dir = dwinfo->value;
    break;

  case DWO_ID:
    if (id != 
# 12068 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
             ((void *)0)
# 12068 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                 )
      warn (gettext ("multiple DWO_IDs encountered for the same CU\n"));
    id = dwinfo->value;
    break;

  default:
    error (gettext ("Unexpected DWO INFO type"));
    break;
  }




       if (name != 
# 12081 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                  ((void *)0)
    
# 12082 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
   && (dwinfo->next == 
# 12082 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
        
# 12083 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
       || dwinfo->next->cu_offset != dwinfo->cu_offset))
  {
    if (do_debug_links)
      {
        if (! introduced)
   {
     printf (gettext ("The %s section contains link(s) to dwo file(s):\n\n"),
      debug_displays [info].section.uncompressed_name);
     introduced = 
# 12091 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 1
# 12091 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     ;
   }

        printf (gettext ("  Name:      %s\n"), name);
        printf (gettext ("  Directory: %s\n"), dir ? dir : gettext ("<not-found>"));
        if (id != 
# 12096 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                 ((void *)0)
# 12096 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                     )
   display_data (printf (gettext ("  ID:       ")), (unsigned char *) id, 8);
        else if (debug_information[0].dwarf_version != 5)
   printf (gettext ("  ID:        <not specified>\n"));
        printf ("\n\n");
      }

    if (do_follow_links)
      load_dwo_file (filename, name, dir, id);

    name = dir = id = 
# 12106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                     ((void *)0)
# 12106 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                         ;
  }
     }
 }
    }

  if (! do_follow_links)


    return 
# 12115 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          0
# 12115 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               ;





  check_for_and_load_links (file, filename);
  if (first_separate_info != 
# 12122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                            ((void *)0)
# 12122 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                )
    return 
# 12123 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
          1
# 12123 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
              ;

  do_follow_links = 0;
  return 
# 12126 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
        0
# 12126 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
             ;
}

void
free_debug_memory (void)
{
  unsigned int i;

  free_all_abbrevs ();

  free (shndx_pool);
  shndx_pool = 
# 12137 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
              ((void *)0)
# 12137 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                  ;
  shndx_pool_size = 0;
  shndx_pool_used = 0;
  free (cu_sets);
  cu_sets = 
# 12141 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           ((void *)0)
# 12141 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               ;
  cu_count = 0;
  free (tu_sets);
  tu_sets = 
# 12144 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           ((void *)0)
# 12144 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               ;
  tu_count = 0;

  memset (level_type_signed, 0, sizeof level_type_signed);
  cu_tu_indexes_read = -1;

  for (i = 0; i < max; i++)
    free_debug_section ((enum dwarf_section_display_enum) i);

  if (debug_information != 
# 12153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          ((void *)0)
# 12153 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                              )
    {
      for (i = 0; i < alloc_num_debug_info_entries; i++)
 free_debug_information (&debug_information[i]);
      free (debug_information);
      debug_information = 
# 12158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                         ((void *)0)
# 12158 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                             ;
      alloc_num_debug_info_entries = num_debug_info_entries = 0;
    }

  separate_info * d;
  separate_info * next;

  for (d = first_separate_info; d != 
# 12165 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                    ((void *)0)
# 12165 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                        ; d = next)
    {
      close_debug_file (d->handle);
      free ((void *) d->filename);
      next = d->next;
      free ((void *) d);
    }
  first_separate_info = 
# 12172 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                       ((void *)0)
# 12172 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                           ;

  free_dwo_info ();
}

typedef struct
{
  const char letter;
  const char *option;
  int *variable;
  int val;
} debug_dump_long_opts;

static const debug_dump_long_opts debug_option_table[] =
{
  { 'A', "addr", &do_debug_addr, 1 },
  { 'a', "abbrev", &do_debug_abbrevs, 1 },
  { 'c', "cu_index", &do_debug_cu_index, 1 },




  { 'F', "frames-interp", &do_debug_frames_interp, 1 },
  { 'f', "frames", &do_debug_frames, 1 },
  { 'g', "gdb_index", &do_gdb_index, 1 },
  { 'i', "info", &do_debug_info, 1 },
  { 'K', "follow-links", &do_follow_links, 1 },
  { 'k', "links", &do_debug_links, 1 },
  { 'L', "decodedline", &do_debug_lines, 2 },
  { 'l', "rawline", &do_debug_lines, 1 },

  { 'l', "line", &do_debug_lines, 1 },
  { 'm', "macro", &do_debug_macinfo, 1 },
  { 'N', "no-follow-links", &do_follow_links, 0 },
  { 'O', "str-offsets", &do_debug_str_offsets, 1 },
  { 'o', "loc", &do_debug_loc, 1 },
  { 'p', "pubnames", &do_debug_pubnames, 1 },
  { 'R', "Ranges", &do_debug_ranges, 1 },
  { 'r', "aranges", &do_debug_aranges, 1 },

  { 'r', "ranges", &do_debug_aranges, 1 },
  { 's', "str", &do_debug_str, 1 },
  { 'T', "trace_aranges", &do_trace_aranges, 1 },
  { 't', "pubtypes", &do_debug_pubtypes, 1 },
  { 'U', "trace_info", &do_trace_info, 1 },
  { 'u', "trace_abbrev", &do_trace_abbrevs, 1 },
  { 0, 
# 12218 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
      ((void *)0)
# 12218 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
          , 
# 12218 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
            ((void *)0)
# 12218 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                , 0 }
};





int
dwarf_select_sections_by_names (const char *names)
{
  const char *p;
  int result = 0;

  p = names;
  while (*p)
    {
      const debug_dump_long_opts *entry;

      for (entry = debug_option_table; entry->option; entry++)
 {
   size_t len = strlen (entry->option);

   if (strncmp (p, entry->option, len) == 0
       && (p[len] == ',' || p[len] == '\0'))
     {
       if (entry->val == 0)
  * entry->variable = 0;
       else
  * entry->variable = entry->val;
       result |= entry->val;

       p += len;
       break;
     }
 }

      if (entry->option == 
# 12254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                          ((void *)0)
# 12254 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                              )
 {
   warn (gettext ("Unrecognized debug option '%s'\n"), p);
   p = strchr (p, ',');
   if (p == 
# 12258 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
           ((void *)0)
# 12258 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
               )
     break;
 }

      if (*p == ',')
 p++;
    }



  if (do_debug_frames_interp)
    do_debug_frames = 1;

  return result;
}




int
dwarf_select_sections_by_letters (const char *letters)
{
  int result = 0;

  while (* letters)
    {
      const debug_dump_long_opts *entry;

      for (entry = debug_option_table; entry->letter; entry++)
 {
   if (entry->letter == * letters)
     {
       if (entry->val == 0)
  * entry->variable = 0;
       else
  * entry->variable |= entry->val;
       result |= entry->val;
       break;
     }
 }

      if (entry->letter == 0)
 warn (gettext ("Unrecognized debug letter option '%c'\n"), * letters);

      letters ++;
    }



  if (do_debug_frames_interp)
    do_debug_frames = 1;

  return result;
}

void
dwarf_select_sections_all (void)
{
  do_debug_info = 1;
  do_debug_abbrevs = 1;
  do_debug_lines = 1;
  do_debug_pubnames = 1;
  do_debug_pubtypes = 1;
  do_debug_aranges = 1;
  do_debug_ranges = 1;
  do_debug_frames = 1;
  do_debug_macinfo = 1;
  do_debug_str = 1;
  do_debug_loc = 1;
  do_gdb_index = 1;
  do_trace_info = 1;
  do_trace_abbrevs = 1;
  do_trace_aranges = 1;
  do_debug_addr = 1;
  do_debug_cu_index = 1;
  do_follow_links = 1;
  do_debug_links = 1;
  do_debug_str_offsets = 1;
}






struct dwarf_section_display debug_displays[] =
{
  { { ".debug_abbrev", ".zdebug_abbrev", ".dwabrev", 
# 12345 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                             ((void *)0)
# 12345 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                             , 
# 12345 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                             ((void *)0)
# 12345 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                             , 
# 12345 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                             ((void *)0)
# 12345 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                             , 0, 0, 0, 
# 12345 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                             ((void *)0)
# 12345 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                             , 0 }, display_debug_abbrev, &do_debug_abbrevs, 
# 12345 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                          0 
# 12345 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                                },
  { { ".debug_aranges", ".zdebug_aranges", ".dwarnge", 
# 12346 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                               ((void *)0)
# 12346 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                               , 
# 12346 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                               ((void *)0)
# 12346 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                               , 
# 12346 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                               ((void *)0)
# 12346 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                               , 0, 0, 0, 
# 12346 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                               ((void *)0)
# 12346 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                               , 0 }, display_debug_aranges, &do_debug_aranges, 
# 12346 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                            1 
# 12346 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                                 },
  { { ".debug_frame", ".zdebug_frame", ".dwframe", 
# 12347 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                           ((void *)0)
# 12347 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                           , 
# 12347 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                           ((void *)0)
# 12347 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                           , 
# 12347 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                           ((void *)0)
# 12347 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                           , 0, 0, 0, 
# 12347 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                           ((void *)0)
# 12347 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                           , 0 }, display_debug_frames, &do_debug_frames, 
# 12347 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                       1 
# 12347 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                            },
  { { ".debug_info", ".zdebug_info", ".dwinfo", 
# 12348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, abbrev, 
# 12348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0}, display_debug_info, &do_debug_info, 
# 12348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                    1 
# 12348 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                         },
  { { ".debug_line", ".zdebug_line", ".dwline", 
# 12349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_lines, &do_debug_lines, 
# 12349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                    1 
# 12349 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                         },
  { { ".debug_pubnames", ".zdebug_pubnames", ".dwpbnms", 
# 12350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 
# 12350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 
# 12350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 0, 0, 0, 
# 12350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 0 }, display_debug_pubnames, &do_debug_pubnames, 
# 12350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                              0 
# 12350 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                                    },
  { { ".debug_gnu_pubnames", ".zdebug_gnu_pubnames", "", 
# 12351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_gnu_pubnames, &do_debug_pubnames, 
# 12351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                           0 
# 12351 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                                 },
  { { ".eh_frame", "", "", 
# 12352 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                      ((void *)0)
# 12352 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      , 
# 12352 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                      ((void *)0)
# 12352 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      , 
# 12352 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                      ((void *)0)
# 12352 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      , 0, 0, 0, 
# 12352 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                      ((void *)0)
# 12352 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                      , 0 }, display_debug_frames, &do_debug_frames, 
# 12352 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                  1 
# 12352 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                       },
  { { ".debug_macinfo", ".zdebug_macinfo", "", 
# 12353 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12353 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 
# 12353 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12353 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 
# 12353 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12353 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 0, 0, 0, 
# 12353 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12353 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 0 }, display_debug_macinfo, &do_debug_macinfo, 
# 12353 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                     0 
# 12353 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                           },
  { { ".debug_macro", ".zdebug_macro", ".dwmac", 
# 12354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                          ((void *)0)
# 12354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                          , 
# 12354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                          ((void *)0)
# 12354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                          , 
# 12354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                          ((void *)0)
# 12354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                          , 0, 0, 0, 
# 12354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                          ((void *)0)
# 12354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                          , 0 }, display_debug_macro, &do_debug_macinfo, 
# 12354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                       1 
# 12354 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                            },
  { { ".debug_str", ".zdebug_str", ".dwstr", 
# 12355 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                      ((void *)0)
# 12355 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      , 
# 12355 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                      ((void *)0)
# 12355 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      , 
# 12355 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                      ((void *)0)
# 12355 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      , 0, 0, 0, 
# 12355 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                      ((void *)0)
# 12355 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      , 0 }, display_debug_str, &do_debug_str, 
# 12355 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                              0 
# 12355 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                    },
  { { ".debug_line_str", ".zdebug_line_str", "", 
# 12356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_str, &do_debug_str, 
# 12356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                 0 
# 12356 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                       },
  { { ".debug_loc", ".zdebug_loc", ".dwloc", 
# 12357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                      ((void *)0)
# 12357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      , 
# 12357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                      ((void *)0)
# 12357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      , 
# 12357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                      ((void *)0)
# 12357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      , 0, 0, 0, 
# 12357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                      ((void *)0)
# 12357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                      , 0 }, display_debug_loc, &do_debug_loc, 
# 12357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                              1 
# 12357 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                   },
  { { ".debug_loclists", ".zdebug_loclists", "", 
# 12358 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12358 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12358 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12358 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12358 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12358 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12358 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12358 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_loc, &do_debug_loc, 
# 12358 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                 1 
# 12358 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                      },
  { { ".debug_loclists.dwo", ".zdebug_loclists.dwo", "", 
# 12359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 
# 12359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 
# 12359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 0, 0, 0, 
# 12359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 0 }, display_debug_loc, &do_debug_loc, 
# 12359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                               1 
# 12359 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                                    },
  { { ".debug_pubtypes", ".zdebug_pubtypes", ".dwpbtyp", 
# 12360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 
# 12360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 
# 12360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 0, 0, 0, 
# 12360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 0 }, display_debug_pubnames, &do_debug_pubtypes, 
# 12360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                              0 
# 12360 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                                    },
  { { ".debug_gnu_pubtypes", ".zdebug_gnu_pubtypes", "", 
# 12361 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12361 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12361 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12361 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12361 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12361 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12361 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12361 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_gnu_pubnames, &do_debug_pubtypes, 
# 12361 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                           0 
# 12361 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                                 },
  { { ".debug_ranges", ".zdebug_ranges", ".dwrnges", 
# 12362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                             ((void *)0)
# 12362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                             , 
# 12362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                             ((void *)0)
# 12362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                             , 
# 12362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                             ((void *)0)
# 12362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                             , 0, 0, 0, 
# 12362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                             ((void *)0)
# 12362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                             , 0 }, display_debug_ranges, &do_debug_ranges, 
# 12362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                         1 
# 12362 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                              },
  { { ".debug_rnglists", ".zdebug_rnglists", "", 
# 12363 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12363 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12363 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12363 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12363 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12363 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12363 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12363 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_ranges, &do_debug_ranges, 
# 12363 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                     1 
# 12363 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                          },
  { { ".debug_rnglists.dwo", ".zdebug_rnglists.dwo", "", 
# 12364 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12364 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 
# 12364 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12364 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 
# 12364 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12364 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 0, 0, 0, 
# 12364 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                ((void *)0)
# 12364 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                , 0 }, display_debug_ranges, &do_debug_ranges, 
# 12364 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                               1 
# 12364 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                                    },
  { { ".debug_static_func", ".zdebug_static_func", "", 
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_not_supported, 
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                        ((void *)0)
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                            , 
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                               0 
# 12365 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                     },
  { { ".debug_static_vars", ".zdebug_static_vars", "", 
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_not_supported, 
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                        ((void *)0)
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                            , 
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                               0 
# 12366 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                     },
  { { ".debug_types", ".zdebug_types", "", 
# 12367 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                    ((void *)0)
# 12367 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                    , 
# 12367 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                    ((void *)0)
# 12367 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                    , 
# 12367 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                    ((void *)0)
# 12367 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                    , 0, 0, abbrev, 
# 12367 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                    ((void *)0)
# 12367 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                    , 0 }, display_debug_types, &do_debug_info, 
# 12367 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                               1 
# 12367 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                    },
  { { ".debug_weaknames", ".zdebug_weaknames", "", 
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_not_supported, 
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                        ((void *)0)
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                            , 
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                               0 
# 12368 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                     },
  { { ".gdb_index", "", "", 
# 12369 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                       ((void *)0)
# 12369 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 
# 12369 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                       ((void *)0)
# 12369 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 
# 12369 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                       ((void *)0)
# 12369 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 0, 0, 0, 
# 12369 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                       ((void *)0)
# 12369 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 0 }, display_gdb_index, &do_gdb_index, 
# 12369 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                               0 
# 12369 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                     },
  { { ".debug_names", "", "", 
# 12370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                         ((void *)0)
# 12370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 12370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                         ((void *)0)
# 12370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 
# 12370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                         ((void *)0)
# 12370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 0, 0, 0, 
# 12370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                         ((void *)0)
# 12370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                         , 0 }, display_debug_names, &do_gdb_index, 
# 12370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                  0 
# 12370 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                        },
  { { ".trace_info", "", "", 
# 12371 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                        ((void *)0)
# 12371 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                        , 
# 12371 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                        ((void *)0)
# 12371 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                        , 
# 12371 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                        ((void *)0)
# 12371 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                        , 0, 0, trace_abbrev, 
# 12371 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                        ((void *)0)
# 12371 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                        , 0 }, display_trace_info, &do_trace_info, 
# 12371 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                     1 
# 12371 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                          },
  { { ".trace_abbrev", "", "", 
# 12372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          ((void *)0)
# 12372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                          , 
# 12372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          ((void *)0)
# 12372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                          , 
# 12372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          ((void *)0)
# 12372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                          , 0, 0, 0, 
# 12372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                          ((void *)0)
# 12372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                          , 0 }, display_debug_abbrev, &do_trace_abbrevs, 
# 12372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                       0 
# 12372 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                             },
  { { ".trace_aranges", "", "", 
# 12373 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12373 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 
# 12373 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12373 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 
# 12373 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12373 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 0, 0, 0, 
# 12373 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12373 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 0 }, display_debug_aranges, &do_trace_aranges, 
# 12373 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                        0 
# 12373 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                              },
  { { ".debug_info.dwo", ".zdebug_info.dwo", "", 
# 12374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, abbrev_dwo, 
# 12374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_info, &do_debug_info, 
# 12374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                    1 
# 12374 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                         },
  { { ".debug_abbrev.dwo", ".zdebug_abbrev.dwo", "", 
# 12375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_abbrev, &do_debug_abbrevs, 
# 12375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                      0 
# 12375 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                            },
  { { ".debug_types.dwo", ".zdebug_types.dwo", "", 
# 12376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, abbrev_dwo, 
# 12376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_types, &do_debug_info, 
# 12376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                     1 
# 12376 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                          },
  { { ".debug_line.dwo", ".zdebug_line.dwo", "", 
# 12377 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12377 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12377 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12377 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12377 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12377 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12377 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12377 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_lines, &do_debug_lines, 
# 12377 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                    1 
# 12377 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                         },
  { { ".debug_loc.dwo", ".zdebug_loc.dwo", "", 
# 12378 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12378 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 
# 12378 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12378 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 
# 12378 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12378 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 0, 0, 0, 
# 12378 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12378 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 0 }, display_debug_loc, &do_debug_loc, 
# 12378 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                1 
# 12378 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                     },
  { { ".debug_macro.dwo", ".zdebug_macro.dwo", "", 
# 12379 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12379 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12379 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12379 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12379 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12379 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12379 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12379 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_macro, &do_debug_macinfo, 
# 12379 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                      1 
# 12379 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                           },
  { { ".debug_macinfo.dwo", ".zdebug_macinfo.dwo", "", 
# 12380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_macinfo, &do_debug_macinfo, 
# 12380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                      0 
# 12380 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                            },
  { { ".debug_str.dwo", ".zdebug_str.dwo", "", 
# 12381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 
# 12381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 
# 12381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 0, 0, 0, 
# 12381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                        ((void *)0)
# 12381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                        , 0 }, display_debug_str, &do_debug_str, 
# 12381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                1 
# 12381 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                     },
  { { ".debug_str_offsets", ".zdebug_str_offsets", "", 
# 12382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_str_offsets, &do_debug_str_offsets, 
# 12382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                             1 
# 12382 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                                  },
  { { ".debug_str_offsets.dwo", ".zdebug_str_offsets.dwo", "", 
# 12383 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                               ((void *)0)
# 12383 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                               , 
# 12383 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                               ((void *)0)
# 12383 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                               , 
# 12383 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                               ((void *)0)
# 12383 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                               , 0, 0, 0, 
# 12383 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                               ((void *)0)
# 12383 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                               , 0 }, display_debug_str_offsets, &do_debug_str_offsets, 
# 12383 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                                                   1 
# 12383 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                                        },
  { { ".debug_addr", ".zdebug_addr", "", 
# 12384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                  ((void *)0)
# 12384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                  , 
# 12384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                  ((void *)0)
# 12384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                  , 
# 12384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                  ((void *)0)
# 12384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                  , 0, 0, 0, 
# 12384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                  ((void *)0)
# 12384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                  , 0 }, display_debug_addr, &do_debug_addr, 
# 12384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                            1 
# 12384 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                 },
  { { ".debug_cu_index", "", "", 
# 12385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 
# 12385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 
# 12385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 0, 0, 0, 
# 12385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 0 }, display_cu_index, &do_debug_cu_index, 
# 12385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                       0 
# 12385 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                             },
  { { ".debug_tu_index", "", "", 
# 12386 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12386 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 
# 12386 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12386 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 
# 12386 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12386 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 0, 0, 0, 
# 12386 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12386 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 0 }, display_cu_index, &do_debug_cu_index, 
# 12386 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                       0 
# 12386 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                             },
  { { ".gnu_debuglink", "", "", 
# 12387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 
# 12387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 
# 12387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 0, 0, 0, 
# 12387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 0 }, display_debug_links, &do_debug_links, 
# 12387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                      0 
# 12387 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                            },
  { { ".gnu_debugaltlink", "", "", 
# 12388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 
# 12388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 
# 12388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 0, 0, 0, 
# 12388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                           ((void *)0)
# 12388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                           , 0 }, display_debug_links, &do_debug_links, 
# 12388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                      0 
# 12388 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                            },
  { { ".debug_sup", "", "", 
# 12389 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                       ((void *)0)
# 12389 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 
# 12389 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                       ((void *)0)
# 12389 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 
# 12389 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                       ((void *)0)
# 12389 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 0, 0, 0, 
# 12389 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                       ((void *)0)
# 12389 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                       , 0 }, display_debug_sup, &do_debug_links, 
# 12389 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                 0 
# 12389 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                       },



  { { ".debug_str", ".zdebug_str", "", 
# 12393 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                ((void *)0)
# 12393 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                , 
# 12393 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                ((void *)0)
# 12393 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                , 
# 12393 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                ((void *)0)
# 12393 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                , 0, 0, 0, 
# 12393 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                ((void *)0)
# 12393 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                , 0 }, display_debug_str, &do_debug_str, 
# 12393 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                        0 
# 12393 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                              },
  { { ".note.gnu.build-id", "", "", 
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0, 0, 0, 
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                         ((void *)0)
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                         , 0 }, display_debug_not_supported, 
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                        ((void *)0)
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                            , 
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c" 3 4
                                                                                                               0 
# 12394 "/doner/binutils/binutils-515f23e/binutils/./dwarf.c"
                                                                                                                     },
};


extern int debug_displays_assert[(sizeof (debug_displays) / sizeof ((debug_displays)[0])) == max ? 1 : -1];
