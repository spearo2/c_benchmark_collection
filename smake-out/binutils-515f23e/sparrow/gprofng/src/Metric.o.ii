# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
# 21 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
# 1 "../config.h" 1
# 22 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4


# 29 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char *__s) throw () __attribute__ ((__warn_unused_result__));




extern char *tmpnam_r (char *__s) throw () __attribute__ ((__warn_unused_result__));
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) throw () __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () __attribute__ ((__warn_unused_result__));





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                          __attribute__ ((__warn_unused_result__));
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                         __attribute__ ((__warn_unused_result__));
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf")

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);




# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0010) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0020) != 0);
}
# 865 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) throw ();
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...) throw ()
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) throw ();
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...) throw ()

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...) throw ()

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 209 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 243 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}




extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = getc_unlocked (__stream);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 868 "/usr/include/stdio.h" 2 3 4





}
# 23 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 2
# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 126 "/usr/include/strings.h" 2 3 4


extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}





# 1 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bcopy (const void *__src, void *__dest, size_t __len) throw ()
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bzero (void *__dest, size_t __len) throw ()
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}
# 145 "/usr/include/strings.h" 2 3 4
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 1 3 4
# 194 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/9/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 2 3 4
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 124 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 26 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE,

  TRAP_BRANCH,

  TRAP_HWBKPT,

  TRAP_UNK

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 210 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();



extern int raise (int __sig) throw ();



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) throw ();




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));






extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();





# 1 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 3 4
extern int tgkill (__pid_t __tgid, __pid_t __tid, int __signal);
# 375 "/usr/include/signal.h" 2 3 4

}
# 29 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 2 3 4
# 6 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/util.h"
# 1 "/usr/include/c++/9/stdlib.h" 1 3
# 36 "/usr/include/c++/9/stdlib.h" 3
# 1 "/usr/include/c++/9/cstdlib" 1 3
# 39 "/usr/include/c++/9/cstdlib" 3
       
# 40 "/usr/include/c++/9/cstdlib" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 1 3
# 256 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 278 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 528 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/os_defines.h" 1 3
# 529 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/cpu_defines.h" 1 3
# 532 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 2 3
# 42 "/usr/include/c++/9/cstdlib" 2 3
# 75 "/usr/include/c++/9/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () __attribute__ ((__warn_unused_result__));



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 360 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 401 "/usr/include/stdlib.h" 3 4
extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) __attribute__ ((__warn_unused_result__));






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) __attribute__ ((__warn_unused_result__));





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () __attribute__ ((__warn_unused_result__));






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 826 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 1014 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) throw () __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) throw () __asm__ ("" "realpath")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) throw () __asm__ ("" "__realpath_chk")


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved) throw ()
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {

      if (__builtin_object_size (__resolved, 2 > 1) < 4096)
 return __realpath_chk_warn (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));

      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }

  return __realpath_alias (__name, __resolved);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ptsname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ptsname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  throw () __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) throw () __asm__ ("" "wctomb")
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__leaf__)) wctomb (char *__s, wchar_t __wchar) throw ()
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw () __asm__ ("" "mbstowcs")


                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__mbstowcs_chk")



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw () __asm__ ("" "wcstombs")


                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__wcstombs_chk")



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
# 1018 "/usr/include/stdlib.h" 2 3 4





}
# 76 "/usr/include/c++/9/cstdlib" 2 3

# 1 "/usr/include/c++/9/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/9/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/9/bits/std_abs.h" 3
# 46 "/usr/include/c++/9/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/c++/9/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "/usr/include/c++/9/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/9/cstdlib" 2 3
# 121 "/usr/include/c++/9/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/9/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/9/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/9/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}
# 99 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 122 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 204 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}
# 261 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 369 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 421 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));





extern char *strerror_l (int __errnum, locale_t __l) throw ();







extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 495 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memmove (void *__dest, const void *__src, size_t __len) throw ()
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 58 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memset (void *__dest, int __ch, size_t __len) throw ()
{
# 71 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}




void __explicit_bzero_chk (void *__dest, size_t __len, size_t __destlen)
  throw () __attribute__ ((__nonnull__ (1)));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) explicit_bzero (void *__dest, size_t __len) throw ()
{
  __explicit_bzero_chk (__dest, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) throw ();
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) throw () __asm__ ("" "stpncpy")
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpncpy (char *__dest, const char *__src, size_t __n) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n > __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcat (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 496 "/usr/include/string.h" 2 3 4



}
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) throw ();
# 395 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));


# 1 "/usr/include/x86_64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4




# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 12 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4






# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4
# 24 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 47 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 6 "/usr/include/linux/stat.h" 2 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 32 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
extern "C" {


int statx (int __dirfd, const char *__restrict __path, int __flags,
           unsigned int __mask, struct statx *__restrict __buf)
  throw () __attribute__ ((__nonnull__ (2, 5)));

}
# 39 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4
# 447 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat (const char *__path, struct stat *__statbuf) throw ()
{
  return __xstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat (const char *__path, struct stat *__statbuf) throw ()
{
  return __lxstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat (int __fd, struct stat *__statbuf) throw ()
{
  return __fxstat (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat (int __fd, const char *__filename, struct stat *__statbuf, int __flag) throw ()

{
  return __fxstatat (1, __fd, __filename, __statbuf, __flag);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknod (const char *__path, __mode_t __mode, __dev_t __dev) throw ()
{
  return __xmknod (0, __path, __mode, &__dev);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknodat (int __fd, const char *__path, __mode_t __mode, __dev_t __dev) throw ()

{
  return __xmknodat (0, __fd, __path, __mode, &__dev);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __xstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __lxstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat64 (int __fd, struct stat64 *__statbuf) throw ()
{
  return __fxstat64 (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf, int __flag) throw ()

{
  return __fxstatat64 (1, __fd, __filename, __statbuf, __flag);
}






}
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 2 3 4
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2

# 1 "./../common/gp-defs.h" 1
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "./../common/gp-time.h" 1
# 24 "./../common/gp-time.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };
# 66 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    void *__restrict __tz) throw () __attribute__ ((__nonnull__ (1)));







extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 187 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 25 "./../common/gp-time.h" 2


# 26 "./../common/gp-time.h"
typedef long long hrtime_t;
typedef struct timespec timestruc_t;






extern "C"
{


  hrtime_t gethrtime (void);
  hrtime_t gethrvtime (void);


}
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h"
# 1 "/usr/include/libintl.h" 1 3 4
# 34 "/usr/include/libintl.h" 3 4

# 34 "/usr/include/libintl.h" 3 4
extern "C" {




extern char *gettext (const char *__msgid)
     throw () __attribute__ ((__format_arg__ (1)));



extern char *dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));



extern char *dcgettext (const char *__domainname,
   const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dcgettext (const char *__domainname,
     const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));




extern char *ngettext (const char *__msgid1, const char *__msgid2,
         unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (1))) __attribute__ ((__format_arg__ (2)));



extern char *dngettext (const char *__domainname, const char *__msgid1,
   const char *__msgid2, unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));



extern char *dcngettext (const char *__domainname, const char *__msgid1,
    const char *__msgid2, unsigned long int __n,
    int __category)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));





extern char *textdomain (const char *__domainname) throw ();



extern char *bindtextdomain (const char *__domainname,
        const char *__dirname) throw ();



extern char *bind_textdomain_codeset (const char *__domainname,
          const char *__codeset) throw ();
# 121 "/usr/include/libintl.h" 3 4
}
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h" 2








# 32 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h"
extern "C"
{

  void init_locale (char *Path);

}
# 33 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/debug.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/debug.h"
extern unsigned int mpmt_debug_opt;
# 34 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 45 "/doner/binutils/binutils-515f23e/gprofng/src/util.h"
inline int
max (int a, int b)
{
  return (a >= b) ? a : b;
}


inline int
min (int a, int b)
{
  return (a <= b) ? a : b;
}


inline int
streq (const char *s1, const char *s2)
{
  return strcmp (s1, s2) == 0;
}



inline char *
StrChr (char *str, char ch)
{
  char *s = strchr (str, ch);
  return s ? (s + 1) : str;
}



inline char *
StrRchr (char *str, char ch)
{
  char *s = strrchr (str, ch);
  return s ? (s + 1) : str;
}

inline char*
STR (const char *s)
{
  return s ? (char*) s : (char*) ((char *) ("NULL"));
}

inline char*
get_str (const char *s, const char *s1)
{
  return s ? (char*) s : (char*) s1;
}

inline char *
get_basename (const char* name)
{
  return StrRchr ((char*) name, '/');
}

inline char *
dbe_strdup (const char *str)
{
  return str ? strdup (str) : 
# 104 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 3 4
                             __null
# 104 "/doner/binutils/binutils-515f23e/gprofng/src/util.h"
                                 ;
}

inline long
dbe_sstrlen (const char *str)
{
  return str ? (long) strlen (str) : 0;
}

inline int
dbe_strcmp (const char *s1, const char *s2)
{
  return s1 ? (s2 ? strcmp (s1, s2) : 1) : (s2 ? -1 : 0);
}


inline double
tstodouble (timestruc_t t)
{
  return (double) t.tv_sec + (double) (t.tv_nsec / 1000000000.0);
}

inline void
hr2timestruc (timestruc_t *d, hrtime_t s)
{
  d->tv_sec = (long) (s / 1000000000);
  d->tv_nsec = (long) (s % 1000000000);
}

inline hrtime_t
timestruc2hr (timestruc_t *s)
{
  return (hrtime_t) s->tv_sec * 1000000000 + (hrtime_t) s->tv_nsec;
}

struct stat64;


extern "C"
{




  void tsadd (timestruc_t *result, timestruc_t *time);
  void tssub (timestruc_t *result, timestruc_t *time1, timestruc_t *time2);
  int tscmp (timestruc_t *time1, timestruc_t *time2);
  void int_max (int *maximum, int count);
  char *strstr_r (char *s1, const char *s2);
  char *strrpbrk (const char *string, const char *brkset);
  char *read_line (FILE *);
  char *parse_qstring (char *in_str, char **endptr);
  char *parse_fname (char *in_str, char **fcontext);
  int get_paren (const char *name);

  uint64_t crc64 (const char *str, size_t len);
  char *canonical_path (char *path);
  char *get_relative_path (char *name);
  char *get_relative_link (const char *path_to, const char *path_from);
  char *get_prog_name (int basename);
  char *dbe_strndup (const char *str, size_t len);
  int dbe_stat (const char *path, struct stat64 *sbuf);
  int dbe_stat_file (const char *path, struct stat64 *sbuf);
  char *dbe_read_dir (const char *path, const char *format);
  char *dbe_get_processes (const char *format);
  char *dbe_create_directories (const char *pathname);
  char *dbe_delete_file (const char *pathname);
  char *dbe_xml2str (const char *s);
  void swapByteOrder (void *p, size_t sz);
  char *dbe_sprintf (const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));
  ssize_t dbe_write (int f, const char *fmt, ...) __attribute__ ((format (printf, 2, 3)));
  char *dbe_create_symlink_to_path (const char *path, const char *dir);
  int64_t read_from_file (int fd, void *buffer, int64_t nbyte);
  uint32_t get_cksum (const char * pathname, char ** errmsg);


}
int catch_out_of_memory (int (*real_main)(int, char*[]), int argc, char *argv[]);
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 1
# 44 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_structs.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_structs.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_types.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_types.h"
typedef unsigned long long Size;
typedef unsigned long long Vaddr;

typedef unsigned long long ull_t;
typedef long long ll_t;
typedef unsigned long ul_t;



enum Platform_t
{
  Unknown = 0,
  Sparc,
  Sparcv9,
  Intel,
  Sparcv8plus,
  Java,
  Amd64,
  Aarch64
};

enum WSize_t
{
  Wnone,
  W32,
  W64
};

enum VMode
{
  VMODE_MACHINE = 0,
  VMODE_USER,
  VMODE_EXPERT
};
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_structs.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/enums.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/enums.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h"
# 1 "/usr/include/nl_types.h" 1 3 4
# 30 "/usr/include/nl_types.h" 3 4

# 30 "/usr/include/nl_types.h" 3 4
extern "C" {


typedef void *nl_catd;


typedef int nl_item;





extern nl_catd catopen (const char *__cat_name, int __flag) __attribute__ ((__nonnull__ (1)));



extern char *catgets (nl_catd __catalog, int __set, int __number,
        const char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern int catclose (nl_catd __catalog) throw () __attribute__ ((__nonnull__ (1)));

}
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h" 2
# 62 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h"

# 62 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h"
typedef struct
{
  int32_t srcname;
  int32_t version;
  int32_t msgcount;
  int32_t paramcount;
  int32_t stringcount;
  int32_t stringlen;
} compcomhdr;
# 89 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h"
typedef enum {
CCMV_WANT = 0x000,

CCMV_UNIMPL = 0x000,

CCMV_OBS = 0x000,



CCMV_VER = 0x001,
CCMV_WARN = 0x002,
CCMV_PAR = 0x004,
CCMV_QUERY = 0x008,
CCMV_LOOP = 0x010,
CCMV_PIPE = 0x020,
CCMV_INLINE = 0x040,
CCMV_MEMOPS = 0x080,
CCMV_FE = 0x100,
CCMV_CG = 0x200,
CCMV_BASIC = 0x400,
CCMV_ALL = 0x7FFFFFFF
} COMPCLASS_ID;

typedef enum ccm_msgid
{




CCM_MODDATE=0x00100,
CCM_COMPVER,

CCM_COMPDATE,

CCM_COMPOPT,

CCM_ACOMPOPT,



CCM_VAR_ALIAS=0x00200,
CCM_FBIRDIFF,


CCM_OPTRED_SWAP,

CCM_OPTRED_CPLX,

CCM_UNKNOWN,


CCM_UNPAR_CALL=0x00400,



CCM_PAR_SER,

CCM_PAR_SER_VER,


CCM_PAR_DRECTV,

CCM_APAR,
CCM_AUTOPAR,

CCM_UNPAR_DD,




CCM_UNPAR_DDA,

CCM_UNPAR_ANONDD,

CCM_UNPAR_ANONDDA,

CCM_PAR_WORK,

CCM_UNPAR_EXIT,

CCM_UNPAR_STRNG,

CCM_UNPAR_IO,

CCM_PAR_BODY_NAME,
CCM_UNPAR_NLOOPIDX,

CCM_UNPAR_DRECTV,

CCM_UNPAR_NOTPROFIT,

CCM_UNPAR_NEST,

CCM_UNPAR,
CCM_UNPAR_NOAUTO,

CCM_PR_L_VAR,




CCM_SH_L_VAR,

CCM_TP_L_VAR,

CCM_RV_L_VAR,

CCM_IM_L_VAR,

CCM_PR_O_VAR,

CCM_SH_O_VAR,

CCM_TP_O_VAR,

CCM_RV_O_VAR,

CCM_IM_O_VAR,

CCM_UNPAR_IN_OMP,

CCM_FP_O_VAR,

CCM_LP_O_VAR,

CCM_CP_O_VAR,

CCM_PR_OAS_VAR,

CCM_SH_OAS_VAR,

CCM_FP_OAS_VAR,

CCM_LP_OAS_VAR,

CCM_RV_OAS_VAR,

CCM_FAIL_OAS_VAR,

CCM_SERIALIZE_OAS,

CCM_UNPAR_CALL_2,

CCM_PAR_DRECTV_2,
CCM_APAR_2,
CCM_AUTOPAR_2,

CCM_UNPAR_DD_2,




CCM_UNPAR_DDA_2,

CCM_UNPAR_ANONDD_2,

CCM_UNPAR_ANONDDA_2,

CCM_PAR_WORK_2,

CCM_UNPAR_EXIT_2,

CCM_UNPAR_STRANGE_2,

CCM_UNPAR_IO_2,

CCM_PAR_BODY_NAME_2,

CCM_UNPAR_NLOOPIDX_2,

CCM_UNPAR_DRECTV_2,

CCM_UNPAR_NOTPROFIT_2,

CCM_UNPAR_NEST_2,

CCM_UNPAR_2,
CCM_UNPAR_NOAUTO_2,

CCM_PR_L_VAR_2,




CCM_SH_L_VAR_2,

CCM_TP_L_VAR_2,

CCM_RV_L_VAR_2,

CCM_IM_L_VAR_2,

CCM_PR_O_VAR_2,

CCM_SH_O_VAR_2,

CCM_TP_O_VAR_2,

CCM_RV_O_VAR_2,

CCM_IM_O_VAR_2,

CCM_UNPAR_IN_OMP_2,

CCM_FP_O_VAR_2,

CCM_LP_O_VAR_2,

CCM_CP_O_VAR_2,

CCM_PR_OAS_VAR_2,

CCM_SH_OAS_VAR_2,

CCM_FP_OAS_VAR_2,

CCM_LP_OAS_VAR_2,

CCM_RV_OAS_VAR_2,

CCM_FAIL_OAS_VAR_2,

CCM_SERIALIZE_OAS_2,




CCM_QPERMVEC=0x00800,

CCM_QEXPR,
CCM_QSAFECALL,


CCM_LCOST=0x01000,

CCM_UNROLL,

CCM_IMIX,


CCM_SPILLS,


CCM_LFISSION,
CCM_LPEEL,

CCM_LBLOCKED,

CCM_LTILED,
CCM_LUNRJAM,
CCM_LWHILE2DO,
CCM_L2CALL,
CCM_LDEAD,
CCM_LINTRCHNG,
CCM_FUSEDTO,
CCM_FUSEDFROM,
CCM_VECINTRNSC,




CCM_LSTRIPMINE,
CCM_LNEST2LOOPS,
CCM_LREVERSE,

CCM_IMIX2,



CCM_LUNRFULL,
CCM_ELIM_NOAMORTINST,

CCM_COMP_DALIGN,

CCM_INTIMIX,


CCM_LMULTI_VERSION,

CCM_LCOST_2,
CCM_UNROLL_2,


CCM_IMIX_B,


CCM_SPILLS_2,


CCM_LFISSION_2,




CCM_LFISSION_FRAG,
CCM_LPEEL_2,

CCM_LBLOCKED_2,

CCM_LOUTER_UNROLL,

CCM_LJAMMED,

CCM_LWHILE2DO_2,
CCM_L2CALL_2,
CCM_LDEAD_2,
CCM_LINTRCHNG_2,
CCM_LINTRCHNG_ORDER,





CCM_FUSED_2,
CCM_VECINTRNSC_2,

CCM_LSTRIPMINE_2,
CCM_LNEST2LOOPS_2,
CCM_LREVERSE_2,
CCM_IMIX2_B,



CCM_LUNRFULL_2,
CCM_ELIM_NOAMORTINST_2,

CCM_COMP_DALIGN_2,

CCM_INTIMIX_2,


CCM_OMP_REGION,
CCM_LMICROVECTORIZE,
CCM_LMULTI_VERSION_2,

CCM_LCLONED,
CCM_LUNSWITCHED,

CCM_LRESWITCHED,


CCM_LSKEWBLOCKED,


CCM_IVSUB,
CCM_ONEITER_REPLACED,

CCM_IMIX3_B,





CCM_PIPELINE=0x02000,
CCM_PIPESTATS,

CCM_NOPIPE_CALL,

CCM_NOPIPE_INTCC,

CCM_NOPIPE_MBAR,

CCM_NOPIPE_MNMX,

CCM_NOPIPE_U2FLT,

CCM_NOPIPE_GOT,

CCM_NOPIPE_IDIV,

CCM_NOPIPE_PRFTCH,

CCM_NOPIPE_EXIT,

CCM_NOPIPE_REG,

CCM_NOPIPE_UNS,

CCM_NOPIPE_UNSUIT,
CCM_NOPIPE_INTRINSIC,

CCM_NOPIPE_BIG,
CCM_NOPIPE_INVINTPR,

CCM_NOPIPE_INVFLTPR,

CCM_NOPIPE_INVDBLPR,

CCM_PIPE_SCHEDAFIPR,

CCM_PIPE_SCHEDAFDPR,

CCM_PIPE_SCHEDAFFPR,

CCM_NOPIPE_INTPR,

CCM_NOPIPE_DBLPR,

CCM_NOPIPE_FLTPR,

CCM_PIPELINE_2,
CCM_PIPESTATS_2,

CCM_NOPIPE_CALL_2,

CCM_NOPIPE_INTCC_2,

CCM_NOPIPE_MBAR_2,

CCM_NOPIPE_MNMX_2,

CCM_NOPIPE_U2FLT_2,

CCM_NOPIPE_GOT_2,

CCM_NOPIPE_IDIV_2,

CCM_NOPIPE_PRFTCH_2,

CCM_NOPIPE_EXIT_2,

CCM_NOPIPE_REG_2,

CCM_NOPIPE_UNS_2,

CCM_NOPIPE_UNSUIT_2,
CCM_NOPIPE_INTRINSIC_2,

CCM_NOPIPE_BIG_2,
CCM_NOPIPE_INVINTPR_2,

CCM_NOPIPE_INVFLTPR_2,

CCM_NOPIPE_INVDBLPR_2,

CCM_PIPE_SCHEDAFIPR_2,

CCM_PIPE_SCHEDAFDPR_2,

CCM_PIPE_SCHEDAFFPR_2,

CCM_NOPIPE_INTPR_2,

CCM_NOPIPE_DBLPR_2,

CCM_NOPIPE_FLTPR_2,



CCM_INLINE=0x04000,

CCM_INLINE2,

CCM_INLINE_TMPLT,

CCM_INLINE_TMPLT2,

CCM_INLINE_OUT_COPY,

CCM_NINLINE_REC,

CCM_NINLINE_NEST,

CCM_NINLINE_CMPLX,

CCM_NINLINE_FB,

CCM_NINLINE_PAR,

CCM_NINLINE_OPT,

CCM_NINLINE_USR,


CCM_NINLINE_AUTO,

CCM_NINLINE_CALLS,

CCM_NINLINE_ACTUAL,

CCM_NINLINE_FORMAL,

CCM_NINLINE_TYPE,

CCM_NINLINE_ATYPE,


CCM_NINLINE_RETTYPE,

CCM_NINLINE_EXCPT,

CCM_NINLINE_UNSAFE,

CCM_NINLINE_ALIAS,


CCM_NINLINE_FEMARK,

CCM_NINLINE_RAREX,

CCM_CLONING,


CCM_INLINE_B,


CCM_INLINE2_B,

CCM_INLINE_LOOP,

CCM_NINLINE_MULTIENTRY,

CCM_NINLINE_VARARGS,

CCM_NINLINE_UNSEEN_BODY,


CCM_NINLINE_UPLEVEL,


CCM_NINLINE_CMDLINE,

CCM_NINLINE_CALL_CMPLX,

CCM_NINLINE_LANG_MISMATCH,

CCM_NINLINE_RTN_WEAK,

CCM_NINLINE_CALL_WEAKFILE,


CCM_NINLINE_CALL_TRYCATCH,


CCM_NINLINE_CALL_REGP,

CCM_NINLINE_RTN_REGP,

CCM_NINLINE_CALL_XPENSV,

CCM_NINLINE_READONLYIR,


CCM_NINLINE_CALL_THUNK,


CCM_NINLINE_CALL_XTARGETS,

CCM_NINLINE_SELFTAIL_RECURSIVE,

CCM_NINLINE_PRAGMA,

CCM_NINLINE_CMPLX2,


CCM_NINLINE_RARE,

CCM_NINLINE_PAR2,


CCM_NINLINE_G_LIMIT,



CCM_NINLINE_L_LIMIT,



CCM_NINLINE_REC2,





CCM_NINLINE_FB2,



CCM_NINLINE_CS_CMPLX,



CCM_NINLINE_R_EXCPT,

CCM_NINLINE_ASM,

CCM_NINLINE_R_READONLYIR,


CCM_NINLINE_C_READONLYIR,


CCM_NINLINE_NEVERRETURN,
# 694 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h"
CCM_MPREFETCH=0x08000,


CCM_MPREFETCH_LD,


CCM_MPREFETCH_ST,


CCM_MPREFETCH_FB,


CCM_MPREFETCH_FB_LD,



CCM_MPREFETCH_FB_ST,



CCM_MLOAD,


CCM_MSTORE,


CCM_MLOAD_P,



CCM_MSTORE_P,






CCM_COPYIN=0x10000,

CCM_COPYOUT,

CCM_COPYINOUT,

CCM_PADDING,

CCM_PADCOMMON,

CCM_ALIGN_EQ,

CCM_ALIGN_PERF,

CCM_ALIGN_STRUCT,

CCM_TMP_COPY,
CCM_TMP_COPYM,

CCM_PROC_MISMATCH,

CCM_PROC_MISMATCH2,

CCM_PROC_MISMATCH3,

CCM_DO_EXPR,

CCM_AUTO_BND,


CCM_LIT_PAD,

CCM_ARRAY_LOOP,
CCM_ARRAY_LOOPNEST,
CCM_ALIGN_PERF2,

CCM_ALIGN_PERF3,

CCM_IO_LOOP_ARRAY,



CCM_TMPCONST,

CCM_TMPDEST,

CCM_DBL_CONST,
CCM_MINLINE,



CCM_MINLINE2,



CCM_MINLINE3,

CCM_MINLINE4,

CCM_TMP_COPYOUT,
CCM_TMP_COPYOUTM,

CCM_TMP_COPYINOUT,
CCM_TMP_COPYINOUTM,





CCM_ARRAY_LOOP_2,
CCM_ARRAY_LOOPNEST_2,




CCM_IO_LOOP_ARRAY_2,

CCM_USER_LOOP,
CCM_FOUND_LOOP,
CCM_MFUNCTION_LOOP,


CCM_FSIMPLE=0x20000,
CCM_STACK,

CCM_TAILRECUR,

CCM_TAILCALL,
CCM_NI_EXIT_OR_PSEUDO,

CCM_NI_BAD_UNARY_OPC,

CCM_NI_INT_LDD_ON_V9,


CCM_NI_LATE_INL_OPC,

CCM_NI_BAD_IMM_OP,


CCM_NI_BAD_STATELEAF,

CCM_NI_BAD_ASR_19,

CCM_NI_BAD_FSR_USE,


CCM_NI_BAD_REGISTER,

CCM_NI_NO_RET_VAL,

CCM_NI_DELAY,

CCM_NI_SCALL,

CCM_CASE_POSITION,

CCM_CALL_WITH_CODE,

CCM_NI_BAD_SP_ADDR,

CCM_NI_BAD_SP_USAGE,

CCM_NI_MIXED_REG_TYPES,

CCM_LAST
} COMPMSG_ID;




typedef struct
{
  int64_t instaddr;
  int32_t lineno;
  COMPMSG_ID msg_type;
  int32_t nparam;
  int32_t param_index;
} compmsg;


extern "C"
{





  void compcom_p_open (char *srcname, int32_t version);





  int32_t compcom_p_string (char *s);





  void compcom_p_putmsg (int32_t show_bits, int64_t pcoffset, int32_t lineno,
    COMPMSG_ID m, int32_t nparams);




  void compcom_p_finalize ();


}
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/enums.h" 2

enum Cmd_status
{
  CMD_OK = 0,
  CMD_BAD,
  CMD_AMBIGUOUS,
  CMD_BAD_ARG,
  CMD_OUTRANGE,
  CMD_INVALID
};

enum LibExpand
{
  LIBEX_SHOW = 0,
  LIBEX_HIDE = 1,
  LIBEX_API = 2
};

enum SrcVisible
{
  SRC_NA = 0,
  SRC_CODE = 1,
  SRC_METRIC = 2
};

enum MetricType
{
  MET_NORMAL = 0,
  MET_CALL,
  MET_DATA,
  MET_INDX,
  MET_CALL_AGR,
  MET_COMMON,
  MET_IO,
  MET_SRCDIS,
  MET_HEAP
};

enum ValueType
{
  VAL_NA = 0,
  VAL_TIMEVAL = 1,
  VAL_VALUE = 2,
  VAL_PERCENT = 4,
  VAL_DELTA = 8,
  VAL_RATIO = 16,
  VAL_INTERNAL = 32,
  VAL_HIDE_ALL = 64
};

enum CompCom
{
  COMP_SRC = CCMV_BASIC + 1,
  COMP_SRC_METRIC,
  COMP_NOSRC,
  COMP_HEX,
  COMP_NOHEX,
  COMP_THRESHOLD,
  COMP_CMPLINE,
  COMP_FUNCLINE
};

enum TLStack_align
{
  TLSTACK_ALIGN_ROOT = 1,
  TLSTACK_ALIGN_LEAF
};

enum Reorder_status
{
  REORDER_SUCCESS,
  REORDER_FAIL,
  REORDER_ZERO,
  REORDER_ONE_FUNC,
  REORDER_FILE_OPEN,
  REORDER_FILE_WRITE,
  REORDER_COMP,
  REORDER_NO_LOAD_OBJ,
  REORDER_NO_OBJECT,
  REORDER_INVALID
};

enum AnUtility_state
{
  EXP_SUCCESS = 0,
  EXP_FAILURE = 1,
  EXP_INCOMPLETE = 2,
  EXP_BROKEN = 4,
  EXP_OBSOLETE = 8
};

enum Presentation_align_type
{
  TEXT_LEFT = 1,
  TEXT_CENTER = 2,
  TEXT_RIGHT = 3
};

enum Message_type
{
  ERROR_MSG = 1,
  WARNING_MSG = 2,
  PSTAT_MSG = 3,
  PWARN_MSG = 4
};

enum Presentation_clock_unit
{
  CUNIT_NULL = -1,
  CUNIT_BYTES = -2,
  CUNIT_TIME = -3
};

enum FuncListDisp_type
{
  DSP_FUNCTION = 1,
  DSP_LINE = 2,
  DSP_PC = 3,
  DSP_SOURCE = 4,
  DSP_DISASM = 5,
  DSP_SELF = 6,
  DSP_CALLER = 7,
  DSP_CALLEE = 8,
  DSP_CALLTREE = 9,
  DSP_TIMELINE = 10,
  DSP_STATIS = 11,
  DSP_EXP = 12,
  DSP_LEAKLIST = 13,
  DSP_MEMOBJ = 14,
  DSP_DATAOBJ = 15,
  DSP_DLAYOUT = 16,
  DSP_SRC_FILE = 17,
  DSP_IFREQ = 18,
  DSP_RACES = 19,
  DSP_INDXOBJ = 20,
  DSP_DUALSOURCE = 21,
  DSP_SOURCE_DISASM = 22,
  DSP_DEADLOCKS = 23,
  DSP_MPI_TL = 24,
  DSP_MPI_CHART = 25,

  DSP_SOURCE_V2 = 27,
  DSP_DISASM_V2 = 28,


  DSP_IOACTIVITY = 31,
  DSP_OVERVIEW = 32,
  DSP_IOVFD = 33,
  DSP_IOCALLSTACK = 34,
  DSP_MINICALLER = 37,
  DSP_HEAPCALLSTACK = 39,
  DSP_CALLFLAME = 40,
  DSP_SAMPLE = 99
};

enum CmpMode
{
  CMP_DISABLE = 0,
  CMP_ENABLE = 1,
  CMP_RATIO = 2,
  CMP_DELTA = 4
};

enum PrintMode
{
  PM_TEXT = 0,
  PM_HTML = 1,
  PM_DELIM_SEP_LIST = 2
};
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_structs.h" 2

typedef enum
{
  Sp_lang_unknown = 0,
  Sp_lang_asm = 1,
  Sp_lang_c = 2,
  Sp_lang_ansic = 3,
  Sp_lang_cplusplus = 4,
  Sp_lang_fortran = 5,
  Sp_lang_pascal = 6,
  Sp_lang_fortran90 = 7,
  Sp_lang_java = 8,
  Sp_lang_c99 = 9,
  Sp_lang_gcc = 16,
  Sp_lang_KAI_KPTS = 32,
  Sp_lang_KAI_KCC = 33,
  Sp_lang_KAI_Kcc = 34
} Sp_lang_code;

struct Value
{
  union
  {
    short s;
    int i;
    float f;
    double d;
    timestruc_t t;
    char *l;
    unsigned long long ll;
  };
};


enum ValueTag
{
  VT_SHORT = 1,
  VT_INT,
  VT_LLONG,
  VT_FLOAT,
  VT_DOUBLE,
  VT_HRTIME,
  VT_LABEL,
  VT_ADDRESS,
  VT_OFFSET,
  VT_ULLONG
};


struct TValue
{
  ValueTag tag;
  bool sign;
  union
  {
    short s;
    int i;
    float f;
    double d;
    char *l;
    void *p;
    long long ll;
    unsigned long long ull;
  };
  double to_double ();
  int to_int ();
  char *to_str (char *str, size_t strsz);
  size_t get_len ();
  void make_delta (TValue *v1, TValue *v2);
  void make_ratio (TValue *v1, TValue *v2);
  int compare (TValue *v);
};





struct Collection_params
{
  int profile_mode;
  long long ptimer_usec;
  int lms_magic_id;
  int sync_mode;
  int sync_threshold;
  int sync_scope;

  int heap_mode;
  int io_mode;
  int race_mode;
  int race_stack;
  int deadlock_mode;
  int omp_mode;

  int hw_mode;
  int xhw_mode;

  char *hw_aux_name[64];
  char *hw_username[64];
  int hw_interval[64];
  int hw_tpc[64];
  int hw_metric_tag[64];
  int hw_cpu_ver[64];

  int sample_periodic;
  int sample_timer;
  int limit;
  const char *pause_sig;
  const char *sample_sig;
  const char *start_delay;
  const char *terminate;
  char *linetrace;
};

const hrtime_t ZERO_TIME = (hrtime_t) 0;
const hrtime_t MAX_TIME = (hrtime_t) 0x7fffffffffffffffLL;
# 153 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_structs.h"
typedef struct
{
  uint64_t text_labelref;
  int32_t entries;
  uint32_t version;
} AnalyzerInfoHdr;

typedef struct
{
  uint32_t offset;
  uint32_t id;
  uint32_t signature;
  uint32_t datatype_id;
} memop_info_t;

typedef struct
{
  uint32_t offset;
} target_info_t;

typedef struct
{
  uint32_t type;
  uint32_t offset;
  union
  {
    memop_info_t *memop;
    target_info_t *target;
  };
} inst_info_t;

class DataObject;

typedef struct
{
  uint32_t datatype_id;
  uint32_t memop_refs;
  uint32_t event_data;
  DataObject *dobj;
} datatype_t;

typedef struct
{
  uint32_t offset;
  uint32_t extent;
  void *parent;
  void *object;
} symbol_t;

typedef struct
{
  char *old_prefix;
  char *new_prefix;
} pathmap_t;

typedef struct
{
  char *libname;
  enum LibExpand expand;
} lo_expand_t;

typedef struct
{
  int index1;
  int index2;
} int_pair_t;
# 45 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4

# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 2
# 1 "/usr/include/inttypes.h" 1 3 4
# 266 "/usr/include/inttypes.h" 3 4
extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) throw () __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      throw () __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) throw ();


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) throw ();


extern intmax_t wcstoimax (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();


extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     throw ();





extern long int __strtol_internal (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) strtoimax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __strtoul_internal (const char *__restrict __nptr,
          char ** __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) strtoumax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtoul_internal (nptr, endptr, base, 0);
}

extern long int __wcstol_internal (const wchar_t * __restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) wcstoimax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __wcstoul_internal (const wchar_t *
          __restrict __nptr,
          wchar_t **
          __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) wcstoumax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstoul_internal (nptr, endptr, base, 0);
}
# 432 "/usr/include/inttypes.h" 3 4
}
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 2

# 1 "/usr/include/c++/9/stdlib.h" 1 3
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 2







# 34 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
void destroy (void *vec);

typedef int (*CompareFunc)(const void*, const void*);
typedef int (*ExtCompareFunc)(const void*, const void*, const void*);
typedef int (*SearchFunc)(char*, char*);

extern "C"
{
  typedef int (*StdCompareFunc)(const void*, const void*);
}

enum Search_type
{
  LINEAR,
  BINARY,
  HASH
};

enum Direction
{
  FORWARD,
  REVERSE
};

enum VecType
{
  VEC_VOID = 0,
  VEC_INTEGER,
  VEC_CHAR,
  VEC_BOOL,
  VEC_DOUBLE,
  VEC_LLONG,
  VEC_VOIDARR,
  VEC_STRING,
  VEC_INTARR,
  VEC_BOOLARR,
  VEC_LLONGARR,
  VEC_STRINGARR,
  VEC_DOUBLEARR
};

template <class ITEM> void
qsort (ITEM *, size_t, ExtCompareFunc, void *);

template <typename ITEM> class Vector
{
public:

  Vector ()
  {
    count = 0;
    data = 
# 85 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
          __null
# 85 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
              ;
    limit = 0;
    sorted = false;
  };

  Vector (long sz);

  virtual
  ~Vector ()
  {
    free (data);
  }

  void append (const ITEM item);
  void addAll (Vector<ITEM> *vec);
  Vector<ITEM> *copy ();

  ITEM
  fetch (long index)
  {
    return data[index];
  }

  ITEM
  get (long index)
  {
    return data[index];
  }



  long find (const ITEM item);
  long find_r (const ITEM item);



  void insert (long index, const ITEM item);


  void incorporate (const ITEM item, CompareFunc func);



  ITEM remove (long index);


  void swap (long index1, long index2);

  long
  size ()
  {
    return count;
  }


  void store (long index, const ITEM item);

  void
  put (long index, const ITEM item)
  {
    store (index, item);
  }


  void
  sort (CompareFunc compare, void *arg = 
# 150 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
                                        __null
# 150 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                                            )
  {
    qsort (data, count, (ExtCompareFunc) compare, arg);
    sorted = true;
  }


  long bisearch (long start, long end, void *key, CompareFunc func);
  void destroy ();

  void
  reset ()
  {
    count = 0;
    sorted = false;
  }

  bool
  is_sorted ()
  {
    return sorted;
  }

  virtual VecType
  type ()
  {
    return VEC_VOID;
  }

  virtual void
  dump (const char * )
  {
    return;
  }

private:

  void resize (long index);

  ITEM *data;
  long count;
  long limit;
  bool sorted;
};

template<> VecType Vector<int>::type ();
template<> VecType Vector<unsigned>::type ();
template<> VecType Vector<char>::type ();
template<> VecType Vector<bool>::type ();
template<> VecType Vector<double>::type ();
template<> VecType Vector<long long>::type ();
template<> VecType Vector<uint64_t>::type ();
template<> VecType Vector<void*>::type ();
template<> VecType Vector<char*>::type ();
template<> VecType Vector<Vector<int>*>::type ();
template<> VecType Vector<Vector<char*>*>::type ();
template<> VecType Vector<Vector<long long>*>::type ();
template<> void Vector<char *>::destroy ();
# 220 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
template <typename ITEM>
Vector<ITEM>::Vector (long sz)
{
  count = 0;
  limit = sz > 0 ? sz : 1024;
  data = limit ? (ITEM *) malloc (sizeof (ITEM) * limit) : 
# 225 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
                                                          __null
# 225 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                                                              ;
  sorted = false;
}

template <typename ITEM> void
Vector<ITEM>
::resize (long index)
{
  if (index < limit)
    return;
  if (limit < 16)
    limit = 16;
  while (index >= limit)
    {
      if (limit > 1024*1024*1024)
 limit += 1024*1024*1024;
      else
 limit = limit * 2;
    }
  data = (ITEM *) realloc (data, limit * sizeof (ITEM));
}

template <typename ITEM> void
Vector<ITEM>::append (const ITEM item)
{

  if (count >= limit)
    resize (count);
  data[count++] = item;
}

template <typename ITEM> void
Vector<ITEM>::addAll (Vector<ITEM> *vec)
{
  if (vec)
    for (int i = 0, sz = vec->size (); i < sz; i++)
      append (vec->fetch (i));
}

template <typename ITEM> Vector<ITEM> *
Vector<ITEM>::copy ()
{

  Vector<ITEM> *vector;
  vector = new Vector<ITEM>;
  vector->count = count;
  vector->limit = limit;
  vector->data = (ITEM *) malloc (sizeof (ITEM) * limit);
  (void) memcpy ((char *) vector->data, (char *) data, sizeof (ITEM) * count);
  return vector;
}

template <typename ITEM> long
Vector<ITEM>::find (const ITEM match_item)
{
  for (long i = 0; i < size (); i++)
    if (match_item == get (i))
      return i;
  return -1;
}

template <typename ITEM> long
Vector<ITEM>::find_r (const ITEM match_item)
{
  for (long i = size () - 1; i >= 0; i--)
    if (match_item == get (i))
      return i;
  return -1;
}

template <typename ITEM> void
Vector<ITEM>::insert (long index, const ITEM item)
{





  
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 (static_cast <bool> (
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 index >= 0
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 ) ? void (0) : __assert_fail (
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 "index >= 0"
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/vec.h", 303, __extension__ __PRETTY_FUNCTION__))
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                    ;
  
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 (static_cast <bool> (
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 index <= count
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 ) ? void (0) : __assert_fail (
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 "index <= count"
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/vec.h", 304, __extension__ __PRETTY_FUNCTION__))
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                        ;
  append (item);
  (void) memmove (((char *) (&data[index + 1])), (char *) (&data[index]),
    (count - index - 1) * sizeof (ITEM));
  data[index] = item;
}

template <typename ITEM> ITEM
Vector<ITEM>::remove (long index)
{


  
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 (static_cast <bool> (
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 index >= 0
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 ) ? void (0) : __assert_fail (
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 "index >= 0"
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/vec.h", 316, __extension__ __PRETTY_FUNCTION__))
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                    ;
  
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 (static_cast <bool> (
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 index < count
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 ) ? void (0) : __assert_fail (
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 "index < count"
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/vec.h", 317, __extension__ __PRETTY_FUNCTION__))
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                       ;
  ITEM item = data[index];
  for (long i = index + 1; i < count; i++)
    data[i - 1] = data[i];
  count--;

  data[count] = item;
  return data[count];
}

template <typename ITEM> void
Vector<ITEM>::swap (long index1, long index2)
{
  ITEM item;
  item = data[index1];
  data[index1] = data[index2];
  data[index2] = item;
}

template <typename ITEM> void
Vector<ITEM>::store (long index, const ITEM item)
{
  if (index >= count)
    {
      resize (index);
      memset (&data[count], 0, (index - count) * sizeof (ITEM));
      count = index + 1;
    }
  data[index] = item;
}







template <typename ITEM> long
Vector<ITEM>::bisearch (long start, long end, void *key, CompareFunc compare)
{
  ITEM *itemp;
  if (end == -1)
    end = count;
  if (start >= end)
    return -1;
  itemp = (ITEM *) bsearch ((char *) key, (char *) &data[start],
     end - start, sizeof (ITEM), (StdCompareFunc) compare);
  if (itemp == (ITEM *) 0)
    return -1;
  return (long) (itemp - data);
}

template <typename ITEM> void
Vector<ITEM>::incorporate (const ITEM item, CompareFunc compare)
{
  long lt = 0;
  long rt = count - 1;
  while (lt <= rt)
    {
      long md = (lt + rt) / 2;
      if (compare (data[md], item) < 0)
 lt = md + 1;
      else
 rt = md - 1;
    }
  if (lt == count)
    append (item);
  else
    insert (lt, item);
}



template <typename ITEM> void
qsort (ITEM *base, size_t nelem, ExtCompareFunc qcmp, void *arg)
{
  for (;;)
    {

      if (nelem < 6)
 {
   for (size_t i = 1; i < nelem; i++)
     {
       ITEM *p = base + i;
       ITEM *q = p - 1;
       if (qcmp (q, p, arg) > 0)
  {
    ITEM t = *p;
    *p = *q;
    while (q > base && qcmp (q - 1, &t, arg) > 0)
      {
        *q = *(q - 1);
        --q;
      }
    *q = t;
  }
     }
   return;
 }

      ITEM *last = base + nelem - 1;
      ITEM *mid = base + nelem / 2;

      ITEM *a1 = base, *a2, *a3;
      if (qcmp (base, mid, arg) > 0)
 {
   if (qcmp (mid, last, arg) > 0)
     {
       a2 = last;
       a3 = last;
     }
   else if (qcmp (base, last, arg) > 0)
     {
       a2 = mid;
       a3 = last;
     }
   else
     {
       a2 = mid;
       a3 = mid;
     }
 }
      else if (qcmp (mid, last, arg) > 0)
 {
   a1 = mid;
   a3 = last;
   if (qcmp (base, last, arg) > 0)
     a2 = base;
   else
     a2 = a3;
 }
      else
 a3 = a2 = a1;
      if (a1 != a2)
 {
   ITEM t = *a1;
   *a1 = *a2;
   if (a2 != a3)
     *a2 = *a3;
   *a3 = t;
 }


      ITEM *i = base + 1;
      ITEM *j = last - 1;
      for (;;)
 {
   while (i < mid && qcmp (i, mid, arg) <= 0)
     i++;
   while (j > mid && qcmp (mid, j, arg) <= 0)
     j--;
   if (i == j)
     break;
   ITEM t = *i;
   *i = *j;
   *j = t;
   if (i == mid)
     {
       mid = j;
       i++;
     }
   else if (j == mid)
     {
       mid = i;
       j--;
     }
   else
     {
       i++;
       j--;
     }
 }



      size_t nleft = mid - base;
      size_t nright = nelem - nleft - 1;
      if (nleft <= nright)
 {
   qsort (base, nleft, qcmp, arg);
   base = mid + 1;
   nelem = nright;
 }
      else
 {
   qsort (mid + 1, nright, qcmp, arg);
   nelem = nleft;
 }
    }
}

template<> inline void
Vector<char*>::destroy ()
{
  for (long i = 0; i < count; i++)
    free (data[i]);
  count = 0;
}

template <typename ITEM> inline void
Vector<ITEM>::destroy ()
{
  for (long i = 0; i < count; i++)
    delete data[i];
  count = 0;
}
# 46 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h" 1
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h"
# 1 "./vec.h" 1
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h" 2
# 1 "./Map.h" 1
# 24 "./Map.h"
# 1 "./vec.h" 1
# 25 "./Map.h" 2

template <typename Key_t, typename Value_t>
class Map
{
public:

  enum Relation
  {
    REL_LT,
    REL_LE,
    REL_EQ,
    REL_GE,
    REL_GT
  };

  virtual ~Map () { };
  virtual void put (Key_t key, Value_t val) = 0;
  virtual Value_t get (Key_t key) = 0;
  virtual Value_t get (Key_t key, Relation rel) = 0;
  virtual Value_t remove (Key_t key) = 0;

  virtual Vector<Key_t> *
  keySet ()
  {
    return 
# 49 "./Map.h" 3 4
          __null
# 49 "./Map.h"
              ;
  }

  virtual Vector<Value_t> *
  values ()
  {
    return 
# 55 "./Map.h" 3 4
          __null
# 55 "./Map.h"
              ;
  }
};
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h" 2
# 1 "./HashMap.h" 1
# 27 "./HashMap.h"
# 1 "./util.h" 1
# 28 "./HashMap.h" 2
# 1 "./StringBuilder.h" 1
# 30 "./StringBuilder.h"
class StringBuilder
{
public:
  StringBuilder ();
  StringBuilder (int capacity);
  virtual ~StringBuilder ();

  int
  length ()
  {
    return count;
  }

  int
  capacity ()
  {
    return maxCapacity;
  }

  bool endsWith (const char str[]);
  void ensureCapacity (int minimumCapacity);
  void expandCapacity (int minimumCapacity);
  void trimToSize ();
  void trim ();
  void setLength (int newLength);
  char charAt (int index);
  void getChars (int srcBegin, int srcEnd, char dst[], int dstBegin);
  void setCharAt (int index, char ch);
  StringBuilder *append (StringBuilder *sb);
  StringBuilder *append (const char str[]);
  StringBuilder *append (const char str[], int offset, int len);
  StringBuilder *append (bool b);
  StringBuilder *append (char c);
  StringBuilder *append (int i);
  StringBuilder *append (unsigned int i);
  StringBuilder *append (long lng);
  StringBuilder *append (unsigned long i);
  StringBuilder *append (long long lng);
  StringBuilder *append (unsigned long long lng);
  StringBuilder *append (float f);
  StringBuilder *append (double d);
  StringBuilder *_delete (int start, int end);
  StringBuilder *deleteCharAt (int index);
  StringBuilder *insert (int index, const char str[], int offset, int len);
  StringBuilder *insert (int offset, const char str[]);
  StringBuilder *insert (int offset, bool b);
  StringBuilder *insert (int offset, char c);
  StringBuilder *insert (int offset, int i);
  StringBuilder *insert (int offset, long l);
  StringBuilder *insert (int offset, float f);
  StringBuilder *insert (int offset, double d);
  StringBuilder *reverse ();
  char *toString ();
  void toFile (FILE *fp);
  void toFileLn (FILE *fp);
  void write (int fd);


  StringBuilder *appendf (const char *fmt, ...) __attribute__ ((format (printf, 2, 3)));
  StringBuilder *sprintf (const char *fmt, ...) __attribute__ ((format (printf, 2, 3)));

  int indexOf (const char str[]);
  int indexOf (const char str[], int fromIndex);
  int lastIndexOf (const char str[]);
  int lastIndexOf (const char str[], int fromIndex);

private:
  char *value;
  int count;
  int maxCapacity;
};
# 29 "./HashMap.h" 2
# 1 "./Histable.h" 1
# 40 "./Histable.h"
# 1 "./dbe_structs.h" 1
# 41 "./Histable.h" 2
# 1 "./Emsg.h" 1
# 24 "./Emsg.h"
# 1 "./Emsgnum.h" 1
# 25 "./Emsg.h" 2
# 35 "./Emsg.h"
class Emsg;
class Emsgqueue;
class StringBuilder;

typedef enum
{
  CMSG_WARN = 0,
  CMSG_ERROR,
  CMSG_FATAL,
  CMSG_COMMENT,
  CMSG_PARSER,
  CMSG_ARCHIVE
} Cmsg_warn;

class Emsg
{
public:
  friend class Emsgqueue;

  Emsg (Cmsg_warn w, const char *i18n_text);
  Emsg (Cmsg_warn w, StringBuilder& sb);
  Emsg (Cmsg_warn w, int f, const char *param);
  ~Emsg ();

  char *
  get_msg ()
  {
    return text;
  };

  Cmsg_warn
  get_warn ()
  {
    return warn;
  };

  Emsg *next;

protected:
  Cmsg_warn warn;
  int flavor;
  char *par;
  char *text;
};

class Emsgqueue
{
public:
  Emsgqueue (char *);
  ~Emsgqueue ();

  void append (Emsg*);
  Emsg *append (Cmsg_warn w, char *msg);
  Emsg *find_msg (Cmsg_warn w, char *msg);
  void appendqueue (Emsgqueue*);
  Emsg *fetch (void);
  void clear (void);
  void mark_clear (void);

protected:
  Emsg *first;
  Emsg *last;
  char *qname;
};

class DbeMessages
{
public:
  DbeMessages ();
  ~DbeMessages ();
  Vector<Emsg*> *msgs;
  void remove_msg (Emsg *msg);
  Emsg *get_error ();
  Emsg *append_msg (Cmsg_warn w, const char *fmt, ...);
  void append_msgs (Vector<Emsg*> *lst);
};
# 42 "./Histable.h" 2
# 1 "./Expression.h" 1
# 26 "./Expression.h"
class Experiment;
class DataView;
class DbeView;
class Histable;

class Expression
{
public:

  class Context
  {
  public:
    Context (DbeView *_dbev, Experiment *_exp = 0);
    Context (DbeView *_dbev, Experiment *_exp, DataView *_dview, long _eventId);

    ~Context () { };

    void
    put (DataView *d, long id)
    {
      dview = d;
      eventId = id;
    };

    void
    put (Experiment *_exp)
    {
      exp = _exp;
    };

    Experiment *exp;
    DataView *dview;
    DbeView *dbev;
    long eventId;
  };

  enum OpCode
  {
    OP_NONE,
    OP_QWE,
    OP_COLON,
    OP_OR,
    OP_AND,
    OP_NOT,
    OP_EQV,
    OP_NEQV,
    OP_BITOR,
    OP_BITAND,
    OP_BITXOR,
    OP_BITNOT,
    OP_EQ,
    OP_NE,
    OP_LT,
    OP_GT,
    OP_LE,
    OP_GE,
    OP_LS,
    OP_RS,
    OP_ADD,
    OP_MINUS,
    OP_MUL,
    OP_DIV,
    OP_REM,
    OP_DEG,
    OP_COMMA,
    OP_IN,
    OP_SOMEIN,
    OP_ORDRIN,
    OP_NUM,
    OP_NAME,
    OP_FUNC,
    OP_FILE,
    OP_JAVA,
    OP_HASPROP,
    OP_LIBRARY_IN,
    OP_LIBRARY_SOMEIN,
    OP_LIBRARY_ORDRIN
  };

  enum FuncCode
  {
    FUNC_FNAME,
    FUNC_DNAME
  };

  enum JavaCode
  {
    JAVA_JGROUP,
    JAVA_JPARENT
  };

  Expression (OpCode, const Expression*, const Expression* = 0);
  Expression (OpCode, uint64_t);
  Expression (const Expression &rhs);
  Expression (const Expression *rhs);
  Expression &operator= (const Expression &rhs);
  ~Expression ();

  Expression *
  copy () const
  {
    return new Expression (this);
  }
  void copy (const Expression *rhs);

  uint64_t
  eval (Context *ctx)
  {
    return bEval (ctx) ? v.val : 0;
  };

  bool
  passes (Context *ctx)
  {
    return bEval (ctx) ? v.val != 0 : true;
  };

  bool
  complete ()
  {
    return op == OP_NUM;
  };

  bool verifyObjectInExpr (Histable *obj);
  Expression *
  pEval (Context *ctx);

private:

  struct Value
  {

    Value (uint64_t _val = 0, Value *_next = 0) : val (_val), next (_next)
    {
      fn = 0;
    }
    uint64_t val;
    uint64_t fn;
    Value *next;
  };

  bool getVal (int propId, Context *ctx);
  bool bEval (Context *ctx);
  bool hasLoadObject ();

  OpCode op;
  Value v;
  Expression *arg0;
  Expression *arg1;
};
# 43 "./Histable.h" 2

class DataObject;
class Function;
class SourceFile;
class DbeFile;
class DbeLine;
template <class ITEM> class Vector;

class Histable
{
  friend class Hist_data;
public:

  enum Type
  {
    INSTR, LINE, FUNCTION, MODULE, LOADOBJECT,
    EADDR, MEMOBJ, INDEXOBJ, PAGE, DOBJECT,
    SOURCEFILE, IOACTFILE, IOACTVFD, IOCALLSTACK,
    HEAPCALLSTACK, EXPERIMENT, OTHER
  };



  enum NameFormat
  {
    NA, LONG, SHORT, MANGLED, SONAME = 0x10
  };

  static NameFormat
  make_fmt (int fnfmt, bool sofmt = false)
  {
    return (NameFormat) (sofmt ? fnfmt | SONAME : fnfmt);
  }

  static int
  fname_fmt (NameFormat fmt)
  {
    return (fmt & ~SONAME);
  }

  static bool
  soname_fmt (NameFormat fmt)
  {
    return (fmt & SONAME);
  }

  Histable ();
  char *dump ();

  virtual ~Histable ();

  virtual char *
  get_name (NameFormat = NA)
  {
    return name;
  }

  virtual void
  set_name (char * _name)
  {
    name = _name;
  }

  virtual void set_name_from_context (Expression::Context *) { }
  virtual Type get_type () = 0;

  virtual int64_t
  get_size ()
  {
    return 0;
  }

  virtual uint64_t
  get_addr ()
  {
    return 0ULL;
  }

  virtual Vector<Histable*> *get_comparable_objs ();
  Histable *get_compare_obj ();

  virtual Histable *
  convertto (Type, Histable* = 
# 125 "./Histable.h" 3 4
                              __null
# 125 "./Histable.h"
                                  )
  {
    return this;
  }

  Vector<Histable*> *comparable_objs;
  int64_t id;

protected:
  char *name;
  int phaseCompareIdx;
  void update_comparable_objs ();
  void dump_comparable_objs ();
  char *type_to_string ();
  void delete_comparable_objs ();
};

typedef Histable::Type Histable_type;


class Other : public Histable
{
public:

  virtual Type
  get_type ()
  {
    return OTHER;
  }

  uint64_t value64;
  uint32_t tag;
};





class DbeInstr : public Histable
{
public:
  DbeInstr (uint64_t _id, int _flags, Function *_func, uint64_t _addr);

  virtual Type
  get_type ()
  {
    return INSTR;
  }

  virtual char *get_name (NameFormat = NA);
  virtual int64_t get_size ();
  virtual uint64_t get_addr ();
  virtual Histable *convertto (Type type, Histable *obj = 
# 177 "./Histable.h" 3 4
                                                         __null
# 177 "./Histable.h"
                                                             );
  DbeLine *mapPCtoLine (SourceFile *sf);
  void add_inlined_info (StringBuilder *sb);
  char *get_descriptor ();
  int pc_cmp (DbeInstr *instr2);

  uint64_t addr;
  uint64_t img_offset;
  int flags;
  Function *func;
  int lineno;
  int inlinedInd;
  int64_t size;
  bool isUsed;

private:
  NameFormat current_name_format;
};

class DbeEA : public Histable
{
public:

  DbeEA (DataObject *_dobj, Vaddr _eaddr)
  {
    dobj = _dobj;
    eaddr = _eaddr;
  };

  virtual Type
  get_type ()
  {
    return EADDR;
  };

  virtual int64_t
  get_size ()
  {
    return 1;
  };

  virtual uint64_t
  get_addr ()
  {
    return eaddr;
  };

  virtual char *get_name (NameFormat = NA);
  virtual Histable *convertto (Type type, Histable *obj = 
# 225 "./Histable.h" 3 4
                                                         __null
# 225 "./Histable.h"
                                                             );

  DataObject *dobj;
  Vaddr eaddr;
};
# 259 "./Histable.h"
class DbeLine : public Histable
{
public:

  enum Flag
  {
    OMPPRAGMA = 1
  };

  DbeLine (Function *_func, SourceFile *sf, int _lineno);
  virtual ~DbeLine ();
  virtual char *get_name (NameFormat = NA);
  virtual int64_t get_size ();
  virtual uint64_t get_addr ();
  virtual Histable *convertto (Type type, Histable *obj = 
# 273 "./Histable.h" 3 4
                                                         __null
# 273 "./Histable.h"
                                                             );

  void init_Offset (uint64_t p_offset);
  int line_cmp (DbeLine *dbl);

  virtual Type
  get_type ()
  {
    return LINE;
  }

  void
  set_flag (Flag flag)
  {
    flags |= flag;
  }

  bool
  is_set (Flag flag)
  {
    return (flags & flag) != 0;
  }

  Function *func;
  int lineno;
  int64_t size;
  SourceFile *sourceFile;
  SourceFile *include;

  DbeLine *dbeline_base;







  DbeLine *dbeline_func_next;







private:
  int current_name_format;
  int64_t offset;
  int flags;
};

class HistableFile : public Histable, public DbeMessages
{
public:
  HistableFile ();

  bool isUsed;
  DbeFile *dbeFile;
};
# 30 "./HashMap.h" 2
# 1 "./MemObject.h" 1
# 27 "./MemObject.h"
class MemObj : public Histable
{
public:
  friend class MemorySpace;

  MemObj (uint64_t _index, char *_name);
  ~MemObj ();

  virtual Histable *convertto (Histable_type, Histable* = 
# 35 "./MemObject.h" 3 4
                                                         __null
# 35 "./MemObject.h"
                                                             );

  virtual Histable_type
  get_type ()
  {
    return MEMOBJ;
  }

  virtual char *
  get_name (NameFormat = NA)
  {
    return dbe_strdup (name);
  }

  virtual uint64_t
  get_addr ()
  {
    return id;
  }

  uint64_t
  get_index ()
  {
    return id;
  }
};
# 31 "./HashMap.h" 2

template <typename Key_t> inline int get_hash_code (Key_t a);
template <typename Key_t> inline bool is_equals (Key_t a, Key_t b);
template <typename Key_t> inline Key_t copy_key (Key_t a);
template <typename Key_t> inline void delete_key (Key_t a);


template<> inline int
get_hash_code (char *a)
{
  return (int) (crc64 (a, strlen (a)) & 0x7fffffff);
}

template<> inline bool
is_equals (char *a, char *b)
{
  return dbe_strcmp (a, b) == 0;
}

template<> inline char *
copy_key (char *a)
{
  return dbe_strdup (a);
}

template<> inline void
delete_key (char *a)
{
  return free (a);
}

template<> inline int
get_hash_code (uint64_t a)
{
  return (int) (a & 0x7fffffff);
}

template<> inline bool
is_equals (uint64_t a, uint64_t b)
{
  return a == b;
}

template<> inline uint64_t
copy_key (uint64_t a)
{
  return a;
}

template<> inline void
delete_key (uint64_t a)
{
  a = a;
}

template<> inline int
get_hash_code (Histable* a)
{
  return (int) (a->id & 0x7fffffff);
}

template<> inline bool
is_equals (Histable* a, Histable* b)
{
  return a == b;
}

template<> inline Histable*
copy_key (Histable* a)
{
  return a;
}

template<> inline void
delete_key (Histable* a)
{
  a->id = a->id;
}

template<> inline int
get_hash_code (MemObj* a)
{
  return (int) (a->id & 0x7fffffff);
}

template<> inline bool
is_equals (MemObj* a, MemObj* b)
{
  return a == b;
}

template<> inline MemObj*
copy_key (MemObj* a)
{
  return a;
}

template<> inline void
delete_key (MemObj* a)
{
  a->id = a->id;
}

template <typename Key_t, typename Value_t>
class HashMap
{
public:
  HashMap (int initialCapacity = 0);

  ~HashMap ()
  {
    clear ();
    delete vals;
    delete[] hashTable;
  }

  Value_t put (Key_t key, Value_t val);
  Value_t get (Key_t key);
  Value_t get (Key_t key, Value_t val);
  void clear ();
  Value_t remove (Key_t);
  Vector<Value_t> *values (Key_t key);

  bool
  containsKey (Key_t key)
  {
    Value_t p = get (key);
    return p != 
# 158 "./HashMap.h" 3 4
               __null
# 158 "./HashMap.h"
                   ;
  };

  Vector<Value_t> *
  values ()
  {
    return vals;
  }

  void
  reset ()
  {
    clear ();
  }

  int
  get_phaseIdx ()
  {
    return phaseIdx;
  }

  void
  set_phaseIdx (int phase)
  {
    if (phase == 0) clear ();
    phaseIdx = phase;
  }
  char *dump ();

private:

  enum
  {
    HASH_SIZE = 511,
    MAX_HASH_SIZE = 1048575
  };

  typedef struct Hash
  {
    Key_t key;
    Value_t val;
    struct Hash *next;
  } Hash_t;

  void resize ();

  int
  hashCode (Key_t key)
  {
    return get_hash_code (key) % hash_sz;
  }

  bool
  equals (Key_t a, Key_t b)
  {
    return is_equals (a, b);
  }

  Key_t
  copy (Key_t key)
  {
    return copy_key (key);
  }

  Hash_t **hashTable;
  Vector<Value_t> *vals;
  int phaseIdx;
  int hash_sz;
  int nelem;
};

template <typename Key_t, typename Value_t>
HashMap<Key_t, Value_t>
::HashMap (int initialCapacity)
{
  if (initialCapacity > 0)
    vals = new Vector<Value_t>(initialCapacity);
  else
    vals = new Vector<Value_t>();
  phaseIdx = 0;
  nelem = 0;
  hash_sz = HASH_SIZE;
  hashTable = new Hash_t*[hash_sz];
  for (int i = 0; i < hash_sz; i++)
    hashTable[i] = 
# 242 "./HashMap.h" 3 4
                  __null
# 242 "./HashMap.h"
                      ;
}

template <typename Key_t, typename Value_t>
void
HashMap<Key_t, Value_t>::clear ()
{
  vals->reset ();
  phaseIdx = 0;
  nelem = 0;
  for (int i = 0; i < hash_sz; i++)
    {
      Hash_t *next;
      for (Hash_t *p = hashTable[i]; p; p = next)
 {
   next = p->next;
   delete_key (p->key);
   delete p;
 }
      hashTable[i] = 
# 261 "./HashMap.h" 3 4
                    __null
# 261 "./HashMap.h"
                        ;
    }
}

template <typename Key_t, typename Value_t>
void
HashMap<Key_t, Value_t>::resize ()
{
  int old_hash_sz = hash_sz;
  hash_sz = old_hash_sz * 2 + 1;
  Hash_t **old_hash_table = hashTable;
  hashTable = new Hash_t*[hash_sz];
  for (int i = 0; i < hash_sz; i++)
    hashTable[i] = 
# 274 "./HashMap.h" 3 4
                  __null
# 274 "./HashMap.h"
                      ;
  nelem = 0;
  for (int i = 0; i < old_hash_sz; i++)
    {
      if (old_hash_table[i] != 
# 278 "./HashMap.h" 3 4
                              __null
# 278 "./HashMap.h"
                                  )
 {
   Hash_t *old_p;
   Hash_t *p = old_hash_table[i];
   while (p != 
# 282 "./HashMap.h" 3 4
              __null
# 282 "./HashMap.h"
                  )
     {
       put (p->key, p->val);
       old_p = p;
       p = p->next;
       delete old_p;
     }
 }
    }
  delete[] old_hash_table;
}

template <typename Key_t, typename Value_t>
Value_t
HashMap<Key_t, Value_t>::get (Key_t key)
{
  int hash_code = hashCode (key);
  for (Hash_t *p = hashTable[hash_code]; p; p = p->next)
    if (equals (key, p->key))
      return p->val;
  return 
# 302 "./HashMap.h" 3 4
        __null
# 302 "./HashMap.h"
            ;
}

template <typename Key_t, typename Value_t>
Vector<Value_t> *
HashMap<Key_t, Value_t>::values (Key_t key)
{
  Vector<Value_t> *list = new Vector<Value_t>();
  int hash_code = hashCode (key);
  for (Hash_t *p = hashTable[hash_code]; p; p = p->next)
    {
      if (equals (key, p->key))
 list->append (p->val);
    }
  return list;
}

template <typename Key_t, typename Value_t>
Value_t
HashMap<Key_t, Value_t>::get (const Key_t key, Value_t val)
{
  int hash_code = hashCode (key);
  Hash_t *p, *first = 
# 324 "./HashMap.h" 3 4
                     __null
# 324 "./HashMap.h"
                         ;
  for (p = hashTable[hash_code]; p; p = p->next)
    {
      if (equals (key, p->key))
 {
   if (first == 
# 329 "./HashMap.h" 3 4
               __null
# 329 "./HashMap.h"
                   )
     first = p;
   if (val == p->val)
     return first->val;
 }
    }
  vals->append (val);
  p = new Hash_t ();
  p->val = val;
  p->key = copy (key);
  if (first)
    {
      p->next = first->next;
      first->next = p;
      return first->val;
    }
  else
    {
      p->next = hashTable[hash_code];
      hashTable[hash_code] = p;
      return val;
    }
}

template <typename Key_t, typename Value_t>
Value_t
HashMap<Key_t, Value_t>::remove (Key_t key)
{
  int hash_code = hashCode (key);
  Value_t val = 
# 358 "./HashMap.h" 3 4
               __null
# 358 "./HashMap.h"
                   ;
  for (Hash_t *prev = 
# 359 "./HashMap.h" 3 4
                     __null
# 359 "./HashMap.h"
                         , *p = hashTable[hash_code]; p != 
# 359 "./HashMap.h" 3 4
                                                           __null
# 359 "./HashMap.h"
                                                               ;)
    {
      if (equals (key, p->key))
 {
   if (prev == 
# 363 "./HashMap.h" 3 4
              __null
# 363 "./HashMap.h"
                  )
     hashTable[hash_code] = p->next;
   else
     prev->next = p->next;
   if (val == 
# 367 "./HashMap.h" 3 4
             __null
# 367 "./HashMap.h"
                 )
     val = p->val;
   delete_key (p->key);
   delete p;
 }
      else
 {
   prev = p;
   p = p->next;
 }
    }
  return val;
}

template <typename Key_t, typename Value_t>
Value_t
HashMap<Key_t, Value_t>::put (Key_t key, Value_t val)
{
  int hash_code = hashCode (key);
  vals->append (val);
  for (Hash_t *p = hashTable[hash_code]; p != 
# 387 "./HashMap.h" 3 4
                                             __null
# 387 "./HashMap.h"
                                                 ; p = p->next)
    {
      if (equals (key, p->key))
 {
   Value_t v = p->val;
   p->val = val;
   return v;
 }
    }
  Hash_t *p = new Hash_t ();
  p->val = val;
  p->key = copy (key);
  p->next = hashTable[hash_code];
  hashTable[hash_code] = p;
  nelem++;
  if (nelem == hash_sz)
    resize ();
  return val;
}

template <typename Key_t, typename Value_t>
char *
HashMap<Key_t, Value_t>::dump ()
{
  StringBuilder sb;
  char buf[128];
  snprintf (buf, sizeof (buf), "HashMap: size=%d ##########\n", vals->size ());
  sb.append (buf);
  for (int i = 0; i < hash_sz; i++)
    {
      if (hashTable[i] == 
# 417 "./HashMap.h" 3 4
                         __null
# 417 "./HashMap.h"
                             )
 continue;
      snprintf (buf, sizeof (buf), "%3d:", i);
      sb.append (buf);
      char *s = ((char *) (" "));
      for (Hash_t *p = hashTable[i]; p; p = p->next)
 {
   sb.append (s);
   s = ((char *) ("     "));
   sb.append (p->key);
   snprintf (buf, sizeof (buf), " --> 0x%p '%s'\n",
      p->val, p->val->get_name ());
   sb.append (buf);
 }
    }
  return sb.toString ();
}
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h" 2


# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h" 1
# 35 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DerivedMetrics.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/DerivedMetrics.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h"
# 1 "./../common/hwcentry.h" 1
# 27 "./../common/hwcentry.h"
# 1 "/usr/include/c++/9/stdlib.h" 1 3
# 28 "./../common/hwcentry.h" 2
# 1 "./../common/hwc_cpus.h" 1
# 29 "./../common/hwc_cpus.h"
  typedef int regno_t;
# 41 "./../common/hwc_cpus.h"
  enum
  {
    CPUVER_GENERIC = 0,
    CPUVER_UNDEFINED = -1
  };
# 106 "./../common/hwc_cpus.h"
enum {
    ARM_CPU_IMP_ARM = 0x41,
    ARM_CPU_IMP_BRCM = 0x42,
    ARM_CPU_IMP_CAVIUM = 0x43,
    ARM_CPU_IMP_APM = 0x50,
    ARM_CPU_IMP_QCOM = 0x51
};




  typedef struct
  {
    int cpc2_cpuver;
    const char * cpc2_cciname;
  } libcpc2_cpu_lookup_t;
# 29 "./../common/hwcentry.h" 2
# 1 "./../common/gp-time.h" 1
# 30 "./../common/hwcentry.h" 2


extern "C"
{



  typedef enum
  {


    ABST_NONE = 0x0,
    ABST_LOAD = 0x1,
    ABST_STORE = 0x2,
    ABST_LDST = 0x3,
    ABST_COUNT = 0x4,
    ABST_US_DTLBM = 0xF,
    ABST_NOPC = 0x100,
    ABST_CLKDS = 0x103,
    ABST_EXACT = 0x203,
    ABST_LDST_SPARC64 = 0x303,
    ABST_EXACT_PEBS_PLUS1 = 0x403

  } ABST_type;
# 105 "./../common/hwcentry.h"
  typedef struct
  {
    char *name;
    char *int_name;
    regno_t reg_num;
    char *metric;
    volatile int val;
    int timecvt;
    ABST_type memop;
    char *short_desc;
    int type;
    long long config;



    int sort_order;
    regno_t *reg_list;


    hrtime_t min_time;
    hrtime_t min_time_default;
    int ref_val;
    int lval, hval;
  } Hwcentry;
# 143 "./../common/hwcentry.h"
  extern int hwc_lookup (int forKernel, hrtime_t min_time_default,
    const char *uname, Hwcentry *list[], unsigned listsz,
    char **emsg, char **wmsg);
# 190 "./../common/hwcentry.h"
  extern char *hwc_validate_ctrs (int forKernel, Hwcentry *list[], unsigned listsz);




  extern int hwc_get_cpc_cpuver ();





  extern char *hwc_get_docref (char *buf, size_t buflen);



  extern char *hwc_get_default_cntrs ();



  extern char *hwc_get_default_cntrs2 (int forKernel, int style);




  extern char *hwc_get_orig_default_cntrs ();



  extern void hwc_update_val (Hwcentry *ctr);


  extern char *hwc_get_cpuname (char *buf, size_t buflen);


  extern unsigned hwc_get_max_regs ();


  extern unsigned hwc_get_max_concurrent (int forKernel);


  extern char **hwc_get_attrs (int forKernel);






  extern unsigned hwc_scan_attrs (void (*action)(const char *attr,
       const char *desc));
# 248 "./../common/hwcentry.h"
  extern Hwcentry *hwc_post_lookup (Hwcentry * pret_ctr, char *uname,
        char * int_name, int cpc_cpuver);
# 286 "./../common/hwcentry.h"
  extern Hwcentry **hwc_get_std_ctrs (int forKernel);






  extern unsigned hwc_scan_std_ctrs (void (*action)(const Hwcentry *));
# 327 "./../common/hwcentry.h"
  extern Hwcentry **hwc_get_raw_ctrs (int forKernel);






  extern unsigned hwc_scan_raw_ctrs (void (*action)(const Hwcentry *));
# 356 "./../common/hwcentry.h"
  extern void
  hwc_usage (int forKernel, const char *cmd, const char *dataspace_msg);



  extern void hwc_usage_f (int forKernel, FILE *f, const char *cmd,
      const char *dataspace_msg, int show_syntax,
      int show_short_desc);


  extern char *hwc_rate_string (const Hwcentry *pctr, int force_numeric_format);


  extern char *hwc_i18n_metric (const Hwcentry *ctr);
# 386 "./../common/hwcentry.h"
  extern char *hwc_hwcentry_string (char *buf, size_t buflen, const Hwcentry *ctr);
# 397 "./../common/hwcentry.h"
  extern char *hwc_hwcentry_specd_string (char *buf, size_t buflen, const Hwcentry *ctr);
# 408 "./../common/hwcentry.h"
  extern const char *hwc_memop_string (ABST_type memop);





}
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Table.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/Table.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Map2D.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/Map2D.h"
template <typename Key1_t, typename Key2_t, typename Value_t>
class Map2D
{
public:

  enum MapType
  {
    Default,
    Interval
  };


  enum Relation
  {
    REL_EQLT,
    REL_EQLE,
    REL_EQEQ,
    REL_EQGE,
    REL_EQGT
  };

  virtual ~Map2D () { };
  virtual void put (Key1_t key1, Key2_t key2, Value_t val) = 0;
  virtual Value_t get (Key1_t key1, Key2_t key2) = 0;
  virtual Value_t get (Key1_t key1, Key2_t key2, Relation rel) = 0;
  virtual Value_t remove (Key1_t key1, Key2_t key2) = 0;

};
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/Table.h" 2



class FilterExp;
struct PropDescr;
struct FieldDescr;
class PacketDescriptor;
class DataDescriptor;
class DataView;



enum VType_type
{
  TYPE_NONE,
  TYPE_INT32,
  TYPE_UINT32,
  TYPE_INT64,
  TYPE_UINT64,
  TYPE_STRING,
  TYPE_DOUBLE,
  TYPE_OBJ,
  TYPE_DATE,
  TYPE_BOOL,
  TYPE_ENUM,

  TYPE_LAST
};
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/Table.h"
enum ProfData_type
{
  DATA_SAMPLE,
  DATA_GCEVENT,
  DATA_HEAPSZ,
  DATA_CLOCK,
  DATA_HWC,
  DATA_SYNCH,
  DATA_HEAP,
  DATA_MPI,
  DATA_RACE,
  DATA_DLCK,
  DATA_OMP,
  DATA_OMP2,
  DATA_OMP3,
  DATA_OMP4,
  DATA_OMP5,
  DATA_IOTRACE,
  DATA_LAST
};

extern char *get_prof_data_type_name (int t);
extern char *
get_prof_data_type_uname (int t);

enum Prop_type
{
  PROP_NONE,

  PROP_ATSTAMP,

  PROP_ETSTAMP,

  PROP_TSTAMP,

  PROP_THRID,
  PROP_LWPID,
  PROP_CPUID,
  PROP_FRINFO,
  PROP_EVT_TIME,







  PROP_SAMPLE,
  PROP_SMPLOBJ,


  PROP_GCEVENT,
  PROP_GCEVENTOBJ,


  PROP_MSTATE,
  PROP_NTICK,
  PROP_OMPSTATE,
  PROP_MPISTATE,


  PROP_UCPU,
  PROP_SCPU,
  PROP_TRAP,
  PROP_TFLT,
  PROP_DFLT,
  PROP_KFLT,
  PROP_ULCK,
  PROP_TSLP,
  PROP_WCPU,
  PROP_TSTP,


  PROP_SRQST,
  PROP_SOBJ,


  PROP_HWCTAG,
  PROP_HWCINT,
  PROP_VADDR,
  PROP_PADDR,
  PROP_HWCDOBJ,
  PROP_VIRTPC,
  PROP_PHYSPC,
  PROP_EA_PAGESIZE,
  PROP_PC_PAGESIZE,
  PROP_EA_LGRP,
  PROP_PC_LGRP,
  PROP_LWP_LGRP_HOME,
  PROP_PS_LGRP_HOME,
  PROP_MEM_LAT,
  PROP_MEM_SRC,


  PROP_HTYPE,
  PROP_HSIZE,
  PROP_HVADDR,
  PROP_HOVADDR,
  PROP_HLEAKED,
  PROP_HMEM_USAGE,
  PROP_HFREED,
  PROP_HCUR_ALLOCS,
  PROP_HCUR_NET_ALLOC,
  PROP_HCUR_LEAKS,


  PROP_IOTYPE,
  PROP_IOFD,
  PROP_IONBYTE,
  PROP_IORQST,
  PROP_IOOFD,
  PROP_IOFSTYPE,
  PROP_IOFNAME,
  PROP_IOVFD,


  PROP_MPITYPE,
  PROP_MPISCOUNT,
  PROP_MPISBYTES,
  PROP_MPIRCOUNT,
  PROP_MPIRBYTES,


  PROP_CPRID,
  PROP_PPRID,
  PROP_TSKID,
  PROP_PTSKID,
  PROP_PRPC,


  PROP_RTYPE,
  PROP_RID,
  PROP_RVADDR,
  PROP_RCNT,
  PROP_LEAFPC,


  PROP_DID,
  PROP_DTYPE,
  PROP_DLTYPE,
  PROP_DVADDR,


  PROP_STACKID,
  PROP_STACK,
  PROP_MSTACK,
  PROP_USTACK,
  PROP_XSTACK,
  PROP_HSTACK,


  PROP_JTHREAD,
  PROP_LEAF,
  PROP_DOBJ,
  PROP_SAMPLE_MAP,
  PROP_GCEVENT_MAP,
  PROP_PID,
  PROP_EXPID,
  PROP_EXPID_CMP,



  PROP_EXPGRID,
  PROP_PARREG,
  PROP_TSTAMP_LO,
  PROP_TSTAMP_HI,
  PROP_TSTAMP2,
  PROP_FREQ_MHZ,
  PROP_NTICK_USEC,
  PROP_IOHEAPBYTES,
  PROP_STACKL,
  PROP_MSTACKL,
  PROP_USTACKL,
  PROP_XSTACKL,
  PROP_STACKI,
  PROP_MSTACKI,
  PROP_USTACKI,
  PROP_XSTACKI,
  PROP_DDSCR_LNK,
  PROP_VOIDP_OBJ,
  PROP_LAST
};

enum Prop_flag
{
  PRFLAG_NOSHOW = 0x40
};

struct PropDescr
{
  PropDescr (int propID, const char *name);
  virtual ~PropDescr ();

  void addState (int value, const char *stname, const char *stuname);
  char *getStateName (int value);
  char *getStateUName (int value);

  int
  getMaxState ()
  {
    return stateNames ? stateNames->size () : 0;
  }

  int propID;
  char *name;
  char *uname;
  VType_type vtype;
  int flags;

private:
  Vector<char*>*stateNames;
  Vector<char*>*stateUNames;
};

struct FieldDescr
{
  FieldDescr (int propID, const char *name);
  virtual ~FieldDescr ();

  int propID;
  char *name;
  int offset;
  VType_type vtype;
  char *format;
};

class PacketDescriptor
{
public:
  PacketDescriptor (DataDescriptor*);
  virtual ~PacketDescriptor ();

  DataDescriptor *
  getDataDescriptor ()
  {
    return ddscr;
  }

  Vector<FieldDescr*> *
  getFields ()
  {
    return fields;
  }

  void addField (FieldDescr*);

private:
  DataDescriptor *ddscr;
  Vector<FieldDescr*> *fields;
};

struct Datum
{

  void
  setUINT32 (uint32_t vv)
  {
    type = TYPE_UINT32;
    i = vv;
  }

  void
  setUINT64 (uint64_t vv)
  {
    type = TYPE_UINT64;
    ll = vv;
  }

  void
  setSTRING (char* vv)
  {
    type = TYPE_STRING;
    l = vv;
  }

  void
  setDOUBLE (double vv)
  {
    type = TYPE_DOUBLE;
    d = vv;
  }

  void
  setOBJ (void* vv)
  {
    type = TYPE_OBJ;
    p = vv;
  }

  VType_type type;
  union
  {
    int i;
    double d;
    char *l;
    void *p;
    unsigned long long ll;
  };
};

class Data
{
public:
  static Data *newData (VType_type);

  virtual
  ~Data () { }

  virtual VType_type
  type ()
  {
    return TYPE_NONE;
  }
  virtual void reset () = 0;
  virtual long getSize () = 0;
  virtual int fetchInt (long i) = 0;
  virtual unsigned long long fetchULong (long i) = 0;
  virtual long long fetchLong (long i) = 0;
  virtual char *fetchString (long i) = 0;
  virtual double fetchDouble (long i) = 0;
  virtual void *fetchObject (long i) = 0;
  virtual void setDatumValue (long, const Datum*) = 0;
  virtual void setValue (long, uint64_t) = 0;
  virtual void setObjValue (long, void*) = 0;
  virtual int cmpValues (long idx1, long idx2) = 0;
  virtual int cmpDatumValue (long idx, const Datum *val) = 0;
};

enum Data_flag
{
  DDFLAG_NOSHOW = 0x01
};

class DataDescriptor
{
# 422 "/doner/binutils/binutils-515f23e/gprofng/src/Table.h"
public:

  DataDescriptor (int id, const char* name, const char* uname, int flags = 0);
  DataDescriptor (int id, const char* name, const char* uname, DataDescriptor*);
  ~DataDescriptor ();


  int
  getId ()
  {
    return id;
  }

  char *
  getName ()
  {
    return name;
  }

  char *
  getUName ()
  {
    return uname;
  }

  Vector<PropDescr*> *
  getProps ()
  {
    return props;
  }
  PropDescr *getProp (int prop_id);

  long
  getSize ()
  {
    return *ref_size;
  }

  long
  getFlags ()
  {
    return flags;
  }


  DataView *createView ();
  DataView *createImmutableView ();
  DataView *createExtManagedView ();


  int getIntValue (int prop_id, long pkt_id);
  unsigned long long getULongValue (int prop_id, long pkt_id);
  long long getLongValue (int prop_id, long pkt_id);
  void *getObjValue (int prop_id, long pkt_id);
  Vector<long long> *getSet (int prop_id);


  void addProperty (PropDescr*);
  long addRecord ();
  Data *getData (int prop_id);
  void setDatumValue (int prop_id, long pkt_id, const Datum *val);
  void setValue (int prop_id, long pkt_id, uint64_t val);
  void setObjValue (int prop_id, long pkt_id, void *val);
  void reset ();

  void
  setResolveFrInfoDone ()
  {
    *ref_resolveFrameInfoDone = true;
  }

  bool
  isResolveFrInfoDone ()
  {
    return *ref_resolveFrameInfoDone;
  }


private:
  bool isMaster;
  int flags;
  int id;
  char *name;
  char *uname;


  long master_size;
  bool master_resolveFrameInfoDone;


  long *ref_size;
  bool *ref_resolveFrameInfoDone;
  Vector<PropDescr*> *props;
  Vector<Data*> *data;
  Vector<Vector<long long>*> *setsTBR;
};

typedef struct
{
  long begin;
  long end;
  long orig_ddsize;
  DataView *tmpView;
  long *idxArr;
  FilterExp *fltr;
} fltr_dbe_ctx;

class DataView
{



public:

  enum Relation
  {
    REL_LT,
    REL_LTEQ,
    REL_EQ,
    REL_GTEQ,
    REL_GT
  };

  enum DataViewType
  {
    DV_NORMAL,
    DV_IMMUTABLE,
    DV_EXT_MANAGED
  };

  DataView (DataDescriptor*);
  DataView (DataDescriptor*, DataViewType);
  virtual ~DataView ();

  Vector<PropDescr*> *getProps ();
  PropDescr *getProp (int prop_id);
  long getSize ();


  int getIntValue (int prop_id, long idx);
  unsigned long long getULongValue (int prop_id, long idx);
  long long getLongValue (int prop_id, long idx);
  void *getObjValue (int prop_id, long idx);
  long getIdByIdx (long idx);


  void sort (const int props[], int prop_count);
  void sort (int prop);
  void sort (int prop1, int prop2);
  void sort (int prop1, int prop2, int prop3);
  void setFilter (FilterExp*);






  long getIdxByVals (const Datum valColumns[], Relation rel);
  long getIdxByVals (const Datum valColumns[], Relation rel,
       long minIdx, long maxIdx);
  bool idxRootDimensionsMatch (long idx, const Datum valColumns[]);



  void setDatumValue (int prop_id, long idx, const Datum *val);
  void setValue (int prop_id, long idx, uint64_t val);
  void setObjValue (int prop_id, long idx, void *val);

  DataDescriptor *
  getDataDescriptor ()
  {
    return ddscr;
  }

  void removeDbeViewIdx (long idx);


  void appendDataDescriptorId (long pkt_id);
  void setDataDescriptorValue (int prop_id, long pkt_id, uint64_t val);
  long long getDataDescriptorValue (int prop_id, long pkt_id);

private:
  bool checkUpdate ();
  void init (DataDescriptor*, DataViewType);

  static void filter_in_chunks (fltr_dbe_ctx *dctx);
  DataDescriptor *ddscr;
  long ddsize;
  Vector<long> *index;


  Data *sortedBy[10 + 1];
  FilterExp *filter;
  DataViewType type;
};
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h" 2







class Expression;
class Definition;
class Histable;
template <class ITEM> class Vector;

class BaseMetric
{
public:

  enum Type
  {
    ONAME = 1,
    SIZES,
    ADDRESS,

    CP_TOTAL,
    CP_TOTAL_CPU,

    CP_LMS_USER,
    CP_LMS_SYSTEM,
    CP_LMS_TRAP,
    CP_LMS_TFAULT,
    CP_LMS_DFAULT,
    CP_LMS_KFAULT,
    CP_LMS_USER_LOCK,
    CP_LMS_SLEEP,
    CP_LMS_WAIT_CPU,
    CP_LMS_STOPPED,

    CP_KERNEL_CPU,

    SYNC_WAIT_TIME,
    SYNC_WAIT_COUNT,

    HWCNTR,

    HEAP_ALLOC_CNT,
    HEAP_ALLOC_BYTES,
    HEAP_LEAK_CNT,
    HEAP_LEAK_BYTES,

    IO_READ_BYTES,
    IO_READ_CNT,
    IO_READ_TIME,
    IO_WRITE_BYTES,
    IO_WRITE_CNT,
    IO_WRITE_TIME,
    IO_OTHER_CNT,
    IO_OTHER_TIME,
    IO_ERROR_CNT,
    IO_ERROR_TIME,

    MPI_TIME,
    MPI_SEND,
    MPI_BYTES_SENT,
    MPI_RCV,
    MPI_BYTES_RCVD,
    MPI_OTHER,

    OMP_NONE,
    OMP_OVHD,
    OMP_WORK,
    OMP_IBAR,
    OMP_EBAR,
    OMP_WAIT,
    OMP_SERL,
    OMP_RDUC,
    OMP_LKWT,
    OMP_CTWT,
    OMP_ODWT,
    OMP_MSTR,
    OMP_SNGL,
    OMP_ORDD,
    OMP_MASTER_THREAD,

    MPI_WORK,
    MPI_WAIT,

    RACCESS,
    DEADLOCKS,

    DERIVED
  };


  enum SubType
  {
    STATIC = 1,
    EXCLUSIVE = 2,
    INCLUSIVE = 4,
    ATTRIBUTED = 8,
    DATASPACE = 16
  };

  BaseMetric (Type t);
  BaseMetric (Hwcentry *ctr, const char* _aux, const char* _cmdname,
       const char* _username, int v_styles);
  BaseMetric (Hwcentry *ctr, const char* _aux, const char* _username,
       int v_styles, BaseMetric* _depended_bm = 
# 132 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h" 3 4
                                               __null
# 132 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h"
                                                   );
  BaseMetric (const char *_cmd, const char *_username, Definition *def);
  BaseMetric (const BaseMetric& m);
  virtual ~BaseMetric ();

  int get_id () { return id; }
  Type get_type () { return type; }
  Hwcentry *get_hw_ctr () { return hw_ctr; }
  char *get_aux () { return aux; }
  char *get_username () { return username; }
  char *get_cmd () { return cmd; }
  int get_flavors () { return flavors; }
  int get_clock_unit () { return clock_unit; }
  long long get_precision () { return precision; }
  ValueTag get_vtype () { return valtype; }
  int get_value_styles () { return value_styles; }
  bool is_zeroThreshold () { return zeroThreshold; }
  ProfData_type get_packet_type () { return packet_type; }
  Expression *get_cond () { return cond; }
  Expression *get_val () { return val; }
  Expression *get_expr () { return expr; }
  char *get_expr_spec () { return expr_spec; }
  Definition *get_definition () { return definition; };
  BaseMetric *get_dependent_bm () { return dependent_bm; };

  bool
  comparable ()
  {
    return val_spec != 
# 160 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h" 3 4
                      __null 
# 160 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h"
                           || type == DERIVED || type == SIZES || type == ADDRESS;
  }


  void set_default_visbits (SubType subtype, int _visbits);
  void set_id (int _id) { id = _id; }

  void set_expr_spec (char *_expr_spec);
  void set_cond_spec (char *_cond_spec);
  int get_default_visbits (SubType subtype);
  char *dump ();
  Histable *get_comparable_obj (Histable *obj);
  bool is_internal ();

  char *legend;

private:
  BaseMetric *dependent_bm;
  Expression *cond;
  char *cond_spec;
  Expression *val;
  char *val_spec;
  Expression *expr;

  char *expr_spec;
  int id;
  Type type;
  char *aux;
  char *cmd;
  char *username;
  int flavors;
  int value_styles;
  static const int NSUBTYPES = 2;
  int default_visbits[NSUBTYPES];
  ValueTag valtype;
  long long precision;
  Hwcentry *hw_ctr;
  ProfData_type packet_type;
  bool zeroThreshold;
  Presentation_clock_unit clock_unit;

  static int last_id;
  Definition *definition;

  void hwc_init (Hwcentry *ctr, const char* _aux, const char* _cmdname, const char* _username, int v_styles);
  void init (Type t);
  char *get_basetype_name ();
  void specify ();
  void specify_metric (char *_cond_spec, char *_val_spec);
  void set_val_spec (char *_val_spec);
  void specify_mstate_metric (int st);
  void specify_ompstate_metric (int st);
  void specify_prof_metric (char *_cond_spec);
};

class Definition
{
public:

  enum opType
  {
    opNULL,
    opPrimitive,
    opDivide
  };

  Definition (opType _op);
  ~Definition ();
  static Definition *add_definition (char *_def);
  Vector<BaseMetric *> *get_dependencies ();
  long *get_map ();
  double eval (long *indexes, TValue *values);

  opType op;
  Definition *arg1;
  Definition *arg2;
  char *def;

private:
  BaseMetric *bm;
  long *map;
  Vector<BaseMetric *> *dependencies;
  long index;
};
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/DerivedMetrics.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.h" 1
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.h"
class Expression;



class Metric : public BaseMetric
{
public:

  typedef struct HistMetricS
  {
    int width;
    int maxvalue_width;
    int maxtime_width;
    char legend1[1024];
    char legend2[1024];
    char legend3[1024];
    int indFirstExp;
    int indTimeVal;
    void update_max (struct HistMetricS *hm);
    void init ();
  } HistMetric;

  Metric (const Metric& item);
  Metric (BaseMetric *item, SubType st);
  Metric (char *_name, SubType st);
  virtual ~Metric ();

  char *get_mcmd (bool);
  int get_real_visbits ();
  ValueTag get_vtype2 ();
  void set_dmetrics_visbits (int _dmetrics_visbits);


  SubType
  get_subtype ()
  {
    return subtype;
  }

  char *
  get_name ()
  {
    return name;
  }

  char *
  get_abbr ()
  {
    return abbr;
  }

  char *
  get_abbr_unit ()
  {
    return abbr_unit;
  }

  BaseMetric *
  get_base_metric ()
  {
    return baseMetric;
  }

  int
  get_visbits ()
  {
    return visbits;
  }

  void
  set_raw_visbits (int _visbits)
  {
    visbits = _visbits;
  }

  void
  clear_all_visbits ()
  {
    visbits = VAL_NA;
  }

  void
  enable_all_visbits ()
  {
    visbits = get_value_styles ();
  }




  bool
  is_any_visible ()
  {
    return !((visbits) == -1 || (visbits) == VAL_NA || ((visbits) & VAL_HIDE_ALL) != 0)
     && (visbits & (VAL_VALUE | VAL_TIMEVAL | VAL_PERCENT));
  }

  bool
  is_value_visible ()
  {
    return (visbits & VAL_VALUE) != 0
     || (!is_time_val () && (visbits & VAL_TIMEVAL) != 0);
  }

  bool
  is_time_visible ()
  {
    return is_time_val () && (visbits & VAL_TIMEVAL) != 0;
  }

  bool
  is_visible ()
  {
    return !((visbits) == -1 || (visbits) == VAL_NA || ((visbits) & VAL_HIDE_ALL) != 0) && is_value_visible ();
  }

  bool
  is_tvisible ()
  {
    return !((visbits) == -1 || (visbits) == VAL_NA || ((visbits) & VAL_HIDE_ALL) != 0) && is_time_visible ();
  }

  bool
  is_pvisible ()
  {
    return !((visbits) == -1 || (visbits) == VAL_NA || ((visbits) & VAL_HIDE_ALL) != 0) && (visbits & VAL_PERCENT) != 0;
  }

  bool
  is_time_val ()
  {
    int v = VAL_TIMEVAL | VAL_VALUE;
    return (get_value_styles () & v) == v;
  }



  void set_vvisible (bool set);
  void set_tvisible (bool set);
  void set_pvisible (bool set);

  void set_subtype (SubType st);
  void legend_width (HistMetric *hitem, int gap);
  char *get_vis_str ();
  char *get_vis_string (int vis);
  char *dump ();


private:
  BaseMetric *baseMetric;
  SubType subtype;
  char *name;
  char *abbr;
  char *abbr_unit;
  int visbits;
};
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/DerivedMetrics.h" 2

class definition;

class DerivedMetrics
{
public:
  DerivedMetrics ();
  ~DerivedMetrics ();
  definition *add_definition (char *_name, char *_username, char *_def);
  int *construct_map (Vector<Metric*> *mitems, BaseMetric::SubType st,
        char *expr_spec);
  void dump (FILE *dis_file, int verbosity);
  double eval_one_item (definition *def, int *map, double *values);
  int eval (int *map, double *values);
  void fill_dependencies (definition *def, int *vec);
  Vector<definition*> *get_dependencies (definition *def);

  Vector<definition*> *
  get_items ()
  {
    return items;
  }

private:
  Vector<definition*> *items;
};
# 36 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h" 2

class DbeLine;
class MetricList;

class Hist_data
{
public:
  friend class DbeView;
  friend class er_print_histogram;
  friend class PathTree;
  friend class DataSpace;
  friend class MemorySpace;
  friend class IOActivity;
  friend class HeapActivity;


  struct HistItem
  {
    HistItem (long n);
    ~HistItem ();
    Histable *obj;
    int type;
    TValue *value;
    long size;
  };

  enum Hist_status
  {
    SUCCESS = 0,
    NO_DATA
  };

  enum Mode
  {
    ALL,
    CALLERS,
    CALLEES,
    SELF,
    MODL,
    LAYOUT,
    DETAIL
  };

  enum Sort_order
  {
    ASCEND,
    DESCEND
  };

  enum Sort_type
  {
    ALPHA,
    VALUE,
    AUX
  };

  Hist_data (MetricList *, Histable::Type, Mode, bool _viewowned = false);

  virtual ~Hist_data ();
  void dump (char *msg, FILE *f);

  Hist_status
  get_status (void)
  {
    return status;
  }


  bool
  isViewOwned (void)
  {
    return viewowned;
  }


  long size (void);


  HistItem *append_hist_item (Histable *obj);
  void append_hist_item (HistItem *hi);
  TValue *get_real_value (TValue *res, int met_index, int row);
  TValue *get_value (TValue *res, int met_index, int row);
  TValue *get_value (TValue *res, int met_index, HistItem *hi);
  void print_row(StringBuilder *sb, int row, Metric::HistMetric *hist_metric,
   const char *mark);
  void print_content (FILE *out_file, Metric::HistMetric *hist_metric, int limit);
  int print_label (FILE *out_file, Metric::HistMetric *hist_metric, int space);
  void update_total (Hist_data::HistItem *new_total);
  void update_max (Metric::HistMetric *hm_tmp);
  void update_legend_width (Metric::HistMetric *hm_tmp);


  HistItem *find_hist_item (Histable *obj);


  void sort (long ind, bool reverse);


  void resort (MetricList *mlist);


  void compute_minmax (void);


  HistItem *fetch (long index);

  HistItem *
  get_maximums (void)
  {
    return maximum;
  }

  HistItem *
  get_maximums_inc (void)
  {
    return maximum_inc;
  }

  HistItem *
  get_minimums (void)
  {
    return minimum;
  }

  HistItem *
  get_totals (void)
  {
    return total;
  }

  Vector<HistItem*> *
  get_hist_items (void)
  {
    return hist_items;
  }

  void
  set_status (Hist_status st)
  {
    status = st;
  }

  MetricList *
  get_metric_list (void)
  {
    return metrics;
  }

  Map<Histable*, int> *
  get_callsite_mark ()
  {
    return callsite_mark;
  }

  Metric::HistMetric *get_histmetrics ();
  void set_threshold (double proportion);
  bool above_threshold (HistItem *hi);
  double get_percentage (double value, int mindex);
  size_t value_maxlen (int mindex);
  size_t time_len (TValue *value, int clock);
  size_t time_maxlen (int mindex, int clock);
  size_t name_len (HistItem *item);
  size_t name_maxlen ();
  HistItem *new_hist_item (Histable *obj, int itype, TValue *value);
  HistItem *update_hist_item (HistItem *hi, TValue *value);
  Vector<uint64_t> *get_object_indices (Vector<int> *selections);

private:

  Metric::HistMetric *hist_metrics;
  Vector<HistItem*> *hist_items;
  HashMap<Histable*, HistItem*>*hi_map;
  Map<Histable*, int>*callsite_mark;
  Hist_status status;
  int nmetrics;
  MetricList *metrics;
  Histable::Type type;
  Sort_order sort_order;
  Sort_type sort_type;
  int sort_ind;
  bool rev_sort;

  Mode mode;
  HistItem *gprof_item;
  Histable *spontaneous;


  HistItem *maximum;
  HistItem *minimum;
  HistItem *maximum_inc;
  HistItem *total;
  HistItem *threshold;


  static int sort_compare_all (const void *a, const void *b, const void *arg);
  static int sort_compare_dlayout (const void *a, const void *b, const void *arg);
  static int sort_compare (HistItem *hi_1, HistItem *hi_2, Sort_type stype,
      long ind, Hist_data *hdata);


  HistItem *new_hist_item (Histable *obj);






  bool viewowned;
};





class DbeInstr;

struct CStack_data
{

  struct CStack_item
  {
    CStack_item (long n);
    ~CStack_item ();
    long count;
    int64_t val;
    Vector<DbeInstr*> *stack;
    TValue *value;
  };

  Vector<CStack_item*> *cstack_items;
  CStack_item *total;

  CStack_item *new_cstack_item ();
  CStack_data (MetricList *);

  long
  size ()
  {
    return cstack_items->size ();
  }

  CStack_item *
  fetch (long i)
  {
    return cstack_items->fetch (i);
  }

  ~CStack_data ()
  {
    cstack_items->destroy ();
    delete cstack_items;
    delete total;
  }

  MetricList *metrics;
};
# 47 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2


# 1 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h" 1
# 50 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h"
class BaseMetricTreeNode
{
public:
  BaseMetricTreeNode ();
  virtual ~BaseMetricTreeNode ();
  BaseMetricTreeNode *register_metric (BaseMetric *item);
  BaseMetricTreeNode *find (const char *name);
  void get_nearest_registered_descendents (Vector<BaseMetricTreeNode*> *new_vec);
  void get_all_registered_descendents (Vector<BaseMetricTreeNode*> *new_vec);
  char *get_description();
  char *dump();

  BaseMetricTreeNode *get_root () { return root; }
  BaseMetricTreeNode *get_parent () { return parent; }
  Vector<BaseMetricTreeNode*> *get_children () { return children; }
  bool is_registered () { return registered; }
  int get_num_registered_descendents () { return num_registered_descendents; }
  bool is_composite_metric () { return isCompositeMetric; }
  BaseMetric *get_BaseMetric () { return bm; }
  char *get_name () { return name; }
  char *get_user_name () { return uname; }
  char *get_unit () { return unit; }
  char *get_unit_uname () { return unit_uname; }

private:
  BaseMetricTreeNode (BaseMetric *item);
  BaseMetricTreeNode (const char *name, const char *uname,
        const char *_unit, const char *_unit_uname);
  void init_vars ();
  void build_basic_tree ();
  BaseMetricTreeNode *add_child (BaseMetric *item);
  BaseMetricTreeNode *add_child (const char *name, const char *uname,
      const char *unit = 
# 82 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h" 3 4
                        __null
# 82 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h"
                            , const char *unit_uname = 
# 82 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h" 3 4
                                                       __null
# 82 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h"
                                                           );
  BaseMetricTreeNode *add_child (BaseMetricTreeNode *new_node);
  void register_node (BaseMetricTreeNode *);

  BaseMetricTreeNode *root;
  BaseMetricTreeNode *parent;
  bool aggregation;
  char *name;
  char *uname;
  char *unit;
  char *unit_uname;
  Vector<BaseMetricTreeNode*> *children;
  bool isCompositeMetric;
  BaseMetric *bm;
  bool registered;
  int num_registered_descendents;
};
# 50 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/MemorySpace.h" 1
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/MemorySpace.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h" 1
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h"
# 1 "./../common/gp-experiment.h" 1
# 31 "./../common/gp-experiment.h"
# 1 "./Emsgnum.h" 1
# 32 "./../common/gp-experiment.h" 2
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h" 1
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4

# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int getcpu (unsigned int *, unsigned int *) throw ();


extern int setns (int __fd, int __nstype) throw ();


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () __attribute__ ((__warn_unused_result__));
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;
# 190 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 205 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 274 "/usr/include/time.h" 3 4
extern int getdate_err;
# 283 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 297 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 100 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 120 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 155 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 193 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 238 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 470 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 482 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 516 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 718 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 789 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 871 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 997 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1010 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));





extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1056 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1123 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1157 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ()
{
  return __thread1 == __thread2;
}


}
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h" 2







# 37 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef uint64_t Vaddr_type;
typedef uint64_t Size_type;
# 55 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef enum
{
  MASTER_SMPL = 0,
  PROGRAM_SMPL,
  PERIOD_SMPL,
  MANUAL_SMPL
} Smpl_type;

typedef enum
{
  EMPTY_PCKT = 0,
  PROF_PCKT,
  SYNC_PCKT,
  HW_PCKT,
  XHWC_PCKT,
  HEAP_PCKT,
  MPI_PCKT,
  MHWC_PCKT,
  OPROF_PCKT,
  OMP_PCKT,
  RACE_PCKT,
  FRAME_PCKT,
  OMP2_PCKT,
  DEADLOCK_PCKT,
  OMP3_PCKT,
  OMP4_PCKT,
  OMP5_PCKT,
  UID_PCKT,
  FRAME2_PCKT,
  IOTRACE_PCKT,
  LAST_PCKT,
  CLOSED_PCKT = 65535
} Pckt_type;

typedef enum
{
  EMPTY_INFO = 0,
  STACK_INFO,
  JAVA_INFO,
  OMP_INFO,
  MPI_INFO,
  OMP2_INFO,
  LAST_INFO
} Info_type;







typedef struct CommonHead_packet
{
  unsigned int tsize : 16;
  unsigned int type : 16;
} CommonHead_packet;


typedef struct CM_Packet
{
  unsigned int tsize : 16;
  unsigned int type : 16;
} CM_Packet;

typedef struct Common_packet
{
  unsigned int tsize : 16;
  unsigned int type : 16;
  pthread_t lwp_id;
  pthread_t thr_id;
  uint32_t cpu_id;
  hrtime_t tstamp;
  uint64_t frinfo;
} Common_packet;
# 189 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef enum
{
  MALLOC_TRACE = 0,
  FREE_TRACE,
  REALLOC_TRACE,
  MMAP_TRACE,
  MUNMAP_TRACE,
  HEAPTYPE_LAST
} Heap_type;
# 216 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef enum
{
  ZFS_TYPE = 0,
  NFS_TYPE,
  UFS_TYPE,
  UDFS_TYPE,
  LOFS_TYPE,
  VXFS_TYPE,
  TMPFS_TYPE,
  PCFS_TYPE,
  HSFS_TYPE,
  PROCFS_TYPE,
  FIFOFS_TYPE,
  SWAPFS_TYPE,
  CACHEFS_TYPE,
  AUTOFS_TYPE,
  SPECFS_TYPE,
  SOCKFS_TYPE,
  FDFS_TYPE,
  MNTFS_TYPE,
  NAMEFS_TYPE,
  OBJFS_TYPE,
  SHAREFS_TYPE,
  EXT2FS_TYPE,
  EXT3FS_TYPE,
  EXT4FS_TYPE,
  UNKNOWNFS_TYPE,
  FSTYPE_LAST
} FileSystem_type;

typedef enum
{
  READ_TRACE = 0,
  WRITE_TRACE,
  OPEN_TRACE,
  CLOSE_TRACE,
  OTHERIO_TRACE,
  READ_TRACE_ERROR,
  WRITE_TRACE_ERROR,
  OPEN_TRACE_ERROR,
  CLOSE_TRACE_ERROR,
  OTHERIO_TRACE_ERROR,
  IOTRACETYPE_LAST
} IOTrace_type;
# 289 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef enum
{
  WRITE_RACE = 0,
  WRITE_RACE_RED,
  READ_RACE,
  READ_RACE_RED,
  RACETYPE_LAST
} Race_type;

typedef struct Frame_packet
{
  unsigned int tsize : 16;
  unsigned int type : 16;
  uint32_t hsize;
  uint64_t uid;
} Frame_packet;

typedef struct Uid_packet
{
  unsigned int tsize : 16;
  unsigned int type : 16;
  uint32_t flags;
  uint64_t uid;
} Uid_packet;




typedef struct Common_info
{
  unsigned int hsize;
  unsigned int kind;
  uint64_t uid;
} Common_info;

typedef struct Stack_info
{
  unsigned int hsize;
  unsigned int kind;
  uint64_t uid;
} Stack_info;

typedef struct Java_info
{
  unsigned int hsize;
  unsigned int kind;
  uint64_t uid;
} Java_info;

typedef struct OMP_info
{
  unsigned int hsize;
  unsigned int kind;
  uint32_t omp_state;
  uint32_t pad;
} OMP_info;

typedef struct OMP2_info
{
  unsigned int hsize;
  unsigned int kind;
  uint32_t omp_state;
  uint32_t pad;
  uint64_t uid;
} OMP2_info;





typedef enum
{
  OMP_NO_STATE = 0,
  OMP_OVHD_STATE,
  OMP_WORK_STATE,
  OMP_IBAR_STATE,
  OMP_EBAR_STATE,
  OMP_IDLE_STATE,
  OMP_SERL_STATE,
  OMP_RDUC_STATE,
  OMP_LKWT_STATE,
  OMP_CTWT_STATE,
  OMP_ODWT_STATE,
  OMP_ATWT_STATE,
  OMP_TSKWT_STATE,
  OMP_LAST_STATE
} OMP_THR_STATE;
# 410 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef struct MPI_info
{
  unsigned int hsize;
  unsigned int kind;
  uint32_t mpi_state;
  uint32_t pad;
} MPI_info;


typedef enum
{
  MPI_NO_STATE = 0,
  MPI_USER,
  MPI_PROG,
  MPI_WAIT
} MPI_THR_STATE;




typedef enum
{
  DT_HEADER = 1,
  DT_CODE,
  DT_LTABLE,
  DT_SRCFILE
} DT_type;

typedef struct DT_common
{
  DT_type type;
  unsigned int size;
} DT_common;

typedef struct DT_header
{
  DT_type type;
  unsigned int size;
  hrtime_t time;
  uint64_t vaddr;
} DT_header;

typedef struct DT_code
{
  DT_type type;
  unsigned int size;
} DT_code;

typedef struct DT_ltable
{
  DT_type type;
  unsigned int size;
} DT_ltable;

typedef struct DT_lineno
{
  unsigned int offset;
  unsigned int lineno;
} DT_lineno;

typedef struct DT_srcfile
{
  DT_type type;
  unsigned int size;
} DT_srcfile;







typedef enum
{
  ARCH_SEGMENT_TYPE = 1,
  ARCH_MSG_TYPE,
  ARCH_PLT_TYPE,
  ARCH_MODULE_TYPE,
  ARCH_FUNCTION_TYPE,
  ARCH_LDINSTR_TYPE,
  ARCH_STINSTR_TYPE,
  ARCH_PREFETCH_TYPE,
  ARCH_BRTARGET_TYPE,
  ARCH_JCLASS_TYPE,
  ARCH_JMETHOD_TYPE,
  ARCH_JUNLOAD_TYPE,
  ARCH_INF_TYPE,
  ARCH_JCLASS_LOCATION_TYPE
} ARCH_type;



typedef struct
{
  unsigned int type : 16;
  unsigned int size : 16;
} ARCH_common;






typedef struct
{
  ARCH_common common;
  int version;
  uint32_t inode;
  uint32_t textsz;
  uint32_t platform;
} ARCH_segment;



typedef struct
{
  ARCH_common common;
  uint32_t errcode;
} ARCH_message;



typedef struct
{
  ARCH_common common;
} ARCH_info;



typedef struct
{
  ARCH_common common;
  unsigned int lang_code;
  unsigned int fragmented;
} ARCH_module;



typedef struct
{
  ARCH_common common;
  uint32_t offset;
  uint32_t size;
  uint32_t save_addr;
} ARCH_function;






typedef struct
{
  ARCH_common common;
} ARCH_aninfo;



typedef struct
{
  CM_Packet comm;
  uint32_t pad;
  uint64_t class_id;
} ARCH_jclass_location;



typedef struct
{
  CM_Packet comm;
  uint32_t pad;
  uint64_t class_id;
  hrtime_t tstamp;
} ARCH_jclass;



typedef struct
{
  CM_Packet comm;
  uint32_t pad;
  uint64_t class_id;
  uint64_t method_id;
} ARCH_jmethod;
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/ABS.h" 1
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/ABS.h"
typedef enum
{
  ABS_NULL = 0x00,
  ABS_UNSUPPORTED = 0x01,
  ABS_BLOCKED = 0x02,
  ABS_INCOMPLETE = 0x03,
  ABS_REG_LOSS = 0x04,
  ABS_INVALID_EA = 0x05,
  ABS_NO_CTI_INFO = 0x10,
  ABS_INFO_FAILED = 0x20,
  ABS_CTI_TARGET = 0x30,
  ABS_CODE_RANGE = 0xFF
} ABS_code;

enum {
  NUM_ABS_RT_CODES = 7,
  NUM_ABS_PP_CODES = 5
};

extern const char *ABS_RT_CODES[NUM_ABS_RT_CODES];
extern char *ABS_PP_CODES[NUM_ABS_PP_CODES];
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Data_window.h" 1
# 33 "/doner/binutils/binutils-515f23e/gprofng/src/Data_window.h"
class Data_window
{
public:


  typedef struct
  {
    int64_t offset;
    int64_t length;
  } Span;

  Data_window (char *filename);
  ~Data_window ();



  void *bind (Span *span, int64_t minSize);
  void *bind (int64_t file_offset, int64_t minSize);
  void *get_data (int64_t offset, int64_t size, void *datap);
  int64_t get_buf_size ();
  int64_t copy_to_file (int f, int64_t offset, int64_t size);

  bool not_opened () { return !opened; }
  off64_t get_fsize () { return fsize; }

  template <typename Key_t> inline Key_t
  get_align_val (Key_t *vp)
  {
    if (sizeof (Key_t) <= sizeof (int))
      return *vp;

    Key_t val = (Key_t) 0;
    uint32_t *p1 = (uint32_t *) vp;
    uint32_t *p2 = (uint32_t*) (&val);
    p2[0] = p1[0];
    p2[1] = p1[1];
    return val;
  }

  template <typename Key_t> inline Key_t
  decode (Key_t &v)
  {
    Key_t val = get_align_val (&v);
    if (need_swap_endian)
      swapByteOrder (&val, sizeof (val));
    return val;
  }

  bool need_swap_endian;
  char *fname;

protected:
  int fd;
  bool mmap_on_file;

private:
  long page_size;
  bool use_mmap;
  bool opened;
  int64_t fsize;
  void *base;
  int64_t woffset;
  int64_t wsize;
  int64_t basesize;
};
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h" 2



class PrUsage
{
public:
  PrUsage ();
  PrUsage *bind32 (void *p, bool need_swap_endian);
  PrUsage *bind64 (void *p, bool need_swap_endian);
  static uint64_t bind32Size ();
  static uint64_t bind64Size ();
  Vector<long long> * getMstateValues ();

  hrtime_t pr_tstamp;
  hrtime_t pr_create;
  hrtime_t pr_term;
  hrtime_t pr_rtime;


  hrtime_t pr_utime;
  hrtime_t pr_stime;
  hrtime_t pr_ttime;
  hrtime_t pr_tftime;
  hrtime_t pr_dftime;
  hrtime_t pr_kftime;
  hrtime_t pr_ltime;
  hrtime_t pr_slptime;
  hrtime_t pr_wtime;
  hrtime_t pr_stoptime;

  uint64_t pr_minf;
  uint64_t pr_majf;
  uint64_t pr_nswap;
  uint64_t pr_inblk;
  uint64_t pr_oublk;
  uint64_t pr_msnd;
  uint64_t pr_mrcv;
  uint64_t pr_sigs;
  uint64_t pr_vctx;
  uint64_t pr_ictx;
  uint64_t pr_sysc;
  uint64_t pr_ioch;
};

class DataView;
extern void *getStack (VMode, DataView*, long);
extern int stackSize (VMode, DataView*, long);
extern Histable *getStackPC (int, VMode, DataView*, long);
extern Vector<Histable*> *getStackPCs (VMode, DataView*, long);

class CommonPacket
{
public:
  CommonPacket ();
  void *getStack (VMode);
  Histable *getStackPC (int, VMode);
  Vector<Histable*>*getStackPCs (VMode);
  static int cmp (const void *a, const void *b);

  enum Tag_type { LWP, THR, CPU };
  static const int NTAGS = 3;
  uint32_t tags[NTAGS];
  hrtime_t tstamp;
  struct JThread *jthread_TBR;
  uint64_t frinfo;
  Vaddr leafpc;
  void *nat_stack;
  void *user_stack;
  static void *jvm_overhead;
};

class FramePacket
{
public:
  int
  stackSize (bool java = false)
  {
    return java ? jstack->size () / 2 : stack->size ();
  }

  Vaddr
  getFromStack (int n)
  {
    return stack->fetch (n);
  }

  Vaddr
  getMthdFromStack (int n)
  {
    return jstack->fetch (2 * n + 1);
  }

  int
  getBciFromStack (int n)
  {
    return (int) jstack->fetch (2 * n);
  }

  bool
  isLeafMark (int n)
  {
    return stack->fetch (n) == (Vaddr) ((uint64_t)(-1));
  }

  bool
  isTruncatedStack (bool java = false)
  {
    return java ? jtruncated : truncated == (Vaddr) ((uint64_t)(-2));
  }

  bool
  isFailedUnwindStack ()
  {
    return truncated == (Vaddr) ((uint64_t)(-3));
  }
  uint32_t omp_state;
  uint32_t mpi_state;
  uint64_t omp_cprid;
  Vector<Vaddr> *stack;
  Vaddr truncated;
  Vector<Vaddr> *jstack;
  bool jtruncated;
  Vector<Vaddr> *ompstack;
  Vaddr omptruncated;
};
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/MemorySpace.h" 2



# 1 "/doner/binutils/binutils-515f23e/gprofng/src/HashMap.h" 1
# 33 "/doner/binutils/binutils-515f23e/gprofng/src/MemorySpace.h" 2

class Experiment;
class Expression;
class DataView;
class DbeView;
class MemObj;

class MemObjType_t
{
public:
  MemObjType_t ();
  ~MemObjType_t ();
  int type;
  char *name;
  char *index_expr;
  char *machmodel;
  char mnemonic;
  char *short_description;
  char *long_description;
};

class MemorySpace
{
public:

  MemorySpace (DbeView *_dbev, int subtype);
  ~MemorySpace ();

  void reset (void);

  int
  getMemObjType (void)
  {
    return mstype;
  }

  char *
  getMemObjTypeName (void)
  {
    return msname;
  }

  Expression *
  getMemObjDef (void)
  {
    return msindex_exp;
  }


  static void get_filter_keywords (Vector <void*> *res);
  static Vector<void*> *getMemObjects (void);
  static void set_MemTabOrder (Vector<int> *);
  static char *mobj_define (char *, char *, char *, char *, char *);
  static char *mobj_delete (char *);
  static MemObjType_t *findMemSpaceByName (const char *mname);
  static MemObjType_t *findMemSpaceByIndex (int index);
  static char pickMnemonic (char *name);
  static Vector<char *> *getMachineModelMemObjs (char *);

private:
  HashMap<uint64_t, MemObj*> *objs;
  int findMemObject (uint64_t indx);
  MemObj *lookupMemObject (Experiment *exp, DataView*, long);
  MemObj *createMemObject (uint64_t, char *moname);

  int mstype;
  char *msname;
  Expression *msindex_exp;
  char *msindex_exp_str;
  Hist_data *hist_data_all;
  uint64_t selected_mo_index;
  int sel_ind;
  DbeView *dbev;
  int phaseIdx;
  uint64_t idx_min;
  uint64_t idx_max;
  MemObj *unk_memobj;
  MemObj *total_memobj;
};
# 51 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2


# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h"
# 1 "/usr/include/regex.h" 1 3 4
# 27 "/usr/include/regex.h" 3 4

# 27 "/usr/include/regex.h" 3 4
extern "C" {
# 55 "/usr/include/regex.h" 3 4
typedef unsigned int __re_size_t;
typedef unsigned long int __re_long_size_t;







typedef long int s_reg_t;
typedef unsigned long int active_reg_t;






typedef unsigned long int reg_syntax_t;
# 211 "/usr/include/regex.h" 3 4
extern reg_syntax_t re_syntax_options;
# 346 "/usr/include/regex.h" 3 4
typedef enum
{
  _REG_ENOSYS = -1,
  _REG_NOERROR = 0,
  _REG_NOMATCH,



  _REG_BADPAT,
  _REG_ECOLLATE,
  _REG_ECTYPE,
  _REG_EESCAPE,
  _REG_ESUBREG,
  _REG_EBRACK,
  _REG_EPAREN,
  _REG_EBRACE,
  _REG_BADBR,
  _REG_ERANGE,
  _REG_ESPACE,
  _REG_BADRPT,


  _REG_EEND,
  _REG_ESIZE,
  _REG_ERPAREN
} reg_errcode_t;
# 413 "/usr/include/regex.h" 3 4
struct re_pattern_buffer
{


  struct re_dfa_t *buffer;


  __re_long_size_t allocated;


  __re_long_size_t used;


  reg_syntax_t syntax;




  char *fastmap;





  unsigned char * translate;


  size_t re_nsub;





  unsigned can_be_null : 1;
# 457 "/usr/include/regex.h" 3 4
  unsigned regs_allocated : 2;



  unsigned fastmap_accurate : 1;



  unsigned no_sub : 1;



  unsigned not_bol : 1;


  unsigned not_eol : 1;


  unsigned newline_anchor : 1;
};

typedef struct re_pattern_buffer regex_t;
# 490 "/usr/include/regex.h" 3 4
typedef int regoff_t;






struct re_registers
{
  __re_size_t num_regs;
  regoff_t *start;
  regoff_t *end;
};
# 517 "/usr/include/regex.h" 3 4
typedef struct
{
  regoff_t rm_so;
  regoff_t rm_eo;
} regmatch_t;






extern reg_syntax_t re_set_syntax (reg_syntax_t __syntax);
# 538 "/usr/include/regex.h" 3 4
extern const char *re_compile_pattern (const char *__pattern, size_t __length,
           struct re_pattern_buffer *__buffer);





extern int re_compile_fastmap (struct re_pattern_buffer *__buffer);







extern regoff_t re_search (struct re_pattern_buffer *__buffer,
      const char *__String, regoff_t __length,
      regoff_t __start, regoff_t __range,
      struct re_registers *__regs);




extern regoff_t re_search_2 (struct re_pattern_buffer *__buffer,
        const char *__string1, regoff_t __length1,
        const char *__string2, regoff_t __length2,
        regoff_t __start, regoff_t __range,
        struct re_registers *__regs,
        regoff_t __stop);




extern regoff_t re_match (struct re_pattern_buffer *__buffer,
     const char *__String, regoff_t __length,
     regoff_t __start, struct re_registers *__regs);



extern regoff_t re_match_2 (struct re_pattern_buffer *__buffer,
       const char *__string1, regoff_t __length1,
       const char *__string2, regoff_t __length2,
       regoff_t __start, struct re_registers *__regs,
       regoff_t __stop);
# 596 "/usr/include/regex.h" 3 4
extern void re_set_registers (struct re_pattern_buffer *__buffer,
         struct re_registers *__regs,
         __re_size_t __num_regs,
         regoff_t *__starts, regoff_t *__ends);
# 639 "/usr/include/regex.h" 3 4
extern int regcomp (regex_t *__restrict __preg,
      const char *__restrict __pattern,
      int __cflags);

extern int regexec (const regex_t *__restrict __preg,
      const char *__restrict __String, size_t __nmatch,
      regmatch_t __pmatch[],
      int __eflags);

extern size_t regerror (int __errcode, const regex_t *__restrict __preg,
   char *__restrict __errbuf, size_t __errbuf_size);

extern void regfree (regex_t *__preg);



}
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h" 2
# 36 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h"

# 36 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h"
class Emsgqueue;
class Application;

struct DispTab;



class Settings
{
public:
  friend class DbeView;
  friend class DbeSession;

  Settings (Application *_app);
  Settings (Settings *_settings);
  virtual ~Settings ();
  void read_rc (bool ipc_or_rdt_mode);
  char *read_rc (char *path);
  void buildMasterTabList ();
  void updateTabAvailability ();
  Cmd_status set_name_format (char *str);

  Vector<DispTab*> *
  get_TabList ()
  {
    return tab_list;
  }

  Vector<bool> *
  get_MemTabState ()
  {
    return mem_tab_state;
  }

  Vector<int> *
  get_MemTabOrder ()
  {
    return mem_tab_order;
  }


  void set_MemTabState (Vector<bool>*sel);


  void mobj_define (MemObjType_t *, bool state);


  void indxobj_define (int type, bool state);

  Vector<bool> *
  get_IndxTabState ()
  {
    return indx_tab_state;
  }

  Vector<int> *
  get_IndxTabOrder ()
  {
    return indx_tab_order;
  }


  void set_IndxTabState (Vector<bool>*sel);

  void
  set_name_format (int fname_fmt, bool soname_fmt)
  {
    name_format = Histable::make_fmt (fname_fmt, soname_fmt);
  }

  Histable::NameFormat
  get_name_format ()
  {
    return name_format;
  }


  Cmd_status set_view_mode (char *str, bool rc);

  void
  set_view_mode (VMode mode)
  {
    view_mode = mode;
  }

  VMode
  get_view_mode ()
  {
    return view_mode;
  }


  Cmd_status set_en_desc (char *str, bool rc);

  bool check_en_desc (const char *lineage, const char *targname);

  char *set_limit (char *str, bool rc);

  char *
  set_limit (int _limit)
  {
    limit = _limit;
    return 
# 138 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h" 3 4
          __null
# 138 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h"
              ;
  }

  int
  get_limit ()
  {
    return limit;
  }

  char *set_printmode (char *_pmode);


  Cmd_status proc_compcom (const char *cmd, bool isSrc, bool rc);


  char *get_compcom_errstr (Cmd_status status, const char *cmd);



  char *
  get_str_scompcom ()
  {
    return str_scompcom;
  }

  char *
  get_str_dcompcom ()
  {
    return str_dcompcom;
  }

  int
  get_src_compcom ()
  {
    return src_compcom;
  }

  int
  get_dis_compcom ()
  {
    return dis_compcom;
  }

  void
  set_cmpline_visible (bool v)
  {
    cmpline_visible = v;
  }

  void
  set_funcline_visible (bool v)
  {
    funcline_visible = v;
  }

  void
  set_src_visible (int v)
  {
    src_visible = v;
  }

  int
  get_src_visible ()
  {
    return src_visible;
  }

  void
  set_srcmetric_visible (bool v)
  {
    srcmetric_visible = v;
  }

  bool
  get_srcmetric_visible ()
  {
    return srcmetric_visible;
  }

  void
  set_hex_visible (bool v)
  {
    hex_visible = v;
  }

  bool
  get_hex_visible ()
  {
    return hex_visible;
  }


  Cmd_status proc_thresh (char *cmd, bool isSrc, bool rc);

  int
  get_thresh_src ()
  {
    return threshold_src;
  }

  int
  get_thresh_dis ()
  {
    return threshold_dis;
  }


  Cmd_status proc_tlmode (char *cmd, bool rc);

  void
  set_tlmode (int _tlmode)
  {
    tlmode = _tlmode;
  }

  int
  get_tlmode ()
  {
    return tlmode;
  }

  void
  set_stack_align (int _stack_align)
  {
    stack_align = _stack_align;
  }

  int
  get_stack_align ()
  {
    return stack_align;
  }

  void
  set_stack_depth (int _stack_depth)
  {
    stack_depth = _stack_depth;
  }

  int
  get_stack_depth ()
  {
    return stack_depth;
  }


  Cmd_status proc_tabs (bool _rdtMode);

  Cmd_status proc_tldata (const char *cmd, bool rc);
  void set_tldata (const char* tldata_string);
  char *get_tldata ();

  char *
  get_default_metrics ()
  {
    return str_dmetrics;
  }

  char *
  get_default_sort ()
  {
    return str_dsort;
  }

  void
  set_ignore_no_xhwcprof (bool v)
  {
    ignore_no_xhwcprof = v;
  }

  bool
  get_ignore_no_xhwcprof ()
  {
    return ignore_no_xhwcprof;
  }

  void
  set_ignore_fs_warn (bool v)
  {
    ignore_fs_warn = v;
  }

  bool
  get_ignore_fs_warn ()
  {
    return ignore_fs_warn;
  }


  static char *add_pathmap (Vector<pathmap_t*> *v, const char *from, const char *to);
  void set_pathmaps (Vector<pathmap_t*> *newPathMap);


  bool set_libexpand (char *, enum LibExpand, bool);
  enum LibExpand get_lo_setting (char *);


  bool set_libdefaults ();

  void
  set_compare_mode (int mode)
  {
    compare_mode = mode;
  }

  int
  get_compare_mode ()
  {
    return compare_mode;
  }

  char *
  get_machinemodel ()
  {
    return dbe_strdup (machinemodel);
  }

  char *preload_libdirs;

protected:
  Application *app;


  char *str_vmode;
  char *str_en_desc;
  char *str_datamode;
  char *str_scompcom;
  char *str_sthresh;
  char *str_dcompcom;
  char *str_dthresh;
  char *str_dmetrics;
  char *str_dsort;
  char *str_tlmode;
  char *str_tldata;
  char *str_tabs;
  char *str_rtabs;
  char *str_search_path;
  char *str_name_format;
  char *str_limit;
  char *str_printmode;
  char *str_compare;

  bool tabs_processed;


  bool en_desc;
  char * en_desc_usr;
  regex_t * en_desc_cmp;
  Histable::NameFormat name_format;
  VMode view_mode;
  int src_compcom;
  int dis_compcom;
  int threshold_src;
  int threshold_dis;
  int cmpline_visible;
  int funcline_visible;
  int src_visible;
  bool srcmetric_visible;
  bool hex_visible;
  char* tldata;
  int tlmode;
  int stack_align;
  int stack_depth;
  int limit;
  enum PrintMode print_mode;
  char print_delim;
  int compare_mode;

  char *machinemodel;

  bool ignore_no_xhwcprof;
  bool ignore_fs_warn;

  void set_rc (const char *path, bool msg, Emsgqueue *commentq,
        bool override, bool ipc_or_rdt_mode = false);

  Vector<DispTab*> *tab_list;
  Vector<pathmap_t*> *pathmaps;
  Vector<lo_expand_t*> *lo_expands;
  enum LibExpand lo_expand_default;
  bool is_loexpand_default;
  Vector<bool> *mem_tab_state;
  Vector<int> *mem_tab_order;
  Vector<bool> *indx_tab_state;
  Vector<int> *indx_tab_order;
};
# 54 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2


# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 1
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Stats_data.h" 1
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/Stats_data.h"
class DataView;

class Stats_data
{
public:

  struct Stats_item
  {
    char *label;
    TValue value;
  };

  Stats_data ();
  Stats_data (DataView *packets);
  ~Stats_data ();
  int size ();
  Stats_item fetch (int index);
  void sum (Stats_data *data);

private:

  PrUsage * fetchPrUsage (long index);
  void compute_data ();
  Stats_data::Stats_item *create_stats_item (long long, char *);

  Vector<Stats_item*> *stats_items;
  DataView *packets;
};
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
# 1 "/usr/include/assert.h" 1 3 4
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 2



template <typename Key_t, typename Value_t>
class DefaultMap : public Map<Key_t, Value_t>
{
public:

  DefaultMap ();
  ~DefaultMap ();
  void clear ();
  void put (Key_t key, Value_t val);
  Value_t get (Key_t key);
  Value_t get (Key_t key, typename Map<Key_t, Value_t>::Relation rel);
  Value_t remove (Key_t);
  Vector<Key_t> *keySet ();
  Vector<Value_t> *values ();

private:

  struct Entry
  {
    Key_t key;
    Value_t val;
  };

  static const int CHUNK_SIZE;
  static const int HTABLE_SIZE;

  int entries;
  int nchunks;
  Entry **chunks;
  Vector<Entry*> *index;
  Entry **hashTable;
};


template <typename Key_t, typename Value_t>
const int DefaultMap<Key_t, Value_t>::CHUNK_SIZE = 16384;
template <typename Key_t, typename Value_t>
const int DefaultMap<Key_t, Value_t>::HTABLE_SIZE = 1024;

template <typename Key_t, typename Value_t>
DefaultMap<Key_t, Value_t>::DefaultMap ()
{
  entries = 0;
  nchunks = 0;
  chunks = 
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
          __null
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
              ;
  index = new Vector<Entry*>;
  hashTable = new Entry*[HTABLE_SIZE];
  for (int i = 0; i < HTABLE_SIZE; i++)
    hashTable[i] = 
# 76 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
                  __null
# 76 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
                      ;
}

template <typename Key_t, typename Value_t>
DefaultMap<Key_t, Value_t>::~DefaultMap ()
{
  for (int i = 0; i < nchunks; i++)
    delete[] chunks[i];
  delete[] chunks;
  delete index;
  delete[] hashTable;
}

template <typename Key_t, typename Value_t>
void
DefaultMap<Key_t, Value_t>::clear ()
{
  entries = 0;
  index->reset ();
  for (int i = 0; i < HTABLE_SIZE; i++)
    hashTable[i] = 
# 96 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
                  __null
# 96 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
                      ;
}

template <typename Key_t>
inline unsigned
hash (Key_t key)
{
  unsigned h = (unsigned) ((unsigned long) key);
  h ^= (h >> 20) ^ (h >> 12);
  return (h ^ (h >> 7) ^ (h >> 4));
}

template <typename Key_t, typename Value_t>
void
DefaultMap<Key_t, Value_t>::put (Key_t key, Value_t val)
{
  unsigned idx = hash (key) % HTABLE_SIZE;
  Entry *entry = hashTable[idx];
  if (entry && entry->key == key)
    {
      entry->val = val;
      return;
    }
  int lo = 0;
  int hi = entries - 1;
  while (lo <= hi)
    {
      int md = (lo + hi) / 2;
      entry = index->fetch (md);
      int cmp = entry->key < key ? -1 : entry->key > key ? 1 : 0;
      if (cmp < 0)
 lo = md + 1;
      else if (cmp > 0)
 hi = md - 1;
      else
 {
   entry->val = val;
   return;
 }
    }
  if (entries >= nchunks * CHUNK_SIZE)
    {
      nchunks++;

      Entry **new_chunks = new Entry*[nchunks];
      for (int i = 0; i < nchunks - 1; i++)
 new_chunks[i] = chunks[i];
      delete[] chunks;
      chunks = new_chunks;


      chunks[nchunks - 1] = new Entry[CHUNK_SIZE];
    }
  entry = &chunks[entries / CHUNK_SIZE][entries % CHUNK_SIZE];
  entry->key = key;
  entry->val = val;
  index->insert (lo, entry);
  hashTable[idx] = entry;
  entries++;
}

template <typename Key_t, typename Value_t>
Value_t
DefaultMap<Key_t, Value_t>::get (Key_t key)
{
  unsigned idx = hash (key) % HTABLE_SIZE;
  Entry *entry = hashTable[idx];
  if (entry && entry->key == key)
    return entry->val;

  int lo = 0;
  int hi = entries - 1;
  while (lo <= hi)
    {
      int md = (lo + hi) / 2;
      entry = index->fetch (md);
      int cmp = entry->key < key ? -1 : entry->key > key ? 1 : 0;
      if (cmp < 0)
 lo = md + 1;
      else if (cmp > 0)
 hi = md - 1;
      else
 {
   hashTable[idx] = entry;
   return entry->val;
 }
    }
  return (Value_t) 0;
}

template <typename Key_t, typename Value_t>
Value_t
DefaultMap<Key_t, Value_t>::get (Key_t key,
     typename Map<Key_t, Value_t>::Relation rel)
{
  if (rel != Map<Key_t, Value_t>::REL_EQ)
    return (Value_t) 0;
  return get (key);
}

template <typename Key_t, typename Value_t>
Value_t
DefaultMap<Key_t, Value_t>::remove (Key_t)
{

  if (1)
    
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
   (static_cast <bool> (
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
   0
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
   ) ? void (0) : __assert_fail (
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
   "0"
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
   , "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h", 202, __extension__ __PRETTY_FUNCTION__))
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
             ;
  return (Value_t) 0;
}

template <typename Key_t, typename Value_t>
Vector<Value_t> *
DefaultMap<Key_t, Value_t>::values ()
{
  Vector<Value_t> *vals = new Vector<Value_t>(entries);
  for (int i = 0; i < entries; ++i)
    {
      Entry *entry = index->fetch (i);
      vals->append (entry->val);
    }
  return vals;
}

template <typename Key_t, typename Value_t>
Vector<Key_t> *
DefaultMap<Key_t, Value_t>::keySet ()
{
  Vector<Key_t> *keys = new Vector<Key_t>(entries);
  for (int i = 0; i < entries; ++i)
    {
      Entry *entry = index->fetch (i);
      keys->append (entry->key);
    }
  return keys;
}
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/HeapMap.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/HeapMap.h"
struct HeapObj;
struct HeapChunk;

typedef struct UnmapChunk
{
  long val;
  int64_t size;
  UnmapChunk *next;
} UnmapChunk;

class HeapMap
{
public:
  HeapMap ();
  ~HeapMap ();
  void allocate (uint64_t addr, long val);
  long deallocate (uint64_t addr);
  UnmapChunk *mmap (uint64_t addr, int64_t size, long val);
  UnmapChunk *munmap (uint64_t addr, int64_t size);

private:
  void allocateChunk ();
  HeapObj *getHeapObj ();
  void releaseHeapObj (HeapObj*);
  UnmapChunk *process (HeapObj *obj, uint64_t addr, int64_t size);

  HeapChunk *chunks;
  HeapObj *empty;
  HeapObj **chain;
  HeapObj *mmaps;
};
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 2

class Data_window;
class DbeFile;
class CallStack;
class JMethod;
class Sample;
class SegMem;
class LoadObject;
class SourceFile;
class UserLabel;
class PRBTree;
class Emsg;
class Emsgqueue;
struct JThread;
struct GCEvent;
class FileData;
class Module;
class Experiment;
template <class ITEM> class Vector;
# 66 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
typedef struct
{
  Vector<DbeInstr*> *natpcs;
  Vector<Histable*> *jpcs;
  long idx;
  FramePacket *frp;
  hrtime_t tstamp;
  uint32_t thrid;
  bool last_ctx;
} cstk_ctx;



typedef struct
{
  cstk_ctx* cstCtxAr[10000];
  int last_idx;
  long idx_begin;
  long idx_end;
  DataDescriptor *dDscr;
  Experiment *exp;
  void *cstk;
} cstk_ctx_chunk;

class Experiment : public Histable, public DbeMessages
{
public:

  enum Exp_status
  {
    SUCCESS,
    INCOMPLETE,
    FAILURE
  };

  Experiment ();
  virtual ~Experiment ();

  virtual Histable_type
  get_type ()
  {
    return EXPERIMENT;
  };
  virtual Vector<Histable*> *get_comparable_objs ();

  int groupId;
  Experiment *founder_exp;
  Vector<Experiment*> *children_exps;


  char *hostname;
  hrtime_t start_sec;
  char *username;
  char *architecture;
  Platform_t platform;
  WSize_t wsize;
  int clock;
  int varclock;
  int maxclock;
  int minclock;
  int ncpus;
  int hw_cpuver;
  char *machinemodel;
  char *os_version;
  int page_size;
  int npages;
  int exp_maj_version;
  int exp_min_version;
  int hex_field_width;

  int broken;
  int obsolete;
  bool hwc_default;
  int hwc_bogus;
  int hwc_lost_int;
  int hwc_scanned;
  int invalid_packet;
  bool exec_started;
  bool dataspaceavail;
  bool leaklistavail;
  bool heapdataavail;
  bool racelistavail;
  bool iodataavail;
  bool deadlocklistavail;
  bool timelineavail;
  bool ifreqavail;
  bool ompavail;
  bool has_java;
  char *uarglist;
  char *utargname;
  char *ucwd;
  char *cversion;
  char *dversion;
  char *jversion;


  Exp_status open (char *directory_name);


  Exp_status update ();


  Collection_params *
  get_params ()
  {
    return &coll_params;
  }

  Exp_status
  get_status ()
  {
    return status;
  }


  int
  nsamples ()
  {
    return samples->size ();
  }


  void purge ();

  void resetShowHideStack ();
  int save_notes (char*, bool);
  int delete_notes (bool);
  Experiment *getBaseFounder ();

  hrtime_t
  getStartTime ()
  {
    return exp_start_time;
  }
  hrtime_t getRelativeStartTime ();

  hrtime_t
  getWallStartSec ()
  {
    return start_sec;
  }

  hrtime_t
  getLastEvent ()
  {
    if (last_event != ZERO_TIME)
      return last_event;
    return exp_start_time;
  }

  hrtime_t
  getGCDuration ()
  {
    return gc_duration;
  }

  int
  getPID ()
  {
    return pid;
  }

  int
  getUserExpId ()
  {
    return userExpId;
  }

  int
  getExpIdx ()
  {
    return expIdx;
  }

  void
  setExpIdx (int idx)
  {
    expIdx = idx;
  }

  void
  setUserExpId (int idx)
  {
    userExpId = idx;
  }

  void
  setTinyThreshold (int limit)
  {
    tiny_threshold = limit;
  }

  bool
  isDiscardedTinyExperiment ()
  {
    return discardTiny;
  }

  Exp_status open_epilogue ();
  void read_experiment_data (bool read_ahead);
  static int copy_file_to_archive (const char *name, const char *aname, int hide_msg);
  static int copy_file_to_common_archive (const char *name, const char *aname,
        int hide_msg, const char *common_archive, int relative_path = 0);
  static int copy_file (char *name, char *aname, int hide_msg,
   char *common_archive = 
# 270 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 3 4
                         __null
# 270 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
                             , int relative_path = 0);




  DataDescriptor *get_raw_events (int data_id);
  Vector<DataDescriptor*> *getDataDescriptors ();



  int base_data_id (int data_id);
  DataView *create_derived_data_view (int data_id, DataView *dview);

  Vector<BaseMetric*>*
  get_metric_list ()
  {
    return metrics;
  }

  char *
  get_expt_name ()
  {
    return expt_name;
  };

  Vector<char*> *get_descendants_names ();
  char *get_fndr_arch_name ();
  char *get_arch_name ();
  char *getNameInArchive (const char *fname, bool archiveFile = false);
  char *checkFileInArchive (const char *fname, bool archiveFile = false);
  DbeFile *findFileInArchive (const char *className, const char *runTimePath);
  DbeFile *findFileInArchive (const char *fname);
  bool create_dir (char *dname);

  Vaddr
  ret_stack_base ()
  {
    return stack_base;
  };


  DbeInstr *map_Vaddr_to_PC (Vaddr addr, hrtime_t ts);
  DbeInstr *map_jmid_to_PC (Vaddr mid, int lineno, hrtime_t ts);
  Sample *map_event_to_Sample (hrtime_t ts);
  GCEvent *map_event_to_GCEvent (hrtime_t ts);

  DataView *
  getOpenMPdata ()
  {
    return openMPdata;
  }

  time_t
  get_mtime ()
  {
    return mtime;
  }

  Emsg *fetch_comments (void);
  Emsg *fetch_runlogq (void);
  Emsg *fetch_errors (void);
  Emsg *fetch_warnings (void);
  Emsg *fetch_notes (void);
  Emsg *fetch_ifreq (void);
  Emsg *fetch_pprocq (void);


  Emsgqueue *commentq;
  Emsgqueue *runlogq;

  Emsgqueue *errorq;
  Emsgqueue *warnq;
  Emsgqueue *notesq;
  Emsgqueue *pprocq;
  Emsgqueue *ifreqq;
  Map<const char*, LoadObject*> *loadObjMap;
  Vector<LoadObject*> *loadObjs;
  void append (LoadObject *lo);
  LoadObject *createLoadObject (const char *path, uint64_t chksum = 0);
  LoadObject *createLoadObject (const char *path, const char *runTimePath);
  SourceFile *get_source (const char *path);
  void set_clock (int clk);

  CallStack *
  callTree ()
  {
    return cstack;
  }

  CallStack *
  callTreeShowHide ()
  {
    return cstackShowHide;
  }

  uint32_t mapTagValue (Prop_type, uint64_t value);
  Histable *getTagObj (Prop_type, uint32_t idx);
  Vector<Histable*> *getTagObjs (Prop_type);

  JThread *map_pckt_to_Jthread (uint32_t tid, hrtime_t tstamp);
  JThread *get_jthread (uint32_t tid);

  Vector<JThread*> *
  get_jthreads ()
  {
    return jthreads;
  }

  Vector<GCEvent*> *
  get_gcevents ()
  {
    return gcevents;
  }

  bool need_swap_endian;
  Collection_params coll_params;


  uint64_t min_thread;
  uint64_t max_thread;
  uint64_t thread_cnt;
  uint64_t min_lwp;
  uint64_t max_lwp;
  uint64_t lwp_cnt;
  uint64_t min_cpu;
  uint64_t max_cpu;
  uint64_t cpu_cnt;
  uint64_t dsevents;
  uint64_t dsnoxhwcevents;


  PacketDescriptor *newPacketDescriptor (int kind, DataDescriptor *dDscr);
  PacketDescriptor *getPacketDescriptor (int kind);


  void dump_stacks (FILE *);
  void dump_map (FILE *);


  void DBG_memuse (Sample *);
  void DBG_memuse (const char *sname);
  void init_cache ();

  DefaultMap<int64_t, FileData*> *
  getFDataMap ()
  {
    return fDataMap;
  }
  CallStack *cstack;

protected:

  Exp_status status;
  Vector<SegMem*> *seg_items;
  CallStack *cstackShowHide;
  PRBTree *maps;

  hrtime_t gc_duration;
  hrtime_t exp_start_time;
  hrtime_t last_event;
  hrtime_t non_paused_time;
  hrtime_t resume_ts;
  void update_last_event (hrtime_t ts );

  char *expt_name;
  char *arch_name;
  char *fndr_arch_name;
  char *dyntext_name;

  int yyparse ();
  Vaddr stack_base;


  void write_header ();
  void write_coll_params ();

  Exp_status find_expdir (char *directory_name);


  void read_data_file (const char*, const char*);
  int read_log_file ();
  void read_labels_file ();
  void read_notes_file ();
  void read_archives ();
  int read_java_classes_file ();
  void read_map_file ();
  int read_overview_file ();
  int read_dyntext_file ();
  void read_omp_file ();
  void read_omp_preg ();
  void read_omp_task ();
  void read_ifreq_file ();
  void read_frameinfo_file ();




  virtual int process_arglist_cmd (char *, char *);
  virtual int process_desc_start_cmd (char *, hrtime_t, char *, char *, int, char *);
  virtual int process_desc_started_cmd (char *, hrtime_t, char *, char *, int, char *);
  virtual int process_fn_load_cmd (Module *mod, char *fname, Vaddr vaddr, int fsize, hrtime_t ts);
  virtual int process_fn_unload_cmd (char *, Vaddr, hrtime_t);
  virtual int process_hwcounter_cmd (char *, int, char *, char *, int, int, int, char *);
  virtual int process_hwsimctr_cmd (char *, int, char *, char *, char*, int, int, int, int, int);
  virtual int process_jcm_load_cmd (char*, Vaddr, Vaddr, int, hrtime_t);
  virtual int process_jcm_unload_cmd (char*, Vaddr, hrtime_t);
  virtual int process_Linux_kernel_cmd (hrtime_t);
  virtual int process_jthr_end_cmd (char *, uint64_t, Vaddr, Vaddr, hrtime_t);
  virtual int process_jthr_start_cmd (char *, char *, char *, char *, uint64_t, Vaddr, Vaddr, hrtime_t);
  virtual int process_gc_end_cmd (hrtime_t);
  virtual int process_gc_start_cmd (hrtime_t);
  virtual int process_sample_cmd (char *, hrtime_t, int id, char *lbl);
  virtual int process_sample_sig_cmd (char *, int);
  virtual int process_seg_map_cmd (char *, hrtime_t, Vaddr, int, int, int64_t, int64_t, int64_t, char *);
  virtual int process_seg_unmap_cmd (char *, hrtime_t, Vaddr);


  time_t mtime;
  hrtime_t exp_rel_start_time;
  bool exp_rel_start_time_set;
  Vector<UserLabel*> *userLabels;
  int userExpId;
  int expIdx;
  PRBTree *jmaps;
  Experiment* baseFounder;


  class ExperimentFile;


  class ExperimentHandler;
  class ExperimentLabelsHandler;

  uint64_t readPacket (Data_window *dwin, Data_window::Span *span);
  void readPacket (Data_window *dwin, char *ptr, PacketDescriptor *pDscr,
     DataDescriptor *dDscr, int arg, uint64_t pktsz);


  DataDescriptor *get_profile_events ();
  DataDescriptor *get_sync_events ();
  DataDescriptor *get_hwc_events ();
  DataDescriptor *get_heap_events ();
  DataDescriptor *get_heapsz_events ();
  DataDescriptor *get_iotrace_events ();
  DataDescriptor *get_race_events ();
  DataDescriptor *get_deadlock_events ();
  DataDescriptor *get_sample_events ();
  DataDescriptor *get_gc_events ();
  DataDescriptor *getDataDescriptor (int data_id);
  DataDescriptor *newDataDescriptor (int data_id, int flags = 0,
         DataDescriptor *master_dDscr = 
# 520 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 3 4
                                       __null
# 520 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
                                           );


  struct UIDnode;
  struct RawFramePacket;

  Vector<RawFramePacket*>*frmpckts;
  static int frUidCmp (const void*, const void*);
  RawFramePacket *find_frame_packet (uint64_t uid);

  static const int CHUNKSZ = 16384;
  long nnodes;
  long nchunks;
  UIDnode **chunks;
  UIDnode **uidHTable;
  Vector<UIDnode*> *uidnodes;
  bool resolveFrameInfo;
  bool discardTiny;
  int tiny_threshold;


  static int uidNodeCmp (const void *a, const void *b);
  UIDnode *add_uid (Data_window *dwin, uint64_t uid, int size, uint32_t *array, uint64_t link_uid);
  UIDnode *add_uid (Data_window *dwin, uint64_t uid, int size, uint64_t *array, uint64_t link_uid);
  UIDnode *new_uid_node (uint64_t uid, uint64_t val);
  UIDnode *get_uid_node (uint64_t uid, uint64_t val);
  UIDnode *get_uid_node (uint64_t uid);
  UIDnode *find_uid_node (uint64_t uid);

  ExperimentFile *logFile;


  Vector<DataDescriptor*> *dataDscrs;
  Vector<PacketDescriptor*> *pcktDscrs;
  long blksz;


  DataView *openMPdata;


  Map2D<uint32_t, hrtime_t, uint64_t> *mapPRid;
  Map2D<uint32_t, hrtime_t, void*> *mapPReg;
  Map2D<uint32_t, hrtime_t, void*> *mapTask;


  Map<const char*, DbeFile *> *archiveMap;
  Map<const char*, SourceFile*>*sourcesMap;

  void init ();
  void fini ();
  void post_process ();
  void constructJavaStack (FramePacket *, UIDnode *, Map<uint64_t, uint64_t> *);
  void resolve_frame_info (DataDescriptor*);
  void cleanup_cstk_ctx_chunk ();
  void register_metric (Metric::Type type);
  void register_metric (Hwcentry *ctr, const char* aux, const char* username);

  Sample *sample_last_used;
  GCEvent *gcevent_last_used;
  char *first_sample_label;
  Module *get_jclass (const char *className, const char *fileName);
  LoadObject *get_j_lo (const char *className, const char *fileName);

  Vector<BaseMetric*> *metrics;
  Vector<JThread*> *jthreads;
  Vector<JThread*> *jthreads_idx;
  Vector<GCEvent*> *gcevents;
  Vector<UnmapChunk*> *heapUnmapEvents;
  Vector<Sample*> *samples;

  DefaultMap<int64_t, FileData*> *fDataMap;
  DefaultMap<int, int64_t> *vFdMap;

  Vector<Vector<Histable*>*> *tagObjs;
  bool sparse_threads;

  SegMem **smemHTable;
  DbeInstr **instHTable;
  Map<unsigned long long, JMethod*> *jmidHTable;


  int pid;
  int ppid;
  int pgrp;
  int sid;


  struct MapRecord
  {

    enum
    {
      LOAD, UNLOAD
    } kind;
    Histable *obj;
    Vaddr base;
    Size size;
    hrtime_t ts;
    uint64_t foff;
  };

  void mrec_insert (MapRecord *mrec);
  SegMem *update_ts_in_maps (Vaddr addr, hrtime_t ts);
  int read_warn_file ();
  LoadObject *get_dynfunc_lo (const char *loName);
  Function *create_dynfunc (Module *mod, char *fname, int64_t vaddr, int64_t fsize);
  char *get_archived_name (const char *fname, bool archiveFile = false);

  Vector<MapRecord*> *mrecs;

private:
  void add_evt_time_to_profile_events (DataDescriptor *dDscr);
  DataView *create_heapsz_data_view (DataView *heap_dview);
  void compute_heapsz_data_view (DataView *heapsz_dview);
};

struct JThread
{
  JThread *next;
  char *name;
  char *group_name;
  char *parent_name;
  uint32_t tid;
  Vaddr jthr;
  Vaddr jenv;
  uint32_t jthr_id;
  hrtime_t start;
  hrtime_t end;

  JThread ()
  {
    name = 
# 651 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 3 4
          __null
# 651 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
              ;
    group_name = 
# 652 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 3 4
                __null
# 652 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
                    ;
    parent_name = 
# 653 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 3 4
                 __null
# 653 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
                     ;
  }

  ~JThread ()
  {
    free (name);
    free (group_name);
    free (parent_name);
  }
  bool is_system ();
};

struct GCEvent
{

  GCEvent ()
  {
    id = -1;
  }

  ~GCEvent () { }

  hrtime_t start;
  hrtime_t end;
  int id;
};

class ExperimentLoadCancelException
{
public:

  ExperimentLoadCancelException () { };

  ~ExperimentLoadCancelException () { };
};
# 57 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2

class DbeSession;
class Experiment;
class Expression;
class ExpGroup;
class Function;
class JMethod;
class Histable;
class DbeView;
class Module;
class LoadObject;
class DataObject;
class SourceFile;
class Settings;
class StringBuilder;
class UserLabel;
class DbeFile;
class DbeJarFile;
class FileData;
class HeapData;
template <typename ITEM> class DbeSyncMap;
template <class ITEM> class Vector;

struct DispTab;
struct List;
struct Countable;
class IndexObjType_t;

typedef struct
{
  char *path;
  Experiment *exp;
  DbeSession *ds;
  bool read_ahead;
} exp_ctx;

class DbeSession
{
public:
  DbeSession (Settings *_settings, bool _ipc_mode, bool _rdt_mode);
  ~DbeSession ();

  void reset ();
  void reset_data ();

  void
  set_interactive (bool _interactive)
  {
    interactive = _interactive;
  }

  bool
  is_interactive ()
  {
    return interactive;
  }

  bool is_datamode_available ();
  bool is_leaklist_available ();
  bool is_heapdata_available ();
  bool is_iodata_available ();
  bool is_racelist_available ();
  bool is_deadlocklist_available ();
  bool is_timeline_available ();
  bool is_ifreq_available ();
  bool is_omp_available ();
  bool has_java ();
  bool has_ompavail ();



  int get_clock (int id);


  int createView ();
  int createView (int index, int cloneindex);
  DbeView *getView (int index);
  void dropView (int index);


  Vector<char*> *get_group_or_expt (char *path);

  void open_experiment (Experiment *exp, char *path);
  Experiment *get_exp (int exp_ind);
  Vector<Vector<char*>*> *getExperimensGroups ();
  char *setExperimentsGroups (Vector<Vector<char*>*> *groups);
  char *drop_experiment (int exp_ind);
  int find_experiment (char *path);

  int
  nexps ()
  {
    return exps->size ();
  }
  int ngoodexps ();


  DataObject *createDataObject ();
  DataObject *createDataObject (DataObject *d, DataObject *p = 
# 155 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 3 4
                                                              __null
# 155 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h"
                                                                  );
  DataObject *createMasterDataObject (DataObject *);
  Vector<DataObject*> *get_dobj_elements (DataObject *);

  DataObject *
  get_Total_DataObject ()
  {
    return d_total;
  };

  DataObject *
  get_Unknown_DataObject ()
  {
    return d_unknown;
  };

  DataObject *
  get_Scalars_DataObject ()
  {
    return d_scalars;
  };

  DataObject *find_dobj_by_name (char *dobj_name);
  DataObject *find_dobj_match (DataObject *dobj);
  DataObject *find_dobj_master (DataObject *dobj);

  int
  ndobjs ()
  {
    return dobjs->size ();
  }


  bool
  check_ignore_no_xhwcprof ()
  {
    return settings->get_ignore_no_xhwcprof ();
  };


  bool
  check_ignore_fs_warn ()
  {
    return settings->get_ignore_fs_warn ();
  };


  DbeSyncMap<LoadObject> *loadObjMap;
  void append (LoadObject *lobj);
  LoadObject *createLoadObject (const char *nm, int64_t cksum = 0);
  LoadObject *createLoadObject (const char *nm, const char *runTimePath, DbeFile *df);

  Vector<LoadObject *> *
  get_LoadObjects ()
  {
    return lobjs;
  };

  void dobj_updateHT (DataObject *dobj);
  LoadObject *get_Total_LoadObject ();
  Vector<LoadObject*> *get_text_segments ();
  LoadObject *get_Unknown_LoadObject ();
  LoadObject *find_lobj_by_name (const char *lobj_name, int64_t cksum = 0);


  Vector<DispTab*> *
  get_TabList ()
  {
    return settings->get_TabList ();
  };

  Vector<bool> *
  get_MemTabList ()
  {
    return settings->get_MemTabState ();
  };

  void mobj_define (MemObjType_t *);


  BaseMetric *find_base_reg_metric (char *mcmd);
  Vector<BaseMetric*> *get_base_reg_metrics ();

  Vector<BaseMetric*> *
  get_all_reg_metrics ()
  {
    return reg_metrics;
  };

  BaseMetricTreeNode *get_reg_metrics_tree ();
  BaseMetric *register_metric_expr (BaseMetric::Type type, char *aux, char *expr_spec);
  BaseMetric *register_metric (BaseMetric::Type type);
  BaseMetric *register_metric (char *name, char *username, char *_def);
  BaseMetric *register_metric (Hwcentry *ctr, const char* cmdname, const char* username);
  void drop_metric (BaseMetric *);
  Module *createModule (LoadObject *lo, const char *nm);
  Module *createUnknownModule (LoadObject *lo);
  Module *createClassFile (char *className);
  DbeFile *getDbeFile (char *filename, int filetype);
  SourceFile *get_Unknown_Source ();
  SourceFile *createSourceFile (const char *path);
  Histable *createHistObject (Histable::Type);
  Function *createFunction ();
  Function *create_hide_function (LoadObject *lo);
  Function *get_Total_Function ();
  Function *get_Unknown_Function ();
  Function *get_JUnknown_Function ();
  Function *get_jvm_Function ();
  LoadObject *get_OMP_LoadObject ();
  Function *get_OMP_Function (int);
  JMethod *createJMethod ();
  Histable *createIndexObject (int idxtype, int64_t idx);
  Histable *createIndexObject (int idxtype, Histable *hobj);

  enum SpecialFunction
  {
    TruncatedStackFunc,
    FailedUnwindFunc,
    LastSpecialFunction
  };
  Function *getSpecialFunction (SpecialFunction);

  Histable *
  findObjectById (uint64_t _id)
  {
    long id = (long) _id;
    return (id >= 0 && id < objs->size ()) ? objs->fetch (id) : 
# 281 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 3 4
                                                               __null
# 281 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h"
                                                                   ;
  }

  Histable *findObjectById (Histable::Type type, int subtype, uint64_t id);


  bool find_obj (FILE *dis_file, FILE *inp_file, Histable *&obj, char *name,
   const char *sel, Histable::Type type, bool xdefault);
  int ask_which (FILE *dis_file, FILE *inp_file, Vector<Histable*> *list, char *name);
  LoadObject *map_NametoLoadObject (char *name, Vector<Histable*> *, int which);
  Module *map_NametoModule (char *name, Vector<Histable*> *, int which);
  Function *map_NametoFunction (char *, Vector<Histable*> *, const char *);
  DataObject *map_NametoDataObject (char *name, Vector<Histable*> *, int which);
  bool match_FName (char *name, Function *func);


  Vector<Function *> *match_func_names (const char *ustr, Histable::NameFormat nfmt);
  Vector<DataObject *> *match_dobj_names (char *);


  Vector<JThread*> *match_java_threads (char *ustr, int matchParent,
     Vector<uint64_t> * &grids,
     Vector<uint64_t> * &expids);

  Vector<FileData *> *match_file_names (char *ustr, Histable::NameFormat nfmt);


  Vector<char*> *
  get_search_path ()
  {
    return search_path;
  }

  Vector<DbeFile*>*get_classpath ();
  void set_search_path (Vector<char*> *path, bool reset);
  void set_search_path (char *lpath, bool reset);
  bool add_classpath (char *path);
  bool add_path (char *path);
  void set_pathmaps (Vector<pathmap_t*> *newPathMap);
  Vector<pathmap_t*> *get_pathmaps ();


  void dump_stacks (FILE *);
  void dump_dataobjects (FILE *);
  void dump_segments (FILE *);
  void dump_map (FILE *);


  int registerPropertyName (const char *name);
  int getPropIdByName (const char *name);
  char* getPropName (int propId);
  char* getPropUName (int propId);

  Vector<UserLabel*> *userLabels;
  UserLabel *findUserLabel (const char *name);
  DbeJarFile *get_JarFile (const char *name);
  void append (UserLabel *lbl);
  void append (SourceFile *sf);
  void append (Experiment *exp);
  void append (Hwcentry *exp);
  void set_need_refind ();


  Expression *findObjDefByName (const char *);
  void get_filter_keywords (Vector<void*> *res);


  Settings *
  get_settings ()
  {
    return settings;
  }


  Vector<void*> *getIndxObjDescriptions (void);
  Vector<void*> *getCustomIndxObjects (void);
  char *indxobj_define (const char *, char *, const char *, char *, char *);
  char *getIndexSpaceName (int index);
  char *getIndexSpaceDescr (int index);
  Expression *getIndexSpaceExpr (int index);
  char *getIndexSpaceExprStr (int index);
  int findIndexSpaceByName (const char *mname);
  void removeIndexSpaceByName (const char *mname);
  IndexObjType_t *getIndexSpace (int index);
  IndexObjType_t *findIndexSpace (const char *mname);
  Expression *ql_parse (const char *expr_spec);
  BaseMetric *find_metric (BaseMetric::Type type, const char *cmd, const char *expr_spec = 
# 367 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 3 4
                                                                                          __null
# 367 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h"
                                                                                              );
  static void dump (char *msg, Vector<Metric*> *mlist);
  static void dump (char *msg, Vector<BaseMetric*> *mlist);
  static Platform_t platform;
  Vector<ExpGroup *> *expGroups;
  HashMap<char*, LoadObject *> *comp_lobjs;
  HashMap<char*, DbeLine *> *comp_dbelines;
  HashMap<char*, SourceFile*>*comp_sources;
  char *localized_SP_UNKNOWN_NAME;

  void
  set_lib_visibility_used ()
  {
    lib_visibility_used = true;
  }

  bool
  is_lib_visibility_used ()
  {
    return lib_visibility_used;
  }

  void unlink_tmp_files ();
  char *get_tmp_file_name (const char *nm, bool for_java);

  Vector<char *> *tmp_files;
  int status_ompavail;
  int archive_mode;
  bool ipc_mode;
  bool rdt_mode;



  Vector<char*> *list_mach_models ();
  char *load_mach_model (char *);

  char *
  get_mach_model ()
  {
    return dbe_strdup (mach_model_loaded);
  };
  Vector<SourceFile *> *get_sources ();

private:
  void init ();
  void check_tab_avail ();
  bool add_path (char *path, Vector<char*> *pathes);
  Experiment *createExperiment ();




  Experiment *createExperimentPart1 ();
  void createExperimentPart2 (Experiment *exp);

  Histable *findIndexObject (int idxtype, uint64_t idx);
  void append_mesgs (StringBuilder *sb, char *path, Experiment *exp);
  static void insert_metric (BaseMetric *mtr, Vector<BaseMetric*> *mlist);
  void update_metric_tree (BaseMetric *m);

  char *find_mach_model (char *);
  Vector<Experiment*> *exps;
  Vector<Histable*> *objs;
  Vector<DataObject*> *dobjs;
  Vector<LoadObject*> *lobjs;
  Vector<Hwcentry*> *hwcentries;
  Vector<HashMap<uint64_t, Histable*>*> *idxobjs;
  HashMap<char*, SourceFile*> *sourcesMap;
  Vector<SourceFile*> *sources;
  Map<const char*, DbeJarFile*>*dbeJarFiles;
  Vector<Countable*> *metrics;
  Vector<BaseMetric*> *reg_metrics;
  BaseMetricTreeNode* reg_metrics_tree;
  Vector<char*> *search_path;
  Vector<char*> *classpath;
  Vector<DbeFile*> *classpath_df;
  Map<const char*, DbeFile*>*dbeFiles;
  Vector<DbeView*> *views;
  bool interactive;
  bool lib_visibility_used;
  LoadObject *lo_total;
  Function *f_total;
  LoadObject *lo_unknown;
  Function *f_unknown;
  SourceFile *sf_unknown;
  Function *f_jvm;
  Vector<Function*> *f_special;
  Function *j_unknown;
  LoadObject *lo_omp;
  Vector<Function*> *omp_functions;
  DataObject *d_unknown;
  DataObject *d_scalars;
  DataObject *d_total;
  List **dnameHTable;
  Settings *settings;
  Vector<IndexObjType_t*> *dyn_indxobj;
  int dyn_indxobj_indx;
  int dyn_indxobj_indx_fixed;

  void propNames_name_store (int propId, const char *propName);
  void propNames_name_store (int propId, const char *propName,
        const char *propUName, VType_type vType, int flags);
  char* propNames_name_fetch (int propId);
  Vector<PropDescr*> *propNames;
  char *defExpName;
  int user_exp_id_counter;
  char *mach_model_loaded;
  char *tmp_dir_name;
};


extern DbeSession *dbeSession;

extern Vector<char *> *split_str (char *str, char delimiter);
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Expression.h" 1
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 2


Metric::Metric (BaseMetric *item, SubType st) : BaseMetric (*item)
{
  name = 
# 35 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 3 4
        __null
# 35 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
            ;
  abbr = 
# 36 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 3 4
        __null
# 36 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
            ;
  abbr_unit = 
# 37 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 3 4
             __null
# 37 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
                 ;
  baseMetric = item;
  set_subtype (st);
  visbits = VAL_NA;
  if (item->get_type () == DERIVED)
    visbits = VAL_VALUE;
}

Metric::Metric (const Metric& item) : BaseMetric (item)
{
  baseMetric = item.baseMetric;
  subtype = item.subtype;
  name = dbe_strdup (item.name);
  abbr = dbe_strdup (item.abbr);
  abbr_unit = dbe_strdup (item.abbr_unit);
  visbits = item.visbits;
}

Metric::~Metric ()
{
  free (name);
  free (abbr);
  free (abbr_unit);
}





ValueTag
Metric::get_vtype2 ()
{
  ValueTag vtype = get_vtype ();
  if (visbits & VAL_DELTA)
    {
      switch (vtype)
 {
 case VT_ULLONG: return VT_LLONG;
 default: return vtype;
 }
    }
  if (visbits & VAL_RATIO)
    {
      switch (vtype)
 {
 case VT_INT:
 case VT_LLONG:
 case VT_ULLONG:
 case VT_FLOAT:
 case VT_DOUBLE: return VT_DOUBLE;
 default: return vtype;
 }
    }
  return vtype;
}

void
Metric::set_subtype (SubType st)
{
  subtype = st;
  free (name);
  free (abbr);
  free (abbr_unit);
  name = 
# 100 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 3 4
        __null
# 100 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
            ;
  abbr = 
# 101 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 3 4
        __null
# 101 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
            ;
  abbr_unit = 
# 102 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 3 4
             __null
# 102 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
                 ;

  switch (get_type ())
    {
    case CP_LMS_USER:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive User CPU Time"));
   abbr = dbe_strdup (gettext("Excl. User CPU"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive User CPU Time"));
   abbr = dbe_strdup (gettext("Incl. User CPU"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed User CPU Time"));
   abbr = dbe_strdup (gettext("Attr. User CPU"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected CP_LMS_USER metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
   abort ();
 }
      break;

    case CP_LMS_WAIT_CPU:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Wait CPU Time"));
   abbr = dbe_strdup (gettext("Excl. Wait CPU"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Wait CPU Time"));
   abbr = dbe_strdup (gettext("Incl. Wait CPU"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Wait CPU Time"));
   abbr = dbe_strdup (gettext("Attr. Wait CPU"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected CP_LMS_WAIT_CPU metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case CP_LMS_USER_LOCK:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive User Lock Time"));
   abbr = dbe_strdup (gettext("Excl. User Lock"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive User Lock Time"));
   abbr = dbe_strdup (gettext("Incl. User Lock"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed User Lock Time"));
   abbr = dbe_strdup (gettext("Attr. User Lock"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected CP_LMS_USER_LOCK metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case CP_LMS_SYSTEM:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive System CPU Time"));
   abbr = dbe_strdup (gettext("Excl. Sys. CPU"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive System CPU Time"));
   abbr = dbe_strdup (gettext("Incl. Sys. CPU"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed System CPU Time"));
   abbr = dbe_strdup (gettext("Attr. Sys. CPU"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected CP_LMS_SYSTEM metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case SYNC_WAIT_TIME:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Sync Wait Time"));
   abbr = dbe_strdup (gettext("Excl. Sync Wait"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Sync Wait Time"));
   abbr = dbe_strdup (gettext("Incl. Sync Wait"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Sync Wait Time"));
   abbr = dbe_strdup (gettext("Attr. Sync Wait"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected LWT metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case CP_LMS_TFAULT:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Text Page Fault Time"));
   abbr = dbe_strdup (gettext("Excl. Text Fault"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Text Page Fault Time"));
   abbr = dbe_strdup (gettext("Incl. Text Fault"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Text Page Fault Time"));
   abbr = dbe_strdup (gettext("Attr. Text Fault"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected CP_LMS_TFAULT metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case CP_LMS_DFAULT:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Data Page Fault Time"));
   abbr = dbe_strdup (gettext("Excl. Data Fault"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Data Page Fault Time"));
   abbr = dbe_strdup (gettext("Incl. Data Fault"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Data Page Fault Time"));
   abbr = dbe_strdup (gettext("Attr. Data Fault"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected CP_LMS_DFAULT metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case CP_KERNEL_CPU:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Kernel CPU Time"));
   abbr = dbe_strdup (gettext("Excl. Kernel CPU"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Kernel CPU Time"));
   abbr = dbe_strdup (gettext("Incl. Kernel CPU"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Kernel CPU Time"));
   abbr = dbe_strdup (gettext("Attr. Kernel CPU"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected CP_KERNEL_CPU metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case HWCNTR:
      {
 char *sstr, *estr1, *estr2;
 if (get_hw_ctr () == 
# 309 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 3 4
                     __null
# 309 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
                         )
   abort ();
 sstr = get_username ();
 if (st == EXCLUSIVE)
   {
     estr1 = gettext("Exclusive ");
     estr2 = gettext("Excl. ");
   }
 else if (st == INCLUSIVE)
   {
     estr1 = gettext("Inclusive ");
     estr2 = gettext("Incl. ");
   }
 else if (st == ATTRIBUTED)
   {
     estr1 = gettext("Attributed ");
     estr2 = gettext("Attr. ");
   }
 else if (st == DATASPACE)
   {
     estr1 = gettext("Data-derived ");
     estr2 = gettext("Data. ");
   }
 else
   {
     estr1 = dbe_sprintf (gettext("Unexpected hwc %s metric subtype %d"),
     get_aux (), st);
     estr2 = dbe_strdup (((char *) ("??")));
   }
 name = dbe_sprintf (((char *) ("%s%s")), estr1, sstr);
 abbr = dbe_sprintf (((char *) ("%s%s")), estr2, sstr);
 break;
      }

    case DERIVED:
      {
 switch (st)
   {
   case EXCLUSIVE:
     name = dbe_sprintf (gettext("Exclusive %s"), get_username ());
     abbr = dbe_sprintf (gettext("Excl. %s"), get_cmd ());
     break;
   case INCLUSIVE:
     name = dbe_sprintf (gettext("Inclusive %s"), get_username ());
     abbr = dbe_sprintf (gettext("Incl. %s"), get_cmd ());
     break;
   case ATTRIBUTED:
     name = dbe_sprintf (gettext("Attributed %s"), get_username ());
     abbr = dbe_sprintf (gettext("Attr. %s"), get_cmd ());
     break;
   default:
     name = dbe_sprintf (gettext("Unexpected derived %s metric subtype %d"),
    get_username (), st);
     abbr = dbe_strdup (((char *) ("??")));
     break;
   }
 break;
      }

    case OMP_MASTER_THREAD:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Master Thread Time"));
   abbr = dbe_strdup (gettext("Excl. Master Thread"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Master Thread Time"));
   abbr = dbe_strdup (gettext("Incl. Master Thread"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Master Thread Time"));
   abbr = dbe_strdup (gettext("Attr. Master Thread"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected Master Thread metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case CP_TOTAL:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Total Thread Time"));
   abbr = dbe_strdup (gettext("Excl. Total Thread"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Total Thread Time"));
   abbr = dbe_strdup (gettext("Incl. Total Thread"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Total Thread Time"));
   abbr = dbe_strdup (gettext("Attr. Total Thread"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected TOTAL metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case SYNC_WAIT_COUNT:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Sync Wait Count"));
   abbr = dbe_strdup (gettext("Excl. Sync Wait Count"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Sync Wait Count"));
   abbr = dbe_strdup (gettext("Incl. Sync Wait Count"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Sync Wait Count"));
   abbr = dbe_strdup (gettext("Attr. Sync Wait Count"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected LWCNT metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case CP_TOTAL_CPU:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Total CPU Time"));
   abbr = dbe_strdup (gettext("Excl. Total CPU"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Total CPU Time"));
   abbr = dbe_strdup (gettext("Incl. Total CPU"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Total CPU Time"));
   abbr = dbe_strdup (gettext("Attr. Total CPU"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected TOTAL_CPU metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case CP_LMS_TRAP:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Trap CPU Time"));
   abbr = dbe_strdup (gettext("Excl. Trap CPU"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Trap CPU Time"));
   abbr = dbe_strdup (gettext("Incl. Trap CPU"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Trap CPU Time"));
   abbr = dbe_strdup (gettext("Attr. Trap CPU"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected CP_LMS_TRAP metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case CP_LMS_KFAULT:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Kernel Page Fault Time"));
   abbr = dbe_strdup (gettext("Excl. Kernel Page Fault"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Kernel Page Fault Time"));
   abbr = dbe_strdup (gettext("Incl. Kernel Page Fault"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Kernel Page Fault Time"));
   abbr = dbe_strdup (gettext("Attr. Kernel Page Fault"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected CP_LMS_KFAULT metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case CP_LMS_SLEEP:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Sleep Time"));
   abbr = dbe_strdup (gettext("Excl. Sleep"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Sleep Time"));
   abbr = dbe_strdup (gettext("Incl. Sleep"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Sleep Time"));
   abbr = dbe_strdup (gettext("Attr. Sleep"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected CP_LMS_SLEEP metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case CP_LMS_STOPPED:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Stopped Time"));
   abbr = dbe_strdup (gettext("Excl. Stopped"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Stopped Time"));
   abbr = dbe_strdup (gettext("Incl. Stopped"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Stopped Time"));
   abbr = dbe_strdup (gettext("Attr. Stopped"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected CP_LMS_STOPPED metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case HEAP_ALLOC_BYTES:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Bytes Allocated"));
   abbr = dbe_strdup (gettext("Excl. Bytes Allocated"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Bytes Allocated"));
   abbr = dbe_strdup (gettext("Incl. Bytes Allocated"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Bytes Allocated"));
   abbr = dbe_strdup (gettext("Attr. Bytes Allocated"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected BYTES_MALLOCD metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case HEAP_ALLOC_CNT:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Allocations"));
   abbr = dbe_strdup (gettext("Excl. Allocations"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Allocations"));
   abbr = dbe_strdup (gettext("Incl. Allocations"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Allocations"));
   abbr = dbe_strdup (gettext("Attr. Allocations"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected MALLOCS metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case HEAP_LEAK_BYTES:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Bytes Leaked"));
   abbr = dbe_strdup (gettext("Excl. Bytes Leaked"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Bytes Leaked"));
   abbr = dbe_strdup (gettext("Incl. Bytes Leaked"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Bytes Leaked"));
   abbr = dbe_strdup (gettext("Attr. Bytes Leaked"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected BYTES_LEAKED metric subtype %d"),
         st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case HEAP_LEAK_CNT:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Leaks"));
   abbr = dbe_strdup (gettext("Excl. Leaks"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Leaks"));
   abbr = dbe_strdup (gettext("Incl. Leaks"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Leaks"));
   abbr = dbe_strdup (gettext("Attr. Leaks"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected LEAKS metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case IO_READ_BYTES:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Read Bytes"));
   abbr = dbe_strdup (gettext("Excl. Read Bytes"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Read Bytes"));
   abbr = dbe_strdup (gettext("Incl. Read Bytes"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Read Bytes"));
   abbr = dbe_strdup (gettext("Attr. Read Bytes"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected READ_BYTES metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case IO_WRITE_BYTES:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Write Bytes"));
   abbr = dbe_strdup (gettext("Excl. Write Bytes"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Write Bytes"));
   abbr = dbe_strdup (gettext("Incl. Write Bytes"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Write Bytes"));
   abbr = dbe_strdup (gettext("Attr. Write Bytes"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected WRITE_BYTES metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case IO_READ_CNT:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Read Count"));
   abbr = dbe_strdup (gettext("Excl. Read Count"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Read Count"));
   abbr = dbe_strdup (gettext("Incl. Read Count"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Read Count"));
   abbr = dbe_strdup (gettext("Attr. Read Count"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected READCNT metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case IO_WRITE_CNT:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Write Count"));
   abbr = dbe_strdup (gettext("Excl. Write Count"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Write Count"));
   abbr = dbe_strdup (gettext("Incl. Write Count"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Write Count"));
   abbr = dbe_strdup (gettext("Attr. Write Count"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected WRITECNT metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case IO_OTHER_CNT:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Other I/O Count"));
   abbr = dbe_strdup (gettext("Excl. Other I/O Count"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Other I/O Count"));
   abbr = dbe_strdup (gettext("Incl. Other I/O Count"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Other I/O Count"));
   abbr = dbe_strdup (gettext("Attr. Other I/O Count"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OTHERIOCNT metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case IO_ERROR_CNT:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive I/O Error Count"));
   abbr = dbe_strdup (gettext("Excl. I/O Error Count"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive I/O Error Count"));
   abbr = dbe_strdup (gettext("Incl. I/O Error Count"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed I/O Error Count"));
   abbr = dbe_strdup (gettext("Attr. I/O Error Count"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected IOERRORCNT metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case IO_READ_TIME:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Read Time"));
   abbr = dbe_strdup (gettext("Excl. Read Time"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Read Time"));
   abbr = dbe_strdup (gettext("Incl. Read Time"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Read Time"));
   abbr = dbe_strdup (gettext("Attr. Read Time"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected READ_TIME metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case IO_WRITE_TIME:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Write Time"));
   abbr = dbe_strdup (gettext("Excl. Write Time"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Write Time"));
   abbr = dbe_strdup (gettext("Incl. Write Time"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Write Time"));
   abbr = dbe_strdup (gettext("Attr. Write Time"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected WRITE_TIME metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case IO_OTHER_TIME:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Other I/O Time"));
   abbr = dbe_strdup (gettext("Excl. Other I/O Time"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Other I/O Time"));
   abbr = dbe_strdup (gettext("Incl. Other I/O Time"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Other I/O Time"));
   abbr = dbe_strdup (gettext("Attr. Other I/O Time"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OTHERIO_TIME metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case IO_ERROR_TIME:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive I/O Error Time"));
   abbr = dbe_strdup (gettext("Excl. I/O Error Time"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive I/O Error Time"));
   abbr = dbe_strdup (gettext("Incl. I/O Error Time"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed I/O Error Time"));
   abbr = dbe_strdup (gettext("Attr. I/O Error Time"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected IOERROR_TIME metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;

    case SIZES:
      name = dbe_strdup (gettext("Size"));
      abbr = dbe_strdup (gettext("Size"));
      abbr_unit = dbe_strdup (gettext("bytes"));
      break;

    case ADDRESS:
      name = dbe_strdup (gettext("PC Address"));
      abbr = dbe_strdup (gettext("PC Addr."));
      break;

    case ONAME:
      name = dbe_strdup (gettext("Name"));
      abbr = dbe_strdup (gettext("Name"));
      break;

    case OMP_NONE:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Non-OpenMP Time"));
   abbr = dbe_strdup (gettext("Excl. Non-OMP"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Non-OpenMP Time"));
   abbr = dbe_strdup (gettext("Incl. Non-OMP"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Non-OpenMP Time"));
   abbr = dbe_strdup (gettext("Attr. Non-OMP"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected Non-OpenMP metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_OVHD:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Overhead Time"));
   abbr = dbe_strdup (gettext("Excl. OMP ovhd."));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Overhead Time"));
   abbr = dbe_strdup (gettext("Incl. OMP ovhd."));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Overhead Time"));
   abbr = dbe_strdup (gettext("Attr. OMP ovhd."));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Overhead metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_WORK:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Work Time"));
   abbr = dbe_strdup (gettext("Excl. OMP Work"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Work Time"));
   abbr = dbe_strdup (gettext("Incl. OMP Work"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Work Time"));
   abbr = dbe_strdup (gettext("Attr. OMP Work"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Work metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_IBAR:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Implicit Barrier Time"));
   abbr = dbe_strdup (gettext("Excl. OMP i-barr."));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Implicit Barrier Time"));
   abbr = dbe_strdup (gettext("Incl. OMP i-barr."));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Implicit Barrier Time"));
   abbr = dbe_strdup (gettext("Attr. OMP i-barr."));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Implicit Barrier metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_EBAR:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Explicit Barrier Time"));
   abbr = dbe_strdup (gettext("Excl. OMP e-barr."));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Explicit Barrier Time"));
   abbr = dbe_strdup (gettext("Incl. OMP e-barr."));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Explicit Barrier Time"));
   abbr = dbe_strdup (gettext("Attr. OMP e-barr."));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Explicit Barrier metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_WAIT:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Wait Time"));
   abbr = dbe_strdup (gettext("Excl. OMP Wait"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Wait Time"));
   abbr = dbe_strdup (gettext("Incl. OMP Wait"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Wait Time"));
   abbr = dbe_strdup (gettext("Attr. OMP Wait"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Wait metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_SERL:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Serial Time"));
   abbr = dbe_strdup (gettext("Excl. OMP serl"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Serial Time"));
   abbr = dbe_strdup (gettext("Incl. OMP serl"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Serial Time"));
   abbr = dbe_strdup (gettext("Attr. OMP serl"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Slave Idle metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_RDUC:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Reduction Time"));
   abbr = dbe_strdup (gettext("Excl. OMP rduc"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Reduction Time"));
   abbr = dbe_strdup (gettext("Incl. OMP rduc"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Reduction Time"));
   abbr = dbe_strdup (gettext("Attr. OMP rduc"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Reduction metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_LKWT:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Lock Wait Time"));
   abbr = dbe_strdup (gettext("Excl. OMP lkwt"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Lock Wait Time"));
   abbr = dbe_strdup (gettext("Incl. OMP lkwt"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Lock Wait Time"));
   abbr = dbe_strdup (gettext("Attr. OMP lkwt"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Lock Wait metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_CTWT:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Critical Section Wait Time"));
   abbr = dbe_strdup (gettext("Excl. OMP ctwt"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Critical Section Wait Time"));
   abbr = dbe_strdup (gettext("Incl. OMP ctwt"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Critical Section Wait Time"));
   abbr = dbe_strdup (gettext("Attr. OMP ctwt"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Critical Section Wait metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_ODWT:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Ordered Section Wait Time"));
   abbr = dbe_strdup (gettext("Excl. OMP odwt"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Ordered Section Wait Time"));
   abbr = dbe_strdup (gettext("Incl. OMP odwt"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Ordered Section Wait Time"));
   abbr = dbe_strdup (gettext("Attr. OMP odwt"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Ordered Section Wait metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_MSTR:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Master Serial Time"));
   abbr = dbe_strdup (gettext("Excl. OMP ser."));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Master Serial Time"));
   abbr = dbe_strdup (gettext("Incl. OMP ser."));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Master Serial Time"));
   abbr = dbe_strdup (gettext("Attr. OMP ser."));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Master Serial metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_SNGL:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Single Region Time"));
   abbr = dbe_strdup (gettext("Excl. OMP sngl"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Single Region Time"));
   abbr = dbe_strdup (gettext("Incl. OMP sngl"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Single Region Time"));
   abbr = dbe_strdup (gettext("Attr. OMP sngl"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Single Region metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case OMP_ORDD:
      abbr_unit = dbe_strdup (gettext("sec."));
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive OpenMP Ordered Region Time"));
   abbr = dbe_strdup (gettext("Excl. OMP ordd"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive OpenMP Ordered Region Time"));
   abbr = dbe_strdup (gettext("Incl. OMP ordd"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed OpenMP Ordered Region Time"));
   abbr = dbe_strdup (gettext("Attr. OMP ordd"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected OpenMP Ordered Region metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case RACCESS:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Race Accesses"));
   abbr = dbe_strdup (gettext("Excl. Race Accesses"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Race Accesses"));
   abbr = dbe_strdup (gettext("Incl. Race Accesses"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Race Accesses"));
   abbr = dbe_strdup (gettext("Attr. Race Accesses"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected Race Access metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    case DEADLOCKS:
      if (st == EXCLUSIVE)
 {
   name = dbe_strdup (gettext("Exclusive Deadlocks"));
   abbr = dbe_strdup (gettext("Excl. Deadlocks"));
 }
      else if (st == INCLUSIVE)
 {
   name = dbe_strdup (gettext("Inclusive Deadlocks"));
   abbr = dbe_strdup (gettext("Incl. Deadlocks"));
 }
      else if (st == ATTRIBUTED)
 {
   name = dbe_strdup (gettext("Attributed Deadlocks"));
   abbr = dbe_strdup (gettext("Attr. Deadlocks"));
 }
      else
 {
   name = dbe_sprintf (gettext("Unexpected Deadlocks metric subtype %d"), st);
   abbr = dbe_strdup (((char *) ("??")));
 }
      break;
    default:
      abort ();
    }
}

static bool
is_width_ok (int lines, size_t width, size_t *tlen, int last)
{
  size_t len = 0;
  for (int i = 0; i <= last; i++)
    {
      if (len != 0)
 len++;
      if (len + tlen[i] > width)
 {
   if (--lines == 0)
     return false;
   len = 0;
 }
      len += tlen[i];
    }
  return true;
}

void
Metric::legend_width (HistMetric *hitem, int gap)
{
  size_t tlen[1024];
  char *tok[1024], buf[1024], unit[1024];
  hitem->width = hitem->maxtime_width;
  if (hitem->maxvalue_width > 0)
    {
      if (hitem->width > 0)
 hitem->width++;
      hitem->width += hitem->maxvalue_width;
    }
  if (is_pvisible ())
    {
      if (hitem->width > 0)
 {
   hitem->width++;
 }
      hitem->width += 6;
    }
  snprintf (buf, sizeof (buf), "%s", get_abbr ());
  size_t max_len = hitem->width;
  if (legend)
    {
      size_t legend_len = strlen (legend);
      if (max_len < legend_len)
 max_len = legend_len;
    }
  tok[0] = buf;
  int last = 0;
  for (int i = 0;; i++)
    {
      if (buf[i] == ' ')
 {
   buf[i] = '\0';
   while (buf[i + 1] == ' ')
     i++;
   tlen[last] = strlen (tok[last]);
   if (max_len < tlen[last])
     max_len = tlen[last];
   last++;
   tok[last] = buf + i + 1;
 }
      else if (buf[i] == '\0')
 {
   tlen[last] = strlen (tok[last]);
   if (max_len < tlen[last])
     max_len = tlen[last];
   if (tlen[last] == 0 && last > 0)
     last--;
   break;
 }
    }

  *unit = '\0';
  int max_lines = 3;
  if (is_tvisible ())
    {
      char *s = gettext("sec.");
      if ((get_visbits () & VAL_DELTA) != 0)
 s = gettext("delta");
      else if ((get_visbits () & VAL_RATIO) != 0)
 s = gettext("ratio");
      long len = strlen (s);
      if (hitem->maxtime_width < len)
 {
   hitem->width += len - hitem->maxtime_width;
   hitem->maxtime_width = len;
 }
      snprintf (unit, sizeof (unit), "%*s", (int) hitem->maxtime_width, s);
    }
  if (is_visible ())
    {
      char *s = ((char *) (""));
      if (!is_tvisible ())
 {
   if ((get_visbits () & VAL_DELTA) != 0)
     s = gettext("delta");
   else if ((get_visbits () & VAL_RATIO) != 0)
     s = gettext("ratio");
   else if ((get_value_styles () & VAL_TIMEVAL) != 0 && !is_time_val ())
     s = gettext("sec.");
 }
      long len = strlen (s);
      if (hitem->maxvalue_width < len)
 {
   hitem->width += len - hitem->maxvalue_width;
   hitem->maxvalue_width = len;
 }
      if (*unit)
 {
   max_lines = 2;
   len = strlen (unit);
   snprintf (unit + len, sizeof (unit) - len, " %*s",
      (int) hitem->maxvalue_width, s);
 }
      else
 snprintf (unit, sizeof (unit), "%*s", (int) hitem->maxvalue_width, s);
    }
  if (is_pvisible ())
    {
      max_lines = 2;
      if (*unit)
 {
   size_t len = strlen (unit);
   snprintf (unit + len, sizeof (unit) - len, gettext("      %%"));
 }
      else
 snprintf (unit, sizeof (unit), gettext("     %%"));
    }
  for (size_t i = strlen (unit); i > 0;)
    {
      i--;
      if (unit[i] != ' ')
 break;
      unit[i] = 0;
    }

  if (*unit)
    {
      last++;
      tlen[last] = strlen (unit);
      tok[last] = unit;
      if (max_len < tlen[last])
 max_len = tlen[last];
      if (max_lines == 3 && *unit == ' ')
 {
   char *str = unit;
   while (*str == ' ')
     str++;
   tlen[last] = strlen (str);
   tok[last] = str;
 }
    }

  int last1 = max_lines == 3 ? last : last - 1;
  while (!is_width_ok (max_lines, max_len, tlen, last1))
    max_len++;
  hitem->width = max_len + gap;

  char *legends[3];
  legends[0] = hitem->legend1;
  legends[1] = hitem->legend2;
  legends[2] = hitem->legend3;
  for (int i = 0, ind = 0; i < 3; i++)
    {
      char *str = legends[i];
      *str = 0;
      for (; ind <= last; ind++)
 {
   if (*unit && (ind == last))
     {

       if (i != 2)
  {
    tok[last] = unit;
    break;
  }
     }
   size_t len = strlen (str);
   if (len != 0)
     {
       if (len + 1 + tlen[ind] > max_len)
  break;
       snprintf (str + len, 1024 - len, ((char *) (" %s")), tok[ind]);
     }
   else
     {
       if (len + tlen[ind] > max_len)
  break;
       snprintf (str + len, 1024 - len, ((char *) ("%s")), tok[ind]);
     }
 }
    }
}

int
Metric::get_real_visbits ()
{
  int v = visbits;
  if (!is_time_val () && (visbits & (VAL_TIMEVAL | VAL_VALUE)) != 0)
    {
      v &= ~(VAL_TIMEVAL | VAL_VALUE);
      v |= (get_value_styles () & (VAL_TIMEVAL | VAL_VALUE));
    }
  return v;
}

char *
Metric::get_vis_string (int vis)
{
  char *vis_str;
  if (subtype == STATIC)
    vis_str = ((char *) (""));
  else
    {
      int v;
      if (is_time_val ())
 v = vis & (VAL_TIMEVAL | VAL_VALUE | VAL_PERCENT);
      else
 {
   v = vis & VAL_PERCENT;
   if ((vis & (VAL_TIMEVAL | VAL_VALUE)) != 0)
     v |= (get_value_styles () & (VAL_TIMEVAL | VAL_VALUE));
 }
      switch (v)
 {
 case VAL_TIMEVAL:
   vis_str = ((char *) ("."));
   break;
 case VAL_VALUE:
   vis_str = ((char *) ("+"));
   break;
 case VAL_TIMEVAL | VAL_VALUE:
   vis_str = ((char *) (".+"));
   break;
 case VAL_PERCENT:
   vis_str = ((char *) ("%"));
   break;
 case VAL_TIMEVAL | VAL_PERCENT:
   vis_str = ((char *) (".%"));
   break;
 case VAL_VALUE | VAL_PERCENT:
   vis_str = ((char *) ("+%"));
   break;
 case VAL_TIMEVAL | VAL_VALUE | VAL_PERCENT:
   vis_str = ((char *) (".+%"));
   break;
 default:
   vis_str = ((char *) ("!"));
   break;
 }
    }
  return vis_str;
}

char *
Metric::get_vis_str ()
{
  char *vis_str = 
# 1537 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 3 4
                 __null
# 1537 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
                     ;
  if (visbits == -1)
    {

      if (subtype == STATIC)
 vis_str = ((char *) (".-"));
      else if (is_time_val ())
 vis_str = ((char *) (".+%-"));
      else
 vis_str = ((char *) (".%-"));
    }
  else
    vis_str = get_vis_string (get_real_visbits ());
  return vis_str;
}

void
Metric::set_dmetrics_visbits (int dmetrics_visbits)
{
  visbits = VAL_NA;


  int _visbits = dmetrics_visbits & ~VAL_HIDE_ALL;
  
# 1560 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 3 4
 (static_cast <bool> (
# 1560 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
 _visbits != -1
# 1560 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 3 4
 ) ? void (0) : __assert_fail (
# 1560 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
 "_visbits != -1"
# 1560 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc", 1560, __extension__ __PRETTY_FUNCTION__))
# 1560 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.cc"
                        ;
  if (_visbits == 0)
    return;
  if (get_subtype () == STATIC)

    visbits = VAL_VALUE;
  else
    {

      if (is_time_val () == 0)
 {
   if ((_visbits & VAL_VALUE) || (_visbits & VAL_TIMEVAL))
     visbits |= VAL_VALUE;
 }
      else
 visbits |= (_visbits & (VAL_VALUE | VAL_TIMEVAL));
      visbits |= (_visbits & (VAL_PERCENT | VAL_RATIO | VAL_DELTA));
    }

  if (dmetrics_visbits & VAL_HIDE_ALL)
    visbits |= VAL_HIDE_ALL;
}

void
Metric::set_vvisible (bool set)
{
  if (set)
    {
      visbits |= VAL_VALUE;
      visbits &= ~VAL_HIDE_ALL;
    }
  else
    visbits &= ~VAL_VALUE;
}

void
Metric::set_tvisible (bool set)
{
  if (set)
    {
      visbits |= VAL_TIMEVAL;
      visbits &= ~VAL_HIDE_ALL;
    }
  else
    visbits &= ~VAL_TIMEVAL;
}

void
Metric::set_pvisible (bool set)
{
  if (set)
    {
      visbits |= VAL_PERCENT;
      visbits &= ~VAL_HIDE_ALL;
    }
  else
    visbits &= ~VAL_PERCENT;
}

char *
Metric::get_mcmd (bool allPossible)
{
  char *sc = ((char *) (""));
  char *hide;
  char *vis = get_vis_string (allPossible ? get_value_styles ()
         : get_real_visbits ());
  if (subtype == INCLUSIVE)
    sc = ((char *) ("i"));
  else if (subtype == EXCLUSIVE)
    sc = ((char *) ("e"));
  else if (subtype == ATTRIBUTED)
    sc = ((char *) ("a"));
  else if (subtype == DATASPACE)
    sc = ((char *) ("d"));
  if (allPossible)
    hide = ((char *) (""));
  else if (visbits == VAL_NA || (visbits & VAL_HIDE_ALL) != 0)
    hide = ((char *) ("!"));
  else
    hide = ((char *) (""));

  char *mcmd = get_cmd ();
  return dbe_sprintf (gettext("%s%s%s%s"), sc, hide, vis, mcmd);
}

char *
Metric::dump ()
{
  int len = 4;
  BaseMetric *bm = (BaseMetric *) this;
  char *s = bm->dump ();
  char *msg = dbe_sprintf ("%s\n%*c subtype=%d time_val=%d vis=%d tvis=%d"
      " pvis=%d\n%*c abbr='%s' cmd='%s' name='%s'\n",
      STR (s), len, ' ', get_subtype (), is_time_val (),
      is_visible (), is_tvisible (), is_pvisible (),
      len, ' ', STR (get_abbr ()), STR (get_cmd ()),
      STR (get_name ()));
  free (s);
  return msg;
}
