# 1 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_collctrl.cc"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_collctrl.cc"
# 21 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_collctrl.cc"
# 1 "../config.h" 1
# 22 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_collctrl.cc" 2
# 1 "../config.h" 1
# 23 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_collctrl.cc" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4


# 29 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char *__s) throw () __attribute__ ((__warn_unused_result__));




extern char *tmpnam_r (char *__s) throw () __attribute__ ((__warn_unused_result__));
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) throw () __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () __attribute__ ((__warn_unused_result__));





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                          __attribute__ ((__warn_unused_result__));
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                         __attribute__ ((__warn_unused_result__));
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf")

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);




# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0010) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0020) != 0);
}
# 865 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) throw ();
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...) throw ()
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) throw ();
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...) throw ()

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...) throw ()

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 209 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 243 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}




extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = getc_unlocked (__stream);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 868 "/usr/include/stdio.h" 2 3 4





}
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_collctrl.cc" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 1 3 4
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_collctrl.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h"
# 1 "/usr/include/libintl.h" 1 3 4
# 34 "/usr/include/libintl.h" 3 4
extern "C" {




extern char *gettext (const char *__msgid)
     throw () __attribute__ ((__format_arg__ (1)));



extern char *dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));



extern char *dcgettext (const char *__domainname,
   const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dcgettext (const char *__domainname,
     const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));




extern char *ngettext (const char *__msgid1, const char *__msgid2,
         unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (1))) __attribute__ ((__format_arg__ (2)));



extern char *dngettext (const char *__domainname, const char *__msgid1,
   const char *__msgid2, unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));



extern char *dcngettext (const char *__domainname, const char *__msgid1,
    const char *__msgid2, unsigned long int __n,
    int __category)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));





extern char *textdomain (const char *__domainname) throw ();



extern char *bindtextdomain (const char *__domainname,
        const char *__dirname) throw ();



extern char *bind_textdomain_codeset (const char *__domainname,
          const char *__codeset) throw ();
# 121 "/usr/include/libintl.h" 3 4
}
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h" 2








# 32 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h"
extern "C"
{

  void init_locale (char *Path);

}
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_collctrl.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 1
# 21 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
# 1 "../config.h" 1
# 22 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4





typedef __gid_t gid_t;




typedef __uid_t uid_t;
# 255 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;




typedef __pid_t pid_t;






typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
# 334 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 345 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __attribute__ ((__warn_unused_result__));





extern ssize_t write (int __fd, const void *__buf, size_t __n) __attribute__ ((__warn_unused_result__));
# 376 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) __attribute__ ((__warn_unused_result__));






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) __attribute__ ((__warn_unused_result__));
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) __attribute__ ((__warn_unused_result__));


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) __attribute__ ((__warn_unused_result__));







extern int pipe (int __pipedes[2]) throw () __attribute__ ((__warn_unused_result__));




extern int pipe2 (int __pipedes[2], int __flags) throw () __attribute__ ((__warn_unused_result__));
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () __attribute__ ((__warn_unused_result__));




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchdir (int __fd) throw () __attribute__ ((__warn_unused_result__));
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () __attribute__ ((__warn_unused_result__));





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__));




extern int dup (int __fd) throw () __attribute__ ((__warn_unused_result__));


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () __attribute__ ((__warn_unused_result__));




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () __attribute__ ((__warn_unused_result__));



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () __attribute__ ((__warn_unused_result__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () __attribute__ ((__warn_unused_result__));




extern int seteuid (__uid_t __uid) throw () __attribute__ ((__warn_unused_result__));






extern int setgid (__gid_t __gid) throw () __attribute__ ((__warn_unused_result__));




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () __attribute__ ((__warn_unused_result__));




extern int setegid (__gid_t __gid) throw () __attribute__ ((__warn_unused_result__));





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () __attribute__ ((__warn_unused_result__));



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () __attribute__ ((__warn_unused_result__));






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) __attribute__ ((__warn_unused_result__));




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) __attribute__ ((__warn_unused_result__));


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int sethostid (long int __id) throw () __attribute__ ((__warn_unused_result__));





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () __attribute__ ((__warn_unused_result__));






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 991 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1003 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1014 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () __attribute__ ((__warn_unused_result__));
# 1024 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () __attribute__ ((__warn_unused_result__));
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () __attribute__ ((__warn_unused_result__));





extern void *sbrk (intptr_t __delta) throw ();
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1079 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) __attribute__ ((__warn_unused_result__));
# 1089 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) __attribute__ ((__warn_unused_result__));
# 1107 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
      size_t __buflen) __attribute__ ((__warn_unused_result__));
extern ssize_t __read_alias (int __fd, void *__buf, size_t __nbytes) __asm__ ("" "read")
                               __attribute__ ((__warn_unused_result__));
extern ssize_t __read_chk_warn (int __fd, void *__buf, size_t __nbytes, size_t __buflen) __asm__ ("" "__read_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("read called with bigger length than size of " "the destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
read (int __fd, void *__buf, size_t __nbytes)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __read_chk (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));

      if (__nbytes > __builtin_object_size (__buf, 0))
 return __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));
    }
  return __read_alias (__fd, __buf, __nbytes);
}


extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
       __off_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
         __off64_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_alias (int __fd, void *__buf, size_t __nbytes, __off_t __offset) __asm__ ("" "pread")

                                 __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_alias (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")

                                     __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_chk_warn (int __fd, void *__buf, size_t __nbytes, __off_t __offset, size_t __bufsize) __asm__ ("" "__pread_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread called with bigger length than size of " "the destination buffer")))
                                  ;
extern ssize_t __pread64_chk_warn (int __fd, void *__buf, size_t __nbytes, __off64_t __offset, size_t __bufsize) __asm__ ("" "__pread64_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread64 called with bigger length than size of " "the destination buffer")))
                                  ;


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread (int __fd, void *__buf, size_t __nbytes, __off_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));

      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread_chk_warn (__fd, __buf, __nbytes, __offset,
     __builtin_object_size (__buf, 0));
    }
  return __pread_alias (__fd, __buf, __nbytes, __offset);
}
# 104 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread64 (int __fd, void *__buf, size_t __nbytes, __off64_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));

      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread64_chk_warn (__fd, __buf, __nbytes, __offset,
       __builtin_object_size (__buf, 0));
    }

  return __pread64_alias (__fd, __buf, __nbytes, __offset);
}




extern ssize_t __readlink_chk (const char *__restrict __path,
          char *__restrict __buf, size_t __len,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_alias (const char *__restrict __path, char *__restrict __buf, size_t __len) throw () __asm__ ("" "readlink")


     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_chk_warn (const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__readlink_chk")



     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlink called with bigger length " "than size of destination buffer")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__leaf__)) readlink (const char *__restrict __path, char *__restrict __buf, size_t __len) throw ()

{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlink_chk (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if ( __len > __builtin_object_size (__buf, 2 > 1))
 return __readlink_chk_warn (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __readlink_alias (__path, __buf, __len);
}



extern ssize_t __readlinkat_chk (int __fd, const char *__restrict __path,
     char *__restrict __buf, size_t __len,
     size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_alias (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) throw () __asm__ ("" "readlinkat")



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_chk_warn (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__readlinkat_chk")



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlinkat called with bigger " "length than size of destination " "buffer")))

                ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__leaf__)) readlinkat (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) throw ()

{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlinkat_chk (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if (__len > __builtin_object_size (__buf, 2 > 1))
 return __readlinkat_chk_warn (__fd, __path, __buf, __len,
          __builtin_object_size (__buf, 2 > 1));
    }
  return __readlinkat_alias (__fd, __path, __buf, __len);
}


extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
     throw () __attribute__ ((__warn_unused_result__));
extern char *__getcwd_alias (char *__buf, size_t __size) throw () __asm__ ("" "getcwd")
                                              __attribute__ ((__warn_unused_result__));
extern char *__getcwd_chk_warn (char *__buf, size_t __size, size_t __buflen) throw () __asm__ ("" "__getcwd_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getcwd caller with bigger length than size of " "destination buffer")))
                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) getcwd (char *__buf, size_t __size) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size))
 return __getcwd_chk (__buf, __size, __builtin_object_size (__buf, 2 > 1));

      if (__size > __builtin_object_size (__buf, 2 > 1))
 return __getcwd_chk_warn (__buf, __size, __builtin_object_size (__buf, 2 > 1));
    }
  return __getcwd_alias (__buf, __size);
}


extern char *__getwd_chk (char *__buf, size_t buflen)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern char *__getwd_warn (char *__buf) throw () __asm__ ("" "getwd")
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use getcwd instead, as getwd " "doesn't specify buffer size")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) getwd (char *__buf) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    return __getwd_chk (__buf, __builtin_object_size (__buf, 2 > 1));
  return __getwd_warn (__buf);
}


extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
        size_t __buflen) throw ();
extern size_t __confstr_alias (int __name, char *__buf, size_t __len) throw () __asm__ ("" "confstr")
                             ;
extern size_t __confstr_chk_warn (int __name, char *__buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__confstr_chk")


     __attribute__((__warning__ ("confstr called with bigger length than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) confstr (int __name, char *__buf, size_t __len) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __confstr_chk (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if (__builtin_object_size (__buf, 2 > 1) < __len)
 return __confstr_chk_warn (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __confstr_alias (__name, __buf, __len);
}


extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
     throw () __attribute__ ((__warn_unused_result__));
extern int __getgroups_alias (int __size, __gid_t __list[]) throw () __asm__ ("" "getgroups")
                 __attribute__ ((__warn_unused_result__));
extern int __getgroups_chk_warn (int __size, __gid_t __list[], size_t __listlen) throw () __asm__ ("" "__getgroups_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getgroups called with bigger group count than what " "can fit into destination buffer")))
                                           ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) getgroups (int __size, __gid_t __list[]) throw ()
{
  if (__builtin_object_size (__list, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size) || __size < 0)
 return __getgroups_chk (__size, __list, __builtin_object_size (__list, 2 > 1));

      if (__size * sizeof (__gid_t) > __builtin_object_size (__list, 2 > 1))
 return __getgroups_chk_warn (__size, __list, __builtin_object_size (__list, 2 > 1));
    }
  return __getgroups_alias (__size, __list);
}


extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ttyname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ttyname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ttyname_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ttyname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ttyname_r_alias (__fd, __buf, __buflen);
}



extern int __getlogin_r_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_alias (char *__buf, size_t __buflen) __asm__ ("" "getlogin_r")
                     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getlogin_r_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("getlogin_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
getlogin_r (char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getlogin_r_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getlogin_r_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getlogin_r_alias (__buf, __buflen);
}




extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
     throw () __attribute__ ((__nonnull__ (1)));
extern int __gethostname_alias (char *__buf, size_t __buflen) throw () __asm__ ("" "gethostname")
                   __attribute__ ((__nonnull__ (1)));
extern int __gethostname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__gethostname_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("gethostname called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) gethostname (char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __gethostname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __gethostname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __gethostname_alias (__buf, __buflen);
}




extern int __getdomainname_chk (char *__buf, size_t __buflen, size_t __nreal)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_alias (char *__buf, size_t __buflen) throw () __asm__ ("" "getdomainname")

                     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__getdomainname_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getdomainname called with bigger " "buflen than size of destination " "buffer")))

                    ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) getdomainname (char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getdomainname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getdomainname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getdomainname_alias (__buf, __buflen);
}
# 1167 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) throw ();
# 1171 "/usr/include/unistd.h" 2 3 4

}
# 23 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 126 "/usr/include/strings.h" 2 3 4


extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}





# 1 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bcopy (const void *__src, void *__dest, size_t __len) throw ()
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bzero (void *__dest, size_t __len) throw ()
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}
# 145 "/usr/include/strings.h" 2 3 4
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}
# 99 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 122 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 204 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}
# 261 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 369 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 421 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));





extern char *strerror_l (int __errnum, locale_t __l) throw ();







extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 495 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memmove (void *__dest, const void *__src, size_t __len) throw ()
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 58 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memset (void *__dest, int __ch, size_t __len) throw ()
{
# 71 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}




void __explicit_bzero_chk (void *__dest, size_t __len, size_t __destlen)
  throw () __attribute__ ((__nonnull__ (1)));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) explicit_bzero (void *__dest, size_t __len) throw ()
{
  __explicit_bzero_chk (__dest, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) throw ();
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) throw () __asm__ ("" "stpncpy")
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpncpy (char *__dest, const char *__src, size_t __n) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n > __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcat (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 496 "/usr/include/string.h" 2 3 4



}
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;
# 69 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __mode_t mode_t;




typedef __nlink_t nlink_t;
# 103 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4







typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 124 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) throw ();
# 395 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));


# 1 "/usr/include/x86_64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4




# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 12 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4






# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4
# 24 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 47 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 6 "/usr/include/linux/stat.h" 2 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 32 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
extern "C" {


int statx (int __dirfd, const char *__restrict __path, int __flags,
           unsigned int __mask, struct statx *__restrict __buf)
  throw () __attribute__ ((__nonnull__ (2, 5)));

}
# 39 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4
# 447 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat (const char *__path, struct stat *__statbuf) throw ()
{
  return __xstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat (const char *__path, struct stat *__statbuf) throw ()
{
  return __lxstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat (int __fd, struct stat *__statbuf) throw ()
{
  return __fxstat (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat (int __fd, const char *__filename, struct stat *__statbuf, int __flag) throw ()

{
  return __fxstatat (1, __fd, __filename, __statbuf, __flag);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknod (const char *__path, __mode_t __mode, __dev_t __dev) throw ()
{
  return __xmknod (0, __path, __mode, &__dev);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknodat (int __fd, const char *__path, __mode_t __mode, __dev_t __dev) throw ()

{
  return __xmknodat (0, __fd, __path, __mode, &__dev);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __xstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __lxstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat64 (int __fd, struct stat64 *__statbuf) throw ()
{
  return __fxstat64 (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf, int __flag) throw ()

{
  return __fxstatat64 (1, __fd, __filename, __statbuf, __flag);
}






}
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/statvfs.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/statvfs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/statvfs.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/statvfs.h" 3 4
struct statvfs
  {
    unsigned long int f_bsize;
    unsigned long int f_frsize;

    __fsblkcnt_t f_blocks;
    __fsblkcnt_t f_bfree;
    __fsblkcnt_t f_bavail;
    __fsfilcnt_t f_files;
    __fsfilcnt_t f_ffree;
    __fsfilcnt_t f_favail;
# 48 "/usr/include/x86_64-linux-gnu/bits/statvfs.h" 3 4
    unsigned long int f_fsid;



    unsigned long int f_flag;
    unsigned long int f_namemax;
    int __f_spare[6];
  };


struct statvfs64
  {
    unsigned long int f_bsize;
    unsigned long int f_frsize;
    __fsblkcnt64_t f_blocks;
    __fsblkcnt64_t f_bfree;
    __fsblkcnt64_t f_bavail;
    __fsfilcnt64_t f_files;
    __fsfilcnt64_t f_ffree;
    __fsfilcnt64_t f_favail;
    unsigned long int f_fsid;



    unsigned long int f_flag;
    unsigned long int f_namemax;
    int __f_spare[6];
  };




enum
{
  ST_RDONLY = 1,

  ST_NOSUID = 2


  ,
  ST_NODEV = 4,

  ST_NOEXEC = 8,

  ST_SYNCHRONOUS = 16,

  ST_MANDLOCK = 64,

  ST_WRITE = 128,

  ST_APPEND = 256,

  ST_IMMUTABLE = 512,

  ST_NOATIME = 1024,

  ST_NODIRATIME = 2048,

  ST_RELATIME = 4096


};
# 26 "/usr/include/x86_64-linux-gnu/sys/statvfs.h" 2 3 4
# 47 "/usr/include/x86_64-linux-gnu/sys/statvfs.h" 3 4
extern "C" {



extern int statvfs (const char *__restrict __file,
      struct statvfs *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));
# 65 "/usr/include/x86_64-linux-gnu/sys/statvfs.h" 3 4
extern int statvfs64 (const char *__restrict __file,
        struct statvfs64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int fstatvfs (int __fildes, struct statvfs *__buf)
     throw () __attribute__ ((__nonnull__ (2)));
# 84 "/usr/include/x86_64-linux-gnu/sys/statvfs.h" 3 4
extern int fstatvfs64 (int __fildes, struct statvfs64 *__buf)
     throw () __attribute__ ((__nonnull__ (2)));


}
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 1 3 4
# 194 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/9/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE,

  TRAP_BRANCH,

  TRAP_HWBKPT,

  TRAP_UNK

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 210 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();



extern int raise (int __sig) throw ();



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) throw ();




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));






extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();





# 1 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 3 4
extern int tgkill (__pid_t __tgid, __pid_t __tid, int __signal);
# 375 "/usr/include/signal.h" 2 3 4

}
# 29 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 2 3 4
# 6 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2

# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4
extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 353 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 354 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 392 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern "C" {




extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 447 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) throw ();





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 61 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 79 "/usr/include/fcntl.h" 2 3 4
# 148 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 157 "/usr/include/fcntl.h" 3 4
extern int fcntl64 (int __fd, int __cmd, ...);
# 168 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 178 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 192 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 203 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 214 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) throw ();
# 272 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) throw ();
# 282 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 293 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);







# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 3 4
extern int __open_2 (const char *__path, int __oflag) __attribute__ ((__nonnull__ (1)));
extern int __open_alias (const char *__path, int __oflag, ...) __asm__ ("" "open")
               __attribute__ ((__nonnull__ (1)));






extern void __open_too_many_args (void) __attribute__((__error__ ("open can be called either with 2 or 3 arguments, not more")))
                                                                  ;
extern void __open_missing_mode (void) __attribute__((__error__ ("open with O_CREAT or O_TMPFILE in second argument needs 3 arguments")))
                                                                            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
open (const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __open_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __open_missing_mode ();
   return __open_2 (__path, __oflag);
 }
      return __open_alias (__path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __open_2 (__path, __oflag);

  return __open_alias (__path, __oflag, __builtin_va_arg_pack ());
}



extern int __open64_2 (const char *__path, int __oflag) __attribute__ ((__nonnull__ (1)));
extern int __open64_alias (const char *__path, int __oflag, ...) __asm__ ("" "open64")
                   __attribute__ ((__nonnull__ (1)));
extern void __open64_too_many_args (void) __attribute__((__error__ ("open64 can be called either with 2 or 3 arguments, not more")))
                                                                    ;
extern void __open64_missing_mode (void) __attribute__((__error__ ("open64 with O_CREAT or O_TMPFILE in second argument needs 3 arguments")))
                                                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
open64 (const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __open64_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __open64_missing_mode ();
   return __open64_2 (__path, __oflag);
 }
      return __open64_alias (__path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __open64_2 (__path, __oflag);

  return __open64_alias (__path, __oflag, __builtin_va_arg_pack ());
}





extern int __openat_2 (int __fd, const char *__path, int __oflag)
     __attribute__ ((__nonnull__ (2)));
extern int __openat_alias (int __fd, const char *__path, int __oflag, ...) __asm__ ("" "openat")

     __attribute__ ((__nonnull__ (2)));
# 111 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 3 4
extern void __openat_too_many_args (void) __attribute__((__error__ ("openat can be called either with 3 or 4 arguments, not more")))
                                                                    ;
extern void __openat_missing_mode (void) __attribute__((__error__ ("openat with O_CREAT or O_TMPFILE in third argument needs 4 arguments")))
                                                                             ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
openat (int __fd, const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __openat_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __openat_missing_mode ();
   return __openat_2 (__fd, __path, __oflag);
 }
      return __openat_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __openat_2 (__fd, __path, __oflag);

  return __openat_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
}



extern int __openat64_2 (int __fd, const char *__path, int __oflag)
     __attribute__ ((__nonnull__ (2)));
extern int __openat64_alias (int __fd, const char *__path, int __oflag, ...) __asm__ ("" "openat64")

     __attribute__ ((__nonnull__ (2)));
extern void __openat64_too_many_args (void) __attribute__((__error__ ("openat64 can be called either with 3 or 4 arguments, not more")))
                                                                      ;
extern void __openat64_missing_mode (void) __attribute__((__error__ ("openat64 with O_CREAT or O_TMPFILE in third argument needs 4 arguments")))
                                                                               ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
openat64 (int __fd, const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __openat64_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __openat64_missing_mode ();
   return __openat64_2 (__fd, __path, __oflag);
 }
      return __openat64_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __openat64_2 (__fd, __path, __oflag);

  return __openat64_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
}
# 302 "/usr/include/fcntl.h" 2 3 4


}
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 46 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 174 "/usr/include/ctype.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int isalnum (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISalnum; }
extern __inline __attribute__ ((__gnu_inline__)) int isalpha (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISalpha; }
extern __inline __attribute__ ((__gnu_inline__)) int iscntrl (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _IScntrl; }
extern __inline __attribute__ ((__gnu_inline__)) int isdigit (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISdigit; }
extern __inline __attribute__ ((__gnu_inline__)) int islower (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISlower; }
extern __inline __attribute__ ((__gnu_inline__)) int isgraph (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISgraph; }
extern __inline __attribute__ ((__gnu_inline__)) int isprint (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISprint; }
extern __inline __attribute__ ((__gnu_inline__)) int ispunct (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISpunct; }
extern __inline __attribute__ ((__gnu_inline__)) int isspace (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISspace; }
extern __inline __attribute__ ((__gnu_inline__)) int isupper (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISupper; }
extern __inline __attribute__ ((__gnu_inline__)) int isxdigit (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISxdigit; }

extern __inline __attribute__ ((__gnu_inline__)) int isblank (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISblank; }
# 206 "/usr/include/ctype.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) tolower (int __c) throw ()
{
  return __c >= -128 && __c < 256 ? (*__ctype_tolower_loc ())[__c] : __c;
}

extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) toupper (int __c) throw ()
{
  return __c >= -128 && __c < 256 ? (*__ctype_toupper_loc ())[__c] : __c;
}
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 33 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/dirent.h" 1 3 4
# 27 "/usr/include/dirent.h" 3 4
extern "C" {
# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4
struct dirent
  {

    __ino_t d_ino;
    __off_t d_off;




    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };


struct dirent64
  {
    __ino64_t d_ino;
    __off64_t d_off;
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 62 "/usr/include/dirent.h" 2 3 4
# 97 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 127 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 162 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 173 "/usr/include/dirent.h" 3 4
extern struct dirent64 *readdir64 (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 183 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp,
        struct dirent *__restrict __entry,
        struct dirent **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));
# 201 "/usr/include/dirent.h" 3 4
extern int readdir64_r (DIR *__restrict __dirp,
   struct dirent64 *__restrict __entry,
   struct dirent64 **__restrict __result)
  __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));




extern void rewinddir (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) throw () __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));
# 245 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 246 "/usr/include/dirent.h" 2 3 4
# 255 "/usr/include/dirent.h" 3 4
extern int scandir (const char *__restrict __dir,
      struct dirent ***__restrict __namelist,
      int (*__selector) (const struct dirent *),
      int (*__cmp) (const struct dirent **,
      const struct dirent **))
     __attribute__ ((__nonnull__ (1, 2)));
# 278 "/usr/include/dirent.h" 3 4
extern int scandir64 (const char *__restrict __dir,
        struct dirent64 ***__restrict __namelist,
        int (*__selector) (const struct dirent64 *),
        int (*__cmp) (const struct dirent64 **,
        const struct dirent64 **))
     __attribute__ ((__nonnull__ (1, 2)));
# 293 "/usr/include/dirent.h" 3 4
extern int scandirat (int __dfd, const char *__restrict __dir,
        struct dirent ***__restrict __namelist,
        int (*__selector) (const struct dirent *),
        int (*__cmp) (const struct dirent **,
        const struct dirent **))
     __attribute__ ((__nonnull__ (2, 3)));
# 315 "/usr/include/dirent.h" 3 4
extern int scandirat64 (int __dfd, const char *__restrict __dir,
   struct dirent64 ***__restrict __namelist,
   int (*__selector) (const struct dirent64 *),
   int (*__cmp) (const struct dirent64 **,
          const struct dirent64 **))
     __attribute__ ((__nonnull__ (2, 3)));




extern int alphasort (const struct dirent **__e1,
        const struct dirent **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "/usr/include/dirent.h" 3 4
extern int alphasort64 (const struct dirent64 **__e1,
   const struct dirent64 **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 353 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
    size_t __nbytes,
    __off_t *__restrict __basep)
     throw () __attribute__ ((__nonnull__ (2, 4)));
# 370 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries64 (int __fd, char *__restrict __buf,
      size_t __nbytes,
      __off64_t *__restrict __basep)
     throw () __attribute__ ((__nonnull__ (2, 4)));






extern int versionsort (const struct dirent **__e1,
   const struct dirent **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 396 "/usr/include/dirent.h" 3 4
extern int versionsort64 (const struct dirent64 **__e1,
     const struct dirent64 **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



}

# 1 "/usr/include/x86_64-linux-gnu/bits/dirent_ext.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/dirent_ext.h" 3 4
extern "C" {





extern __ssize_t getdents64 (int __fd, void *__buffer, size_t __length)
  throw () __attribute__ ((__nonnull__ (2)));


}
# 405 "/usr/include/dirent.h" 2 3 4
# 34 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/libgen.h" 1 3 4
# 23 "/usr/include/libgen.h" 3 4
extern "C" {


extern char *dirname (char *__path) throw ();







extern char *__xpg_basename (char *__path) throw ();


}
# 35 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 36 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/usr/include/regex.h" 1 3 4
# 27 "/usr/include/regex.h" 3 4
extern "C" {
# 55 "/usr/include/regex.h" 3 4
typedef unsigned int __re_size_t;
typedef unsigned long int __re_long_size_t;







typedef long int s_reg_t;
typedef unsigned long int active_reg_t;






typedef unsigned long int reg_syntax_t;
# 211 "/usr/include/regex.h" 3 4
extern reg_syntax_t re_syntax_options;
# 346 "/usr/include/regex.h" 3 4
typedef enum
{
  _REG_ENOSYS = -1,
  _REG_NOERROR = 0,
  _REG_NOMATCH,



  _REG_BADPAT,
  _REG_ECOLLATE,
  _REG_ECTYPE,
  _REG_EESCAPE,
  _REG_ESUBREG,
  _REG_EBRACK,
  _REG_EPAREN,
  _REG_EBRACE,
  _REG_BADBR,
  _REG_ERANGE,
  _REG_ESPACE,
  _REG_BADRPT,


  _REG_EEND,
  _REG_ESIZE,
  _REG_ERPAREN
} reg_errcode_t;
# 413 "/usr/include/regex.h" 3 4
struct re_pattern_buffer
{


  struct re_dfa_t *buffer;


  __re_long_size_t allocated;


  __re_long_size_t used;


  reg_syntax_t syntax;




  char *fastmap;





  unsigned char * translate;


  size_t re_nsub;





  unsigned can_be_null : 1;
# 457 "/usr/include/regex.h" 3 4
  unsigned regs_allocated : 2;



  unsigned fastmap_accurate : 1;



  unsigned no_sub : 1;



  unsigned not_bol : 1;


  unsigned not_eol : 1;


  unsigned newline_anchor : 1;
};

typedef struct re_pattern_buffer regex_t;
# 490 "/usr/include/regex.h" 3 4
typedef int regoff_t;






struct re_registers
{
  __re_size_t num_regs;
  regoff_t *start;
  regoff_t *end;
};
# 517 "/usr/include/regex.h" 3 4
typedef struct
{
  regoff_t rm_so;
  regoff_t rm_eo;
} regmatch_t;






extern reg_syntax_t re_set_syntax (reg_syntax_t __syntax);
# 538 "/usr/include/regex.h" 3 4
extern const char *re_compile_pattern (const char *__pattern, size_t __length,
           struct re_pattern_buffer *__buffer);





extern int re_compile_fastmap (struct re_pattern_buffer *__buffer);







extern regoff_t re_search (struct re_pattern_buffer *__buffer,
      const char *__String, regoff_t __length,
      regoff_t __start, regoff_t __range,
      struct re_registers *__regs);




extern regoff_t re_search_2 (struct re_pattern_buffer *__buffer,
        const char *__string1, regoff_t __length1,
        const char *__string2, regoff_t __length2,
        regoff_t __start, regoff_t __range,
        struct re_registers *__regs,
        regoff_t __stop);




extern regoff_t re_match (struct re_pattern_buffer *__buffer,
     const char *__String, regoff_t __length,
     regoff_t __start, struct re_registers *__regs);



extern regoff_t re_match_2 (struct re_pattern_buffer *__buffer,
       const char *__string1, regoff_t __length1,
       const char *__string2, regoff_t __length2,
       regoff_t __start, struct re_registers *__regs,
       regoff_t __stop);
# 596 "/usr/include/regex.h" 3 4
extern void re_set_registers (struct re_pattern_buffer *__buffer,
         struct re_registers *__regs,
         __re_size_t __num_regs,
         regoff_t *__starts, regoff_t *__ends);
# 639 "/usr/include/regex.h" 3 4
extern int regcomp (regex_t *__restrict __preg,
      const char *__restrict __pattern,
      int __cflags);

extern int regexec (const regex_t *__restrict __preg,
      const char *__restrict __String, size_t __nmatch,
      regmatch_t __pmatch[],
      int __eflags);

extern size_t regerror (int __errcode, const regex_t *__restrict __preg,
   char *__restrict __errbuf, size_t __errbuf_size);

extern void regfree (regex_t *__preg);



}
# 37 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/util.h"
# 1 "/usr/include/c++/9/stdlib.h" 1 3
# 36 "/usr/include/c++/9/stdlib.h" 3
# 1 "/usr/include/c++/9/cstdlib" 1 3
# 39 "/usr/include/c++/9/cstdlib" 3
       
# 40 "/usr/include/c++/9/cstdlib" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 1 3
# 256 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 278 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 528 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/os_defines.h" 1 3
# 529 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/cpu_defines.h" 1 3
# 532 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 2 3
# 42 "/usr/include/c++/9/cstdlib" 2 3
# 75 "/usr/include/c++/9/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () __attribute__ ((__warn_unused_result__));



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 360 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 401 "/usr/include/stdlib.h" 3 4
extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) __attribute__ ((__warn_unused_result__));






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) __attribute__ ((__warn_unused_result__));





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () __attribute__ ((__warn_unused_result__));






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 826 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 1014 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) throw () __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) throw () __asm__ ("" "realpath")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) throw () __asm__ ("" "__realpath_chk")


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved) throw ()
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {

      if (__builtin_object_size (__resolved, 2 > 1) < 4096)
 return __realpath_chk_warn (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));

      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }

  return __realpath_alias (__name, __resolved);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ptsname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ptsname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  throw () __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) throw () __asm__ ("" "wctomb")
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__leaf__)) wctomb (char *__s, wchar_t __wchar) throw ()
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw () __asm__ ("" "mbstowcs")


                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__mbstowcs_chk")



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw () __asm__ ("" "wcstombs")


                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__wcstombs_chk")



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
# 1018 "/usr/include/stdlib.h" 2 3 4





}
# 76 "/usr/include/c++/9/cstdlib" 2 3

# 1 "/usr/include/c++/9/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/9/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/9/bits/std_abs.h" 3
# 46 "/usr/include/c++/9/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/c++/9/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "/usr/include/c++/9/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/9/cstdlib" 2 3
# 121 "/usr/include/c++/9/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/9/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/9/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/9/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2


# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 2 3 4
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2

# 1 "./../common/gp-defs.h" 1
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "./../common/gp-time.h" 1
# 24 "./../common/gp-time.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };
# 66 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    void *__restrict __tz) throw () __attribute__ ((__nonnull__ (1)));







extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 187 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 25 "./../common/gp-time.h" 2


# 26 "./../common/gp-time.h"
typedef long long hrtime_t;
typedef struct timespec timestruc_t;






extern "C"
{


  hrtime_t gethrtime (void);
  hrtime_t gethrvtime (void);


}
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/debug.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/debug.h"
extern unsigned int mpmt_debug_opt;
# 34 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 45 "/doner/binutils/binutils-515f23e/gprofng/src/util.h"
inline int
max (int a, int b)
{
  return (a >= b) ? a : b;
}


inline int
min (int a, int b)
{
  return (a <= b) ? a : b;
}


inline int
streq (const char *s1, const char *s2)
{
  return strcmp (s1, s2) == 0;
}



inline char *
StrChr (char *str, char ch)
{
  char *s = strchr (str, ch);
  return s ? (s + 1) : str;
}



inline char *
StrRchr (char *str, char ch)
{
  char *s = strrchr (str, ch);
  return s ? (s + 1) : str;
}

inline char*
STR (const char *s)
{
  return s ? (char*) s : (char*) ((char *) ("NULL"));
}

inline char*
get_str (const char *s, const char *s1)
{
  return s ? (char*) s : (char*) s1;
}

inline char *
get_basename (const char* name)
{
  return StrRchr ((char*) name, '/');
}

inline char *
dbe_strdup (const char *str)
{
  return str ? strdup (str) : 
# 104 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 3 4
                             __null
# 104 "/doner/binutils/binutils-515f23e/gprofng/src/util.h"
                                 ;
}

inline long
dbe_sstrlen (const char *str)
{
  return str ? (long) strlen (str) : 0;
}

inline int
dbe_strcmp (const char *s1, const char *s2)
{
  return s1 ? (s2 ? strcmp (s1, s2) : 1) : (s2 ? -1 : 0);
}


inline double
tstodouble (timestruc_t t)
{
  return (double) t.tv_sec + (double) (t.tv_nsec / 1000000000.0);
}

inline void
hr2timestruc (timestruc_t *d, hrtime_t s)
{
  d->tv_sec = (long) (s / 1000000000);
  d->tv_nsec = (long) (s % 1000000000);
}

inline hrtime_t
timestruc2hr (timestruc_t *s)
{
  return (hrtime_t) s->tv_sec * 1000000000 + (hrtime_t) s->tv_nsec;
}

struct stat64;


extern "C"
{




  void tsadd (timestruc_t *result, timestruc_t *time);
  void tssub (timestruc_t *result, timestruc_t *time1, timestruc_t *time2);
  int tscmp (timestruc_t *time1, timestruc_t *time2);
  void int_max (int *maximum, int count);
  char *strstr_r (char *s1, const char *s2);
  char *strrpbrk (const char *string, const char *brkset);
  char *read_line (FILE *);
  char *parse_qstring (char *in_str, char **endptr);
  char *parse_fname (char *in_str, char **fcontext);
  int get_paren (const char *name);

  uint64_t crc64 (const char *str, size_t len);
  char *canonical_path (char *path);
  char *get_relative_path (char *name);
  char *get_relative_link (const char *path_to, const char *path_from);
  char *get_prog_name (int 
# 163 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 3 4
                          __xpg_basename
# 163 "/doner/binutils/binutils-515f23e/gprofng/src/util.h"
                                  );
  char *dbe_strndup (const char *str, size_t len);
  int dbe_stat (const char *path, struct stat64 *sbuf);
  int dbe_stat_file (const char *path, struct stat64 *sbuf);
  char *dbe_read_dir (const char *path, const char *format);
  char *dbe_get_processes (const char *format);
  char *dbe_create_directories (const char *pathname);
  char *dbe_delete_file (const char *pathname);
  char *dbe_xml2str (const char *s);
  void swapByteOrder (void *p, size_t sz);
  char *dbe_sprintf (const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));
  ssize_t dbe_write (int f, const char *fmt, ...) __attribute__ ((format (printf, 2, 3)));
  char *dbe_create_symlink_to_path (const char *path, const char *dir);
  int64_t read_from_file (int fd, void *buffer, int64_t nbyte);
  uint32_t get_cksum (const char * pathname, char ** errmsg);


}
int catch_out_of_memory (int (*real_main)(int, char*[]), int argc, char *argv[]);
# 39 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "./../../include/libiberty.h" 1
# 39 "./../../include/libiberty.h"
extern "C" {


# 1 "./../../include/ansidecl.h" 1
# 29 "./../../include/ansidecl.h"
extern "C" {
# 351 "./../../include/ansidecl.h"
}
# 43 "./../../include/libiberty.h" 2


# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4

# 143 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 46 "./../../include/libiberty.h" 2
# 55 "./../../include/libiberty.h"

# 55 "./../../include/libiberty.h"
extern void unlock_stream (FILE *);





extern void unlock_std_streams (void);





extern FILE *fopen_unlocked (const char *, const char *);
extern FILE *fdopen_unlocked (int, const char *);
extern FILE *freopen_unlocked (const char *, const char *, FILE *);




extern char **buildargv (const char *) __attribute__ ((__malloc__));



extern void freeargv (char **);




extern char **dupargv (char * const *) __attribute__ ((__malloc__));



extern void expandargv (int *, char ***);



extern int writeargv (char * const *, FILE *);



extern int countargv (char * const *);
# 123 "./../../include/libiberty.h"
extern const char *lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));




extern const char *dos_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));





extern const char *unix_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));



extern char *lrealpath (const char *);



extern int is_valid_fd (int fd);





extern char *concat (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));
# 157 "./../../include/libiberty.h"
extern char *reconcat (char *, const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));





extern unsigned long concat_length (const char *, ...) __attribute__ ((__sentinel__));






extern char *concat_copy (char *, const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__sentinel__));






extern char *concat_copy2 (const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));



extern char *libiberty_concat_ptr;
# 193 "./../../include/libiberty.h"
extern int fdmatch (int fd1, int fd2);
# 205 "./../../include/libiberty.h"
extern char * getpwd (void);
# 218 "./../../include/libiberty.h"
extern long get_run_time (void);




extern char *make_relative_prefix (const char *, const char *,
                                   const char *) __attribute__ ((__malloc__));





extern char *make_relative_prefix_ignore_links (const char *, const char *,
      const char *) __attribute__ ((__malloc__));




extern const char *choose_tmpdir (void) __attribute__ ((__returns_nonnull__));



extern char *choose_temp_base (void) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));



extern char *make_temp_file (const char *) __attribute__ ((__malloc__));




extern char *make_temp_file_with_prefix (const char *, const char *) __attribute__ ((__malloc__));



extern int unlink_if_ordinary (const char *);



extern const char *spaces (int count);




extern int errno_max (void);




extern const char *strerrno (int);



extern int strtoerrno (const char *);



extern char *xstrerror (int) __attribute__ ((__returns_nonnull__));




extern int signo_max (void);
# 292 "./../../include/libiberty.h"
extern const char *strsigno (int);



extern int strtosigno (const char *);



extern int xatexit (void (*fn) (void));



extern void xexit (int status) __attribute__ ((__noreturn__));



extern void xmalloc_set_program_name (const char *);


extern void xmalloc_failed (size_t) __attribute__ ((__noreturn__));





extern void *xmalloc (size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1))) __attribute__ ((warn_unused_result));





extern void *xrealloc (void *, size_t) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (2))) __attribute__ ((warn_unused_result));




extern void *xcalloc (size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1, 2))) __attribute__ ((warn_unused_result));



extern char *xstrdup (const char *) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern char *xstrndup (const char *, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern void *xmemdup (const void *, size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));


extern double physmem_total (void);
extern double physmem_available (void);


extern unsigned int xcrc32 (const unsigned char *, int, unsigned int);
# 391 "./../../include/libiberty.h"
extern const unsigned char _hex_value[256];
extern void hex_init (void);
# 428 "./../../include/libiberty.h"
extern struct pex_obj *pex_init (int flags, const char *pname,
     const char *tempbase) __attribute__ ((__returns_nonnull__));
# 528 "./../../include/libiberty.h"
extern const char *pex_run (struct pex_obj *obj, int flags,
       const char *executable, char * const *argv,
       const char *outname, const char *errname,
       int *err);
# 543 "./../../include/libiberty.h"
extern const char *pex_run_in_environment (struct pex_obj *obj, int flags,
                      const char *executable,
                                           char * const *argv,
                                           char * const *env,
                              const char *outname,
        const char *errname, int *err);





extern FILE *pex_input_file (struct pex_obj *obj, int flags,
                             const char *in_name);






extern FILE *pex_input_pipe (struct pex_obj *obj, int binary);







extern FILE *pex_read_output (struct pex_obj *, int binary);







extern FILE *pex_read_err (struct pex_obj *, int binary);





extern int pex_get_status (struct pex_obj *, int count, int *vector);






struct pex_time
{
  unsigned long user_seconds;
  unsigned long user_microseconds;
  unsigned long system_seconds;
  unsigned long system_microseconds;
};

extern int pex_get_times (struct pex_obj *, int count,
     struct pex_time *vector);




extern void pex_free (struct pex_obj *);
# 618 "./../../include/libiberty.h"
extern const char *pex_one (int flags, const char *executable,
       char * const *argv, const char *pname,
       const char *outname, const char *errname,
       int *status, int *err);
# 637 "./../../include/libiberty.h"
extern int pexecute (const char *, char * const *, const char *,
                     const char *, char **, char **, int);



extern int pwait (int, int *, int);



extern void *bsearch_r (const void *, const void *,
   size_t, size_t,
   int (*)(const void *, const void *, void *),
   void *);
# 661 "./../../include/libiberty.h"
extern char *xasprintf (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));
# 673 "./../../include/libiberty.h"
extern char *xvasprintf (const char *, va_list) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 0))) __attribute__ ((__nonnull__ (1)));
# 717 "./../../include/libiberty.h"
extern void setproctitle (const char *name, ...);


extern void stack_limit_increase (unsigned long);
# 730 "./../../include/libiberty.h"
extern void *C_alloca (size_t) __attribute__ ((__malloc__));
# 757 "./../../include/libiberty.h"
}
# 40 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.h" 1
# 41 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.h"
# 1 "./../common/hwcentry.h" 1
# 27 "./../common/hwcentry.h"
# 1 "/usr/include/c++/9/stdlib.h" 1 3
# 28 "./../common/hwcentry.h" 2
# 1 "./../common/hwc_cpus.h" 1
# 29 "./../common/hwc_cpus.h"
  typedef int regno_t;
# 41 "./../common/hwc_cpus.h"
  enum
  {
    CPUVER_GENERIC = 0,
    CPUVER_UNDEFINED = -1
  };
# 106 "./../common/hwc_cpus.h"
enum {
    ARM_CPU_IMP_ARM = 0x41,
    ARM_CPU_IMP_BRCM = 0x42,
    ARM_CPU_IMP_CAVIUM = 0x43,
    ARM_CPU_IMP_APM = 0x50,
    ARM_CPU_IMP_QCOM = 0x51
};




  typedef struct
  {
    int cpc2_cpuver;
    const char * cpc2_cciname;
  } libcpc2_cpu_lookup_t;
# 29 "./../common/hwcentry.h" 2
# 1 "./../common/gp-time.h" 1
# 30 "./../common/hwcentry.h" 2


extern "C"
{



  typedef enum
  {


    ABST_NONE = 0x0,
    ABST_LOAD = 0x1,
    ABST_STORE = 0x2,
    ABST_LDST = 0x3,
    ABST_COUNT = 0x4,
    ABST_US_DTLBM = 0xF,
    ABST_NOPC = 0x100,
    ABST_CLKDS = 0x103,
    ABST_EXACT = 0x203,
    ABST_LDST_SPARC64 = 0x303,
    ABST_EXACT_PEBS_PLUS1 = 0x403

  } ABST_type;
# 105 "./../common/hwcentry.h"
  typedef struct
  {
    char *name;
    char *int_name;
    regno_t reg_num;
    char *metric;
    volatile int val;
    int timecvt;
    ABST_type memop;
    char *short_desc;
    int type;
    long long config;



    int sort_order;
    regno_t *reg_list;


    hrtime_t min_time;
    hrtime_t min_time_default;
    int ref_val;
    int lval, hval;
  } Hwcentry;
# 143 "./../common/hwcentry.h"
  extern int hwc_lookup (int forKernel, hrtime_t min_time_default,
    const char *uname, Hwcentry *list[], unsigned listsz,
    char **emsg, char **wmsg);
# 190 "./../common/hwcentry.h"
  extern char *hwc_validate_ctrs (int forKernel, Hwcentry *list[], unsigned listsz);




  extern int hwc_get_cpc_cpuver ();





  extern char *hwc_get_docref (char *buf, size_t buflen);



  extern char *hwc_get_default_cntrs ();



  extern char *hwc_get_default_cntrs2 (int forKernel, int style);




  extern char *hwc_get_orig_default_cntrs ();



  extern void hwc_update_val (Hwcentry *ctr);


  extern char *hwc_get_cpuname (char *buf, size_t buflen);


  extern unsigned hwc_get_max_regs ();


  extern unsigned hwc_get_max_concurrent (int forKernel);


  extern char **hwc_get_attrs (int forKernel);






  extern unsigned hwc_scan_attrs (void (*action)(const char *attr,
       const char *desc));
# 248 "./../common/hwcentry.h"
  extern Hwcentry *hwc_post_lookup (Hwcentry * pret_ctr, char *uname,
        char * int_name, int cpc_cpuver);
# 286 "./../common/hwcentry.h"
  extern Hwcentry **hwc_get_std_ctrs (int forKernel);






  extern unsigned hwc_scan_std_ctrs (void (*action)(const Hwcentry *));
# 327 "./../common/hwcentry.h"
  extern Hwcentry **hwc_get_raw_ctrs (int forKernel);






  extern unsigned hwc_scan_raw_ctrs (void (*action)(const Hwcentry *));
# 356 "./../common/hwcentry.h"
  extern void
  hwc_usage (int forKernel, const char *cmd, const char *dataspace_msg);



  extern void hwc_usage_f (int forKernel, FILE *f, const char *cmd,
      const char *dataspace_msg, int show_syntax,
      int show_short_desc);


  extern char *hwc_rate_string (const Hwcentry *pctr, int force_numeric_format);


  extern char *hwc_i18n_metric (const Hwcentry *ctr);
# 386 "./../common/hwcentry.h"
  extern char *hwc_hwcentry_string (char *buf, size_t buflen, const Hwcentry *ctr);
# 397 "./../common/hwcentry.h"
  extern char *hwc_hwcentry_specd_string (char *buf, size_t buflen, const Hwcentry *ctr);
# 408 "./../common/hwcentry.h"
  extern const char *hwc_memop_string (ABST_type memop);





}
# 42 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.h" 2
# 1 "./../common/cc_libcollector.h" 1
# 34 "./../common/cc_libcollector.h"
typedef enum
{
  FOLLOW_NONE = 0x0,
  FOLLOW_EXEC = 0x1,
  FOLLOW_FORK = 0x2,
  FOLLOW_ON = 0x3,
  FOLLOW_COMBO = 0x4,
  FOLLOW_ALL = 0x7
} Follow_type;
# 43 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.h" 2





typedef struct {
    int min;
    int res;
    int max;
    int hival;
    int normval;
    int lowval;
} clk_params_t;
# 64 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.h"
class Coll_Ctrl {
public:


  Coll_Ctrl(int _interactive = 0, bool _defHWC = false, bool _kernelHWC = false);
  ~Coll_Ctrl();

  Coll_Ctrl(Coll_Ctrl *cc);
  char *check_expt(char **);
  char *setup_experiment();
  void close_expt();
  void interrupt();
  void delete_expt();


  char *enable_expt();
  void disable_expt() { enabled = 0; };
  int isenabled() { return enabled; };


  int isopened() { return opened; };


  void set_clk_params(int min, int res, int max, int hi, int norm, int lo);
  char *set_clkprof(const char *valptr, char **warn);
  char *reset_clkprof(int val);
  int get_sys_period() { return clk_params.min; };
  int get_clk_min() { return clk_params.min; };
  int get_clk_max() { return clk_params.max; };
  int get_clk_res() { return clk_params.res; };
  int get_clkprof_mode() { return clkprof_enabled; };
  int get_clkprof_timer() { return clkprof_timer; };


  char *set_synctrace(const char *valptr);
  int get_synctrace_mode() { return synctrace_enabled; };
  int get_synctrace_thresh() { return synctrace_thresh; };
  int get_synctrace_scope() { return synctrace_scope; };


  char *set_heaptrace(const char *);
  int get_heaptrace_mode() { return heaptrace_enabled; };
  int get_heaptrace_checkmode() { return heaptrace_checkenabled; };


  char *set_iotrace(const char *);
  int get_iotrace_mode() { return iotrace_enabled; };


  void setup_hwc();
  char *set_hwcstring(const char *str, char **warn);
  char *add_hwcstring(const char *str, char **warn);
  char *add_default_hwcstring(const char *str, char **warn, bool add, bool forKernel = false);
  void set_hwcdefault();
  void disable_hwc();
  int get_hwc_cnt() { return hwcprof_enabled_cnt; };
  int get_hwc_mode() { return hwcprof_enabled_cnt ? 1 : 0; };
  char *get_hwc_string() { return hwc_string; };

  Hwcentry *
  get_hwc_entry (int n)
  {
    if (n < 0 || n >= hwcprof_enabled_cnt)
      return 0;
    return &hwctr[n];
  };

  void hwcentry_dup (Hwcentry *, Hwcentry *);
  char *get_hwc_counter (int n) { return get_hwc_entry (n)->name; };


  char *set_count (const char *);
  int get_count () { return count_enabled; };
  void set_Iflag () { Iflag = 1; };
  void set_Nflag () { Nflag = 1; };



  char *set_time_run (const char *);
  int get_time_run (void) { return time_run; };
  int get_start_delay (void) { return start_delay; };


  char *set_attach_pid (char *);
  int get_attach_pid (void) { return attach_pid; };






  char *set_java_mode (const char *);
  int get_java_mode () { return java_mode; };
  int get_java_default () { return java_default; };


  char *set_java_path (const char *);
  char *get_java_path () { return java_path; };


  char *set_java_args (char *);
  char *get_java_args () { return java_args; };
  int get_java_arg_cnt () { return njava_args; };


  char *set_archive_mode (const char *);
  char *get_archive_mode () { return archive_mode; };


  char *set_follow_mode (const char *);
  Follow_type get_follow_mode () { return follow_mode; };
  int get_follow_default () { return follow_default; };
  char *get_follow_usr_spec () { return follow_spec_usr; };
  char *get_follow_cmp_spec () { return follow_spec_cmp; };


  char *set_prof_idle (const char *);
  int get_prof_idle () { return prof_idle; };



  char *set_debug_mode (int);
  int get_debug_mode () { return debug_mode; };


  int find_sig (const char *);

  char *find_signal_name (int signal);


  char *set_pauseresume_signal (int, int);
  int get_pauseresume_signal () { return pauseresume_sig; };
  int get_pauseresume_pause () { return pauseresume_pause; };


  char *set_sample_signal (int);
  int get_sample_signal () { return sample_sig; };


  char *set_sample_period (const char *);
  int get_sample_period (void) { return sample_period; };


  char *set_size_limit (const char *);
  int get_size_limit (void) { return size_limit; };



  int set_target (char *);
  char *get_target () { return target_name; };


  void set_default_stem (const char *);
  char *set_expt (const char *, char **, bool);
  char *get_expt () { return expt_name; };


  char *set_directory (char *, char **);

  char *get_directory () { return udir_name ? udir_name : store_dir; };


  char *get_experiment () { return store_ptr; };
  char *update_expt_name (bool verbose = true, bool ckonly = false, bool newname = false);


  void remove_exp_dir ();


  char *
  get_data_desc ()
  {
    return data_desc;
  };


  char *set_group (char *);
  char *get_group () { return expt_group; };


  char *show (int);
  char *show_expt ();


  char **get_collect_args ();


  char *get_node_name () { return node_name; };
  long get_ncpus () { return ncpus; };
  int get_cpu_clk_freq () { return cpu_clk_freq; };
  int get_cpc_cpuver () { return cpc_cpuver; };


  void set_nofswarn () { nofswarn = 1; };


  char *get (char *);
  char *set (char *, const char *);
  char *unset (char *);
  void set_project_home (char *);

private:
  int interactive;
  bool defHWC;
  bool kernelHWC;
  int opened;
  int enabled;
  volatile int uinterrupt;


  char *node_name;
  long ncpus;
  int cpu_clk_freq;
  int cpc_cpuver;
  long sys_resolution;
  int sys_period;
  int sample_period;
  int sample_default;
  int size_limit;
  long npages;
  long page_size;
  clk_params_t clk_params;
# 296 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.h"
  char *default_stem;
  char *uexpt_name;
  char *expt_name;
  char *expt_dir;
  char *base_name;
  char *udir_name;

  char *store_dir;
  char *prev_store_dir;
  char *store_ptr;
  char *expt_group;
  char *project_home;

  char *target_name;
  char *data_desc;
  char *lockname;
  int lockfd;

  int nofswarn;
  int expno;


  int debug_mode;



  int clkprof_enabled;


  int clkprof_default;


  int clkprof_timer;
  int clkprof_timer_target;



  int hwcprof_default;
  int hwcprof_enabled_cnt;
  char *hwc_string;
  Hwcentry hwctr[20];

  int synctrace_enabled;



  int synctrace_thresh;



  int synctrace_scope;

  int heaptrace_enabled;




  int heaptrace_checkenabled;
  int iotrace_enabled;



  int count_enabled;
  int Iflag;
  int Nflag;


  int attach_pid;


  int time_run;
  int start_delay;


  int java_mode;
  int java_default;
  char *java_path;
  char *java_args;
  int njava_args;


  Follow_type follow_mode;
  int follow_default;
  char *follow_spec_usr;
  char *follow_spec_cmp;
  int prof_idle;
  char *archive_mode;


  int pauseresume_sig;
  int pauseresume_pause;
  int sample_sig;
  char *report_signal_conflict (int);
  char *check_consistency ();
  void determine_profile_params ();
  char *preprocess_names ();
  char *get_exp_name (const char *);
  char *create_exp_dir ();
  void build_data_desc ();
  char *check_group ();
  char *join_group ();
  void free_hwc_fields (Hwcentry *tmpctr);


  void set_clkprof_timer_target (int microseconds);
  void adjust_clkprof_timer (int microseconds);
  hrtime_t clkprof_timer_2_hwcentry_min_time (int clkprof_microseconds);
};
# 41 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 1 "./../common/hwcdrv.h" 1
# 26 "./../common/hwcdrv.h"
# 1 "./../common/hwcfuncs.h" 1
# 39 "./../common/hwcfuncs.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/limits.h" 1 3 4
# 40 "./../common/hwcfuncs.h" 2



# 1 "./../common/hwcentry.h" 1
# 44 "./../common/hwcfuncs.h" 2


typedef unsigned int uint_t;


extern "C" {
# 60 "./../common/hwcfuncs.h"
  typedef struct _hwc_event_t
  {
    hrtime_t ce_hrt;
    uint64_t ce_pic[20];
  } hwc_event_t;


  typedef struct
  {
    uint64_t smpl_pc;
    uint64_t smpl_data_source;
    uint64_t smpl_latency;
    uint64_t smpl_mem_addr;
  } hwc_sample_t;


typedef struct {
    hwc_sample_t sample[20];
} hwc_event_samples_t;
# 126 "./../common/hwcfuncs.h"
typedef void (*hwcfuncs_abort_fn_t) (int errnum, const char *msg);

extern void hwcfuncs_int_logerr(const char *format,...);
# 150 "./../common/hwcfuncs.h"
  typedef void* (*hwcfuncs_tsd_get_fn_t) (void);
  typedef void (hwcf_hwc_cb_t) (uint_t cpcregno, const char *name);
  typedef void (hwcf_attr_cb_t) (const char *attr);

  extern void
  hwcfuncs_parse_ctr (const char *counter_def, int *pplus, char **pnameOnly,
        char **pattrs, char **pregstr, regno_t *pregno);
# 170 "./../common/hwcfuncs.h"
  typedef struct
  {
    char *ca_name;
    uint64_t ca_val;
  } hwcfuncs_attr_t;

  void * hwcfuncs_parse_attrs (const char *countername,
          hwcfuncs_attr_t attrs[], unsigned max_attrs,
          uint_t *pnum_attrs, char **errstring);
# 198 "./../common/hwcfuncs.h"
  extern int hwcfuncs_bind_descriptor (const char *defstring);
# 210 "./../common/hwcfuncs.h"
  extern int hwcfuncs_bind_hwcentry (const Hwcentry *entries[],
         unsigned numctrs);
# 221 "./../common/hwcfuncs.h"
  extern int hwcfuncs_assign_regnos (Hwcentry *entries[], unsigned numctrs);
# 234 "./../common/hwcfuncs.h"
  extern int regno_is_valid (const Hwcentry *pctr, regno_t regno);







  extern Hwcentry **hwcfuncs_get_ctrs (unsigned *defcnt);







  extern char *hwcfuncs_errmsg_get (char * buf, size_t bufsize,
        int enable_capture);
# 266 "./../common/hwcfuncs.h"
}
# 27 "./../common/hwcdrv.h" 2
# 111 "./../common/hwcdrv.h"
extern "C"
{



  typedef struct
  {
    int (*hwcdrv_init)(hwcfuncs_abort_fn_t abort_ftn, int * tsd_sz);
# 127 "./../common/hwcdrv.h"
    void (*hwcdrv_get_info)(int *cpuver, const char **cciname, uint_t *npics,
       const char **docref, uint64_t *support);
# 139 "./../common/hwcdrv.h"
    int (*hwcdrv_enable_mt)(hwcfuncs_tsd_get_fn_t tsd_ftn);
# 151 "./../common/hwcdrv.h"
    int (*hwcdrv_get_descriptions)(hwcf_hwc_cb_t *hwc_find_action,
       hwcf_attr_cb_t *attr_find_action);
# 161 "./../common/hwcdrv.h"
    int (*hwcdrv_assign_regnos)(Hwcentry* entries[], unsigned numctrs);
# 171 "./../common/hwcdrv.h"
    int (*hwcdrv_create_counters)(unsigned hwcdef_cnt, Hwcentry *hwcdef);
# 181 "./../common/hwcdrv.h"
    int (*hwcdrv_start)(void);






    int (*hwcdrv_overflow)(siginfo_t *si, hwc_event_t *sample,
      hwc_event_t *lost_samples);
# 200 "./../common/hwcdrv.h"
    int (*hwcdrv_read_events)(hwc_event_t *overflow_data,
         hwc_event_samples_t *sampled_data);
# 211 "./../common/hwcdrv.h"
    int (*hwcdrv_sighlr_restart)(const hwc_event_t* startVals);
# 221 "./../common/hwcdrv.h"
    int (*hwcdrv_lwp_suspend)(void);






    int (*hwcdrv_lwp_resume)(void);






    int (*hwcdrv_free_counters)(void);
# 244 "./../common/hwcdrv.h"
    int (*hwcdrv_lwp_init)(void);
# 253 "./../common/hwcdrv.h"
    void (*hwcdrv_lwp_fini)(void);





    int hwcdrv_init_status;
  } hwcdrv_api_t;

  extern hwcdrv_api_t *get_hwcdrv ();
  extern hwcdrv_api_t *__collector_get_hwcdrv ();
  extern int __collector_hwcfuncs_bind_descriptor (const char *defstring);
  extern Hwcentry **__collector_hwcfuncs_get_ctrs (unsigned *defcnt);
  extern hwcdrv_api_t *hwcdrv_drivers[];


  typedef struct
  {
    int cpcN_cpuver;
    uint_t cpcN_npics;
    const char *cpcN_docref;
    const char *cpcN_cciname;
  } hwcdrv_about_t;

  extern int hwcdrv_assign_all_regnos (Hwcentry* entries[], unsigned numctrs);


  extern int hwcdrv_lookup_cpuver (const char * cpcN_cciname);


  extern void hwcfuncs_int_capture_errmsg (const char *fn, int subcode,
        const char *fmt, va_list ap);
# 294 "./../common/hwcdrv.h"
  typedef uint64_t eventsel_t;
  extern int hwcfuncs_get_x86_eventsel (unsigned int regno, const char *int_name,
        eventsel_t *return_event, uint_t *return_pmc_sel);

  typedef int (hwcdrv_get_events_fn_t) (hwcf_hwc_cb_t *hwc_cb);
  typedef int (hwcdrv_get_eventnum_fn_t) (const char *eventname, uint_t pmc,
       eventsel_t *eventnum,
       eventsel_t *valid_umask, uint_t *pmc_sel);
  extern hwcdrv_get_eventnum_fn_t *hwcdrv_get_x86_eventnum;

  typedef struct
  {
    const char * attrname;
    int is_inverted;
    eventsel_t mask;
    eventsel_t shift;
  } attr_info_t;
  extern const attr_info_t *perfctr_attrs_table;


  typedef struct
  {
    int (*hdrv_pcbe_init)(void);
    uint_t (*hdrv_pcbe_ncounters)(void);
    const char *(*hdrv_pcbe_impl_name)(void);
    const char *(*hdrv_pcbe_cpuref)(void);
    int (*hdrv_pcbe_get_events)(hwcf_hwc_cb_t *hwc_cb);
    int (*hdrv_pcbe_get_eventnum)(const char * eventname, uint_t pmc,
      eventsel_t *eventnum, eventsel_t *valid_umask,
      uint_t *pmc_sel);
  } hdrv_pcbe_api_t;


}
# 42 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 2
# 58 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
const char *get_fstype (char *);

Coll_Ctrl::Coll_Ctrl (int _interactive, bool _defHWC, bool _kernelHWC)
{
  char hostname[
# 62 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               4096
# 62 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                         ];
  long ncpumax;
  interactive = _interactive;
  defHWC = _defHWC;
  kernelHWC = _kernelHWC;


  gethostname (hostname, 1023);
  node_name = strdup (hostname);
  char *p = strchr (node_name, (int) '.');
  if (p != 
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
          __null
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
              )
    *p = 0;
  default_stem = strdup ("test");


  ncpumax = sysconf (517);
  if (ncpumax == -1)
    {
      ncpus = sysconf (
# 80 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                      _SC_NPROCESSORS_CONF
# 80 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                          );

      ncpumax = ncpus + 2048;
    }
  ncpus = 0;
  cpu_clk_freq = 0;
# 119 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
  FILE *procf = fopen ("/proc/cpuinfo", "r");
  if (procf != 
# 120 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              __null
# 120 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  )
    {
      char temp[1024];
      while (fgets (temp, (int) sizeof (temp), procf) != 
# 123 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                                        __null
# 123 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                            )
 {

   if (strncmp (temp, "processor", 9) == 0)
     ncpus++;
   else if (strncmp (temp, "cpu MHz", 7) == 0)
     {
       char *val = strchr (temp, ':');
       cpu_clk_freq = val ? atoi (val + 1) : 0;
     }
 }
      fclose (procf);
    }



  sys_resolution = sysconf (
# 139 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                           _SC_CLK_TCK
# 139 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                      );
  if (sys_resolution == 0)
    sys_period = 10000;
  else
    sys_period = 1000000 / (int) sys_resolution;


  npages = sysconf (
# 146 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   _SC_PHYS_PAGES
# 146 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                 );
  page_size = sysconf (
# 147 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                      _SC_PAGESIZE
# 147 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                   );


  hwcprof_enabled_cnt = 0;
  determine_profile_params ();
  cpc_cpuver = CPUVER_UNDEFINED;


  debug_mode = 0;



  java_mode = 0;

  java_default = 1;
  java_path = 
# 162 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 162 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  java_args = 
# 163 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 163 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  njava_args = 0;
  follow_mode = FOLLOW_ON;
  follow_default = 1;
  follow_spec_usr = 
# 167 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 167 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       ;
  follow_spec_cmp = 
# 168 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 168 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       ;
  prof_idle = 1;
  archive_mode = strdup ("on");
  pauseresume_sig = 0;
  sample_sig = 0;
  uinterrupt = 0;
  attach_pid = 0;
  time_run = 0;
  start_delay = 0;


  uexpt_name = 
# 179 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              __null
# 179 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  ;
  expt_name = 
# 180 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 180 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  expt_dir = 
# 181 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 181 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
  base_name = 
# 182 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 182 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  udir_name = 
# 183 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 183 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  store_dir = 
# 184 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 184 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  prev_store_dir = strdup ("");
  store_ptr = 
# 186 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 186 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  expt_group = 
# 187 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              __null
# 187 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  ;
  target_name = 
# 188 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 188 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   ;
  data_desc = 
# 189 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 189 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  lockname = 
# 190 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 190 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
  hwc_string = 
# 191 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              __null
# 191 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  ;
  project_home = 
# 192 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 192 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    ;
  lockfd = -1;


  enabled = 0;
  opened = 0;
  clkprof_enabled = 1;
  clkprof_default = 1;
  for (unsigned ii = 0; ii < 20; ii++)
    {
      memset (&hwctr[ii], 0, sizeof (Hwcentry));
      hwctr[ii].reg_num = -1;
    }
  hwcprof_default = 0;
  if (defHWC == true)
    {
      setup_hwc ();
      hwcprof_default = 1;
    }
  else
    hwcprof_enabled_cnt = 0;
  synctrace_enabled = 0;
  synctrace_thresh = -1;
  synctrace_scope = 0;
  heaptrace_enabled = 0;
  heaptrace_checkenabled = 0;
  iotrace_enabled = 0;
  count_enabled = 0;
  Iflag = 0;
  Nflag = 0;
  sample_period = 1;
  sample_default = 1;
  size_limit = 0;
  nofswarn = 0;
  expno = 1;



  (void) preprocess_names ();
  (void) update_expt_name (false, false);
}


Coll_Ctrl::Coll_Ctrl (Coll_Ctrl * cc)
{
  uinterrupt = 0;
  interactive = cc->interactive;
  defHWC = cc->defHWC;
  kernelHWC = cc->kernelHWC;
  node_name = strdup (cc->node_name);
  default_stem = strdup (cc->default_stem);
  ncpus = cc->ncpus;
  cpu_clk_freq = cc->cpu_clk_freq;
  npages = cc->npages;
  page_size = cc->page_size;
  cpc_cpuver = cc->cpc_cpuver;
  debug_mode = cc->debug_mode;
  java_mode = cc->java_mode;
  java_default = cc->java_default;
  java_path = 
# 251 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 251 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  java_args = 
# 252 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 252 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  njava_args = 0;
  follow_mode = cc->follow_mode;
  follow_default = cc->follow_default;
  if (cc->follow_spec_usr)
    {
      follow_spec_usr = strdup (cc->follow_spec_usr);
      follow_spec_cmp = strdup (cc->follow_spec_cmp);
    }
  else
    {
      follow_spec_usr = 
# 263 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 263 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           ;
      follow_spec_cmp = 
# 264 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 264 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           ;
    }
  archive_mode = strdup (cc->archive_mode);
  pauseresume_sig = cc->pauseresume_sig;
  sample_sig = cc->sample_sig;
  time_run = cc->time_run;
  start_delay = cc->start_delay;
  clk_params = cc->clk_params;
  clkprof_enabled = cc->clkprof_enabled;
  clkprof_default = cc->clkprof_default;
  clkprof_timer = cc->clkprof_timer;
  clkprof_timer_target = cc->clkprof_timer_target;


  hwcprof_default = cc->hwcprof_default;
  hwcprof_enabled_cnt = cc->hwcprof_enabled_cnt;
  if (cc->hwc_string != 
# 280 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 280 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           )
    hwc_string = strdup (cc->hwc_string);
  else
    hwc_string = 
# 283 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 283 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    ;
  for (int i = 0; i < hwcprof_enabled_cnt; i++)
    hwcentry_dup (&hwctr[i], &(cc->hwctr[i]));
  project_home = cc->project_home ? strdup (cc->project_home) : 
# 286 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                                               __null
# 286 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                                   ;
  synctrace_enabled = cc->synctrace_enabled;
  synctrace_thresh = cc->synctrace_thresh;
  synctrace_scope = cc->synctrace_scope;
  heaptrace_enabled = cc->heaptrace_enabled;
  heaptrace_checkenabled = cc->heaptrace_checkenabled;
  iotrace_enabled = cc->iotrace_enabled;
  count_enabled = cc->count_enabled;
  Iflag = cc->Iflag;
  Nflag = cc->Nflag;
  sample_period = cc->sample_period;
  sample_default = cc->sample_default;
  size_limit = cc->size_limit;
  nofswarn = cc->nofswarn;


  expt_name = 
# 302 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 302 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  expt_dir = 
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
  store_dir = 
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  base_name = 
# 305 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 305 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  expno = 1;


  expt_group = 
# 309 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              __null
# 309 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  ;
  if (cc->expt_group != 
# 310 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 310 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           )
    expt_group = strdup (cc->expt_group);
  uexpt_name = 
# 312 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              __null
# 312 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  ;
  if (cc->uexpt_name != 
# 313 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 313 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           )
    uexpt_name = strdup (cc->uexpt_name);
  udir_name = 
# 315 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 315 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  if (cc->udir_name != 
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                      __null
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                          )
    udir_name = strdup (cc->udir_name);


  prev_store_dir = strdup ("");
  store_ptr = 
# 321 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 321 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  target_name = 
# 322 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 322 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   ;
  data_desc = 
# 323 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 323 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  lockname = 
# 324 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 324 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
  lockfd = -1;


  enabled = cc->enabled;
  opened = 0;
  nofswarn = cc->nofswarn;
  sys_resolution = cc->sys_resolution;
  sys_period = cc->sys_period;


  (void) preprocess_names ();
  (void) update_expt_name (false, false);
  build_data_desc ();
}

Coll_Ctrl::~Coll_Ctrl ()
{
  free (node_name);
  free (expt_name);
  free (expt_dir);
  free (base_name);
  free (udir_name);
  free (store_dir);
  free (store_ptr);
  free (expt_group);
  free (target_name);
  free (data_desc);
  free (lockname);
  free (hwc_string);
  free (project_home);
  free (java_path);
  hwcprof_enabled_cnt = 0;
}


char *
Coll_Ctrl::setup_experiment ()
{
  char *ret;
  if (enabled == 0)
    return 
# 365 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
          __null
# 365 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
              ;
  build_data_desc ();


  ret = create_exp_dir ();
  if (ret != 
# 370 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 370 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    return ret;


  ret = join_group ();
  if (ret != 
# 375 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 375 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    {
      remove_exp_dir ();
      return ret;
    }

  opened = 1;
  return 
# 382 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 382 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

void
Coll_Ctrl::interrupt ()
{
  uinterrupt = 1;
}

char *
Coll_Ctrl::enable_expt ()
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (cpu_clk_freq == 0)
    return strdup (gettext("Can not determine CPU clock frequency.\n"));
  if (sys_resolution == 0)
    return strdup (gettext("System clock profile resolution can not be determined.\n"));
  enabled = 1;
  return 
# 401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}


void
Coll_Ctrl::close_expt ()
{
  opened = 0;
  (void) update_expt_name (false, false);
}


void
Coll_Ctrl::delete_expt ()
{
  if (opened == 0)
    return;
  remove_exp_dir ();







  close_expt ();
}



char *
Coll_Ctrl::check_consistency ()
{

  if (java_args != 
# 435 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  __null 
# 435 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       && java_mode == 0)
    return strdup (gettext("Java arguments can not be set if Java profiling is not enabled.\n"));


  if (count_enabled != 0
      && ((clkprof_default != 1 && clkprof_enabled != 0)
   || hwcprof_enabled_cnt != 0 || synctrace_enabled != 0
   || heaptrace_enabled != 0 || iotrace_enabled != 0))
    return strdup (gettext("Count data cannot be collected along with any other data.\n"));


  if (count_enabled != 0
      && ((java_mode != 0 && java_default != 1)
   || java_args != 
# 448 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  __null 
# 448 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       || debug_mode != 0
   || (follow_mode != 0 && follow_default != 1)
   || pauseresume_sig != 0 || sample_sig != 0
   || (sample_default != 1 && sample_period != 0) || time_run != 0))
    return strdup (gettext("Count data cannot be collected with any of -F -S -y -l -j -J -x -t .\n"));

  if (count_enabled == 0 && (Iflag != 0 || Nflag != 0))
    return strdup (gettext("-I or -N can only be specified with count data.\n"));
  return 
# 456 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 456 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::check_expt (char **warn)
{
  char *ret;
  *warn = 
# 463 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         __null
# 463 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
             ;
  ret = check_consistency ();
  if (ret != 
# 465 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 465 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    return ret;

  if (heaptrace_enabled == 1 && java_mode == 1 && java_default == 0)
    *warn = strdup (gettext("Note: Heap profiling will only trace native allocations, not Java allocations.\n"));


  if (clkprof_enabled == 0 && hwcprof_enabled_cnt == 0 && synctrace_enabled == 0
      && heaptrace_enabled == 0 && iotrace_enabled == 0 && count_enabled == 0)
    *warn = strdup (gettext("Warning: No function level data requested; only statistics will be collected.\n\n"));
  build_data_desc ();


  struct stat statbuf;
  if (stat (store_dir, &statbuf) != 0)
    return dbe_sprintf (gettext("Store directory %s is not accessible: %s\n"),
   store_dir, strerror (
# 481 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       (*__errno_location ())
# 481 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                            ));
  if (access (store_dir, 
# 482 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                        2
# 482 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                            ) != 0)
    return dbe_sprintf (gettext("Store directory %s is not writeable: %s\n"),
  store_dir, strerror (
# 484 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                      (*__errno_location ())
# 484 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           ));


  ret = check_group ();
  if (ret != 
# 488 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 488 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    return ret;
  return 
# 490 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 490 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::show (int i)
{
  char UEbuf[4096];
  UEbuf[0] = 0;
  if (i == 0)
    {
      snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
  gettext("Collection parameters:\n"));
      snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
  gettext("    experiment enabled\n"));
    }
  if (target_name != 
# 505 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                    __null
# 505 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                        )
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\ttarget = %s\n"), target_name);
  if (uexpt_name != 
# 508 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 508 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       )
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\tuser_expt_name = %s\n"), uexpt_name);
  snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
     gettext("\texpt_name = %s\n"),
     ((expt_name != 
# 513 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 513 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       ) ? expt_name : ((char *) ("<NULL>"))));
  if (udir_name != 
# 514 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  __null
# 514 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                      )
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\tdir_name = %s\n"), udir_name);
  if (expt_group != 
# 517 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 517 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       )
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\texpt_group = %s\n"), expt_group);
  if (debug_mode == 1)
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\tdebug_mode enabled\n"));
  if (clkprof_enabled != 0)
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\tclock profiling enabled, %.3f millisec.\n"),
       (double) (clkprof_timer) / 1000.);
  if (synctrace_enabled != 0)
    {
      if (synctrace_thresh < 0)
 snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
    gettext("\tsynchronization tracing enabled, threshold: calibrate; "));
      else if (synctrace_thresh == 0)
 snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
    gettext("\tsynchronization tracing enabled, threshold: all; "));
      else
 snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
    gettext("\tsynchronization tracing enabled, threshold: %d micros.; "), synctrace_thresh);
      switch (synctrace_scope)
 {
 case 0x1:
   snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
      gettext("Native-APIs\n"));
   break;
 case 0x2:
   snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
      gettext("Java-APIs\n"));
   break;
 case 0x1 | 0x2:
   snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
      gettext("Native- and Java-APIs\n"));
   break;
 default:
   snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
      gettext("ERR -- unexpected synctrace_scope %d\n"), synctrace_scope);
   break;
 }
    }
  if (hwcprof_enabled_cnt != 0)
    {
      char ctrbuf[
# 560 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 4096
# 560 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           ];
      snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
  gettext("\thardware counter profiling%s enabled:\n"),
  (hwcprof_default == 1 ? gettext(" (default)") : ""));
      for (int ii = 0; ii < hwcprof_enabled_cnt; ii++)
 snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
    gettext("\t  %u. %s\n"), ii + 1,
    hwc_hwcentry_specd_string (ctrbuf, 
# 567 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                      4096
# 567 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                , &hwctr[ii]));
    }
  if (heaptrace_enabled != 0)
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\theap tracing enabled, %s\n"),
       (heaptrace_checkenabled == 0 ? gettext("no checking") :
        (heaptrace_checkenabled == 1 ? gettext("over/underrun checking") :
  gettext("over/underrun checking and pattern storing"))));
  if (iotrace_enabled != 0)
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\tI/O tracing enabled\n"));
  switch (count_enabled)
    {
    case 0:
      break;
    case 1:
      snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
  gettext("\tcount data enabled\n"));
      break;
    case -1:
      snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
  gettext("\tstatic count data will be generated (for a.out only)\n"));
      break;
    }
  switch (follow_mode)
    {
    case FOLLOW_ON:
      snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
  gettext("\tdescendant processes will be followed\n"));
      break;
    case FOLLOW_ALL:
      if (follow_spec_usr && follow_spec_cmp)
 snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
    gettext("\texperiments will be recorded for descendant processes that match pattern '%s'\n"),
    follow_spec_usr);
      else
 snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
    gettext("\tdescendant processes will all be followed\n"));
      break;
    case FOLLOW_NONE:
      snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
  gettext("\tdescendant processes will not be followed\n"));
      break;
    default:
      snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
  gettext("\tfollowing descendant processes: <UNKNOWN>\n"));
      break;
    }
  if (java_mode == 0)
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\tjava profiling disabled\n"));
  if (pauseresume_sig != 0)
    {
      const char *buf = strsignal (pauseresume_sig);
      if (buf != 
# 621 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 621 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 {
   if (pauseresume_pause == 1)
     snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
        gettext("\tpause-resume (delayed initialization) signal %s (%d) -- paused\n"), buf, pauseresume_sig);
   else
     snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
        gettext("\tpause-resume (delayed initialization) signal %s (%d)\n"), buf, pauseresume_sig);
 }
      else
 {
   if (pauseresume_pause == 1)
     snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
        gettext("\tpause-resume (delayed initialization) signal %d -- paused\n"), pauseresume_sig);
   else
     snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
        gettext("\tpause-resume (delayed initialization) signal %d\n"), pauseresume_sig);
 }
    }
  if (sample_sig != 0)
    {
      const char *buf = strsignal (sample_sig);
      if (buf != 
# 643 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 643 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
    gettext("\tsample signal %s (%d)\n"), buf, sample_sig);
      else
 snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
    gettext("\tsample signal %d\n"), sample_sig);
    }
  if (time_run != 0 || start_delay != 0)
    {
      if (start_delay != 0)
 {
   if (time_run != 0)
     snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
        gettext("\tdata-collection duration, %d-%d secs.\n"), start_delay, time_run);
   else
     snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
        gettext("\tdata-collection duration, %d- secs.\n"), start_delay);
 }
      else
 snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
    gettext("\tdata-collection duration, %d secs.\n"), time_run);
    }
  if (sample_period != 0)
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\tperiodic sampling, %d secs.\n"), sample_period);
  else
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\tno periodic sampling\n"));
  if (size_limit != 0)
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\texperiment size limit %d MB.\n"), size_limit);
  else
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       gettext("\tno experiment size limit set\n"));
  snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
     gettext("\texperiment archiving: -a %s\n"), archive_mode);
  snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
     gettext("\tdata descriptor: \"%s\"\n"),
     ((data_desc != 
# 681 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 681 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       ) ? data_desc : ((char *) ("<NULL>"))));
# 696 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
  snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
     gettext("\t\thost: `%s', ncpus = %d, clock frequency %d MHz.\n"),
     ((node_name != 
# 698 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 698 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       ) ? node_name : ((char *) ("<NULL>"))),
     (int) ncpus, (int) cpu_clk_freq);
  if (npages > 0)
    {
      long long memsize = ((long long) npages * (long long) page_size) / (1024 * 1024);
      snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
  gettext("\t\tmemory:  %ld pages @ %ld bytes = %lld MB.\n"),
  npages, page_size, memsize);
    }
  return strdup (UEbuf);
}



char **
Coll_Ctrl::get_collect_args ()
{
  char buf[(
# 715 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
          4096 
# 715 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
          * 4)];
  char **p;
  char **argv = (char **) calloc (100, sizeof (char *));
  if (argv == 
# 718 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 718 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 )
    abort ();
  p = argv;
  *p++ = strdup ("collect");
  if (debug_mode == 1)
    *p++ = strdup ("-x");
  if (clkprof_enabled != 0)
    {
      *p++ = strdup ("-p");
      snprintf (buf, sizeof (buf), "%du", clkprof_timer);
      *p++ = strdup (buf);
    }
  if (hwcprof_enabled_cnt > 0)
    {
      *buf = 0;
      *p++ = strdup ("-h");
      for (int ii = 0; ii < hwcprof_enabled_cnt; ii++)
 {
   char*rateString = hwc_rate_string (&hwctr[ii], 1);
   snprintf (buf + strlen (buf), sizeof (buf) - strlen (buf),
      "%s%s,%s%s", ii ? "," : "", hwctr[ii].name,
      rateString ? rateString : "",
      (ii + 1 < hwcprof_enabled_cnt) ? "," : "");
   free (rateString);
 }
      if (strlen (buf) + 1 >= sizeof (buf))
 abort ();
      *p++ = strdup (buf);
    }
  if (heaptrace_enabled != 0)
    {
      *p++ = strdup ("-H");
      *p++ = strdup ("on");
    }
  if (iotrace_enabled != 0)
    {
      *p++ = strdup ("-i");
      *p++ = strdup ("on");
    }
  if (synctrace_enabled != 0)
    {
      *p++ = strdup ("-s");
      if (synctrace_thresh < 0)
 *p++ = strdup ("calibrate");
      else if (synctrace_thresh == 0)
 *p++ = strdup ("all");
      else
 *p++ = dbe_sprintf ("%d", synctrace_thresh);
      *p++ = dbe_sprintf (",%d", synctrace_scope);
    }
  if (follow_mode != 0)
    {
      *p++ = strdup ("-F");
      char * fs = get_follow_usr_spec ();
      if (fs)
 *p++ = strdup (fs);
      else
 {
   switch (get_follow_mode ())
     {
     case FOLLOW_ON:
       *p++ = strdup ("on");
       break;
     case FOLLOW_ALL:
       *p++ = strdup ("all");
       break;
     case FOLLOW_NONE:
     default:
       *p++ = strdup ("off");
       break;
     }
 }
    }
  *p++ = strdup ("-a");
  *p++ = strdup (get_archive_mode ());
  if (java_mode != 0)
    {
      *p++ = strdup ("-j");
      *p++ = strdup ("on");
    }
  if (pauseresume_sig != 0)
    {
      *p++ = strdup ("-y");
      *p++ = dbe_sprintf ("%d%s", pauseresume_sig,
     (pauseresume_pause == 0 ? ",r" : ""));
    }
  if (sample_sig != 0)
    {
      *p++ = strdup ("-l");
      *p++ = dbe_sprintf ("%d", sample_sig);
    }
  if (sample_period != 0)
    {
      *p++ = strdup ("-S");
      *p++ = dbe_sprintf ("%d", sample_period);
    }
  if (size_limit != 0)
    {
      *p++ = strdup ("-L");
      *p++ = dbe_sprintf ("%d", size_limit);
    }
  if (expt_group != 
# 819 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 819 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       )
    {
      *p++ = strdup ("-g");
      *p++ = strdup (expt_group);
    }
  if (udir_name != 0)
    {
      *p++ = strdup ("-d");
      *p++ = strdup (udir_name);
    }
  if (expt_name != 0)
    {
      *p++ = strdup ("-o");
      *p++ = strdup (expt_name);
    }
  if (p - argv >= 100)
    abort ();
  return argv;
}

char *
Coll_Ctrl::show_expt ()
{
  if (enabled == 0)
    return 
# 843 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
          __null
# 843 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
              ;
  char UEbuf[4096];
  UEbuf[0] = 0;
  snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
     gettext("Creating experiment directory %s (Process ID: %ld) ...\n"),
     ((store_ptr != 
# 848 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 848 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       ) ? store_ptr : ((char *) ("<NULL>"))), (long) getpid ());
  char *caller = getenv ("SP_COLLECTOR_FROM_GUI");
  if (caller != 
# 850 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 850 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
    snprintf (UEbuf + strlen (UEbuf), sizeof (UEbuf) - strlen (UEbuf),
       ((char *) ("\nCreating experiment directory %s (Process ID: %ld) ...\n")),
       ((store_ptr != 
# 853 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                     __null
# 853 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                         ) ? store_ptr : ((char *) ("<NULL>"))), (long) getpid ());
# 865 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
  return strdup (UEbuf);
}

void
Coll_Ctrl::set_clk_params (int min, int res, int max, int hi, int norm, int lo)
{
  clk_params.min = min;
  clk_params.res = res;
  clk_params.max = max;
  clk_params.hival = hi;
  clk_params.normval = norm;
  clk_params.lowval = lo;
  set_clkprof_timer_target (clk_params.normval);
}

char *
Coll_Ctrl::reset_clkprof (int val)
{
  if (val != clkprof_timer)
    {

      char *msg = dbe_sprintf (
       gettext("Warning: Clock profiling timer reset from %.3f millisec. to %.3f millisec. as required by profiling driver\n\n"),
       (double) (clkprof_timer) / 1000., (double) (val) / 1000.);
      adjust_clkprof_timer (val);
      return msg;
    }
  return 
# 892 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 892 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::set_clkprof (const char *string, char** warn)
{
  int ticks;
  int nclkprof_timer;
  int prevclkprof_enabled;
  int prevclkprof_default;
  *warn = 
# 902 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         __null
# 902 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
             ;
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));

  if (string[0] == '+')
    return strdup (gettext("Warning: clock-based memoryspace and dataspace profiling is no longer supported\n"));
  if (strcmp (string, "off") == 0)
    {
      clkprof_enabled = 0;
      clkprof_default = 0;
      return 
# 912 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 912 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  else if (string == 
# 914 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                    __null 
# 914 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                         || strcmp (string, "on") == 0)
    nclkprof_timer = clk_params.normval;
  else if (strcmp (string, "lo") == 0 || strcmp (string, "low") == 0)
    nclkprof_timer = clk_params.lowval;
  else if (strcmp (string, "hi") == 0 || strcmp (string, "high") == 0
    || strcmp (string, "h") == 0)
    nclkprof_timer = clk_params.hival;
  else
    {

      char *endchar = 
# 924 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                     __null
# 924 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                         ;
      double dval = strtod (string, &endchar);
      if (*endchar == 'm' || *endchar == 0)
 dval = dval * 1000.;
      else if (*endchar == 'u')
 dval = dval;
      else
 return dbe_sprintf (gettext("Unrecognized clock-profiling interval `%s'\n"), string);
      nclkprof_timer = (int) (dval + 0.5);
    }

  if (nclkprof_timer <= 0)
    return dbe_sprintf (gettext("Unrecognized clock-profiling interval `%s'\n"), string);


  prevclkprof_enabled = clkprof_enabled;
  prevclkprof_default = clkprof_default;
  clkprof_enabled = 1;
  clkprof_default = 0;
  char *ret = check_consistency ();
  if (ret != 
# 944 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 944 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    {
      clkprof_default = prevclkprof_default;
      clkprof_enabled = prevclkprof_enabled;
      return ret;
    }
  int ref_nclkprof_timer = nclkprof_timer;


  if (nclkprof_timer < clk_params.min)
    {

      *warn = dbe_sprintf (
  gettext("Warning: Clock profiling at %.3f millisec. interval is not supported on this system; minimum %.3f millisec. used\n"),
  (double) (nclkprof_timer) / 1000., (double) (clk_params.min) / 1000.);
      nclkprof_timer = clk_params.min;
    }


  if (nclkprof_timer > clk_params.max)
    {
      *warn = dbe_sprintf (
  gettext("Clock profiling at %.3f millisec. interval is not supported on this system; maximum %.3f millisec. used\n"),
  (double) (nclkprof_timer) / 1000., (double) (clk_params.max) / 1000.);
      nclkprof_timer = clk_params.max;
    }


  if (nclkprof_timer > clk_params.res)
    {
      ticks = ((nclkprof_timer / clk_params.res) * clk_params.res);
      if (ticks != nclkprof_timer)
 {

   *warn = dbe_sprintf (
      gettext("Clock profile interval rounded from %.3f to %.3f (system resolution = %.3f) millisec."),
      (double) (nclkprof_timer) / 1000., (double) (ticks) / 1000.,
      (double) (clk_params.res) / 1000.);
   nclkprof_timer = ticks;
 }
    }


  if (ref_nclkprof_timer > 1000000)
    ref_nclkprof_timer = 1000000;
  if (ref_nclkprof_timer < 500)
    ref_nclkprof_timer = 500;
  set_clkprof_timer_target (ref_nclkprof_timer);
  adjust_clkprof_timer (nclkprof_timer);
  return 
# 993 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 993 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::set_synctrace (const char *string)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  char *comma_p = 
# 1001 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 1001 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
  if (string == 
# 1002 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 1002 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
    {

      synctrace_enabled = 1;
      synctrace_thresh = -1;
      synctrace_scope = 0x1;
      char *ret = check_consistency ();
      if (ret != 
# 1009 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 1009 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 {
   synctrace_enabled = 0;
   return ret;
 }
      return 
# 1014 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1014 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  char *val = strdup (string);

  char *next = strchr (val, (int) ',');
  if (next != 
# 1019 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 1019 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 )
    {

      comma_p = next;


      synctrace_scope = 0;
      next++;
      while (*next != 0)
 {
   if (*next == 'n')
     synctrace_scope |= 0x1;
   else if (*next == 'j')
     synctrace_scope |= 0x2;
   else
     return dbe_sprintf (gettext("Unrecognized synchronization tracing threshold `%s'\n"), string);
   next++;
 }
      if (synctrace_scope == 0)
 synctrace_scope = 0x1;

      *comma_p = 0;
    }
  else
    synctrace_scope = 0x1 | 0x2;
  if (!strlen (val) || !strcmp (val, "calibrate") || !strcmp (val, "on"))
    {

      synctrace_enabled = 1;
      synctrace_thresh = -1;
      free (val);
      char *ret = check_consistency ();
      if (ret != 
# 1051 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 1051 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 {
   synctrace_enabled = 0;
   return ret;
 }
      return 
# 1056 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1056 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (strcmp (val, "off") == 0)
    {
      synctrace_enabled = 0;
      free (val);
      return 
# 1062 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1062 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (strcmp (val, "all") == 0)
    {

      synctrace_thresh = 0;
      synctrace_enabled = 1;
      char *ret = check_consistency ();
      free (val);
      if (ret != 
# 1071 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 1071 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 {
   synctrace_enabled = 0;
   return ret;
 }
      return 
# 1076 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1076 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }

  char *endchar = 
# 1079 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 1079 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
  int tval = (int) strtol (val, &endchar, 0);
  if (*endchar != 0 || tval < 0)
    {
      free (val);


      if (comma_p != 
# 1086 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                    __null
# 1086 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                        )
 *comma_p = ',';
      return dbe_sprintf (gettext("Unrecognized synchronization tracing threshold `%s'\n"), string);
    }
  free (val);
  synctrace_thresh = tval;
  synctrace_enabled = 1;
  return 
# 1093 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 1093 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::set_heaptrace (const char *string)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (string == 
# 1101 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 1101 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strlen (string) == 0 || strcmp (string, "on") == 0)
    {
      heaptrace_enabled = 1;
      char *ret = check_consistency ();
      if (ret != 
# 1105 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 1105 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 {
   heaptrace_enabled = 0;
   return ret;
 }
      return 
# 1110 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1110 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (strcmp (string, "off") == 0)
    {
      heaptrace_enabled = 0;
      return 
# 1115 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1115 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
# 1133 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
  return dbe_sprintf (gettext("Unrecognized heap tracing parameter `%s'\n"), string);
}

char *
Coll_Ctrl::set_iotrace (const char *string)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (string == 
# 1141 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 1141 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strlen (string) == 0 || strcmp (string, "on") == 0)
    {
      iotrace_enabled = 1;
      char *ret = check_consistency ();
      if (ret != 
# 1145 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 1145 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 {
   iotrace_enabled = 0;
   return ret;
 }
      return 
# 1150 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1150 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (strcmp (string, "off") == 0)
    {
      iotrace_enabled = 0;
      return 
# 1155 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1155 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  return dbe_sprintf (gettext("Unrecognized I/O tracing parameter `%s'\n"), string);
}

char *
Coll_Ctrl::set_count (const char *string)
{
  int ret = -1;
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (string == 
# 1166 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 1166 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strlen (string) == 0 || strcmp (string, "off") == 0)
    {
      count_enabled = 0;
      ret = 0;
    }
  if (strcmp (string, "on") == 0)
    {
      count_enabled = 1;
      char *cret = check_consistency ();
      if (cret != 
# 1175 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 1175 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     )
 {
   count_enabled = 0;
   return cret;
 }
      ret = 0;
    }
  if (strcmp (string, "static") == 0)
    {
      count_enabled = -1;
      char *cret = check_consistency ();
      if (cret != 
# 1186 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 1186 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     )
 {
   count_enabled = 0;
   return cret;
 }
      ret = 0;
    }
  if (ret == 0)
    {
      if (count_enabled != 0)
 {

   if (sample_default == 1)
     sample_period = 0;

   if (clkprof_default == 1)
     {
       clkprof_default = 0;
       clkprof_enabled = 0;
     }
   if (hwcprof_default == 1)
     hwcprof_default = 0;
 }
      return 
# 1209 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1209 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  return dbe_sprintf (gettext("Unrecognized count parameter `%s'\n"), string);
}

char *
Coll_Ctrl::set_time_run (const char *valarg)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (valarg == 
# 1219 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 1219 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
    return strdup (gettext("time parameter can not be NULL\n"));

  int prev_start_delay = start_delay;
  int prev_time_run = time_run;
  const char *endchar = valarg;
  char *newchar = 
# 1225 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 1225 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
  int val = 0;
  if (*endchar != '-')
    {
      val = (int) strtol (endchar, &newchar, 0);
      endchar = newchar;
      if (val < 0)
 return dbe_sprintf (gettext("Unrecognized time parameter `%s'\n"), valarg);
      if (*endchar == 'm')
 {
   val = val * 60;
   endchar++;
 }
      else if (*endchar == 's')
 endchar++;
      if (*endchar == 0)
 {
   time_run = val;
   return 
# 1243 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         __null
# 1243 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
             ;
 }
      else if (*endchar != '-')
 return dbe_sprintf (gettext("Unrecognized time parameter `%s'\n"), valarg);
    }

  start_delay = val;
  endchar++;
  val = (int) strtol (endchar, &newchar, 0);
  endchar = newchar;
  if (val < 0)
    {
      start_delay = prev_start_delay;
      return dbe_sprintf (gettext("Unrecognized time parameter `%s'\n"), valarg);
    }
  if (*endchar == 'm')
    {
      val = val * 60;
      endchar++;
    }
  else if (*endchar == 's')
    endchar++;
  if (*endchar != 0)
    {
      start_delay = prev_start_delay;
      return dbe_sprintf (gettext("Unrecognized time parameter `%s'\n"), valarg);
    }
  time_run = val;
  if (time_run != 0 && start_delay >= time_run)
    {
      start_delay = prev_start_delay;
      return dbe_sprintf (gettext("Invalid time parameter `%s': start time must be earlier than end time\n"), valarg);
    }
  char *ret = check_consistency ();
  if (ret != 
# 1277 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1277 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    {
      start_delay = prev_start_delay;
      time_run = prev_time_run;
      return ret;
    }
  return 
# 1283 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 1283 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::set_attach_pid (char *valarg)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (valarg == 
# 1291 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 1291 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
    return strdup (gettext("Specified PID can not be NULL\n"));


  char *endchar = 
# 1295 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 1295 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
  int val = (int) strtol (valarg, &endchar, 0);
  if (*endchar != 0 || val < 0)
    return dbe_sprintf (gettext("Invalid process pid `%s'\n"), valarg);
  int prev_attach_pid = attach_pid;
  attach_pid = val;
  char *ret = check_consistency ();
  if (ret != 
# 1302 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1302 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    {
      attach_pid = prev_attach_pid;
      return ret;
    }
  return 
# 1307 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 1307 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

void
Coll_Ctrl::free_hwc_fields (Hwcentry * tmpctr)
{
  if (tmpctr->name != 
# 1313 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                     __null
# 1313 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                         )
    free (tmpctr->name);
  if (tmpctr->int_name != 
# 1315 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                         __null
# 1315 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                             )
    free (tmpctr->int_name);
  memset (tmpctr, 0, sizeof (Hwcentry));
  tmpctr->reg_num = -1;
}

void
Coll_Ctrl::hwcentry_dup (Hwcentry *hnew, Hwcentry *_hwc)
{
  *hnew = *_hwc;
  if (_hwc->name != 
# 1325 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 1325 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       )
    hnew->name = strdup (_hwc->name);
  else
    hnew->name = 
# 1328 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 1328 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    ;
  if (_hwc->int_name != 
# 1329 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 1329 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           )
    hnew->int_name = strdup (_hwc->int_name);
  else
    hnew->int_name = 
# 1332 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                    __null
# 1332 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                        ;
  if (_hwc->metric != 
# 1333 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                     __null
# 1333 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                         )
    hnew->metric = strdup (_hwc->metric);
  else
    hnew->metric = 
# 1336 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  __null
# 1336 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                      ;
  if (_hwc->short_desc != 
# 1337 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                         __null
# 1337 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                             )
    hnew->short_desc = strdup (_hwc->short_desc);
  else
    hnew->short_desc = 
# 1340 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                      __null
# 1340 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                          ;
  if (_hwc->reg_list != 
# 1341 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 1341 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           )
    {
      hnew->reg_list = (regno_t*) malloc (sizeof (regno_t*) * 20);

      if (hnew->reg_list)
 {
   for (int i = 0; i < 20; i++)
     {
       hnew->reg_list[i] = _hwc->reg_list[i];
       if (hnew->reg_list[i] == ((regno_t)-1))
  break;
     }
 }
    }
}


void
Coll_Ctrl::setup_hwc ()
{
  static bool is_hwc_setup = false;
  if (is_hwc_setup == true)
    return;

  is_hwc_setup = true;
  set_hwcdefault ();
}

hrtime_t
Coll_Ctrl::clkprof_timer_2_hwcentry_min_time (int target_clkprof_usec)
{
  hrtime_t hwc_nanosec;
  if (target_clkprof_usec == clk_params.normval)
    hwc_nanosec = ( 10 * 1000 * 1000LL );
  else if (target_clkprof_usec == clk_params.lowval)
    hwc_nanosec = ( 100 * 1000 * 1000LL );
  else if (target_clkprof_usec == clk_params.hival)
    hwc_nanosec = ( 1 * 1000 * 1000LL );
  else
    hwc_nanosec = 1000LL * target_clkprof_usec;
  return hwc_nanosec;
}

void
Coll_Ctrl::set_clkprof_timer_target (int microseconds)
{
  clkprof_timer = microseconds;
  clkprof_timer_target = microseconds;
  hrtime_t hwc_min_time_nanosec = clkprof_timer_2_hwcentry_min_time (microseconds);
  for (int ii = 0; ii < hwcprof_enabled_cnt; ii++)
    {
      hwctr[ii].min_time_default = hwc_min_time_nanosec;
      hwc_update_val (&hwctr[ii]);
    }
}

void
Coll_Ctrl::adjust_clkprof_timer (int use)
{
  clkprof_timer = use;
}


char *
Coll_Ctrl::set_hwcstring (const char *string, char **warnmsg)
{
  *warnmsg = 
# 1407 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1407 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
  if (string == 
# 1408 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 1408 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strcmp (string, "off") == 0)
    {
      hwcprof_enabled_cnt = 0;
      return 
# 1411 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1411 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  setup_hwc ();
  int old_cnt = hwcprof_enabled_cnt;
  int old_hwcprof_default = hwcprof_default;


  hwcprof_enabled_cnt = 0;
  char *ret = add_hwcstring (string, warnmsg);
  if (ret != 
# 1420 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1420 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    {

      hwcprof_enabled_cnt = old_cnt;
      hwcprof_default = old_hwcprof_default;
    }
  return ret;
}


char *
Coll_Ctrl::add_hwcstring (const char *string, char **warnmsg)
{
  *warnmsg = 
# 1433 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1433 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
  if (string == 
# 1434 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 1434 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strcmp (string, "off") == 0)
    {
      hwcprof_enabled_cnt = 0;
      return 
# 1437 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1437 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  setup_hwc ();
  int rc = 0;
  int old_cnt = hwcprof_enabled_cnt;
  int prev_cnt = hwcprof_enabled_cnt;

  char UEbuf[
# 1444 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            4096 
# 1444 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       * 5];
  int UEsz;
  Hwcentry tmpctr[20];
  Hwcentry * ctrtable[20];
  char *emsg;
  char *wmsg;
  UEbuf[0] = 0;
  UEsz = sizeof (UEbuf);
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (hwcprof_default == 0)
    {

      for (int ii = 0; ii < prev_cnt; ii++)
 tmpctr[ii] = hwctr[ii];
    }
  else
    prev_cnt = 0;


  cpc_cpuver = hwc_get_cpc_cpuver ();
  if (string && *string)
    {


      for (unsigned ii = 0; ii < 20; ii++)
 ctrtable[ii] = &tmpctr[ii];
      hrtime_t global_min_time = clkprof_timer_2_hwcentry_min_time (clkprof_timer_target);
      rc = hwc_lookup (kernelHWC, global_min_time, string, &ctrtable[prev_cnt], 20 - prev_cnt, &emsg, &wmsg);
      if (wmsg != 
# 1473 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 1473 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     )
 *warnmsg = wmsg;
      if (rc < 0)
 return emsg;

      rc = rc + prev_cnt;
    }


  char *ret = check_consistency ();
  if (ret != 
# 1483 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1483 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    {
      hwcprof_enabled_cnt = old_cnt;
      return ret;
    }


  emsg = hwc_validate_ctrs (kernelHWC, ctrtable, rc);
  if (emsg != 
# 1491 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 1491 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 )
    {
      hwcprof_enabled_cnt = old_cnt;
      return emsg;
    }



  hwcprof_default = 0;
  hwcprof_enabled_cnt = rc;
  free (hwc_string);
  for (int ii = 0; ii < hwcprof_enabled_cnt; ii++)
    {

      hwctr[ii] = tmpctr[ii];
      char *rateString = hwc_rate_string (&hwctr[ii], 0);
      snprintf (UEbuf + strlen (UEbuf), UEsz - strlen (UEbuf),
  ((char *) (",%s,%s")), hwctr[ii].name,
  rateString ? rateString : "");
      free (rateString);
    }

  hwc_string = strdup (&UEbuf[1]);
  return 
# 1514 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 1514 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}



char *
Coll_Ctrl::add_default_hwcstring (const char *resolution, char **warnmsg, bool add, bool forKernel)
{
  setup_hwc ();
  *warnmsg = 
# 1523 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1523 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
  char *def_string = hwc_get_default_cntrs2 (forKernel, 1);
  if (def_string == 
# 1525 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 1525 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       )
    {

      char cpuname[128];
      hwc_get_cpuname (cpuname, sizeof (cpuname));
      return dbe_sprintf (gettext("No default HW counter set is defined for %s\n"), cpuname);
    }
  int len = strlen (def_string);
  if (len == 0)
    {

      char cpuname[128];
      hwc_get_cpuname (cpuname, sizeof (cpuname));
      return dbe_sprintf (gettext("HW counter set for %s cannot be loaded on this system\n"), cpuname);
    }

  int retsize = 2 * len + 10;
  char *ret = (char *) malloc (retsize);
  if (ret == 
# 1543 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1543 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    return strdup (gettext("internal error formating HW counter set; malloc failed\n"));
  *ret = 0;
  char *retp = ret;
  char *stringp = def_string;
  int first = 1;
  char *hwc_defaultx = strdup (def_string);


  for (;;)
    {

      char * next;
      char *nextp;
      if (first == 1)
 nextp = stringp;
      else
 nextp = stringp + 1;
      first = 0;
      if ((next = strchr (nextp, (int) ',')) != 
# 1562 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                               __null
# 1562 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                   )
 {
   if (next == nextp)
     {

       char cpuname[128];
       hwc_get_cpuname (cpuname, sizeof (cpuname));
       free (ret);
       ret = dbe_sprintf (gettext("HW counter set for %s, \"%s\", format error\n"), cpuname, hwc_defaultx);
       free (hwc_defaultx);
       return ret;
     }

   *next = 0;
   char nextc = *(next + 1);
   if ((nextc == 0) || (nextc == ','))
     {


       strncat (retp, stringp, (retsize - strlen (retp) - 1));
       strncat (retp, ",", (retsize - strlen (retp) - 1));
       strncat (retp, resolution, (retsize - strlen (retp) - 1));
       if (nextc == 0)
  break;
     }
   else
     {

       char cpuname[128];
       hwc_get_cpuname (cpuname, sizeof (cpuname));
       free (ret);
       ret = dbe_sprintf (gettext("HW counter set for %s, \"%s\", format error\n"), cpuname, hwc_defaultx);
       free (hwc_defaultx);
       return ret;
     }

   stringp = next + 1;
   if (* (stringp + 1) == 0)
     break;
   continue;
 }
      else
 {

   strncat (retp, stringp, (retsize - strlen (retp) - 1));
   strncat (retp, ",", (retsize - strlen (retp) - 1));
   strncat (retp, resolution, (retsize - strlen (retp) - 1));
   break;
 }
    }


  char *ccret;
  if (add == true)
    ccret = add_hwcstring (ret, warnmsg);
  else
    ccret = set_hwcstring (ret, warnmsg);
  free (hwc_defaultx);
  free (ret);


  if (clkprof_default == 1)
    {
      if (strcmp (resolution, ((char *) ("on"))) == 0)
 set_clkprof_timer_target (clk_params.normval);
      else if (strcmp (resolution, ((char *) ("lo"))) == 0)
 set_clkprof_timer_target (clk_params.lowval);
      else if (strcmp (resolution, ((char *) ("hi"))) == 0)
 set_clkprof_timer_target (clk_params.hival);
    }
  return ccret;
}

void
Coll_Ctrl::set_hwcdefault ()
{
  char *string = hwc_get_default_cntrs2 (kernelHWC, 1);
  if (string != 
# 1639 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 1639 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
    {
      if (strlen (string) == 0)
 hwcprof_default = 0;
      else
 {
   char * warnmsg = 
# 1645 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 1645 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       ;
   char *ccret = add_hwcstring (string, &warnmsg);
   if (ccret != 
# 1647 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 1647 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
     {




       hwcprof_default = 0;
     }
   else
     hwcprof_default = 1;
 }
      free (string);
    }
  else
    hwcprof_default = 0;
}

void
Coll_Ctrl::disable_hwc ()
{
  hwcprof_enabled_cnt = 0;
  hwcprof_default = 0;
  free (hwc_string);
  hwc_string = 
# 1670 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              __null
# 1670 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  ;
}

char *
Coll_Ctrl::set_sample_period (const char *string)
{
  int val;
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (string == 
# 1679 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 1679 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strcmp (string, "on") == 0)
    val = 1;
  else if (strcmp (string, "off") == 0)
    val = 0;
  else
    {

      char *endchar = 
# 1686 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                     __null
# 1686 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                         ;
      val = (int) strtol (string, &endchar, 0);
      if (*endchar != 0 || val <= 0)
 return dbe_sprintf (gettext("Unrecognized sample period `%s'\n"), string);
    }

  int prev_sample_period = sample_period;
  sample_period = val;
  char *ret = check_consistency ();
  if (ret != 
# 1695 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1695 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    {
      sample_period = prev_sample_period;
      return ret;
    }
  sample_default = 0;
  return 
# 1701 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 1701 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::set_size_limit (const char *string)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (string == 
# 1709 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 1709 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strlen (string) == 0
      || strcmp (string, "unlimited") == 0 || strcmp (string, "none") == 0)
    {
      size_limit = 0;
      return 
# 1713 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1713 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }

  char *endchar = 
# 1716 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 1716 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
  int val = (int) strtol (string, &endchar, 0);
  if (*endchar != 0 || val <= 0)
    return dbe_sprintf (gettext("Unrecognized size limit `%s'\n"), string);
  size_limit = val;
  return 0;
}

void
Coll_Ctrl::build_data_desc ()
{
  char spec[(
# 1727 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
           4096 
# 1727 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
           * 4)];
  spec[0] = 0;



  if (project_home)
    snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "P:%s;", project_home);
  if (sample_sig != 0)
    snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "g:%d;", sample_sig);
  if (pauseresume_sig != 0)
    snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "d:%d%s;", pauseresume_sig,
       (pauseresume_pause == 1 ? "p" : ""));
  if (clkprof_enabled == 1)
    snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "p:%d;", clkprof_timer);
  if (synctrace_enabled == 1)
    snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "s:%d,%d;", synctrace_thresh, synctrace_scope);
  if (heaptrace_enabled == 1)
    snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "H:%d;", heaptrace_checkenabled);
  if (iotrace_enabled == 1)
    snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "i:;");
  if (hwcprof_enabled_cnt > 0)
    {
      snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "h:%s",
  (hwcprof_default == true) ? "*" : "");
      for (int ii = 0; ii < hwcprof_enabled_cnt; ii++)
 {
# 1765 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
   hrtime_t min_time = hwctr[ii].min_time;
   if (min_time == ((hrtime_t)( -1LL)))

     min_time = hwctr[ii].min_time_default;
   snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec),
      "%s%s:%s:%d:%d:m%lld:%d:%d:0x%x", ii ? "," : "",
      strcmp (hwctr[ii].name, hwctr[ii].int_name) ? hwctr[ii].name : "",
      hwctr[ii].int_name, hwctr[ii].reg_num, hwctr[ii].val,
      min_time, ii, hwctr[ii].timecvt, hwctr[ii].memop);
 }
      snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), ";");
    }
  if ((time_run != 0) || (start_delay != 0))
    {
      if (start_delay != 0)
 snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "t:%d:%d;", start_delay, time_run);
      else
 snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "t:%d;", time_run);
    }
  if (sample_period != 0)
    snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "S:%d;",
       sample_period);
  if (size_limit != 0)
    snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "L:%d;",
       size_limit);
  if (java_mode != 0)
    snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "j:%d;", (int) java_mode);
  if (follow_mode != FOLLOW_NONE)
    snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "F:%d;", (int) follow_mode);
  snprintf (spec + strlen (spec), sizeof (spec) - strlen (spec), "a:%s;", archive_mode);
  if (strlen (spec) + 1 >= sizeof (spec))
    abort ();
  free (data_desc);
  data_desc = strdup (spec);
}

char *
Coll_Ctrl::check_group ()
{
  char group_file[
# 1804 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 4096
# 1804 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           ];
  if (expt_group == 
# 1805 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 1805 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       )
    return 
# 1806 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
          __null
# 1806 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
              ;

  if ((expt_group[0] == '/') || ((udir_name == 
# 1808 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                              __null
# 1808 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                  ) || (udir_name[0] == '0')))
    snprintf (group_file, sizeof (group_file), "%s", expt_group);
  else
    snprintf (group_file, sizeof (group_file), "%s/%s", udir_name, expt_group);

  int ret = access (group_file, 
# 1813 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                               2
# 1813 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                   );
  if (ret != 0)
    {
      if (
# 1816 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         (*__errno_location ()) 
# 1816 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
               == 
# 1816 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  2
# 1816 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                        )
 {
   char *stmp = group_file;
   char *dir = dirname (stmp);
   ret = access (dir, 
# 1820 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                     2
# 1820 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                         );
   if (ret != 0)
     return dbe_sprintf (gettext("Directory (%s) for group file %s is not writeable: %s\n"),
    dir, group_file, strerror (
# 1823 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                              (*__errno_location ())
# 1823 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                   ));
 }
      else
 return dbe_sprintf (gettext("Group file %s is not writeable: %s\n"),
       group_file, strerror (
# 1827 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                            (*__errno_location ())
# 1827 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                 ));
    }
  return 
# 1829 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 1829 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::join_group ()
{
  int tries = 0;
  int groupfd;
  FILE *file;
  char group_file[
# 1838 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 4096
# 1838 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           ];
  struct stat statbuf;
  struct flock flockbuf;
  flockbuf.l_type = 
# 1841 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   1
# 1841 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                          ;
  flockbuf.l_whence = 
# 1842 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                     0
# 1842 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                             ;
  flockbuf.l_start = 0;
  flockbuf.l_len = 0;
  if (expt_group == 
# 1845 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 1845 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       )
    return 
# 1846 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
          __null
# 1846 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
              ;

  if (expt_group[0] == '/' || udir_name == 
# 1848 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                          __null 
# 1848 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                               || udir_name[0] == '0')
    snprintf (group_file, sizeof (group_file), "%s", expt_group);
  else
      snprintf (group_file, sizeof (group_file), "%s/%s", udir_name, expt_group);
  for (;;)
    {
      tries++;

      while ((groupfd = open (group_file, 
# 1856 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                         02
# 1856 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                               )) >= 0)
 {
   if (uinterrupt == 1)
     {
       close (groupfd);
       return strdup (gettext("user interrupt\n"));
     }

   if (fcntl (groupfd, 
# 1864 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                      6
# 1864 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                             , &flockbuf) != -1)
     {

       if (fstat (groupfd, &statbuf) != 0)
  {

    close (groupfd);
    return dbe_sprintf (gettext("Can't fstat group file %s\n"), group_file);
  }
       if (statbuf.st_size == 0)
  {



    close (groupfd);
    continue;
  }
       else
  {

    file = fdopen (groupfd, "a");
    if (file == 
# 1885 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 1885 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
      {
        close (groupfd);
        return dbe_sprintf (gettext("Can't access group file %s\n"), group_file);
      }
    if (fprintf (file, "%s\n", store_ptr) <= 0)
      {
        fclose (file);
        return dbe_sprintf (gettext("Can't update group file %s\n"), group_file);
      }

    fclose (file);
    return 
# 1897 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
          __null
# 1897 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
              ;
  }
     }
   else
     {

       close (groupfd);
       if (uinterrupt == 1)
  return strdup (gettext("user interrupt\n"));
       if (tries == 11900)
  return dbe_sprintf (gettext("Timed out: waiting for group file %s\n"), group_file);




       usleep (10000U);
       continue;
     }
 }

      if (
# 1917 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         (*__errno_location ()) 
# 1917 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
               != 
# 1917 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  2
# 1917 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                        )
 return dbe_sprintf (gettext("Can't open group file %s: %s\n"),
       group_file, strerror (
# 1919 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                            (*__errno_location ())
# 1919 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                 ));

      groupfd = open (group_file, 
# 1921 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                 0100 
# 1921 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                         | 
# 1921 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                           0200 
# 1921 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                  | 
# 1921 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                                    02
# 1921 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                          , 0666);
      if (groupfd < 0)
 {

   if (
# 1925 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
      (*__errno_location ()) 
# 1925 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            == 
# 1925 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               17
# 1925 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     )
     continue;
   return dbe_sprintf (gettext("Can't create group file %s: %s\n"),
         group_file, strerror (
# 1928 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                              (*__errno_location ())
# 1928 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                   ));
 }

      while (fcntl (groupfd, 
# 1931 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                            7
# 1931 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                    , &flockbuf) == -1)
 {

   if (
# 1934 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
      (*__errno_location ()) 
# 1934 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            != 
# 1934 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               4
# 1934 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
     return dbe_sprintf (gettext("Unable to lock group file %s\n"), group_file);
 }

      file = fdopen (groupfd, "a");
      if (file == 
# 1939 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 1939 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     )
 {
   close (groupfd);
   return dbe_sprintf (gettext("Can't access group file %s\n"), group_file);
 }

      if (fprintf (file, "%s\n", "#analyzer experiment group") <= 0)
 {
   fclose (file);
   return dbe_sprintf (gettext("Can't initialize group file %s\n"), group_file);
 }
      if (fprintf (file, "%s\n", store_ptr) <= 0)
 {
   fclose (file);
   return dbe_sprintf (gettext("Can't update group file %s\n"), group_file);
 }

      fclose (file);
      return 
# 1957 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 1957 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }

}

char *
Coll_Ctrl::set_directory (char *dir, char **warn)
{
  struct stat statbuf;
  *warn = 
# 1966 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         __null
# 1966 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
             ;
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (stat (dir, &statbuf) != 0)
    return dbe_sprintf (gettext("Can't set directory `%s': %s\n"),
   dir, strerror (
# 1971 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 (*__errno_location ())
# 1971 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                      ));
  if (!
# 1972 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
      ((((
# 1972 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
      statbuf.st_mode
# 1972 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
      )) & 0170000) == (0040000))
# 1972 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                               )
    return dbe_sprintf (gettext("Can't set directory `%s': %s\n"),
   dir, strerror (
# 1974 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 20
# 1974 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                        ));
  free (udir_name);
  udir_name = strdup (dir);


  *warn = preprocess_names ();
  if ((uexpt_name != 
# 1980 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                    __null
# 1980 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                        ) || (interactive != 0))
    {
      char *ret = update_expt_name (true, true);
      if (ret != 
# 1983 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 1983 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 {
   if (*warn != 
# 1985 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 1985 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
     {
       char *msg = dbe_sprintf ("%s%s", *warn, ret);
       free (*warn);
       free (ret);
       *warn = msg;
     }
   else
     *warn = ret;
 }
    }
  else
    (void) update_expt_name (false, false);
  return 
# 1998 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 1998 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

int
Coll_Ctrl::set_target (char* targetname)
{
  free (target_name);
  target_name = 
# 2005 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 2005 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   ;
  if (targetname != 
# 2006 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 2006 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       )
    target_name = strdup (targetname);
  return 0;
}

void
Coll_Ctrl::set_default_stem (const char* stem)
{
  default_stem = strdup (stem);
  preprocess_names ();
  (void) update_expt_name (false, false);
}

char *
Coll_Ctrl::set_expt (const char *ename, char **warn, bool overwriteExp)
{
  *warn = 
# 2022 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         __null
# 2022 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
             ;
  if (ename == 
# 2023 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              __null
# 2023 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  )
    {
      free (uexpt_name);
      uexpt_name = 
# 2026 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  __null
# 2026 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                      ;
      return 
# 2027 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2027 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  char *exptname = canonical_path(strdup(ename));
  size_t i = strlen (exptname);
  if (i < 4 || strcmp (&exptname[i - 3], ".er") != 0)
    {
      free (exptname);
      return dbe_sprintf (gettext("Experiment name `%s' must end in `.er'\n"),
     ename);
    }

  free (uexpt_name);
  uexpt_name = exptname;
  preprocess_names ();
  char *err = update_expt_name (true, true, overwriteExp);
  if (err != 
# 2042 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2042 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    return err;
  if (overwriteExp)
    {
      char *nm = dbe_sprintf ("%s/%s", store_dir, base_name);
      struct stat statbuf;
      char *cmd = dbe_sprintf ("/bin/rm -rf %s >/dev/null 2>&1", nm);
      system (cmd);
      free (cmd);
      if (stat (nm, &statbuf) == 0)
 return dbe_sprintf (gettext("Cannot remove experiment `%s'\n"), nm);
      if (
# 2053 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         (*__errno_location ()) 
# 2053 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
               != 
# 2053 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  2
# 2053 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                        )
 return dbe_sprintf (gettext("Cannot remove experiment `%s'\n"), nm);
      free (nm);
    }
  *warn = update_expt_name (true, false);
  return 
# 2058 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 2058 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::set_group (char *groupname)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (expt_group != 
# 2066 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 2066 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       )
    {
      free (expt_group);
      expt_group = 
# 2069 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  __null
# 2069 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                      ;
    }
  if (groupname == 
# 2071 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  __null
# 2071 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                      )
    {

      preprocess_names ();
      (void) update_expt_name (true, false);
      return 
# 2076 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2076 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  int i = (int) strlen (groupname);
  if (i < 5 || strcmp (&groupname[i - 4], ".erg") != 0)
    return dbe_sprintf (gettext("Experiment group name `%s'must end in `.erg'\n"), groupname);
  expt_group = strdup (groupname);
  preprocess_names ();
  (void) update_expt_name (true, false);
  return 
# 2084 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 2084 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::set_java_mode (const char *string)
{
  struct stat statbuf;
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (string == 
# 2093 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 2093 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strlen (string) == 0 || strcmp (string, "on") == 0)
    {
# 2109 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
      return strdup (gettext("gprofng was built without support for profiling Java applications\n"));

    }
  if (strcmp (string, "off") == 0)
    {
      int prev_java_mode = java_mode;
      int prev_java_default = java_default;
      java_mode = 0;
      java_default = 0;
      char *ret = check_consistency ();
      if (ret != 
# 2119 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 2119 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 {
   java_mode = prev_java_mode;
   java_default = prev_java_default;
   return ret;
 }
 free (java_path);
      java_path = 
# 2126 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 2126 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
      return 
# 2127 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2127 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }

  if (stat (string, &statbuf) == 0)
    {
      if ((statbuf.st_mode & 
# 2132 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                            0170000
# 2132 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                  ) == 
# 2132 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                       0040000
# 2132 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                              )
 {

   int prev_java_mode = java_mode;
   int prev_java_default = java_default;
   java_mode = 1;
   java_default = 0;
   char *ret = check_consistency ();
   if (ret != 
# 2140 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 2140 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 )
     {
       java_mode = prev_java_mode;
       java_default = prev_java_default;
       return ret;
     }
   return set_java_path (string);
 }
    }
  return dbe_sprintf (gettext("Java-profiling parameter is neither \"on\", nor \"off\", nor is it a directory: `%s'\n"), string);
}

char *
Coll_Ctrl::set_java_path (const char *string)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  free (java_path);
  java_path = strdup (string);
  return 
# 2159 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 2159 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::set_java_args (char *string)
{
  char *next;
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  char *prev_java_args = java_args;
  if (string == 
# 2169 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 2169 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strlen (string) == 0)
    java_args = strdup ("");
  else
    java_args = strdup (string);

  for (next = java_args; *next; next++)
    {
      if (*next == ' ' || *next == '\t')
 continue;
      njava_args++;
      for (++next; *next; next++)
 if (*next == ' ' || *next == '\t')
   break;
      if (!*next)
 break;
    }
  if (njava_args == 0)
    java_args = 
# 2186 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 2186 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   ;
  char *ret = check_consistency ();
  if (ret != 
# 2188 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2188 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    {
      java_args = prev_java_args;
      return ret;
    }
  free (prev_java_args);
  return 
# 2194 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 2194 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::set_follow_mode (const char *string)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  free (follow_spec_usr);
  free (follow_spec_cmp);
  follow_spec_usr = 
# 2204 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 2204 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       ;
  follow_spec_cmp = 
# 2205 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 2205 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       ;
  if (string == 
# 2206 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 2206 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strlen (string) == 0 || strcmp (string, "all") == 0
      || strcmp (string, "on") == 0)
    {
      follow_mode = FOLLOW_ON;
      follow_default = 0;
      return 
# 2211 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2211 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (strcmp (string, "off") == 0)
    {
      follow_mode = FOLLOW_NONE;
      follow_default = 0;
      return 
# 2217 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2217 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }


  if (string[0] == '=' && string[1] != 0)
    {

      regex_t regex_desc;
      int ercode;
      const char *userspec = &string[1];
      size_t newstrlen = strlen (userspec) + 3;
      char * str = (char *) malloc (newstrlen);
      if (str)
 {
   snprintf (str, newstrlen, "^%s$", userspec);
   
# 2232 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
  (static_cast <bool> (
# 2232 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
  strlen (str) == newstrlen - 1
# 2232 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
  ) ? void (0) : __assert_fail (
# 2232 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
  "strlen (str) == newstrlen - 1"
# 2232 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
  , "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc", 2232, __extension__ __PRETTY_FUNCTION__))
# 2232 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                        ;
   ercode = regcomp (&regex_desc, str, 
# 2233 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                      1 
# 2233 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                   | 
# 2233 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                                     (1 << 3) 
# 2233 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                               | 
# 2233 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                                                 (1 << 2)
# 2233 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                                            );
 }
      else
 ercode = 1;
      if (!ercode)
 {
   follow_spec_usr = strdup (string);



   follow_spec_cmp = str;
   follow_mode = FOLLOW_ALL;
   follow_default = 0;
   return 
# 2246 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         __null
# 2246 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
             ;
 }






      free (str);
    }
  return dbe_sprintf (gettext("Unrecognized follow-mode parameter `%s'\n"), string);
}

char *
Coll_Ctrl::set_prof_idle (const char *string)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (string == 
# 2264 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 2264 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strlen (string) == 0 || strcmp (string, "on") == 0)
    {
      prof_idle = 1;
      return 
# 2267 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2267 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (strcmp (string, "off") == 0)
    {
      prof_idle = 0;
      return 
# 2272 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2272 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  return dbe_sprintf (gettext("Unrecognized profiling idle cpus parameter `%s'\n"), string);
}

char *
Coll_Ctrl::set_archive_mode (const char *string)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (string == 
# 2282 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null 
# 2282 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    || strlen (string) == 0)
    string = "on";
  if (strcasecmp (string, "on") == 0 || strcasecmp (string, "off") == 0
      || strcasecmp (string, "ldobjects") == 0
      || strcasecmp (string, "usedldobjects") == 0
      || strcasecmp (string, "src") == 0 || strcasecmp (string, "usedsrc") == 0
      || strcasecmp (string, "all") == 0)
    {
      free (archive_mode);
      archive_mode = strdup (string);
      return 
# 2292 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2292 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  return dbe_sprintf (gettext("Unrecognized archive-mode parameter `%s'\n"), string);
}

char *
Coll_Ctrl::set_sample_signal (int value)
{
  const char *buf;
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (value == 0)
    {
      sample_sig = 0;
      return 
# 2306 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2306 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (value == pauseresume_sig)
    return report_signal_conflict (value);
  if ((buf = strsignal (value)) != 
# 2310 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                  __null
# 2310 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                      )
    sample_sig = value;
  else
    return dbe_sprintf (gettext("Invalid sample signal %d\n"), value);
  return 
# 2314 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 2314 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}


int
Coll_Ctrl::find_sig (const char *string)
{
  int val;
  char *signame_alloc = 
# 2322 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 2322 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           ;
  const char *signame;
  val = -1;
  if (strcmp (string, "off") == 0)
    return 0;

  if (strncmp (string, "SIG", 3) != 0)
    {

      signame_alloc = (char *) malloc (strlen (string) + 3 + 1);
      if (signame_alloc == 
# 2332 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                          __null
# 2332 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                              )
 return -1;
      strcpy (signame_alloc, "SIG");
      strcpy (&signame_alloc[3], string);
      signame = signame_alloc;
    }
  else
    signame = string;


  char *endchar = 
# 2342 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 2342 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
  val = (int) strtol (signame, &endchar, 0);
  if (*endchar != 0)
    val = strtosigno (signame);
  free (signame_alloc);
  if (val == 
# 2347 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            9
# 2347 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
    return -1;
  return val;
}

char *
Coll_Ctrl::set_pauseresume_signal (int value, int resume)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  if (value == 0)
    {
      pauseresume_sig = 0;
      return 
# 2360 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2360 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (value == sample_sig)
    return report_signal_conflict (value);
  if (strsignal (value) != 
# 2364 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                          __null
# 2364 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                              )
    {
      pauseresume_sig = value;
      pauseresume_pause = resume;
    }
  else
    return dbe_sprintf (gettext("Invalid pause-resume (delayed initialization) signal %d\n"), value);
  return 
# 2371 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 2371 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::report_signal_conflict (int value)
{
  const char *xbuf = strsignal (value);
  if (xbuf != 
# 2378 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 2378 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 )
    return dbe_sprintf (gettext("Signal %s (%d) can not be used for both sample and pause-resume (delayed initialization)\n"),
   xbuf, value);
  return dbe_sprintf (gettext("Signal %d can not be used for both sample and pause-resume (delayed initialization)\n"),
        value);
}

char *
Coll_Ctrl::set_debug_mode (int value)
{
  if (opened == 1)
    return strdup (gettext("Experiment is active; command ignored.\n"));
  debug_mode = value;
  return 
# 2391 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 2391 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}

char *
Coll_Ctrl::create_exp_dir ()
{
  int max = 4095;
  for (int i = 0; i < max; i++)
    {
      if (mkdir (store_ptr,
   
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
  0400 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
          | 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            0200 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    | 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                      0100 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                              | 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                (0400 >> 3) 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                        | 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                          (0100 >> 3) 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                  | 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                                    ((0400 >> 3) >> 3) 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                            | 
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                                              ((0100 >> 3) >> 3)
# 2401 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                                     ) != 0)
 {
   int err = 
# 2403 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            (*__errno_location ())
# 2403 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
   if (err == 
# 2404 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             13
# 2404 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
     return dbe_sprintf (gettext("Store directory %s is not writeable: %s\n"),
    store_dir, strerror (err));
   if (i + 1 >= max)
     return dbe_sprintf (gettext("Unable to create directory `%s' -- %s\n%s: %d\n"),
    store_ptr, strerror (err),
    gettext("collect: Internal error: loop count achieved"),
    max);
   char *ermsg = update_expt_name (false, false, true);
   if (ermsg != 
# 2413 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 2413 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
     {
       char *msg = dbe_sprintf (gettext("Unable to create directory `%s' -- %s\n"),
           store_ptr, ermsg);
       free (ermsg);
       return msg;
     }
   continue;
 }
      return 
# 2422 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2422 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  return dbe_sprintf (gettext("Unable to create directory `%s'\n"), store_ptr);
}

char *
Coll_Ctrl::get_exp_name (const char *stembase)
{
  expno = 1;
  return dbe_sprintf ("%s.%d.er", stembase, expno);
}

char *
Coll_Ctrl::preprocess_names ()
{
  char buf[
# 2437 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
          4096
# 2437 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    ];
  char msgbuf[
# 2438 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             4096
# 2438 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       ];
  char *ret = 
# 2439 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 2439 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;



  if (store_dir != 
# 2443 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  __null
# 2443 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                      )
    {
      free (store_dir);
      store_dir = 
# 2446 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 2446 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
    }
  if (expt_dir != 
# 2448 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 2448 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     )
    {
      free (expt_dir);
      expt_dir = 
# 2451 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 2451 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    ;
    }
  if (base_name != 
# 2453 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  __null
# 2453 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                      )
    {
      free (base_name);
      base_name = 
# 2456 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 2456 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
    }
  if (expt_name != 
# 2458 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  __null
# 2458 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                      )
    {
      free (expt_name);
      expt_name = 
# 2461 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 2461 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
    }
  expno = 1;
  if (uexpt_name != 
# 2464 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   __null
# 2464 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       )
    expt_name = strdup (uexpt_name);
  else
    {

      char *c;
      char *stem;
      char *stembase;
      if (expt_group == 
# 2472 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 2472 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           )
 {
   stem = strdup (default_stem);
   stembase = stem;
 }
      else
 {
   stem = strdup (expt_group);
   stem[strlen (stem) - 4] = 0;
   stembase = stem;

   for (int i = 0;; i++)
     {
       if (stem[i] == 0)
  break;
       if (stem[i] == '/')
  stembase = &stem[i + 1];
     }
   if (strlen (stembase) == 0)
     {
       free (stem);
       stem = strdup (default_stem);
       stembase = stem;
     }
 }
      c = get_exp_name (stembase);
      expt_name = c;
      free (stem);
    }
  snprintf (buf, sizeof (buf), ((char *) ("%s")), expt_name);
  if (buf[0] == '/')
    {

      if (udir_name != 
# 2505 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                      __null
# 2505 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                          )
 {
   snprintf (msgbuf, sizeof (msgbuf),
      gettext("Warning: Experiment name is an absolute path; directory name %s ignored.\n"),
      udir_name);
   ret = strdup (msgbuf);
 }
    }


  int lastslash = 0;
  for (int i = 0;; i++)
    {
      if (buf[i] == 0)
 break;
      if (buf[i] == '/')
 lastslash = i;
    }
  expt_dir = strdup (buf);
  if (lastslash != 0)
    base_name = strdup (&buf[lastslash + 1]);
  else
    base_name = strdup (buf);
  expt_dir[lastslash] = 0;
  if (expt_dir[0] == '/')
    store_dir = strdup (expt_dir);
  else if ((udir_name == 
# 2531 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                        __null
# 2531 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                            ) || (udir_name[0] == 0))
    {
      if (expt_dir[0] == 0)
 store_dir = strdup (".");
      else
 store_dir = strdup (expt_dir);
    }
  else
    {

      if (expt_dir[0] == 0)
 store_dir = strdup (udir_name);
      else
 {
   snprintf (buf, sizeof (buf), "%s/%s", udir_name, expt_dir);
   store_dir = strdup (buf);
 }
    }
  free (store_ptr);
  if (strcmp (store_dir, ".") == 0)
    store_ptr = strdup (base_name);
  else
    {
      snprintf (buf, sizeof (buf), "%s/%s", store_dir, base_name);
      store_ptr = strdup (buf);
    }


  if (strcmp (store_dir, prev_store_dir) != 0)
    {
      free (prev_store_dir);
      prev_store_dir = strdup (store_dir);
      const char *fstype = get_fstype (store_dir);
      if (interactive && enabled && (fstype != 
# 2564 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                              __null
# 2564 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                  ) && (nofswarn == 0))
 {
   snprintf (msgbuf, sizeof (msgbuf),
      gettext("%sExperiment directory is set to a file system of type \"%s\",\n  which may distort the measured performance;\n  it is preferable to record to a local disk.\n"),
      (ret == 
# 2568 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null 
# 2568 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  ? "" : ret), fstype);
   free (ret);
   ret = strdup (msgbuf);
 }
    }
  return ret;
}

char *
Coll_Ctrl::update_expt_name (bool chgmsg, bool chkonly, bool newname)
{
  char *ret = 
# 2579 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 2579 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  struct stat statbuf;


  int count = (int) strlen (base_name);


  if (count < 4 || strcmp (&base_name[count - 3], ".er") != 0)
    abort ();
  int pcount = count - 4;
  if (!newname)
    {
      char fullname[
# 2591 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                   4096
# 2591 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                             ];
      snprintf (fullname, sizeof (fullname), "%s/%s", store_dir, base_name);
      if (stat (fullname, &statbuf) != 0)
 if (
# 2594 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
    (*__errno_location ()) 
# 2594 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
          == 
# 2594 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             2
# 2594 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   )
   return 
# 2595 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         __null
# 2595 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
             ;
    }
  else if (chkonly)
    return 
# 2598 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
          __null
# 2598 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
              ;


  DIR *dir;
  struct dirent *dir_entry;


  int digits = 0;
  while (isdigit ((int) (base_name[pcount])) != 0)
    {
      pcount--;
      if (pcount == 0)
 return dbe_sprintf (gettext("name %s is in use and cannot be updated\n"),
       base_name);
      digits++;
    }
  if (digits == 0)
    return dbe_sprintf (gettext("name %s is in use and cannot be updated\n"),
   base_name);
  if (base_name[pcount] != '.')
    return dbe_sprintf (gettext("name %s is in use and cannot be updated\n"),
   base_name);
  if (chkonly)
    return 
# 2621 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
          __null
# 2621 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
              ;


  char *oldbase = strdup (base_name);


  int version = atoi (&base_name[pcount + 1]);
  if (newname)
    version++;
  int max_version = version - 1;


  base_name[pcount + 1] = 0;
  if ((dir = opendir (store_dir)) == 
# 2634 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                    __null
# 2634 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                        )
    {

      free (oldbase);
      return 
# 2638 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2638 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }




  while ((dir_entry = readdir (dir)) != 
# 2644 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                       __null
# 2644 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                           )
    {
      count = (int) strlen (dir_entry->d_name);
      if ((count < 4) || (strcmp (&dir_entry->d_name[count - 3], ".er") != 0))
 continue;

      if (strncmp (base_name, dir_entry->d_name, pcount + 1) == 0)
 {

   dir_entry->d_name[count - 3] = 0;
   char *lastchar;
   int dversion = (int) strtol (&dir_entry->d_name[pcount + 1], &lastchar, 10);


   if (*lastchar != 0)
     continue;
   if (dversion > max_version)
     max_version = dversion;
 }
    }


  char newbase[
# 2666 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              4096
# 2666 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                        ];
  base_name[pcount + 1] = 0;
  version = max_version + 1;
  snprintf (newbase, sizeof (newbase), "%s%d.er", base_name, version);
  if ((strcmp (oldbase, newbase) != 0) && chgmsg)
    {
      ret = dbe_sprintf (gettext("name %s is in use; changed to %s\n"),
  oldbase, newbase);
      free (oldbase);
    }
  else
    free (oldbase);
  free (base_name);
  base_name = strdup (newbase);


  free (expt_name);
  if (expt_dir[0] == 0)
    expt_name = strdup (base_name);
  else
    expt_name = dbe_sprintf ("%s/%s", expt_dir, base_name);
  free (store_ptr);
  if (strcmp (store_dir, ".") == 0)
    store_ptr = strdup (base_name);
  else
    store_ptr = dbe_sprintf ("%s/%s", store_dir, base_name);
  closedir (dir);
  return ret;
}

void
Coll_Ctrl::remove_exp_dir ()
{
  if (store_ptr == 
# 2699 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  __null
# 2699 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                      )
    return;
  rmdir (store_ptr);
  free (store_ptr);
  store_ptr = 
# 2703 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
             __null
# 2703 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 ;
  return;
}

void
Coll_Ctrl::determine_profile_params ()
{
  struct itimerval itimer;
  struct itimerval otimer;
  int period;
  long nperiod;
  struct sigaction act;
  struct sigaction old_handler;
  memset (&act, 0, sizeof (struct sigaction));
  period = 997;


  sigemptyset (&act.sa_mask);
  act.
# 2721 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
     __sigaction_handler.sa_handler 
# 2721 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                = 
# 2721 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                  ((__sighandler_t) 1)
# 2721 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                         ;
  act.sa_flags = 
# 2722 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                0x10000000 
# 2722 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           | 
# 2722 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                             4
# 2722 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                       ;
  if (sigaction (
# 2723 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                27
# 2723 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                       , &act, &old_handler) == -1)
    {

      fprintf (
# 2726 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              stderr
# 2726 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    , gettext("Can't set SIGPROF: %s\n"), strerror (
# 2726 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                                                  (*__errno_location ())
# 2726 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                                       ));
      exit (1);
    }


  itimer.it_interval.tv_sec = period / 1000000;
  itimer.it_interval.tv_usec = period % 1000000;
  itimer.it_value = itimer.it_interval;
  setitimer (
# 2734 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            ITIMER_PROF
# 2734 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           , &itimer, &otimer);


  itimer.it_value.tv_sec = 0;
  itimer.it_value.tv_usec = 0;
  if (setitimer (
# 2739 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                ITIMER_PROF
# 2739 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                               , &itimer, &otimer) == -1)
    nperiod = -1;
  else
    nperiod = otimer.it_interval.tv_sec * 1000000 + otimer.it_interval.tv_usec;


  if (period == nperiod)
    set_clk_params (500, 1, 1000000, 997, 10007, 100003);
  else if (nperiod < 10000)
    set_clk_params ((int) nperiod, 1000, 1000000, 1000, 10000, 100000);
  else
    set_clk_params (10000, 10000, 1000000, 1000, 10000, 100000);


  if (old_handler.
# 2753 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __sigaction_handler.sa_handler 
# 2753 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                            != 
# 2753 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                               ((__sighandler_t) 0)
# 2753 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                      )
    {
      act.
# 2755 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         __sigaction_handler.sa_handler 
# 2755 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    = old_handler.
# 2755 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                  __sigaction_handler.sa_handler
# 2755 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                            ;
      if (sigaction (
# 2756 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                    27
# 2756 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           , &act, &old_handler) == -1)
 {

   fprintf (
# 2759 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
           stderr
# 2759 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                 , gettext("Can't reset SIGPROF: %s\n"), strerror (
# 2759 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                                                                 (*__errno_location ())
# 2759 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                                                                      ));
   exit (1);
 }
    }
}

const char *
get_fstype (char *)
{
# 2779 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
  return 
# 2779 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
        __null
# 2779 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
            ;
}




const char *ipc_str_exp_limit = "exp_limit";
const char *ipc_str_time_limit = "time_limit";
const char *ipc_str_arch_exp = "arch_exp";
const char *ipc_str_descendant = "descendant";
const char *ipc_str_clkprof = "clkprof";
const char *ipc_str_hwcprof = "hwcprof";
const char *ipc_str_hwc2_prof = "hwc2_prof";
const char *ipc_str_javaprof = "javaprof";
const char *ipc_str_sample = "sample";
const char *ipc_str_sample_sig = "sample_sig";
const char *ipc_str_pause_resume_sig = "pause_resume_sig";
const char *ipc_str_synctrace = "synctrace";
const char *ipc_str_heaptrace = "heaptrace";
const char *ipc_str_iotrace = "iotrace";
const char *ipc_str_count = "count";
const char *ipc_str_prof_idle = "prof_idle";

const char *ipc_str_empty = "";
const char *ipc_str_on = "on";
const char *ipc_str_off = "off";
const char *ipc_str_src = "src";
const char *ipc_str_usedsrc = "usedsrc";
const char *ipc_str_usedldobjects = "usedldobjects";
const char *ipc_str_unlimited = "unlimited";
const char *ipc_str_unknown_control = "Unknown control";
const char *ipc_str_internal_error = "Internal error";






char *
Coll_Ctrl::find_signal_name (int signal)
{
  char *str_signal = 
# 2820 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                    __null
# 2820 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                        ;
  const char *buf = strsignal (signal);
  if (buf != 
# 2822 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 2822 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                )
    str_signal = strdup (buf);
  return str_signal;
}






char *
Coll_Ctrl::get (char * control)
{
  int len = strlen (control);
  if (!strncmp (control, ipc_str_exp_limit, len))
    {
      if ((size_limit > 0))
 return dbe_sprintf ("%d", size_limit);
      return strdup (ipc_str_unlimited);
    }
  if (!strncmp (control, ipc_str_time_limit, len))
    {
      if ((time_run != 0) || (start_delay != 0))
 {
   if (start_delay != 0)
     {
       if (time_run != 0)
  return dbe_sprintf ("%ds-%ds", start_delay, start_delay + time_run);
       return dbe_sprintf ("%ds-0s", start_delay);
     }
   return dbe_sprintf ("0s-%ds", time_run);
 }
      return strdup (ipc_str_unlimited);
    }
  if (strncmp (control, ipc_str_arch_exp, len) == 0)
    return strdup (get_archive_mode ());
  if (!strncmp (control, ipc_str_descendant, len))
    {
      switch (get_follow_mode ())
 {
 case FOLLOW_ON:
   return strdup (ipc_str_on);
 case FOLLOW_ALL:
   return strdup (ipc_str_on);
 case FOLLOW_NONE:
 default:
   return strdup (ipc_str_off);
 }
    }
  if (!strncmp (control, ipc_str_prof_idle, len))
    {
      if (prof_idle == 0)
 return strdup (ipc_str_off);
      return strdup (ipc_str_on);
    }
  if (!strncmp (control, ipc_str_clkprof, len))
    {
      if (clkprof_default == 1 && clkprof_enabled == 1)
 return strdup (ipc_str_empty);
      if (clkprof_enabled == 0)
 return strdup (ipc_str_off);
      if ((clkprof_timer > 0))
 return dbe_sprintf ("%d", clkprof_timer / 1000);
      return strdup (ipc_str_internal_error);
    }
  if (!strncmp (control, ipc_str_hwcprof, len))
    {
      if (hwcprof_enabled_cnt == 0)
 return strdup (ipc_str_off);
      if (hwc_string != 
# 2891 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 2891 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           )
 return dbe_sprintf ("on\n%s", hwc_string);
      return strdup (ipc_str_on);
    }
  if (!strncmp (control, ipc_str_javaprof, len))
    {
      if ((java_mode == 0))
 return strdup (ipc_str_off);
      return strdup (ipc_str_on);
    }
  if (!strncmp (control, ipc_str_sample, len))
    {
      if (sample_default == 1 && sample_period == 1)
 return strdup (ipc_str_empty);
      if (sample_period == 0)
 return strdup (ipc_str_off);
      if (sample_period > 0)
 return dbe_sprintf ("%d", sample_period);
      return strdup (ipc_str_internal_error);
    }
  if (!strncmp (control, ipc_str_sample_sig, len))
    {
      if ((sample_sig == 0))
 return strdup (ipc_str_off);
      char *str_signal = find_signal_name (sample_sig);
      if (str_signal != 
# 2916 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 2916 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           )
 return str_signal;
      return dbe_sprintf (gettext("Invalid sample signal %d\n"), sample_sig);
    }
  if (!strncmp (control, ipc_str_pause_resume_sig, len))
    {
      if (pauseresume_sig == 0)
 return strdup (ipc_str_off);
      char *str_signal = find_signal_name (pauseresume_sig);
      if (str_signal != 
# 2925 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                       __null
# 2925 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                           )
 return str_signal;
      return dbe_sprintf (gettext("Invalid pause/resume signal %d\n"), pauseresume_sig);
    }
  if (!strncmp (control, ipc_str_synctrace, len))
    {
      if (synctrace_enabled == 0)
 return strdup (ipc_str_off);
      if (synctrace_thresh < 0)
 return strdup ("on\nthreshold: calibrate");
      if (synctrace_thresh == 0)
 return strdup ("on\nthreshold: all");
      return dbe_sprintf ("on\nthreshold: %d", synctrace_thresh);
    }
  if (!strncmp (control, ipc_str_heaptrace, len))
    {
      if ((heaptrace_enabled == 0))
 return strdup (ipc_str_off);
      return strdup (ipc_str_on);
    }
  if (!strncmp (control, ipc_str_iotrace, len))
    {
      if ((iotrace_enabled == 0))
 return strdup (ipc_str_off);
      return strdup (ipc_str_on);
    }
  if (!strncmp (control, ipc_str_count, len))
    {
      if ((count_enabled == 0))
 return strdup (ipc_str_off);
      if ((count_enabled < 0))
 return strdup ("on\nstatic");
      return strdup (ipc_str_on);
    }
  return strdup (ipc_str_unknown_control);
}







char *
Coll_Ctrl::set (char * control, const char * value)
{
  char * ret;
  char * warn = 
# 2972 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
               __null
# 2972 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                   ;
  int len = strlen (control);
  if (!strncmp (control, ipc_str_exp_limit, len))
    return set_size_limit (value);
  if (!strncmp (control, ipc_str_time_limit, len))
    return set_time_run (value);
  if (!strncmp (control, ipc_str_arch_exp, len))
    return set_archive_mode (value);
  if (!strncmp (control, ipc_str_descendant, len))
    return set_follow_mode (value);
  if (!strncmp (control, ipc_str_prof_idle, len))
    return set_prof_idle (value);
  if (!strncmp (control, ipc_str_clkprof, len))
    {
      ret = set_clkprof (value, &warn);
      if (ret == 
# 2987 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 2987 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 {
   if (warn != 
# 2989 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              __null
# 2989 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  )
     return warn;
   return 
# 2991 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         __null
# 2991 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
             ;
 }
      return ret;
    }
  if (!strncmp (control, ipc_str_hwcprof, len))
    {
      ret = set_hwcstring (value, &warn);
      if (ret == 
# 2998 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 2998 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 {
   if (warn != 
# 3000 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              __null
# 3000 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  )
     return warn;
   return 
# 3002 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         __null
# 3002 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
             ;
 }
      return ret;
    }
  if (!strncmp (control, ipc_str_hwc2_prof, len))
    {
      ret = set_hwcstring (value, &warn);
      if (ret == 
# 3009 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                __null
# 3009 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                    )
 {
   if (warn != 
# 3011 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
              __null
# 3011 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                  )
     return warn;
   return 
# 3013 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
         __null
# 3013 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
             ;
 }
      return ret;
    }
  if (!strncmp (control, ipc_str_javaprof, len))
    return set_java_mode (value);
  if (!strncmp (control, ipc_str_sample, len))
    return set_sample_period (value);
  if (!strncmp (control, ipc_str_sample_sig, len))
    return set_sample_signal (find_sig (value));
  if (!strncmp (control, ipc_str_pause_resume_sig, len))
    {
      char *str_signal = strdup (value);
      char *str_state = strchr (str_signal, (int) '\n');
      if (str_state != 
# 3027 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                      __null
# 3027 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                          )
 {
   *str_state = 0;
   str_state++;
 }
      int signal = atoi (str_signal);
      int state = 0;
      if (str_state != 
# 3034 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                      __null
# 3034 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                          )
 state = atoi (str_state);
      free (str_signal);
      return set_pauseresume_signal (signal, state);
    }
  if (!strncmp (control, ipc_str_synctrace, len))
    return set_synctrace (value);
  if (!strncmp (control, ipc_str_heaptrace, len))
    return set_heaptrace (value);
  if (!strncmp (control, ipc_str_iotrace, len))
    return set_iotrace (value);
  if (!strncmp (control, ipc_str_count, len))
    return set_count (value);
  return strdup (ipc_str_unknown_control);
}






char *
Coll_Ctrl::unset (char * control)
{
  int len = strlen (control);
  if (!strncmp (control, ipc_str_exp_limit, len))
    size_limit = 0;
  if (!strncmp (control, ipc_str_time_limit, len))
    {
      time_run = 0;
      start_delay = 0;
    }
  if (!strncmp (control, ipc_str_arch_exp, len))
    {
      archive_mode = strdup ("on");
      return 
# 3069 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3069 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (!strncmp (control, ipc_str_descendant, len))
    {
      follow_mode = FOLLOW_NONE;
      return 
# 3074 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3074 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (!strncmp (control, ipc_str_prof_idle, len))
    {
      prof_idle = 1;
      return 
# 3079 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3079 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (!strncmp (control, ipc_str_clkprof, len))
    {
      clkprof_default = 1;
      clkprof_enabled = 1;
      return 
# 3085 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3085 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (!strncmp (control, ipc_str_hwcprof, len))
    {
      setup_hwc ();
      set_hwcdefault ();
      return 
# 3091 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3091 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (!strncmp (control, ipc_str_javaprof, len))
    {
      java_mode = 0;
      java_default = 0;
      free (java_path);
      java_path = 
# 3098 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 3098 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
      free (java_args);
      java_args = 
# 3100 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
                 __null
# 3100 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                     ;
    }
  if (!strncmp (control, ipc_str_sample, len))
    {
      sample_period = 1;
      sample_default = 1;
      return 
# 3106 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3106 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (!strncmp (control, ipc_str_sample_sig, len))
    {
      sample_sig = 0;
      return 
# 3111 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3111 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (!strncmp (control, ipc_str_pause_resume_sig, len))
    {
      pauseresume_sig = 0;
      return 
# 3116 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3116 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (!strncmp (control, ipc_str_synctrace, len))
    {
      synctrace_enabled = 0;
      synctrace_thresh = -1;
      return 
# 3122 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3122 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (!strncmp (control, ipc_str_heaptrace, len))
    {
      heaptrace_enabled = 0;
      return 
# 3127 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3127 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (!strncmp (control, ipc_str_iotrace, len))
    {
      iotrace_enabled = 0;
      return 
# 3132 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3132 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  if (!strncmp (control, ipc_str_count, len))
    {
      count_enabled = 0;
      Iflag = 0;
      Nflag = 0;
      return 
# 3139 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc" 3 4
            __null
# 3139 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.cc"
                ;
    }
  return strdup (ipc_str_unknown_control);
}

void
Coll_Ctrl::set_project_home (char *s)
{
  if (s)
    project_home = strdup (s);
}
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_collctrl.cc" 2
