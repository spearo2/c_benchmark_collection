# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
# 21 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
# 1 "../config.h" 1
# 22 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/usr/include/errno.h" 1 3 4
# 25 "/usr/include/errno.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/errno.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4






# 34 "/usr/include/errno.h" 3 4
extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 23 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 30 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 124 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE,

  TRAP_BRANCH,

  TRAP_HWBKPT,

  TRAP_UNK

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 210 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();



extern int raise (int __sig) throw ();



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) throw ();




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));






extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();





# 1 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 3 4
extern int tgkill (__pid_t __tgid, __pid_t __tid, int __signal);
# 375 "/usr/include/signal.h" 2 3 4

}
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4
extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 353 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 354 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 392 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern "C" {




extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 447 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) throw ();





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 61 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 79 "/usr/include/fcntl.h" 2 3 4
# 148 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 157 "/usr/include/fcntl.h" 3 4
extern int fcntl64 (int __fd, int __cmd, ...);
# 168 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 178 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 192 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 203 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 214 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 243 "/usr/include/fcntl.h" 3 4
extern int lockf (int __fd, int __cmd, off_t __len);
# 252 "/usr/include/fcntl.h" 3 4
extern int lockf64 (int __fd, int __cmd, off64_t __len);







extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) throw ();
# 272 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) throw ();
# 282 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 293 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);







# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 3 4
extern int __open_2 (const char *__path, int __oflag) __attribute__ ((__nonnull__ (1)));
extern int __open_alias (const char *__path, int __oflag, ...) __asm__ ("" "open")
               __attribute__ ((__nonnull__ (1)));






extern void __open_too_many_args (void) __attribute__((__error__ ("open can be called either with 2 or 3 arguments, not more")))
                                                                  ;
extern void __open_missing_mode (void) __attribute__((__error__ ("open with O_CREAT or O_TMPFILE in second argument needs 3 arguments")))
                                                                            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
open (const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __open_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __open_missing_mode ();
   return __open_2 (__path, __oflag);
 }
      return __open_alias (__path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __open_2 (__path, __oflag);

  return __open_alias (__path, __oflag, __builtin_va_arg_pack ());
}



extern int __open64_2 (const char *__path, int __oflag) __attribute__ ((__nonnull__ (1)));
extern int __open64_alias (const char *__path, int __oflag, ...) __asm__ ("" "open64")
                   __attribute__ ((__nonnull__ (1)));
extern void __open64_too_many_args (void) __attribute__((__error__ ("open64 can be called either with 2 or 3 arguments, not more")))
                                                                    ;
extern void __open64_missing_mode (void) __attribute__((__error__ ("open64 with O_CREAT or O_TMPFILE in second argument needs 3 arguments")))
                                                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
open64 (const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __open64_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __open64_missing_mode ();
   return __open64_2 (__path, __oflag);
 }
      return __open64_alias (__path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __open64_2 (__path, __oflag);

  return __open64_alias (__path, __oflag, __builtin_va_arg_pack ());
}





extern int __openat_2 (int __fd, const char *__path, int __oflag)
     __attribute__ ((__nonnull__ (2)));
extern int __openat_alias (int __fd, const char *__path, int __oflag, ...) __asm__ ("" "openat")

     __attribute__ ((__nonnull__ (2)));
# 111 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 3 4
extern void __openat_too_many_args (void) __attribute__((__error__ ("openat can be called either with 3 or 4 arguments, not more")))
                                                                    ;
extern void __openat_missing_mode (void) __attribute__((__error__ ("openat with O_CREAT or O_TMPFILE in third argument needs 4 arguments")))
                                                                             ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
openat (int __fd, const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __openat_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __openat_missing_mode ();
   return __openat_2 (__fd, __path, __oflag);
 }
      return __openat_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __openat_2 (__fd, __path, __oflag);

  return __openat_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
}



extern int __openat64_2 (int __fd, const char *__path, int __oflag)
     __attribute__ ((__nonnull__ (2)));
extern int __openat64_alias (int __fd, const char *__path, int __oflag, ...) __asm__ ("" "openat64")

     __attribute__ ((__nonnull__ (2)));
extern void __openat64_too_many_args (void) __attribute__((__error__ ("openat64 can be called either with 3 or 4 arguments, not more")))
                                                                      ;
extern void __openat64_missing_mode (void) __attribute__((__error__ ("openat64 with O_CREAT or O_TMPFILE in third argument needs 4 arguments")))
                                                                               ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
openat64 (int __fd, const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __openat64_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __openat64_missing_mode ();
   return __openat64_2 (__fd, __path, __oflag);
 }
      return __openat64_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __openat64_2 (__fd, __path, __oflag);

  return __openat64_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
}
# 302 "/usr/include/fcntl.h" 2 3 4


}
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 126 "/usr/include/strings.h" 2 3 4


extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}





# 1 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bcopy (const void *__src, void *__dest, size_t __len) throw ()
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bzero (void *__dest, size_t __len) throw ()
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}
# 145 "/usr/include/strings.h" 2 3 4
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
# 334 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 345 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __attribute__ ((__warn_unused_result__));





extern ssize_t write (int __fd, const void *__buf, size_t __n) __attribute__ ((__warn_unused_result__));
# 376 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) __attribute__ ((__warn_unused_result__));






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) __attribute__ ((__warn_unused_result__));
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) __attribute__ ((__warn_unused_result__));


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) __attribute__ ((__warn_unused_result__));







extern int pipe (int __pipedes[2]) throw () __attribute__ ((__warn_unused_result__));




extern int pipe2 (int __pipedes[2], int __flags) throw () __attribute__ ((__warn_unused_result__));
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () __attribute__ ((__warn_unused_result__));




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchdir (int __fd) throw () __attribute__ ((__warn_unused_result__));
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () __attribute__ ((__warn_unused_result__));





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__));




extern int dup (int __fd) throw () __attribute__ ((__warn_unused_result__));


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () __attribute__ ((__warn_unused_result__));




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () __attribute__ ((__warn_unused_result__));



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () __attribute__ ((__warn_unused_result__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () __attribute__ ((__warn_unused_result__));




extern int seteuid (__uid_t __uid) throw () __attribute__ ((__warn_unused_result__));






extern int setgid (__gid_t __gid) throw () __attribute__ ((__warn_unused_result__));




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () __attribute__ ((__warn_unused_result__));




extern int setegid (__gid_t __gid) throw () __attribute__ ((__warn_unused_result__));





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () __attribute__ ((__warn_unused_result__));



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () __attribute__ ((__warn_unused_result__));






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) __attribute__ ((__warn_unused_result__));




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) __attribute__ ((__warn_unused_result__));


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int sethostid (long int __id) throw () __attribute__ ((__warn_unused_result__));





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () __attribute__ ((__warn_unused_result__));






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 991 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1003 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1014 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () __attribute__ ((__warn_unused_result__));
# 1024 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () __attribute__ ((__warn_unused_result__));
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () __attribute__ ((__warn_unused_result__));





extern void *sbrk (intptr_t __delta) throw ();
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1107 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
      size_t __buflen) __attribute__ ((__warn_unused_result__));
extern ssize_t __read_alias (int __fd, void *__buf, size_t __nbytes) __asm__ ("" "read")
                               __attribute__ ((__warn_unused_result__));
extern ssize_t __read_chk_warn (int __fd, void *__buf, size_t __nbytes, size_t __buflen) __asm__ ("" "__read_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("read called with bigger length than size of " "the destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
read (int __fd, void *__buf, size_t __nbytes)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __read_chk (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));

      if (__nbytes > __builtin_object_size (__buf, 0))
 return __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));
    }
  return __read_alias (__fd, __buf, __nbytes);
}


extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
       __off_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
         __off64_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_alias (int __fd, void *__buf, size_t __nbytes, __off_t __offset) __asm__ ("" "pread")

                                 __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_alias (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")

                                     __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_chk_warn (int __fd, void *__buf, size_t __nbytes, __off_t __offset, size_t __bufsize) __asm__ ("" "__pread_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread called with bigger length than size of " "the destination buffer")))
                                  ;
extern ssize_t __pread64_chk_warn (int __fd, void *__buf, size_t __nbytes, __off64_t __offset, size_t __bufsize) __asm__ ("" "__pread64_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread64 called with bigger length than size of " "the destination buffer")))
                                  ;


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread (int __fd, void *__buf, size_t __nbytes, __off_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));

      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread_chk_warn (__fd, __buf, __nbytes, __offset,
     __builtin_object_size (__buf, 0));
    }
  return __pread_alias (__fd, __buf, __nbytes, __offset);
}
# 104 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread64 (int __fd, void *__buf, size_t __nbytes, __off64_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));

      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread64_chk_warn (__fd, __buf, __nbytes, __offset,
       __builtin_object_size (__buf, 0));
    }

  return __pread64_alias (__fd, __buf, __nbytes, __offset);
}




extern ssize_t __readlink_chk (const char *__restrict __path,
          char *__restrict __buf, size_t __len,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_alias (const char *__restrict __path, char *__restrict __buf, size_t __len) throw () __asm__ ("" "readlink")


     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_chk_warn (const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__readlink_chk")



     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlink called with bigger length " "than size of destination buffer")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__leaf__)) readlink (const char *__restrict __path, char *__restrict __buf, size_t __len) throw ()

{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlink_chk (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if ( __len > __builtin_object_size (__buf, 2 > 1))
 return __readlink_chk_warn (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __readlink_alias (__path, __buf, __len);
}



extern ssize_t __readlinkat_chk (int __fd, const char *__restrict __path,
     char *__restrict __buf, size_t __len,
     size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_alias (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) throw () __asm__ ("" "readlinkat")



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_chk_warn (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__readlinkat_chk")



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlinkat called with bigger " "length than size of destination " "buffer")))

                ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__leaf__)) readlinkat (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) throw ()

{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlinkat_chk (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if (__len > __builtin_object_size (__buf, 2 > 1))
 return __readlinkat_chk_warn (__fd, __path, __buf, __len,
          __builtin_object_size (__buf, 2 > 1));
    }
  return __readlinkat_alias (__fd, __path, __buf, __len);
}


extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
     throw () __attribute__ ((__warn_unused_result__));
extern char *__getcwd_alias (char *__buf, size_t __size) throw () __asm__ ("" "getcwd")
                                              __attribute__ ((__warn_unused_result__));
extern char *__getcwd_chk_warn (char *__buf, size_t __size, size_t __buflen) throw () __asm__ ("" "__getcwd_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getcwd caller with bigger length than size of " "destination buffer")))
                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) getcwd (char *__buf, size_t __size) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size))
 return __getcwd_chk (__buf, __size, __builtin_object_size (__buf, 2 > 1));

      if (__size > __builtin_object_size (__buf, 2 > 1))
 return __getcwd_chk_warn (__buf, __size, __builtin_object_size (__buf, 2 > 1));
    }
  return __getcwd_alias (__buf, __size);
}


extern char *__getwd_chk (char *__buf, size_t buflen)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern char *__getwd_warn (char *__buf) throw () __asm__ ("" "getwd")
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use getcwd instead, as getwd " "doesn't specify buffer size")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) getwd (char *__buf) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    return __getwd_chk (__buf, __builtin_object_size (__buf, 2 > 1));
  return __getwd_warn (__buf);
}


extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
        size_t __buflen) throw ();
extern size_t __confstr_alias (int __name, char *__buf, size_t __len) throw () __asm__ ("" "confstr")
                             ;
extern size_t __confstr_chk_warn (int __name, char *__buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__confstr_chk")


     __attribute__((__warning__ ("confstr called with bigger length than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) confstr (int __name, char *__buf, size_t __len) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __confstr_chk (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if (__builtin_object_size (__buf, 2 > 1) < __len)
 return __confstr_chk_warn (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __confstr_alias (__name, __buf, __len);
}


extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
     throw () __attribute__ ((__warn_unused_result__));
extern int __getgroups_alias (int __size, __gid_t __list[]) throw () __asm__ ("" "getgroups")
                 __attribute__ ((__warn_unused_result__));
extern int __getgroups_chk_warn (int __size, __gid_t __list[], size_t __listlen) throw () __asm__ ("" "__getgroups_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getgroups called with bigger group count than what " "can fit into destination buffer")))
                                           ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) getgroups (int __size, __gid_t __list[]) throw ()
{
  if (__builtin_object_size (__list, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size) || __size < 0)
 return __getgroups_chk (__size, __list, __builtin_object_size (__list, 2 > 1));

      if (__size * sizeof (__gid_t) > __builtin_object_size (__list, 2 > 1))
 return __getgroups_chk_warn (__size, __list, __builtin_object_size (__list, 2 > 1));
    }
  return __getgroups_alias (__size, __list);
}


extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ttyname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ttyname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ttyname_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ttyname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ttyname_r_alias (__fd, __buf, __buflen);
}



extern int __getlogin_r_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_alias (char *__buf, size_t __buflen) __asm__ ("" "getlogin_r")
                     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getlogin_r_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("getlogin_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
getlogin_r (char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getlogin_r_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getlogin_r_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getlogin_r_alias (__buf, __buflen);
}




extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
     throw () __attribute__ ((__nonnull__ (1)));
extern int __gethostname_alias (char *__buf, size_t __buflen) throw () __asm__ ("" "gethostname")
                   __attribute__ ((__nonnull__ (1)));
extern int __gethostname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__gethostname_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("gethostname called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) gethostname (char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __gethostname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __gethostname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __gethostname_alias (__buf, __buflen);
}




extern int __getdomainname_chk (char *__buf, size_t __buflen, size_t __nreal)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_alias (char *__buf, size_t __buflen) throw () __asm__ ("" "getdomainname")

                     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__getdomainname_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getdomainname called with bigger " "buflen than size of destination " "buffer")))

                    ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) getdomainname (char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getdomainname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getdomainname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getdomainname_alias (__buf, __buflen);
}
# 1167 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) throw ();
# 1171 "/usr/include/unistd.h" 2 3 4

}
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/util.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 84 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char *__s) throw () __attribute__ ((__warn_unused_result__));




extern char *tmpnam_r (char *__s) throw () __attribute__ ((__warn_unused_result__));
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) throw () __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () __attribute__ ((__warn_unused_result__));





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                          __attribute__ ((__warn_unused_result__));
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                         __attribute__ ((__warn_unused_result__));
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf")

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);




# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0010) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0020) != 0);
}
# 865 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) throw ();
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...) throw ()
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) throw ();
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...) throw ()

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...) throw ()

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 209 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 243 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}




extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = getc_unlocked (__stream);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 868 "/usr/include/stdio.h" 2 3 4





}
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "/usr/include/c++/9/stdlib.h" 1 3
# 36 "/usr/include/c++/9/stdlib.h" 3
# 1 "/usr/include/c++/9/cstdlib" 1 3
# 39 "/usr/include/c++/9/cstdlib" 3
       
# 40 "/usr/include/c++/9/cstdlib" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 1 3
# 256 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 278 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 528 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/os_defines.h" 1 3
# 529 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/cpu_defines.h" 1 3
# 532 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 2 3
# 42 "/usr/include/c++/9/cstdlib" 2 3
# 75 "/usr/include/c++/9/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () __attribute__ ((__warn_unused_result__));



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 360 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 401 "/usr/include/stdlib.h" 3 4
extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) __attribute__ ((__warn_unused_result__));






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) __attribute__ ((__warn_unused_result__));





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () __attribute__ ((__warn_unused_result__));






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 826 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 1014 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) throw () __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) throw () __asm__ ("" "realpath")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) throw () __asm__ ("" "__realpath_chk")


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved) throw ()
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {




      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }

  return __realpath_alias (__name, __resolved);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ptsname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ptsname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  throw () __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) throw () __asm__ ("" "wctomb")
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__leaf__)) wctomb (char *__s, wchar_t __wchar) throw ()
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw () __asm__ ("" "mbstowcs")


                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__mbstowcs_chk")



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw () __asm__ ("" "wcstombs")


                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__wcstombs_chk")



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
# 1018 "/usr/include/stdlib.h" 2 3 4





}
# 76 "/usr/include/c++/9/cstdlib" 2 3

# 1 "/usr/include/c++/9/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/9/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/9/bits/std_abs.h" 3
# 46 "/usr/include/c++/9/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/c++/9/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "/usr/include/c++/9/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/9/cstdlib" 2 3
# 121 "/usr/include/c++/9/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/9/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/9/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/9/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}
# 99 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 122 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 204 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}
# 261 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 369 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 421 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));





extern char *strerror_l (int __errnum, locale_t __l) throw ();







extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 495 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memmove (void *__dest, const void *__src, size_t __len) throw ()
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 58 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memset (void *__dest, int __ch, size_t __len) throw ()
{
# 71 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}




void __explicit_bzero_chk (void *__dest, size_t __len, size_t __destlen)
  throw () __attribute__ ((__nonnull__ (1)));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) explicit_bzero (void *__dest, size_t __len) throw ()
{
  __explicit_bzero_chk (__dest, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) throw ();
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) throw () __asm__ ("" "stpncpy")
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpncpy (char *__dest, const char *__src, size_t __n) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n > __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcat (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 496 "/usr/include/string.h" 2 3 4



}
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) throw ();
# 395 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));


# 1 "/usr/include/x86_64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4




# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 12 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4






# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4
# 24 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 47 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 6 "/usr/include/linux/stat.h" 2 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 32 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
extern "C" {


int statx (int __dirfd, const char *__restrict __path, int __flags,
           unsigned int __mask, struct statx *__restrict __buf)
  throw () __attribute__ ((__nonnull__ (2, 5)));

}
# 39 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4
# 447 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat (const char *__path, struct stat *__statbuf) throw ()
{
  return __xstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat (const char *__path, struct stat *__statbuf) throw ()
{
  return __lxstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat (int __fd, struct stat *__statbuf) throw ()
{
  return __fxstat (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat (int __fd, const char *__filename, struct stat *__statbuf, int __flag) throw ()

{
  return __fxstatat (1, __fd, __filename, __statbuf, __flag);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknod (const char *__path, __mode_t __mode, __dev_t __dev) throw ()
{
  return __xmknod (0, __path, __mode, &__dev);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknodat (int __fd, const char *__path, __mode_t __mode, __dev_t __dev) throw ()

{
  return __xmknodat (0, __fd, __path, __mode, &__dev);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __xstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __lxstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat64 (int __fd, struct stat64 *__statbuf) throw ()
{
  return __fxstat64 (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf, int __flag) throw ()

{
  return __fxstatat64 (1, __fd, __filename, __statbuf, __flag);
}






}
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 2 3 4
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2

# 1 "./../common/gp-defs.h" 1
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "./../common/gp-time.h" 1
# 24 "./../common/gp-time.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };
# 66 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    void *__restrict __tz) throw () __attribute__ ((__nonnull__ (1)));







extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 187 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 25 "./../common/gp-time.h" 2


# 26 "./../common/gp-time.h"
typedef long long hrtime_t;
typedef struct timespec timestruc_t;






extern "C"
{


  hrtime_t gethrtime (void);
  hrtime_t gethrvtime (void);


}
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h"
# 1 "/usr/include/libintl.h" 1 3 4
# 34 "/usr/include/libintl.h" 3 4

# 34 "/usr/include/libintl.h" 3 4
extern "C" {




extern char *gettext (const char *__msgid)
     throw () __attribute__ ((__format_arg__ (1)));



extern char *dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));



extern char *dcgettext (const char *__domainname,
   const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dcgettext (const char *__domainname,
     const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));




extern char *ngettext (const char *__msgid1, const char *__msgid2,
         unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (1))) __attribute__ ((__format_arg__ (2)));



extern char *dngettext (const char *__domainname, const char *__msgid1,
   const char *__msgid2, unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));



extern char *dcngettext (const char *__domainname, const char *__msgid1,
    const char *__msgid2, unsigned long int __n,
    int __category)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));





extern char *textdomain (const char *__domainname) throw ();



extern char *bindtextdomain (const char *__domainname,
        const char *__dirname) throw ();



extern char *bind_textdomain_codeset (const char *__domainname,
          const char *__codeset) throw ();
# 121 "/usr/include/libintl.h" 3 4
}
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h" 2








# 32 "/doner/binutils/binutils-515f23e/gprofng/src/i18n.h"
extern "C"
{

  void init_locale (char *Path);

}
# 33 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/debug.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/debug.h"
extern unsigned int mpmt_debug_opt;
# 34 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 2
# 45 "/doner/binutils/binutils-515f23e/gprofng/src/util.h"
inline int
max (int a, int b)
{
  return (a >= b) ? a : b;
}


inline int
min (int a, int b)
{
  return (a <= b) ? a : b;
}


inline int
streq (const char *s1, const char *s2)
{
  return strcmp (s1, s2) == 0;
}



inline char *
StrChr (char *str, char ch)
{
  char *s = strchr (str, ch);
  return s ? (s + 1) : str;
}



inline char *
StrRchr (char *str, char ch)
{
  char *s = strrchr (str, ch);
  return s ? (s + 1) : str;
}

inline char*
STR (const char *s)
{
  return s ? (char*) s : (char*) ((char *) ("NULL"));
}

inline char*
get_str (const char *s, const char *s1)
{
  return s ? (char*) s : (char*) s1;
}

inline char *
get_basename (const char* name)
{
  return StrRchr ((char*) name, '/');
}

inline char *
dbe_strdup (const char *str)
{
  return str ? strdup (str) : 
# 104 "/doner/binutils/binutils-515f23e/gprofng/src/util.h" 3 4
                             __null
# 104 "/doner/binutils/binutils-515f23e/gprofng/src/util.h"
                                 ;
}

inline long
dbe_sstrlen (const char *str)
{
  return str ? (long) strlen (str) : 0;
}

inline int
dbe_strcmp (const char *s1, const char *s2)
{
  return s1 ? (s2 ? strcmp (s1, s2) : 1) : (s2 ? -1 : 0);
}


inline double
tstodouble (timestruc_t t)
{
  return (double) t.tv_sec + (double) (t.tv_nsec / 1000000000.0);
}

inline void
hr2timestruc (timestruc_t *d, hrtime_t s)
{
  d->tv_sec = (long) (s / 1000000000);
  d->tv_nsec = (long) (s % 1000000000);
}

inline hrtime_t
timestruc2hr (timestruc_t *s)
{
  return (hrtime_t) s->tv_sec * 1000000000 + (hrtime_t) s->tv_nsec;
}

struct stat64;


extern "C"
{




  void tsadd (timestruc_t *result, timestruc_t *time);
  void tssub (timestruc_t *result, timestruc_t *time1, timestruc_t *time2);
  int tscmp (timestruc_t *time1, timestruc_t *time2);
  void int_max (int *maximum, int count);
  char *strstr_r (char *s1, const char *s2);
  char *strrpbrk (const char *string, const char *brkset);
  char *read_line (FILE *);
  char *parse_qstring (char *in_str, char **endptr);
  char *parse_fname (char *in_str, char **fcontext);
  int get_paren (const char *name);

  uint64_t crc64 (const char *str, size_t len);
  char *canonical_path (char *path);
  char *get_relative_path (char *name);
  char *get_relative_link (const char *path_to, const char *path_from);
  char *get_prog_name (int basename);
  char *dbe_strndup (const char *str, size_t len);
  int dbe_stat (const char *path, struct stat64 *sbuf);
  int dbe_stat_file (const char *path, struct stat64 *sbuf);
  char *dbe_read_dir (const char *path, const char *format);
  char *dbe_get_processes (const char *format);
  char *dbe_create_directories (const char *pathname);
  char *dbe_delete_file (const char *pathname);
  char *dbe_xml2str (const char *s);
  void swapByteOrder (void *p, size_t sz);
  char *dbe_sprintf (const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));
  ssize_t dbe_write (int f, const char *fmt, ...) __attribute__ ((format (printf, 2, 3)));
  char *dbe_create_symlink_to_path (const char *path, const char *dir);
  int64_t read_from_file (int fd, void *buffer, int64_t nbyte);
  uint32_t get_cksum (const char * pathname, char ** errmsg);


}
int catch_out_of_memory (int (*real_main)(int, char*[]), int argc, char *argv[]);
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h" 1
# 40 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_structs.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_structs.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_types.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_types.h"
typedef unsigned long long Size;
typedef unsigned long long Vaddr;

typedef unsigned long long ull_t;
typedef long long ll_t;
typedef unsigned long ul_t;



enum Platform_t
{
  Unknown = 0,
  Sparc,
  Sparcv9,
  Intel,
  Sparcv8plus,
  Java,
  Amd64,
  Aarch64
};

enum WSize_t
{
  Wnone,
  W32,
  W64
};

enum VMode
{
  VMODE_MACHINE = 0,
  VMODE_USER,
  VMODE_EXPERT
};
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_structs.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/enums.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/enums.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h"
# 1 "/usr/include/nl_types.h" 1 3 4
# 30 "/usr/include/nl_types.h" 3 4

# 30 "/usr/include/nl_types.h" 3 4
extern "C" {


typedef void *nl_catd;


typedef int nl_item;





extern nl_catd catopen (const char *__cat_name, int __flag) __attribute__ ((__nonnull__ (1)));



extern char *catgets (nl_catd __catalog, int __set, int __number,
        const char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern int catclose (nl_catd __catalog) throw () __attribute__ ((__nonnull__ (1)));

}
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h" 2
# 62 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h"

# 62 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h"
typedef struct
{
  int32_t srcname;
  int32_t version;
  int32_t msgcount;
  int32_t paramcount;
  int32_t stringcount;
  int32_t stringlen;
} compcomhdr;
# 89 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h"
typedef enum {
CCMV_WANT = 0x000,

CCMV_UNIMPL = 0x000,

CCMV_OBS = 0x000,



CCMV_VER = 0x001,
CCMV_WARN = 0x002,
CCMV_PAR = 0x004,
CCMV_QUERY = 0x008,
CCMV_LOOP = 0x010,
CCMV_PIPE = 0x020,
CCMV_INLINE = 0x040,
CCMV_MEMOPS = 0x080,
CCMV_FE = 0x100,
CCMV_CG = 0x200,
CCMV_BASIC = 0x400,
CCMV_ALL = 0x7FFFFFFF
} COMPCLASS_ID;

typedef enum ccm_msgid
{




CCM_MODDATE=0x00100,
CCM_COMPVER,

CCM_COMPDATE,

CCM_COMPOPT,

CCM_ACOMPOPT,



CCM_VAR_ALIAS=0x00200,
CCM_FBIRDIFF,


CCM_OPTRED_SWAP,

CCM_OPTRED_CPLX,

CCM_UNKNOWN,


CCM_UNPAR_CALL=0x00400,



CCM_PAR_SER,

CCM_PAR_SER_VER,


CCM_PAR_DRECTV,

CCM_APAR,
CCM_AUTOPAR,

CCM_UNPAR_DD,




CCM_UNPAR_DDA,

CCM_UNPAR_ANONDD,

CCM_UNPAR_ANONDDA,

CCM_PAR_WORK,

CCM_UNPAR_EXIT,

CCM_UNPAR_STRNG,

CCM_UNPAR_IO,

CCM_PAR_BODY_NAME,
CCM_UNPAR_NLOOPIDX,

CCM_UNPAR_DRECTV,

CCM_UNPAR_NOTPROFIT,

CCM_UNPAR_NEST,

CCM_UNPAR,
CCM_UNPAR_NOAUTO,

CCM_PR_L_VAR,




CCM_SH_L_VAR,

CCM_TP_L_VAR,

CCM_RV_L_VAR,

CCM_IM_L_VAR,

CCM_PR_O_VAR,

CCM_SH_O_VAR,

CCM_TP_O_VAR,

CCM_RV_O_VAR,

CCM_IM_O_VAR,

CCM_UNPAR_IN_OMP,

CCM_FP_O_VAR,

CCM_LP_O_VAR,

CCM_CP_O_VAR,

CCM_PR_OAS_VAR,

CCM_SH_OAS_VAR,

CCM_FP_OAS_VAR,

CCM_LP_OAS_VAR,

CCM_RV_OAS_VAR,

CCM_FAIL_OAS_VAR,

CCM_SERIALIZE_OAS,

CCM_UNPAR_CALL_2,

CCM_PAR_DRECTV_2,
CCM_APAR_2,
CCM_AUTOPAR_2,

CCM_UNPAR_DD_2,




CCM_UNPAR_DDA_2,

CCM_UNPAR_ANONDD_2,

CCM_UNPAR_ANONDDA_2,

CCM_PAR_WORK_2,

CCM_UNPAR_EXIT_2,

CCM_UNPAR_STRANGE_2,

CCM_UNPAR_IO_2,

CCM_PAR_BODY_NAME_2,

CCM_UNPAR_NLOOPIDX_2,

CCM_UNPAR_DRECTV_2,

CCM_UNPAR_NOTPROFIT_2,

CCM_UNPAR_NEST_2,

CCM_UNPAR_2,
CCM_UNPAR_NOAUTO_2,

CCM_PR_L_VAR_2,




CCM_SH_L_VAR_2,

CCM_TP_L_VAR_2,

CCM_RV_L_VAR_2,

CCM_IM_L_VAR_2,

CCM_PR_O_VAR_2,

CCM_SH_O_VAR_2,

CCM_TP_O_VAR_2,

CCM_RV_O_VAR_2,

CCM_IM_O_VAR_2,

CCM_UNPAR_IN_OMP_2,

CCM_FP_O_VAR_2,

CCM_LP_O_VAR_2,

CCM_CP_O_VAR_2,

CCM_PR_OAS_VAR_2,

CCM_SH_OAS_VAR_2,

CCM_FP_OAS_VAR_2,

CCM_LP_OAS_VAR_2,

CCM_RV_OAS_VAR_2,

CCM_FAIL_OAS_VAR_2,

CCM_SERIALIZE_OAS_2,




CCM_QPERMVEC=0x00800,

CCM_QEXPR,
CCM_QSAFECALL,


CCM_LCOST=0x01000,

CCM_UNROLL,

CCM_IMIX,


CCM_SPILLS,


CCM_LFISSION,
CCM_LPEEL,

CCM_LBLOCKED,

CCM_LTILED,
CCM_LUNRJAM,
CCM_LWHILE2DO,
CCM_L2CALL,
CCM_LDEAD,
CCM_LINTRCHNG,
CCM_FUSEDTO,
CCM_FUSEDFROM,
CCM_VECINTRNSC,




CCM_LSTRIPMINE,
CCM_LNEST2LOOPS,
CCM_LREVERSE,

CCM_IMIX2,



CCM_LUNRFULL,
CCM_ELIM_NOAMORTINST,

CCM_COMP_DALIGN,

CCM_INTIMIX,


CCM_LMULTI_VERSION,

CCM_LCOST_2,
CCM_UNROLL_2,


CCM_IMIX_B,


CCM_SPILLS_2,


CCM_LFISSION_2,




CCM_LFISSION_FRAG,
CCM_LPEEL_2,

CCM_LBLOCKED_2,

CCM_LOUTER_UNROLL,

CCM_LJAMMED,

CCM_LWHILE2DO_2,
CCM_L2CALL_2,
CCM_LDEAD_2,
CCM_LINTRCHNG_2,
CCM_LINTRCHNG_ORDER,





CCM_FUSED_2,
CCM_VECINTRNSC_2,

CCM_LSTRIPMINE_2,
CCM_LNEST2LOOPS_2,
CCM_LREVERSE_2,
CCM_IMIX2_B,



CCM_LUNRFULL_2,
CCM_ELIM_NOAMORTINST_2,

CCM_COMP_DALIGN_2,

CCM_INTIMIX_2,


CCM_OMP_REGION,
CCM_LMICROVECTORIZE,
CCM_LMULTI_VERSION_2,

CCM_LCLONED,
CCM_LUNSWITCHED,

CCM_LRESWITCHED,


CCM_LSKEWBLOCKED,


CCM_IVSUB,
CCM_ONEITER_REPLACED,

CCM_IMIX3_B,





CCM_PIPELINE=0x02000,
CCM_PIPESTATS,

CCM_NOPIPE_CALL,

CCM_NOPIPE_INTCC,

CCM_NOPIPE_MBAR,

CCM_NOPIPE_MNMX,

CCM_NOPIPE_U2FLT,

CCM_NOPIPE_GOT,

CCM_NOPIPE_IDIV,

CCM_NOPIPE_PRFTCH,

CCM_NOPIPE_EXIT,

CCM_NOPIPE_REG,

CCM_NOPIPE_UNS,

CCM_NOPIPE_UNSUIT,
CCM_NOPIPE_INTRINSIC,

CCM_NOPIPE_BIG,
CCM_NOPIPE_INVINTPR,

CCM_NOPIPE_INVFLTPR,

CCM_NOPIPE_INVDBLPR,

CCM_PIPE_SCHEDAFIPR,

CCM_PIPE_SCHEDAFDPR,

CCM_PIPE_SCHEDAFFPR,

CCM_NOPIPE_INTPR,

CCM_NOPIPE_DBLPR,

CCM_NOPIPE_FLTPR,

CCM_PIPELINE_2,
CCM_PIPESTATS_2,

CCM_NOPIPE_CALL_2,

CCM_NOPIPE_INTCC_2,

CCM_NOPIPE_MBAR_2,

CCM_NOPIPE_MNMX_2,

CCM_NOPIPE_U2FLT_2,

CCM_NOPIPE_GOT_2,

CCM_NOPIPE_IDIV_2,

CCM_NOPIPE_PRFTCH_2,

CCM_NOPIPE_EXIT_2,

CCM_NOPIPE_REG_2,

CCM_NOPIPE_UNS_2,

CCM_NOPIPE_UNSUIT_2,
CCM_NOPIPE_INTRINSIC_2,

CCM_NOPIPE_BIG_2,
CCM_NOPIPE_INVINTPR_2,

CCM_NOPIPE_INVFLTPR_2,

CCM_NOPIPE_INVDBLPR_2,

CCM_PIPE_SCHEDAFIPR_2,

CCM_PIPE_SCHEDAFDPR_2,

CCM_PIPE_SCHEDAFFPR_2,

CCM_NOPIPE_INTPR_2,

CCM_NOPIPE_DBLPR_2,

CCM_NOPIPE_FLTPR_2,



CCM_INLINE=0x04000,

CCM_INLINE2,

CCM_INLINE_TMPLT,

CCM_INLINE_TMPLT2,

CCM_INLINE_OUT_COPY,

CCM_NINLINE_REC,

CCM_NINLINE_NEST,

CCM_NINLINE_CMPLX,

CCM_NINLINE_FB,

CCM_NINLINE_PAR,

CCM_NINLINE_OPT,

CCM_NINLINE_USR,


CCM_NINLINE_AUTO,

CCM_NINLINE_CALLS,

CCM_NINLINE_ACTUAL,

CCM_NINLINE_FORMAL,

CCM_NINLINE_TYPE,

CCM_NINLINE_ATYPE,


CCM_NINLINE_RETTYPE,

CCM_NINLINE_EXCPT,

CCM_NINLINE_UNSAFE,

CCM_NINLINE_ALIAS,


CCM_NINLINE_FEMARK,

CCM_NINLINE_RAREX,

CCM_CLONING,


CCM_INLINE_B,


CCM_INLINE2_B,

CCM_INLINE_LOOP,

CCM_NINLINE_MULTIENTRY,

CCM_NINLINE_VARARGS,

CCM_NINLINE_UNSEEN_BODY,


CCM_NINLINE_UPLEVEL,


CCM_NINLINE_CMDLINE,

CCM_NINLINE_CALL_CMPLX,

CCM_NINLINE_LANG_MISMATCH,

CCM_NINLINE_RTN_WEAK,

CCM_NINLINE_CALL_WEAKFILE,


CCM_NINLINE_CALL_TRYCATCH,


CCM_NINLINE_CALL_REGP,

CCM_NINLINE_RTN_REGP,

CCM_NINLINE_CALL_XPENSV,

CCM_NINLINE_READONLYIR,


CCM_NINLINE_CALL_THUNK,


CCM_NINLINE_CALL_XTARGETS,

CCM_NINLINE_SELFTAIL_RECURSIVE,

CCM_NINLINE_PRAGMA,

CCM_NINLINE_CMPLX2,


CCM_NINLINE_RARE,

CCM_NINLINE_PAR2,


CCM_NINLINE_G_LIMIT,



CCM_NINLINE_L_LIMIT,



CCM_NINLINE_REC2,





CCM_NINLINE_FB2,



CCM_NINLINE_CS_CMPLX,



CCM_NINLINE_R_EXCPT,

CCM_NINLINE_ASM,

CCM_NINLINE_R_READONLYIR,


CCM_NINLINE_C_READONLYIR,


CCM_NINLINE_NEVERRETURN,
# 694 "/doner/binutils/binutils-515f23e/gprofng/src/comp_com.h"
CCM_MPREFETCH=0x08000,


CCM_MPREFETCH_LD,


CCM_MPREFETCH_ST,


CCM_MPREFETCH_FB,


CCM_MPREFETCH_FB_LD,



CCM_MPREFETCH_FB_ST,



CCM_MLOAD,


CCM_MSTORE,


CCM_MLOAD_P,



CCM_MSTORE_P,






CCM_COPYIN=0x10000,

CCM_COPYOUT,

CCM_COPYINOUT,

CCM_PADDING,

CCM_PADCOMMON,

CCM_ALIGN_EQ,

CCM_ALIGN_PERF,

CCM_ALIGN_STRUCT,

CCM_TMP_COPY,
CCM_TMP_COPYM,

CCM_PROC_MISMATCH,

CCM_PROC_MISMATCH2,

CCM_PROC_MISMATCH3,

CCM_DO_EXPR,

CCM_AUTO_BND,


CCM_LIT_PAD,

CCM_ARRAY_LOOP,
CCM_ARRAY_LOOPNEST,
CCM_ALIGN_PERF2,

CCM_ALIGN_PERF3,

CCM_IO_LOOP_ARRAY,



CCM_TMPCONST,

CCM_TMPDEST,

CCM_DBL_CONST,
CCM_MINLINE,



CCM_MINLINE2,



CCM_MINLINE3,

CCM_MINLINE4,

CCM_TMP_COPYOUT,
CCM_TMP_COPYOUTM,

CCM_TMP_COPYINOUT,
CCM_TMP_COPYINOUTM,





CCM_ARRAY_LOOP_2,
CCM_ARRAY_LOOPNEST_2,




CCM_IO_LOOP_ARRAY_2,

CCM_USER_LOOP,
CCM_FOUND_LOOP,
CCM_MFUNCTION_LOOP,


CCM_FSIMPLE=0x20000,
CCM_STACK,

CCM_TAILRECUR,

CCM_TAILCALL,
CCM_NI_EXIT_OR_PSEUDO,

CCM_NI_BAD_UNARY_OPC,

CCM_NI_INT_LDD_ON_V9,


CCM_NI_LATE_INL_OPC,

CCM_NI_BAD_IMM_OP,


CCM_NI_BAD_STATELEAF,

CCM_NI_BAD_ASR_19,

CCM_NI_BAD_FSR_USE,


CCM_NI_BAD_REGISTER,

CCM_NI_NO_RET_VAL,

CCM_NI_DELAY,

CCM_NI_SCALL,

CCM_CASE_POSITION,

CCM_CALL_WITH_CODE,

CCM_NI_BAD_SP_ADDR,

CCM_NI_BAD_SP_USAGE,

CCM_NI_MIXED_REG_TYPES,

CCM_LAST
} COMPMSG_ID;




typedef struct
{
  int64_t instaddr;
  int32_t lineno;
  COMPMSG_ID msg_type;
  int32_t nparam;
  int32_t param_index;
} compmsg;


extern "C"
{





  void compcom_p_open (char *srcname, int32_t version);





  int32_t compcom_p_string (char *s);





  void compcom_p_putmsg (int32_t show_bits, int64_t pcoffset, int32_t lineno,
    COMPMSG_ID m, int32_t nparams);




  void compcom_p_finalize ();


}
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/enums.h" 2

enum Cmd_status
{
  CMD_OK = 0,
  CMD_BAD,
  CMD_AMBIGUOUS,
  CMD_BAD_ARG,
  CMD_OUTRANGE,
  CMD_INVALID
};

enum LibExpand
{
  LIBEX_SHOW = 0,
  LIBEX_HIDE = 1,
  LIBEX_API = 2
};

enum SrcVisible
{
  SRC_NA = 0,
  SRC_CODE = 1,
  SRC_METRIC = 2
};

enum MetricType
{
  MET_NORMAL = 0,
  MET_CALL,
  MET_DATA,
  MET_INDX,
  MET_CALL_AGR,
  MET_COMMON,
  MET_IO,
  MET_SRCDIS,
  MET_HEAP
};

enum ValueType
{
  VAL_NA = 0,
  VAL_TIMEVAL = 1,
  VAL_VALUE = 2,
  VAL_PERCENT = 4,
  VAL_DELTA = 8,
  VAL_RATIO = 16,
  VAL_INTERNAL = 32,
  VAL_HIDE_ALL = 64
};

enum CompCom
{
  COMP_SRC = CCMV_BASIC + 1,
  COMP_SRC_METRIC,
  COMP_NOSRC,
  COMP_HEX,
  COMP_NOHEX,
  COMP_THRESHOLD,
  COMP_CMPLINE,
  COMP_FUNCLINE
};

enum TLStack_align
{
  TLSTACK_ALIGN_ROOT = 1,
  TLSTACK_ALIGN_LEAF
};

enum Reorder_status
{
  REORDER_SUCCESS,
  REORDER_FAIL,
  REORDER_ZERO,
  REORDER_ONE_FUNC,
  REORDER_FILE_OPEN,
  REORDER_FILE_WRITE,
  REORDER_COMP,
  REORDER_NO_LOAD_OBJ,
  REORDER_NO_OBJECT,
  REORDER_INVALID
};

enum AnUtility_state
{
  EXP_SUCCESS = 0,
  EXP_FAILURE = 1,
  EXP_INCOMPLETE = 2,
  EXP_BROKEN = 4,
  EXP_OBSOLETE = 8
};

enum Presentation_align_type
{
  TEXT_LEFT = 1,
  TEXT_CENTER = 2,
  TEXT_RIGHT = 3
};

enum Message_type
{
  ERROR_MSG = 1,
  WARNING_MSG = 2,
  PSTAT_MSG = 3,
  PWARN_MSG = 4
};

enum Presentation_clock_unit
{
  CUNIT_NULL = -1,
  CUNIT_BYTES = -2,
  CUNIT_TIME = -3
};

enum FuncListDisp_type
{
  DSP_FUNCTION = 1,
  DSP_LINE = 2,
  DSP_PC = 3,
  DSP_SOURCE = 4,
  DSP_DISASM = 5,
  DSP_SELF = 6,
  DSP_CALLER = 7,
  DSP_CALLEE = 8,
  DSP_CALLTREE = 9,
  DSP_TIMELINE = 10,
  DSP_STATIS = 11,
  DSP_EXP = 12,
  DSP_LEAKLIST = 13,
  DSP_MEMOBJ = 14,
  DSP_DATAOBJ = 15,
  DSP_DLAYOUT = 16,
  DSP_SRC_FILE = 17,
  DSP_IFREQ = 18,
  DSP_RACES = 19,
  DSP_INDXOBJ = 20,
  DSP_DUALSOURCE = 21,
  DSP_SOURCE_DISASM = 22,
  DSP_DEADLOCKS = 23,
  DSP_MPI_TL = 24,
  DSP_MPI_CHART = 25,

  DSP_SOURCE_V2 = 27,
  DSP_DISASM_V2 = 28,


  DSP_IOACTIVITY = 31,
  DSP_OVERVIEW = 32,
  DSP_IOVFD = 33,
  DSP_IOCALLSTACK = 34,
  DSP_MINICALLER = 37,
  DSP_HEAPCALLSTACK = 39,
  DSP_CALLFLAME = 40,
  DSP_SAMPLE = 99
};

enum CmpMode
{
  CMP_DISABLE = 0,
  CMP_ENABLE = 1,
  CMP_RATIO = 2,
  CMP_DELTA = 4
};

enum PrintMode
{
  PM_TEXT = 0,
  PM_HTML = 1,
  PM_DELIM_SEP_LIST = 2
};
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_structs.h" 2

typedef enum
{
  Sp_lang_unknown = 0,
  Sp_lang_asm = 1,
  Sp_lang_c = 2,
  Sp_lang_ansic = 3,
  Sp_lang_cplusplus = 4,
  Sp_lang_fortran = 5,
  Sp_lang_pascal = 6,
  Sp_lang_fortran90 = 7,
  Sp_lang_java = 8,
  Sp_lang_c99 = 9,
  Sp_lang_gcc = 16,
  Sp_lang_KAI_KPTS = 32,
  Sp_lang_KAI_KCC = 33,
  Sp_lang_KAI_Kcc = 34
} Sp_lang_code;

struct Value
{
  union
  {
    short s;
    int i;
    float f;
    double d;
    timestruc_t t;
    char *l;
    unsigned long long ll;
  };
};


enum ValueTag
{
  VT_SHORT = 1,
  VT_INT,
  VT_LLONG,
  VT_FLOAT,
  VT_DOUBLE,
  VT_HRTIME,
  VT_LABEL,
  VT_ADDRESS,
  VT_OFFSET,
  VT_ULLONG
};


struct TValue
{
  ValueTag tag;
  bool sign;
  union
  {
    short s;
    int i;
    float f;
    double d;
    char *l;
    void *p;
    long long ll;
    unsigned long long ull;
  };
  double to_double ();
  int to_int ();
  char *to_str (char *str, size_t strsz);
  size_t get_len ();
  void make_delta (TValue *v1, TValue *v2);
  void make_ratio (TValue *v1, TValue *v2);
  int compare (TValue *v);
};





struct Collection_params
{
  int profile_mode;
  long long ptimer_usec;
  int lms_magic_id;
  int sync_mode;
  int sync_threshold;
  int sync_scope;

  int heap_mode;
  int io_mode;
  int race_mode;
  int race_stack;
  int deadlock_mode;
  int omp_mode;

  int hw_mode;
  int xhw_mode;

  char *hw_aux_name[64];
  char *hw_username[64];
  int hw_interval[64];
  int hw_tpc[64];
  int hw_metric_tag[64];
  int hw_cpu_ver[64];

  int sample_periodic;
  int sample_timer;
  int limit;
  const char *pause_sig;
  const char *sample_sig;
  const char *start_delay;
  const char *terminate;
  char *linetrace;
};

const hrtime_t ZERO_TIME = (hrtime_t) 0;
const hrtime_t MAX_TIME = (hrtime_t) 0x7fffffffffffffffLL;
# 153 "/doner/binutils/binutils-515f23e/gprofng/src/dbe_structs.h"
typedef struct
{
  uint64_t text_labelref;
  int32_t entries;
  uint32_t version;
} AnalyzerInfoHdr;

typedef struct
{
  uint32_t offset;
  uint32_t id;
  uint32_t signature;
  uint32_t datatype_id;
} memop_info_t;

typedef struct
{
  uint32_t offset;
} target_info_t;

typedef struct
{
  uint32_t type;
  uint32_t offset;
  union
  {
    memop_info_t *memop;
    target_info_t *target;
  };
} inst_info_t;

class DataObject;

typedef struct
{
  uint32_t datatype_id;
  uint32_t memop_refs;
  uint32_t event_data;
  DataObject *dobj;
} datatype_t;

typedef struct
{
  uint32_t offset;
  uint32_t extent;
  void *parent;
  void *object;
} symbol_t;

typedef struct
{
  char *old_prefix;
  char *new_prefix;
} pathmap_t;

typedef struct
{
  char *libname;
  enum LibExpand expand;
} lo_expand_t;

typedef struct
{
  int index1;
  int index2;
} int_pair_t;
# 41 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Emsg.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/Emsg.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Emsgnum.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/Emsg.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4

# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 2
# 1 "/usr/include/inttypes.h" 1 3 4
# 266 "/usr/include/inttypes.h" 3 4
extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) throw () __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      throw () __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) throw ();


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) throw ();


extern intmax_t wcstoimax (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();


extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     throw ();





extern long int __strtol_internal (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) strtoimax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __strtoul_internal (const char *__restrict __nptr,
          char ** __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) strtoumax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtoul_internal (nptr, endptr, base, 0);
}

extern long int __wcstol_internal (const wchar_t * __restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) wcstoimax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __wcstoul_internal (const wchar_t *
          __restrict __nptr,
          wchar_t **
          __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) wcstoumax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstoul_internal (nptr, endptr, base, 0);
}
# 432 "/usr/include/inttypes.h" 3 4
}
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 2

# 1 "/usr/include/c++/9/stdlib.h" 1 3
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 2







# 34 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
void destroy (void *vec);

typedef int (*CompareFunc)(const void*, const void*);
typedef int (*ExtCompareFunc)(const void*, const void*, const void*);
typedef int (*SearchFunc)(char*, char*);

extern "C"
{
  typedef int (*StdCompareFunc)(const void*, const void*);
}

enum Search_type
{
  LINEAR,
  BINARY,
  HASH
};

enum Direction
{
  FORWARD,
  REVERSE
};

enum VecType
{
  VEC_VOID = 0,
  VEC_INTEGER,
  VEC_CHAR,
  VEC_BOOL,
  VEC_DOUBLE,
  VEC_LLONG,
  VEC_VOIDARR,
  VEC_STRING,
  VEC_INTARR,
  VEC_BOOLARR,
  VEC_LLONGARR,
  VEC_STRINGARR,
  VEC_DOUBLEARR
};

template <class ITEM> void
qsort (ITEM *, size_t, ExtCompareFunc, void *);

template <typename ITEM> class Vector
{
public:

  Vector ()
  {
    count = 0;
    data = 
# 85 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
          __null
# 85 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
              ;
    limit = 0;
    sorted = false;
  };

  Vector (long sz);

  virtual
  ~Vector ()
  {
    free (data);
  }

  void append (const ITEM item);
  void addAll (Vector<ITEM> *vec);
  Vector<ITEM> *copy ();

  ITEM
  fetch (long index)
  {
    return data[index];
  }

  ITEM
  get (long index)
  {
    return data[index];
  }



  long find (const ITEM item);
  long find_r (const ITEM item);



  void insert (long index, const ITEM item);


  void incorporate (const ITEM item, CompareFunc func);



  ITEM remove (long index);


  void swap (long index1, long index2);

  long
  size ()
  {
    return count;
  }


  void store (long index, const ITEM item);

  void
  put (long index, const ITEM item)
  {
    store (index, item);
  }


  void
  sort (CompareFunc compare, void *arg = 
# 150 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
                                        __null
# 150 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                                            )
  {
    qsort (data, count, (ExtCompareFunc) compare, arg);
    sorted = true;
  }


  long bisearch (long start, long end, void *key, CompareFunc func);
  void destroy ();

  void
  reset ()
  {
    count = 0;
    sorted = false;
  }

  bool
  is_sorted ()
  {
    return sorted;
  }

  virtual VecType
  type ()
  {
    return VEC_VOID;
  }

  virtual void
  dump (const char * )
  {
    return;
  }

private:

  void resize (long index);

  ITEM *data;
  long count;
  long limit;
  bool sorted;
};

template<> VecType Vector<int>::type ();
template<> VecType Vector<unsigned>::type ();
template<> VecType Vector<char>::type ();
template<> VecType Vector<bool>::type ();
template<> VecType Vector<double>::type ();
template<> VecType Vector<long long>::type ();
template<> VecType Vector<uint64_t>::type ();
template<> VecType Vector<void*>::type ();
template<> VecType Vector<char*>::type ();
template<> VecType Vector<Vector<int>*>::type ();
template<> VecType Vector<Vector<char*>*>::type ();
template<> VecType Vector<Vector<long long>*>::type ();
template<> void Vector<char *>::destroy ();
# 220 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
template <typename ITEM>
Vector<ITEM>::Vector (long sz)
{
  count = 0;
  limit = sz > 0 ? sz : 1024;
  data = limit ? (ITEM *) malloc (sizeof (ITEM) * limit) : 
# 225 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
                                                          __null
# 225 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                                                              ;
  sorted = false;
}

template <typename ITEM> void
Vector<ITEM>
::resize (long index)
{
  if (index < limit)
    return;
  if (limit < 16)
    limit = 16;
  while (index >= limit)
    {
      if (limit > 1024*1024*1024)
 limit += 1024*1024*1024;
      else
 limit = limit * 2;
    }
  data = (ITEM *) realloc (data, limit * sizeof (ITEM));
}

template <typename ITEM> void
Vector<ITEM>::append (const ITEM item)
{

  if (count >= limit)
    resize (count);
  data[count++] = item;
}

template <typename ITEM> void
Vector<ITEM>::addAll (Vector<ITEM> *vec)
{
  if (vec)
    for (int i = 0, sz = vec->size (); i < sz; i++)
      append (vec->fetch (i));
}

template <typename ITEM> Vector<ITEM> *
Vector<ITEM>::copy ()
{

  Vector<ITEM> *vector;
  vector = new Vector<ITEM>;
  vector->count = count;
  vector->limit = limit;
  vector->data = (ITEM *) malloc (sizeof (ITEM) * limit);
  (void) memcpy ((char *) vector->data, (char *) data, sizeof (ITEM) * count);
  return vector;
}

template <typename ITEM> long
Vector<ITEM>::find (const ITEM match_item)
{
  for (long i = 0; i < size (); i++)
    if (match_item == get (i))
      return i;
  return -1;
}

template <typename ITEM> long
Vector<ITEM>::find_r (const ITEM match_item)
{
  for (long i = size () - 1; i >= 0; i--)
    if (match_item == get (i))
      return i;
  return -1;
}

template <typename ITEM> void
Vector<ITEM>::insert (long index, const ITEM item)
{





  
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 (static_cast <bool> (
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 index >= 0
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 ) ? void (0) : __assert_fail (
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 "index >= 0"
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/vec.h", 303, __extension__ __PRETTY_FUNCTION__))
# 303 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                    ;
  
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 (static_cast <bool> (
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 index <= count
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 ) ? void (0) : __assert_fail (
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 "index <= count"
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/vec.h", 304, __extension__ __PRETTY_FUNCTION__))
# 304 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                        ;
  append (item);
  (void) memmove (((char *) (&data[index + 1])), (char *) (&data[index]),
    (count - index - 1) * sizeof (ITEM));
  data[index] = item;
}

template <typename ITEM> ITEM
Vector<ITEM>::remove (long index)
{


  
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 (static_cast <bool> (
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 index >= 0
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 ) ? void (0) : __assert_fail (
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 "index >= 0"
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/vec.h", 316, __extension__ __PRETTY_FUNCTION__))
# 316 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                    ;
  
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 (static_cast <bool> (
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 index < count
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 ) ? void (0) : __assert_fail (
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
 "index < count"
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/vec.h", 317, __extension__ __PRETTY_FUNCTION__))
# 317 "/doner/binutils/binutils-515f23e/gprofng/src/vec.h"
                       ;
  ITEM item = data[index];
  for (long i = index + 1; i < count; i++)
    data[i - 1] = data[i];
  count--;

  data[count] = item;
  return data[count];
}

template <typename ITEM> void
Vector<ITEM>::swap (long index1, long index2)
{
  ITEM item;
  item = data[index1];
  data[index1] = data[index2];
  data[index2] = item;
}

template <typename ITEM> void
Vector<ITEM>::store (long index, const ITEM item)
{
  if (index >= count)
    {
      resize (index);
      memset (&data[count], 0, (index - count) * sizeof (ITEM));
      count = index + 1;
    }
  data[index] = item;
}







template <typename ITEM> long
Vector<ITEM>::bisearch (long start, long end, void *key, CompareFunc compare)
{
  ITEM *itemp;
  if (end == -1)
    end = count;
  if (start >= end)
    return -1;
  itemp = (ITEM *) bsearch ((char *) key, (char *) &data[start],
     end - start, sizeof (ITEM), (StdCompareFunc) compare);
  if (itemp == (ITEM *) 0)
    return -1;
  return (long) (itemp - data);
}

template <typename ITEM> void
Vector<ITEM>::incorporate (const ITEM item, CompareFunc compare)
{
  long lt = 0;
  long rt = count - 1;
  while (lt <= rt)
    {
      long md = (lt + rt) / 2;
      if (compare (data[md], item) < 0)
 lt = md + 1;
      else
 rt = md - 1;
    }
  if (lt == count)
    append (item);
  else
    insert (lt, item);
}



template <typename ITEM> void
qsort (ITEM *base, size_t nelem, ExtCompareFunc qcmp, void *arg)
{
  for (;;)
    {

      if (nelem < 6)
 {
   for (size_t i = 1; i < nelem; i++)
     {
       ITEM *p = base + i;
       ITEM *q = p - 1;
       if (qcmp (q, p, arg) > 0)
  {
    ITEM t = *p;
    *p = *q;
    while (q > base && qcmp (q - 1, &t, arg) > 0)
      {
        *q = *(q - 1);
        --q;
      }
    *q = t;
  }
     }
   return;
 }

      ITEM *last = base + nelem - 1;
      ITEM *mid = base + nelem / 2;

      ITEM *a1 = base, *a2, *a3;
      if (qcmp (base, mid, arg) > 0)
 {
   if (qcmp (mid, last, arg) > 0)
     {
       a2 = last;
       a3 = last;
     }
   else if (qcmp (base, last, arg) > 0)
     {
       a2 = mid;
       a3 = last;
     }
   else
     {
       a2 = mid;
       a3 = mid;
     }
 }
      else if (qcmp (mid, last, arg) > 0)
 {
   a1 = mid;
   a3 = last;
   if (qcmp (base, last, arg) > 0)
     a2 = base;
   else
     a2 = a3;
 }
      else
 a3 = a2 = a1;
      if (a1 != a2)
 {
   ITEM t = *a1;
   *a1 = *a2;
   if (a2 != a3)
     *a2 = *a3;
   *a3 = t;
 }


      ITEM *i = base + 1;
      ITEM *j = last - 1;
      for (;;)
 {
   while (i < mid && qcmp (i, mid, arg) <= 0)
     i++;
   while (j > mid && qcmp (mid, j, arg) <= 0)
     j--;
   if (i == j)
     break;
   ITEM t = *i;
   *i = *j;
   *j = t;
   if (i == mid)
     {
       mid = j;
       i++;
     }
   else if (j == mid)
     {
       mid = i;
       j--;
     }
   else
     {
       i++;
       j--;
     }
 }



      size_t nleft = mid - base;
      size_t nright = nelem - nleft - 1;
      if (nleft <= nright)
 {
   qsort (base, nleft, qcmp, arg);
   base = mid + 1;
   nelem = nright;
 }
      else
 {
   qsort (mid + 1, nright, qcmp, arg);
   nelem = nleft;
 }
    }
}

template<> inline void
Vector<char*>::destroy ()
{
  for (long i = 0; i < count; i++)
    free (data[i]);
  count = 0;
}

template <typename ITEM> inline void
Vector<ITEM>::destroy ()
{
  for (long i = 0; i < count; i++)
    delete data[i];
  count = 0;
}
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/Emsg.h" 2
# 35 "/doner/binutils/binutils-515f23e/gprofng/src/Emsg.h"
class Emsg;
class Emsgqueue;
class StringBuilder;

typedef enum
{
  CMSG_WARN = 0,
  CMSG_ERROR,
  CMSG_FATAL,
  CMSG_COMMENT,
  CMSG_PARSER,
  CMSG_ARCHIVE
} Cmsg_warn;

class Emsg
{
public:
  friend class Emsgqueue;

  Emsg (Cmsg_warn w, const char *i18n_text);
  Emsg (Cmsg_warn w, StringBuilder& sb);
  Emsg (Cmsg_warn w, int f, const char *param);
  ~Emsg ();

  char *
  get_msg ()
  {
    return text;
  };

  Cmsg_warn
  get_warn ()
  {
    return warn;
  };

  Emsg *next;

protected:
  Cmsg_warn warn;
  int flavor;
  char *par;
  char *text;
};

class Emsgqueue
{
public:
  Emsgqueue (char *);
  ~Emsgqueue ();

  void append (Emsg*);
  Emsg *append (Cmsg_warn w, char *msg);
  Emsg *find_msg (Cmsg_warn w, char *msg);
  void appendqueue (Emsgqueue*);
  Emsg *fetch (void);
  void clear (void);
  void mark_clear (void);

protected:
  Emsg *first;
  Emsg *last;
  char *qname;
};

class DbeMessages
{
public:
  DbeMessages ();
  ~DbeMessages ();
  Vector<Emsg*> *msgs;
  void remove_msg (Emsg *msg);
  Emsg *get_error ();
  Emsg *append_msg (Cmsg_warn w, const char *fmt, ...);
  void append_msgs (Vector<Emsg*> *lst);
};
# 42 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Expression.h" 1
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/Expression.h"
class Experiment;
class DataView;
class DbeView;
class Histable;

class Expression
{
public:

  class Context
  {
  public:
    Context (DbeView *_dbev, Experiment *_exp = 0);
    Context (DbeView *_dbev, Experiment *_exp, DataView *_dview, long _eventId);

    ~Context () { };

    void
    put (DataView *d, long id)
    {
      dview = d;
      eventId = id;
    };

    void
    put (Experiment *_exp)
    {
      exp = _exp;
    };

    Experiment *exp;
    DataView *dview;
    DbeView *dbev;
    long eventId;
  };

  enum OpCode
  {
    OP_NONE,
    OP_QWE,
    OP_COLON,
    OP_OR,
    OP_AND,
    OP_NOT,
    OP_EQV,
    OP_NEQV,
    OP_BITOR,
    OP_BITAND,
    OP_BITXOR,
    OP_BITNOT,
    OP_EQ,
    OP_NE,
    OP_LT,
    OP_GT,
    OP_LE,
    OP_GE,
    OP_LS,
    OP_RS,
    OP_ADD,
    OP_MINUS,
    OP_MUL,
    OP_DIV,
    OP_REM,
    OP_DEG,
    OP_COMMA,
    OP_IN,
    OP_SOMEIN,
    OP_ORDRIN,
    OP_NUM,
    OP_NAME,
    OP_FUNC,
    OP_FILE,
    OP_JAVA,
    OP_HASPROP,
    OP_LIBRARY_IN,
    OP_LIBRARY_SOMEIN,
    OP_LIBRARY_ORDRIN
  };

  enum FuncCode
  {
    FUNC_FNAME,
    FUNC_DNAME
  };

  enum JavaCode
  {
    JAVA_JGROUP,
    JAVA_JPARENT
  };

  Expression (OpCode, const Expression*, const Expression* = 0);
  Expression (OpCode, uint64_t);
  Expression (const Expression &rhs);
  Expression (const Expression *rhs);
  Expression &operator= (const Expression &rhs);
  ~Expression ();

  Expression *
  copy () const
  {
    return new Expression (this);
  }
  void copy (const Expression *rhs);

  uint64_t
  eval (Context *ctx)
  {
    return bEval (ctx) ? v.val : 0;
  };

  bool
  passes (Context *ctx)
  {
    return bEval (ctx) ? v.val != 0 : true;
  };

  bool
  complete ()
  {
    return op == OP_NUM;
  };

  bool verifyObjectInExpr (Histable *obj);
  Expression *
  pEval (Context *ctx);

private:

  struct Value
  {

    Value (uint64_t _val = 0, Value *_next = 0) : val (_val), next (_next)
    {
      fn = 0;
    }
    uint64_t val;
    uint64_t fn;
    Value *next;
  };

  bool getVal (int propId, Context *ctx);
  bool bEval (Context *ctx);
  bool hasLoadObject ();

  OpCode op;
  Value v;
  Expression *arg0;
  Expression *arg1;
};
# 43 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h" 2

class DataObject;
class Function;
class SourceFile;
class DbeFile;
class DbeLine;
template <class ITEM> class Vector;

class Histable
{
  friend class Hist_data;
public:

  enum Type
  {
    INSTR, LINE, FUNCTION, MODULE, LOADOBJECT,
    EADDR, MEMOBJ, INDEXOBJ, PAGE, DOBJECT,
    SOURCEFILE, IOACTFILE, IOACTVFD, IOCALLSTACK,
    HEAPCALLSTACK, EXPERIMENT, OTHER
  };



  enum NameFormat
  {
    NA, LONG, SHORT, MANGLED, SONAME = 0x10
  };

  static NameFormat
  make_fmt (int fnfmt, bool sofmt = false)
  {
    return (NameFormat) (sofmt ? fnfmt | SONAME : fnfmt);
  }

  static int
  fname_fmt (NameFormat fmt)
  {
    return (fmt & ~SONAME);
  }

  static bool
  soname_fmt (NameFormat fmt)
  {
    return (fmt & SONAME);
  }

  Histable ();
  char *dump ();

  virtual ~Histable ();

  virtual char *
  get_name (NameFormat = NA)
  {
    return name;
  }

  virtual void
  set_name (char * _name)
  {
    name = _name;
  }

  virtual void set_name_from_context (Expression::Context *) { }
  virtual Type get_type () = 0;

  virtual int64_t
  get_size ()
  {
    return 0;
  }

  virtual uint64_t
  get_addr ()
  {
    return 0ULL;
  }

  virtual Vector<Histable*> *get_comparable_objs ();
  Histable *get_compare_obj ();

  virtual Histable *
  convertto (Type, Histable* = 
# 125 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h" 3 4
                              __null
# 125 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h"
                                  )
  {
    return this;
  }

  Vector<Histable*> *comparable_objs;
  int64_t id;

protected:
  char *name;
  int phaseCompareIdx;
  void update_comparable_objs ();
  void dump_comparable_objs ();
  char *type_to_string ();
  void delete_comparable_objs ();
};

typedef Histable::Type Histable_type;


class Other : public Histable
{
public:

  virtual Type
  get_type ()
  {
    return OTHER;
  }

  uint64_t value64;
  uint32_t tag;
};





class DbeInstr : public Histable
{
public:
  DbeInstr (uint64_t _id, int _flags, Function *_func, uint64_t _addr);

  virtual Type
  get_type ()
  {
    return INSTR;
  }

  virtual char *get_name (NameFormat = NA);
  virtual int64_t get_size ();
  virtual uint64_t get_addr ();
  virtual Histable *convertto (Type type, Histable *obj = 
# 177 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h" 3 4
                                                         __null
# 177 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h"
                                                             );
  DbeLine *mapPCtoLine (SourceFile *sf);
  void add_inlined_info (StringBuilder *sb);
  char *get_descriptor ();
  int pc_cmp (DbeInstr *instr2);

  uint64_t addr;
  uint64_t img_offset;
  int flags;
  Function *func;
  int lineno;
  int inlinedInd;
  int64_t size;
  bool isUsed;

private:
  NameFormat current_name_format;
};

class DbeEA : public Histable
{
public:

  DbeEA (DataObject *_dobj, Vaddr _eaddr)
  {
    dobj = _dobj;
    eaddr = _eaddr;
  };

  virtual Type
  get_type ()
  {
    return EADDR;
  };

  virtual int64_t
  get_size ()
  {
    return 1;
  };

  virtual uint64_t
  get_addr ()
  {
    return eaddr;
  };

  virtual char *get_name (NameFormat = NA);
  virtual Histable *convertto (Type type, Histable *obj = 
# 225 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h" 3 4
                                                         __null
# 225 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h"
                                                             );

  DataObject *dobj;
  Vaddr eaddr;
};
# 259 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h"
class DbeLine : public Histable
{
public:

  enum Flag
  {
    OMPPRAGMA = 1
  };

  DbeLine (Function *_func, SourceFile *sf, int _lineno);
  virtual ~DbeLine ();
  virtual char *get_name (NameFormat = NA);
  virtual int64_t get_size ();
  virtual uint64_t get_addr ();
  virtual Histable *convertto (Type type, Histable *obj = 
# 273 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h" 3 4
                                                         __null
# 273 "/doner/binutils/binutils-515f23e/gprofng/src/Histable.h"
                                                             );

  void init_Offset (uint64_t p_offset);
  int line_cmp (DbeLine *dbl);

  virtual Type
  get_type ()
  {
    return LINE;
  }

  void
  set_flag (Flag flag)
  {
    flags |= flag;
  }

  bool
  is_set (Flag flag)
  {
    return (flags & flag) != 0;
  }

  Function *func;
  int lineno;
  int64_t size;
  SourceFile *sourceFile;
  SourceFile *include;

  DbeLine *dbeline_base;







  DbeLine *dbeline_func_next;







private:
  int current_name_format;
  int64_t offset;
  int flags;
};

class HistableFile : public Histable, public DbeMessages
{
public:
  HistableFile ();

  bool isUsed;
  DbeFile *dbeFile;
};
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 1
# 46 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h" 1
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h"
# 1 "./vec.h" 1
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h" 2
# 1 "./Map.h" 1
# 24 "./Map.h"
# 1 "./vec.h" 1
# 25 "./Map.h" 2

template <typename Key_t, typename Value_t>
class Map
{
public:

  enum Relation
  {
    REL_LT,
    REL_LE,
    REL_EQ,
    REL_GE,
    REL_GT
  };

  virtual ~Map () { };
  virtual void put (Key_t key, Value_t val) = 0;
  virtual Value_t get (Key_t key) = 0;
  virtual Value_t get (Key_t key, Relation rel) = 0;
  virtual Value_t remove (Key_t key) = 0;

  virtual Vector<Key_t> *
  keySet ()
  {
    return 
# 49 "./Map.h" 3 4
          __null
# 49 "./Map.h"
              ;
  }

  virtual Vector<Value_t> *
  values ()
  {
    return 
# 55 "./Map.h" 3 4
          __null
# 55 "./Map.h"
              ;
  }
};
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h" 2
# 1 "./HashMap.h" 1
# 27 "./HashMap.h"
# 1 "./util.h" 1
# 28 "./HashMap.h" 2
# 1 "./StringBuilder.h" 1
# 30 "./StringBuilder.h"
class StringBuilder
{
public:
  StringBuilder ();
  StringBuilder (int capacity);
  virtual ~StringBuilder ();

  int
  length ()
  {
    return count;
  }

  int
  capacity ()
  {
    return maxCapacity;
  }

  bool endsWith (const char str[]);
  void ensureCapacity (int minimumCapacity);
  void expandCapacity (int minimumCapacity);
  void trimToSize ();
  void trim ();
  void setLength (int newLength);
  char charAt (int index);
  void getChars (int srcBegin, int srcEnd, char dst[], int dstBegin);
  void setCharAt (int index, char ch);
  StringBuilder *append (StringBuilder *sb);
  StringBuilder *append (const char str[]);
  StringBuilder *append (const char str[], int offset, int len);
  StringBuilder *append (bool b);
  StringBuilder *append (char c);
  StringBuilder *append (int i);
  StringBuilder *append (unsigned int i);
  StringBuilder *append (long lng);
  StringBuilder *append (unsigned long i);
  StringBuilder *append (long long lng);
  StringBuilder *append (unsigned long long lng);
  StringBuilder *append (float f);
  StringBuilder *append (double d);
  StringBuilder *_delete (int start, int end);
  StringBuilder *deleteCharAt (int index);
  StringBuilder *insert (int index, const char str[], int offset, int len);
  StringBuilder *insert (int offset, const char str[]);
  StringBuilder *insert (int offset, bool b);
  StringBuilder *insert (int offset, char c);
  StringBuilder *insert (int offset, int i);
  StringBuilder *insert (int offset, long l);
  StringBuilder *insert (int offset, float f);
  StringBuilder *insert (int offset, double d);
  StringBuilder *reverse ();
  char *toString ();
  void toFile (FILE *fp);
  void toFileLn (FILE *fp);
  void write (int fd);


  StringBuilder *appendf (const char *fmt, ...) __attribute__ ((format (printf, 2, 3)));
  StringBuilder *sprintf (const char *fmt, ...) __attribute__ ((format (printf, 2, 3)));

  int indexOf (const char str[]);
  int indexOf (const char str[], int fromIndex);
  int lastIndexOf (const char str[]);
  int lastIndexOf (const char str[], int fromIndex);

private:
  char *value;
  int count;
  int maxCapacity;
};
# 29 "./HashMap.h" 2
# 1 "./Histable.h" 1
# 30 "./HashMap.h" 2
# 1 "./MemObject.h" 1
# 27 "./MemObject.h"
class MemObj : public Histable
{
public:
  friend class MemorySpace;

  MemObj (uint64_t _index, char *_name);
  ~MemObj ();

  virtual Histable *convertto (Histable_type, Histable* = 
# 35 "./MemObject.h" 3 4
                                                         __null
# 35 "./MemObject.h"
                                                             );

  virtual Histable_type
  get_type ()
  {
    return MEMOBJ;
  }

  virtual char *
  get_name (NameFormat = NA)
  {
    return dbe_strdup (name);
  }

  virtual uint64_t
  get_addr ()
  {
    return id;
  }

  uint64_t
  get_index ()
  {
    return id;
  }
};
# 31 "./HashMap.h" 2

template <typename Key_t> inline int get_hash_code (Key_t a);
template <typename Key_t> inline bool is_equals (Key_t a, Key_t b);
template <typename Key_t> inline Key_t copy_key (Key_t a);
template <typename Key_t> inline void delete_key (Key_t a);


template<> inline int
get_hash_code (char *a)
{
  return (int) (crc64 (a, strlen (a)) & 0x7fffffff);
}

template<> inline bool
is_equals (char *a, char *b)
{
  return dbe_strcmp (a, b) == 0;
}

template<> inline char *
copy_key (char *a)
{
  return dbe_strdup (a);
}

template<> inline void
delete_key (char *a)
{
  return free (a);
}

template<> inline int
get_hash_code (uint64_t a)
{
  return (int) (a & 0x7fffffff);
}

template<> inline bool
is_equals (uint64_t a, uint64_t b)
{
  return a == b;
}

template<> inline uint64_t
copy_key (uint64_t a)
{
  return a;
}

template<> inline void
delete_key (uint64_t a)
{
  a = a;
}

template<> inline int
get_hash_code (Histable* a)
{
  return (int) (a->id & 0x7fffffff);
}

template<> inline bool
is_equals (Histable* a, Histable* b)
{
  return a == b;
}

template<> inline Histable*
copy_key (Histable* a)
{
  return a;
}

template<> inline void
delete_key (Histable* a)
{
  a->id = a->id;
}

template<> inline int
get_hash_code (MemObj* a)
{
  return (int) (a->id & 0x7fffffff);
}

template<> inline bool
is_equals (MemObj* a, MemObj* b)
{
  return a == b;
}

template<> inline MemObj*
copy_key (MemObj* a)
{
  return a;
}

template<> inline void
delete_key (MemObj* a)
{
  a->id = a->id;
}

template <typename Key_t, typename Value_t>
class HashMap
{
public:
  HashMap (int initialCapacity = 0);

  ~HashMap ()
  {
    clear ();
    delete vals;
    delete[] hashTable;
  }

  Value_t put (Key_t key, Value_t val);
  Value_t get (Key_t key);
  Value_t get (Key_t key, Value_t val);
  void clear ();
  Value_t remove (Key_t);
  Vector<Value_t> *values (Key_t key);

  bool
  containsKey (Key_t key)
  {
    Value_t p = get (key);
    return p != 
# 158 "./HashMap.h" 3 4
               __null
# 158 "./HashMap.h"
                   ;
  };

  Vector<Value_t> *
  values ()
  {
    return vals;
  }

  void
  reset ()
  {
    clear ();
  }

  int
  get_phaseIdx ()
  {
    return phaseIdx;
  }

  void
  set_phaseIdx (int phase)
  {
    if (phase == 0) clear ();
    phaseIdx = phase;
  }
  char *dump ();

private:

  enum
  {
    HASH_SIZE = 511,
    MAX_HASH_SIZE = 1048575
  };

  typedef struct Hash
  {
    Key_t key;
    Value_t val;
    struct Hash *next;
  } Hash_t;

  void resize ();

  int
  hashCode (Key_t key)
  {
    return get_hash_code (key) % hash_sz;
  }

  bool
  equals (Key_t a, Key_t b)
  {
    return is_equals (a, b);
  }

  Key_t
  copy (Key_t key)
  {
    return copy_key (key);
  }

  Hash_t **hashTable;
  Vector<Value_t> *vals;
  int phaseIdx;
  int hash_sz;
  int nelem;
};

template <typename Key_t, typename Value_t>
HashMap<Key_t, Value_t>
::HashMap (int initialCapacity)
{
  if (initialCapacity > 0)
    vals = new Vector<Value_t>(initialCapacity);
  else
    vals = new Vector<Value_t>();
  phaseIdx = 0;
  nelem = 0;
  hash_sz = HASH_SIZE;
  hashTable = new Hash_t*[hash_sz];
  for (int i = 0; i < hash_sz; i++)
    hashTable[i] = 
# 242 "./HashMap.h" 3 4
                  __null
# 242 "./HashMap.h"
                      ;
}

template <typename Key_t, typename Value_t>
void
HashMap<Key_t, Value_t>::clear ()
{
  vals->reset ();
  phaseIdx = 0;
  nelem = 0;
  for (int i = 0; i < hash_sz; i++)
    {
      Hash_t *next;
      for (Hash_t *p = hashTable[i]; p; p = next)
 {
   next = p->next;
   delete_key (p->key);
   delete p;
 }
      hashTable[i] = 
# 261 "./HashMap.h" 3 4
                    __null
# 261 "./HashMap.h"
                        ;
    }
}

template <typename Key_t, typename Value_t>
void
HashMap<Key_t, Value_t>::resize ()
{
  int old_hash_sz = hash_sz;
  hash_sz = old_hash_sz * 2 + 1;
  Hash_t **old_hash_table = hashTable;
  hashTable = new Hash_t*[hash_sz];
  for (int i = 0; i < hash_sz; i++)
    hashTable[i] = 
# 274 "./HashMap.h" 3 4
                  __null
# 274 "./HashMap.h"
                      ;
  nelem = 0;
  for (int i = 0; i < old_hash_sz; i++)
    {
      if (old_hash_table[i] != 
# 278 "./HashMap.h" 3 4
                              __null
# 278 "./HashMap.h"
                                  )
 {
   Hash_t *old_p;
   Hash_t *p = old_hash_table[i];
   while (p != 
# 282 "./HashMap.h" 3 4
              __null
# 282 "./HashMap.h"
                  )
     {
       put (p->key, p->val);
       old_p = p;
       p = p->next;
       delete old_p;
     }
 }
    }
  delete[] old_hash_table;
}

template <typename Key_t, typename Value_t>
Value_t
HashMap<Key_t, Value_t>::get (Key_t key)
{
  int hash_code = hashCode (key);
  for (Hash_t *p = hashTable[hash_code]; p; p = p->next)
    if (equals (key, p->key))
      return p->val;
  return 
# 302 "./HashMap.h" 3 4
        __null
# 302 "./HashMap.h"
            ;
}

template <typename Key_t, typename Value_t>
Vector<Value_t> *
HashMap<Key_t, Value_t>::values (Key_t key)
{
  Vector<Value_t> *list = new Vector<Value_t>();
  int hash_code = hashCode (key);
  for (Hash_t *p = hashTable[hash_code]; p; p = p->next)
    {
      if (equals (key, p->key))
 list->append (p->val);
    }
  return list;
}

template <typename Key_t, typename Value_t>
Value_t
HashMap<Key_t, Value_t>::get (const Key_t key, Value_t val)
{
  int hash_code = hashCode (key);
  Hash_t *p, *first = 
# 324 "./HashMap.h" 3 4
                     __null
# 324 "./HashMap.h"
                         ;
  for (p = hashTable[hash_code]; p; p = p->next)
    {
      if (equals (key, p->key))
 {
   if (first == 
# 329 "./HashMap.h" 3 4
               __null
# 329 "./HashMap.h"
                   )
     first = p;
   if (val == p->val)
     return first->val;
 }
    }
  vals->append (val);
  p = new Hash_t ();
  p->val = val;
  p->key = copy (key);
  if (first)
    {
      p->next = first->next;
      first->next = p;
      return first->val;
    }
  else
    {
      p->next = hashTable[hash_code];
      hashTable[hash_code] = p;
      return val;
    }
}

template <typename Key_t, typename Value_t>
Value_t
HashMap<Key_t, Value_t>::remove (Key_t key)
{
  int hash_code = hashCode (key);
  Value_t val = 
# 358 "./HashMap.h" 3 4
               __null
# 358 "./HashMap.h"
                   ;
  for (Hash_t *prev = 
# 359 "./HashMap.h" 3 4
                     __null
# 359 "./HashMap.h"
                         , *p = hashTable[hash_code]; p != 
# 359 "./HashMap.h" 3 4
                                                           __null
# 359 "./HashMap.h"
                                                               ;)
    {
      if (equals (key, p->key))
 {
   if (prev == 
# 363 "./HashMap.h" 3 4
              __null
# 363 "./HashMap.h"
                  )
     hashTable[hash_code] = p->next;
   else
     prev->next = p->next;
   if (val == 
# 367 "./HashMap.h" 3 4
             __null
# 367 "./HashMap.h"
                 )
     val = p->val;
   delete_key (p->key);
   delete p;
 }
      else
 {
   prev = p;
   p = p->next;
 }
    }
  return val;
}

template <typename Key_t, typename Value_t>
Value_t
HashMap<Key_t, Value_t>::put (Key_t key, Value_t val)
{
  int hash_code = hashCode (key);
  vals->append (val);
  for (Hash_t *p = hashTable[hash_code]; p != 
# 387 "./HashMap.h" 3 4
                                             __null
# 387 "./HashMap.h"
                                                 ; p = p->next)
    {
      if (equals (key, p->key))
 {
   Value_t v = p->val;
   p->val = val;
   return v;
 }
    }
  Hash_t *p = new Hash_t ();
  p->val = val;
  p->key = copy (key);
  p->next = hashTable[hash_code];
  hashTable[hash_code] = p;
  nelem++;
  if (nelem == hash_sz)
    resize ();
  return val;
}

template <typename Key_t, typename Value_t>
char *
HashMap<Key_t, Value_t>::dump ()
{
  StringBuilder sb;
  char buf[128];
  snprintf (buf, sizeof (buf), "HashMap: size=%d ##########\n", vals->size ());
  sb.append (buf);
  for (int i = 0; i < hash_sz; i++)
    {
      if (hashTable[i] == 
# 417 "./HashMap.h" 3 4
                         __null
# 417 "./HashMap.h"
                             )
 continue;
      snprintf (buf, sizeof (buf), "%3d:", i);
      sb.append (buf);
      char *s = ((char *) (" "));
      for (Hash_t *p = hashTable[i]; p; p = p->next)
 {
   sb.append (s);
   s = ((char *) ("     "));
   sb.append (p->key);
   snprintf (buf, sizeof (buf), " --> 0x%p '%s'\n",
      p->val, p->val->get_name ());
   sb.append (buf);
 }
    }
  return sb.toString ();
}
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h" 2



# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DerivedMetrics.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/DerivedMetrics.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h"
# 1 "./../common/hwcentry.h" 1
# 27 "./../common/hwcentry.h"
# 1 "/usr/include/c++/9/stdlib.h" 1 3
# 28 "./../common/hwcentry.h" 2
# 1 "./../common/hwc_cpus.h" 1
# 29 "./../common/hwc_cpus.h"
  typedef int regno_t;
# 41 "./../common/hwc_cpus.h"
  enum
  {
    CPUVER_GENERIC = 0,
    CPUVER_UNDEFINED = -1
  };
# 106 "./../common/hwc_cpus.h"
enum {
    ARM_CPU_IMP_ARM = 0x41,
    ARM_CPU_IMP_BRCM = 0x42,
    ARM_CPU_IMP_CAVIUM = 0x43,
    ARM_CPU_IMP_APM = 0x50,
    ARM_CPU_IMP_QCOM = 0x51
};




  typedef struct
  {
    int cpc2_cpuver;
    const char * cpc2_cciname;
  } libcpc2_cpu_lookup_t;
# 29 "./../common/hwcentry.h" 2
# 1 "./../common/gp-time.h" 1
# 30 "./../common/hwcentry.h" 2


extern "C"
{



  typedef enum
  {


    ABST_NONE = 0x0,
    ABST_LOAD = 0x1,
    ABST_STORE = 0x2,
    ABST_LDST = 0x3,
    ABST_COUNT = 0x4,
    ABST_US_DTLBM = 0xF,
    ABST_NOPC = 0x100,
    ABST_CLKDS = 0x103,
    ABST_EXACT = 0x203,
    ABST_LDST_SPARC64 = 0x303,
    ABST_EXACT_PEBS_PLUS1 = 0x403

  } ABST_type;
# 105 "./../common/hwcentry.h"
  typedef struct
  {
    char *name;
    char *int_name;
    regno_t reg_num;
    char *metric;
    volatile int val;
    int timecvt;
    ABST_type memop;
    char *short_desc;
    int type;
    long long config;



    int sort_order;
    regno_t *reg_list;


    hrtime_t min_time;
    hrtime_t min_time_default;
    int ref_val;
    int lval, hval;
  } Hwcentry;
# 143 "./../common/hwcentry.h"
  extern int hwc_lookup (int forKernel, hrtime_t min_time_default,
    const char *uname, Hwcentry *list[], unsigned listsz,
    char **emsg, char **wmsg);
# 190 "./../common/hwcentry.h"
  extern char *hwc_validate_ctrs (int forKernel, Hwcentry *list[], unsigned listsz);




  extern int hwc_get_cpc_cpuver ();





  extern char *hwc_get_docref (char *buf, size_t buflen);



  extern char *hwc_get_default_cntrs ();



  extern char *hwc_get_default_cntrs2 (int forKernel, int style);




  extern char *hwc_get_orig_default_cntrs ();



  extern void hwc_update_val (Hwcentry *ctr);


  extern char *hwc_get_cpuname (char *buf, size_t buflen);


  extern unsigned hwc_get_max_regs ();


  extern unsigned hwc_get_max_concurrent (int forKernel);


  extern char **hwc_get_attrs (int forKernel);






  extern unsigned hwc_scan_attrs (void (*action)(const char *attr,
       const char *desc));
# 248 "./../common/hwcentry.h"
  extern Hwcentry *hwc_post_lookup (Hwcentry * pret_ctr, char *uname,
        char * int_name, int cpc_cpuver);
# 286 "./../common/hwcentry.h"
  extern Hwcentry **hwc_get_std_ctrs (int forKernel);






  extern unsigned hwc_scan_std_ctrs (void (*action)(const Hwcentry *));
# 327 "./../common/hwcentry.h"
  extern Hwcentry **hwc_get_raw_ctrs (int forKernel);






  extern unsigned hwc_scan_raw_ctrs (void (*action)(const Hwcentry *));
# 356 "./../common/hwcentry.h"
  extern void
  hwc_usage (int forKernel, const char *cmd, const char *dataspace_msg);



  extern void hwc_usage_f (int forKernel, FILE *f, const char *cmd,
      const char *dataspace_msg, int show_syntax,
      int show_short_desc);


  extern char *hwc_rate_string (const Hwcentry *pctr, int force_numeric_format);


  extern char *hwc_i18n_metric (const Hwcentry *ctr);
# 386 "./../common/hwcentry.h"
  extern char *hwc_hwcentry_string (char *buf, size_t buflen, const Hwcentry *ctr);
# 397 "./../common/hwcentry.h"
  extern char *hwc_hwcentry_specd_string (char *buf, size_t buflen, const Hwcentry *ctr);
# 408 "./../common/hwcentry.h"
  extern const char *hwc_memop_string (ABST_type memop);





}
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Table.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/Table.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Map2D.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/Map2D.h"
template <typename Key1_t, typename Key2_t, typename Value_t>
class Map2D
{
public:

  enum MapType
  {
    Default,
    Interval
  };


  enum Relation
  {
    REL_EQLT,
    REL_EQLE,
    REL_EQEQ,
    REL_EQGE,
    REL_EQGT
  };

  virtual ~Map2D () { };
  virtual void put (Key1_t key1, Key2_t key2, Value_t val) = 0;
  virtual Value_t get (Key1_t key1, Key2_t key2) = 0;
  virtual Value_t get (Key1_t key1, Key2_t key2, Relation rel) = 0;
  virtual Value_t remove (Key1_t key1, Key2_t key2) = 0;

};
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/Table.h" 2



class FilterExp;
struct PropDescr;
struct FieldDescr;
class PacketDescriptor;
class DataDescriptor;
class DataView;



enum VType_type
{
  TYPE_NONE,
  TYPE_INT32,
  TYPE_UINT32,
  TYPE_INT64,
  TYPE_UINT64,
  TYPE_STRING,
  TYPE_DOUBLE,
  TYPE_OBJ,
  TYPE_DATE,
  TYPE_BOOL,
  TYPE_ENUM,

  TYPE_LAST
};
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/Table.h"
enum ProfData_type
{
  DATA_SAMPLE,
  DATA_GCEVENT,
  DATA_HEAPSZ,
  DATA_CLOCK,
  DATA_HWC,
  DATA_SYNCH,
  DATA_HEAP,
  DATA_MPI,
  DATA_RACE,
  DATA_DLCK,
  DATA_OMP,
  DATA_OMP2,
  DATA_OMP3,
  DATA_OMP4,
  DATA_OMP5,
  DATA_IOTRACE,
  DATA_LAST
};

extern char *get_prof_data_type_name (int t);
extern char *
get_prof_data_type_uname (int t);

enum Prop_type
{
  PROP_NONE,

  PROP_ATSTAMP,

  PROP_ETSTAMP,

  PROP_TSTAMP,

  PROP_THRID,
  PROP_LWPID,
  PROP_CPUID,
  PROP_FRINFO,
  PROP_EVT_TIME,







  PROP_SAMPLE,
  PROP_SMPLOBJ,


  PROP_GCEVENT,
  PROP_GCEVENTOBJ,


  PROP_MSTATE,
  PROP_NTICK,
  PROP_OMPSTATE,
  PROP_MPISTATE,


  PROP_UCPU,
  PROP_SCPU,
  PROP_TRAP,
  PROP_TFLT,
  PROP_DFLT,
  PROP_KFLT,
  PROP_ULCK,
  PROP_TSLP,
  PROP_WCPU,
  PROP_TSTP,


  PROP_SRQST,
  PROP_SOBJ,


  PROP_HWCTAG,
  PROP_HWCINT,
  PROP_VADDR,
  PROP_PADDR,
  PROP_HWCDOBJ,
  PROP_VIRTPC,
  PROP_PHYSPC,
  PROP_EA_PAGESIZE,
  PROP_PC_PAGESIZE,
  PROP_EA_LGRP,
  PROP_PC_LGRP,
  PROP_LWP_LGRP_HOME,
  PROP_PS_LGRP_HOME,
  PROP_MEM_LAT,
  PROP_MEM_SRC,


  PROP_HTYPE,
  PROP_HSIZE,
  PROP_HVADDR,
  PROP_HOVADDR,
  PROP_HLEAKED,
  PROP_HMEM_USAGE,
  PROP_HFREED,
  PROP_HCUR_ALLOCS,
  PROP_HCUR_NET_ALLOC,
  PROP_HCUR_LEAKS,


  PROP_IOTYPE,
  PROP_IOFD,
  PROP_IONBYTE,
  PROP_IORQST,
  PROP_IOOFD,
  PROP_IOFSTYPE,
  PROP_IOFNAME,
  PROP_IOVFD,


  PROP_MPITYPE,
  PROP_MPISCOUNT,
  PROP_MPISBYTES,
  PROP_MPIRCOUNT,
  PROP_MPIRBYTES,


  PROP_CPRID,
  PROP_PPRID,
  PROP_TSKID,
  PROP_PTSKID,
  PROP_PRPC,


  PROP_RTYPE,
  PROP_RID,
  PROP_RVADDR,
  PROP_RCNT,
  PROP_LEAFPC,


  PROP_DID,
  PROP_DTYPE,
  PROP_DLTYPE,
  PROP_DVADDR,


  PROP_STACKID,
  PROP_STACK,
  PROP_MSTACK,
  PROP_USTACK,
  PROP_XSTACK,
  PROP_HSTACK,


  PROP_JTHREAD,
  PROP_LEAF,
  PROP_DOBJ,
  PROP_SAMPLE_MAP,
  PROP_GCEVENT_MAP,
  PROP_PID,
  PROP_EXPID,
  PROP_EXPID_CMP,



  PROP_EXPGRID,
  PROP_PARREG,
  PROP_TSTAMP_LO,
  PROP_TSTAMP_HI,
  PROP_TSTAMP2,
  PROP_FREQ_MHZ,
  PROP_NTICK_USEC,
  PROP_IOHEAPBYTES,
  PROP_STACKL,
  PROP_MSTACKL,
  PROP_USTACKL,
  PROP_XSTACKL,
  PROP_STACKI,
  PROP_MSTACKI,
  PROP_USTACKI,
  PROP_XSTACKI,
  PROP_DDSCR_LNK,
  PROP_VOIDP_OBJ,
  PROP_LAST
};

enum Prop_flag
{
  PRFLAG_NOSHOW = 0x40
};

struct PropDescr
{
  PropDescr (int propID, const char *name);
  virtual ~PropDescr ();

  void addState (int value, const char *stname, const char *stuname);
  char *getStateName (int value);
  char *getStateUName (int value);

  int
  getMaxState ()
  {
    return stateNames ? stateNames->size () : 0;
  }

  int propID;
  char *name;
  char *uname;
  VType_type vtype;
  int flags;

private:
  Vector<char*>*stateNames;
  Vector<char*>*stateUNames;
};

struct FieldDescr
{
  FieldDescr (int propID, const char *name);
  virtual ~FieldDescr ();

  int propID;
  char *name;
  int offset;
  VType_type vtype;
  char *format;
};

class PacketDescriptor
{
public:
  PacketDescriptor (DataDescriptor*);
  virtual ~PacketDescriptor ();

  DataDescriptor *
  getDataDescriptor ()
  {
    return ddscr;
  }

  Vector<FieldDescr*> *
  getFields ()
  {
    return fields;
  }

  void addField (FieldDescr*);

private:
  DataDescriptor *ddscr;
  Vector<FieldDescr*> *fields;
};

struct Datum
{

  void
  setUINT32 (uint32_t vv)
  {
    type = TYPE_UINT32;
    i = vv;
  }

  void
  setUINT64 (uint64_t vv)
  {
    type = TYPE_UINT64;
    ll = vv;
  }

  void
  setSTRING (char* vv)
  {
    type = TYPE_STRING;
    l = vv;
  }

  void
  setDOUBLE (double vv)
  {
    type = TYPE_DOUBLE;
    d = vv;
  }

  void
  setOBJ (void* vv)
  {
    type = TYPE_OBJ;
    p = vv;
  }

  VType_type type;
  union
  {
    int i;
    double d;
    char *l;
    void *p;
    unsigned long long ll;
  };
};

class Data
{
public:
  static Data *newData (VType_type);

  virtual
  ~Data () { }

  virtual VType_type
  type ()
  {
    return TYPE_NONE;
  }
  virtual void reset () = 0;
  virtual long getSize () = 0;
  virtual int fetchInt (long i) = 0;
  virtual unsigned long long fetchULong (long i) = 0;
  virtual long long fetchLong (long i) = 0;
  virtual char *fetchString (long i) = 0;
  virtual double fetchDouble (long i) = 0;
  virtual void *fetchObject (long i) = 0;
  virtual void setDatumValue (long, const Datum*) = 0;
  virtual void setValue (long, uint64_t) = 0;
  virtual void setObjValue (long, void*) = 0;
  virtual int cmpValues (long idx1, long idx2) = 0;
  virtual int cmpDatumValue (long idx, const Datum *val) = 0;
};

enum Data_flag
{
  DDFLAG_NOSHOW = 0x01
};

class DataDescriptor
{
# 422 "/doner/binutils/binutils-515f23e/gprofng/src/Table.h"
public:

  DataDescriptor (int id, const char* name, const char* uname, int flags = 0);
  DataDescriptor (int id, const char* name, const char* uname, DataDescriptor*);
  ~DataDescriptor ();


  int
  getId ()
  {
    return id;
  }

  char *
  getName ()
  {
    return name;
  }

  char *
  getUName ()
  {
    return uname;
  }

  Vector<PropDescr*> *
  getProps ()
  {
    return props;
  }
  PropDescr *getProp (int prop_id);

  long
  getSize ()
  {
    return *ref_size;
  }

  long
  getFlags ()
  {
    return flags;
  }


  DataView *createView ();
  DataView *createImmutableView ();
  DataView *createExtManagedView ();


  int getIntValue (int prop_id, long pkt_id);
  unsigned long long getULongValue (int prop_id, long pkt_id);
  long long getLongValue (int prop_id, long pkt_id);
  void *getObjValue (int prop_id, long pkt_id);
  Vector<long long> *getSet (int prop_id);


  void addProperty (PropDescr*);
  long addRecord ();
  Data *getData (int prop_id);
  void setDatumValue (int prop_id, long pkt_id, const Datum *val);
  void setValue (int prop_id, long pkt_id, uint64_t val);
  void setObjValue (int prop_id, long pkt_id, void *val);
  void reset ();

  void
  setResolveFrInfoDone ()
  {
    *ref_resolveFrameInfoDone = true;
  }

  bool
  isResolveFrInfoDone ()
  {
    return *ref_resolveFrameInfoDone;
  }


private:
  bool isMaster;
  int flags;
  int id;
  char *name;
  char *uname;


  long master_size;
  bool master_resolveFrameInfoDone;


  long *ref_size;
  bool *ref_resolveFrameInfoDone;
  Vector<PropDescr*> *props;
  Vector<Data*> *data;
  Vector<Vector<long long>*> *setsTBR;
};

typedef struct
{
  long begin;
  long end;
  long orig_ddsize;
  DataView *tmpView;
  long *idxArr;
  FilterExp *fltr;
} fltr_dbe_ctx;

class DataView
{



public:

  enum Relation
  {
    REL_LT,
    REL_LTEQ,
    REL_EQ,
    REL_GTEQ,
    REL_GT
  };

  enum DataViewType
  {
    DV_NORMAL,
    DV_IMMUTABLE,
    DV_EXT_MANAGED
  };

  DataView (DataDescriptor*);
  DataView (DataDescriptor*, DataViewType);
  virtual ~DataView ();

  Vector<PropDescr*> *getProps ();
  PropDescr *getProp (int prop_id);
  long getSize ();


  int getIntValue (int prop_id, long idx);
  unsigned long long getULongValue (int prop_id, long idx);
  long long getLongValue (int prop_id, long idx);
  void *getObjValue (int prop_id, long idx);
  long getIdByIdx (long idx);


  void sort (const int props[], int prop_count);
  void sort (int prop);
  void sort (int prop1, int prop2);
  void sort (int prop1, int prop2, int prop3);
  void setFilter (FilterExp*);






  long getIdxByVals (const Datum valColumns[], Relation rel);
  long getIdxByVals (const Datum valColumns[], Relation rel,
       long minIdx, long maxIdx);
  bool idxRootDimensionsMatch (long idx, const Datum valColumns[]);



  void setDatumValue (int prop_id, long idx, const Datum *val);
  void setValue (int prop_id, long idx, uint64_t val);
  void setObjValue (int prop_id, long idx, void *val);

  DataDescriptor *
  getDataDescriptor ()
  {
    return ddscr;
  }

  void removeDbeViewIdx (long idx);


  void appendDataDescriptorId (long pkt_id);
  void setDataDescriptorValue (int prop_id, long pkt_id, uint64_t val);
  long long getDataDescriptorValue (int prop_id, long pkt_id);

private:
  bool checkUpdate ();
  void init (DataDescriptor*, DataViewType);

  static void filter_in_chunks (fltr_dbe_ctx *dctx);
  DataDescriptor *ddscr;
  long ddsize;
  Vector<long> *index;


  Data *sortedBy[10 + 1];
  FilterExp *filter;
  DataViewType type;
};
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h" 2







class Expression;
class Definition;
class Histable;
template <class ITEM> class Vector;

class BaseMetric
{
public:

  enum Type
  {
    ONAME = 1,
    SIZES,
    ADDRESS,

    CP_TOTAL,
    CP_TOTAL_CPU,

    CP_LMS_USER,
    CP_LMS_SYSTEM,
    CP_LMS_TRAP,
    CP_LMS_TFAULT,
    CP_LMS_DFAULT,
    CP_LMS_KFAULT,
    CP_LMS_USER_LOCK,
    CP_LMS_SLEEP,
    CP_LMS_WAIT_CPU,
    CP_LMS_STOPPED,

    CP_KERNEL_CPU,

    SYNC_WAIT_TIME,
    SYNC_WAIT_COUNT,

    HWCNTR,

    HEAP_ALLOC_CNT,
    HEAP_ALLOC_BYTES,
    HEAP_LEAK_CNT,
    HEAP_LEAK_BYTES,

    IO_READ_BYTES,
    IO_READ_CNT,
    IO_READ_TIME,
    IO_WRITE_BYTES,
    IO_WRITE_CNT,
    IO_WRITE_TIME,
    IO_OTHER_CNT,
    IO_OTHER_TIME,
    IO_ERROR_CNT,
    IO_ERROR_TIME,

    MPI_TIME,
    MPI_SEND,
    MPI_BYTES_SENT,
    MPI_RCV,
    MPI_BYTES_RCVD,
    MPI_OTHER,

    OMP_NONE,
    OMP_OVHD,
    OMP_WORK,
    OMP_IBAR,
    OMP_EBAR,
    OMP_WAIT,
    OMP_SERL,
    OMP_RDUC,
    OMP_LKWT,
    OMP_CTWT,
    OMP_ODWT,
    OMP_MSTR,
    OMP_SNGL,
    OMP_ORDD,
    OMP_MASTER_THREAD,

    MPI_WORK,
    MPI_WAIT,

    RACCESS,
    DEADLOCKS,

    DERIVED
  };


  enum SubType
  {
    STATIC = 1,
    EXCLUSIVE = 2,
    INCLUSIVE = 4,
    ATTRIBUTED = 8,
    DATASPACE = 16
  };

  BaseMetric (Type t);
  BaseMetric (Hwcentry *ctr, const char* _aux, const char* _cmdname,
       const char* _username, int v_styles);
  BaseMetric (Hwcentry *ctr, const char* _aux, const char* _username,
       int v_styles, BaseMetric* _depended_bm = 
# 132 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h" 3 4
                                               __null
# 132 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h"
                                                   );
  BaseMetric (const char *_cmd, const char *_username, Definition *def);
  BaseMetric (const BaseMetric& m);
  virtual ~BaseMetric ();

  int get_id () { return id; }
  Type get_type () { return type; }
  Hwcentry *get_hw_ctr () { return hw_ctr; }
  char *get_aux () { return aux; }
  char *get_username () { return username; }
  char *get_cmd () { return cmd; }
  int get_flavors () { return flavors; }
  int get_clock_unit () { return clock_unit; }
  long long get_precision () { return precision; }
  ValueTag get_vtype () { return valtype; }
  int get_value_styles () { return value_styles; }
  bool is_zeroThreshold () { return zeroThreshold; }
  ProfData_type get_packet_type () { return packet_type; }
  Expression *get_cond () { return cond; }
  Expression *get_val () { return val; }
  Expression *get_expr () { return expr; }
  char *get_expr_spec () { return expr_spec; }
  Definition *get_definition () { return definition; };
  BaseMetric *get_dependent_bm () { return dependent_bm; };

  bool
  comparable ()
  {
    return val_spec != 
# 160 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h" 3 4
                      __null 
# 160 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetric.h"
                           || type == DERIVED || type == SIZES || type == ADDRESS;
  }


  void set_default_visbits (SubType subtype, int _visbits);
  void set_id (int _id) { id = _id; }

  void set_expr_spec (char *_expr_spec);
  void set_cond_spec (char *_cond_spec);
  int get_default_visbits (SubType subtype);
  char *dump ();
  Histable *get_comparable_obj (Histable *obj);
  bool is_internal ();

  char *legend;

private:
  BaseMetric *dependent_bm;
  Expression *cond;
  char *cond_spec;
  Expression *val;
  char *val_spec;
  Expression *expr;

  char *expr_spec;
  int id;
  Type type;
  char *aux;
  char *cmd;
  char *username;
  int flavors;
  int value_styles;
  static const int NSUBTYPES = 2;
  int default_visbits[NSUBTYPES];
  ValueTag valtype;
  long long precision;
  Hwcentry *hw_ctr;
  ProfData_type packet_type;
  bool zeroThreshold;
  Presentation_clock_unit clock_unit;

  static int last_id;
  Definition *definition;

  void hwc_init (Hwcentry *ctr, const char* _aux, const char* _cmdname, const char* _username, int v_styles);
  void init (Type t);
  char *get_basetype_name ();
  void specify ();
  void specify_metric (char *_cond_spec, char *_val_spec);
  void set_val_spec (char *_val_spec);
  void specify_mstate_metric (int st);
  void specify_ompstate_metric (int st);
  void specify_prof_metric (char *_cond_spec);
};

class Definition
{
public:

  enum opType
  {
    opNULL,
    opPrimitive,
    opDivide
  };

  Definition (opType _op);
  ~Definition ();
  static Definition *add_definition (char *_def);
  Vector<BaseMetric *> *get_dependencies ();
  long *get_map ();
  double eval (long *indexes, TValue *values);

  opType op;
  Definition *arg1;
  Definition *arg2;
  char *def;

private:
  BaseMetric *bm;
  long *map;
  Vector<BaseMetric *> *dependencies;
  long index;
};
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/DerivedMetrics.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.h" 1
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/Metric.h"
class Expression;



class Metric : public BaseMetric
{
public:

  typedef struct HistMetricS
  {
    int width;
    int maxvalue_width;
    int maxtime_width;
    char legend1[1024];
    char legend2[1024];
    char legend3[1024];
    int indFirstExp;
    int indTimeVal;
    void update_max (struct HistMetricS *hm);
    void init ();
  } HistMetric;

  Metric (const Metric& item);
  Metric (BaseMetric *item, SubType st);
  Metric (char *_name, SubType st);
  virtual ~Metric ();

  char *get_mcmd (bool);
  int get_real_visbits ();
  ValueTag get_vtype2 ();
  void set_dmetrics_visbits (int _dmetrics_visbits);


  SubType
  get_subtype ()
  {
    return subtype;
  }

  char *
  get_name ()
  {
    return name;
  }

  char *
  get_abbr ()
  {
    return abbr;
  }

  char *
  get_abbr_unit ()
  {
    return abbr_unit;
  }

  BaseMetric *
  get_base_metric ()
  {
    return baseMetric;
  }

  int
  get_visbits ()
  {
    return visbits;
  }

  void
  set_raw_visbits (int _visbits)
  {
    visbits = _visbits;
  }

  void
  clear_all_visbits ()
  {
    visbits = VAL_NA;
  }

  void
  enable_all_visbits ()
  {
    visbits = get_value_styles ();
  }




  bool
  is_any_visible ()
  {
    return !((visbits) == -1 || (visbits) == VAL_NA || ((visbits) & VAL_HIDE_ALL) != 0)
     && (visbits & (VAL_VALUE | VAL_TIMEVAL | VAL_PERCENT));
  }

  bool
  is_value_visible ()
  {
    return (visbits & VAL_VALUE) != 0
     || (!is_time_val () && (visbits & VAL_TIMEVAL) != 0);
  }

  bool
  is_time_visible ()
  {
    return is_time_val () && (visbits & VAL_TIMEVAL) != 0;
  }

  bool
  is_visible ()
  {
    return !((visbits) == -1 || (visbits) == VAL_NA || ((visbits) & VAL_HIDE_ALL) != 0) && is_value_visible ();
  }

  bool
  is_tvisible ()
  {
    return !((visbits) == -1 || (visbits) == VAL_NA || ((visbits) & VAL_HIDE_ALL) != 0) && is_time_visible ();
  }

  bool
  is_pvisible ()
  {
    return !((visbits) == -1 || (visbits) == VAL_NA || ((visbits) & VAL_HIDE_ALL) != 0) && (visbits & VAL_PERCENT) != 0;
  }

  bool
  is_time_val ()
  {
    int v = VAL_TIMEVAL | VAL_VALUE;
    return (get_value_styles () & v) == v;
  }



  void set_vvisible (bool set);
  void set_tvisible (bool set);
  void set_pvisible (bool set);

  void set_subtype (SubType st);
  void legend_width (HistMetric *hitem, int gap);
  char *get_vis_str ();
  char *get_vis_string (int vis);
  char *dump ();


private:
  BaseMetric *baseMetric;
  SubType subtype;
  char *name;
  char *abbr;
  char *abbr_unit;
  int visbits;
};
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/DerivedMetrics.h" 2

class definition;

class DerivedMetrics
{
public:
  DerivedMetrics ();
  ~DerivedMetrics ();
  definition *add_definition (char *_name, char *_username, char *_def);
  int *construct_map (Vector<Metric*> *mitems, BaseMetric::SubType st,
        char *expr_spec);
  void dump (FILE *dis_file, int verbosity);
  double eval_one_item (definition *def, int *map, double *values);
  int eval (int *map, double *values);
  void fill_dependencies (definition *def, int *vec);
  Vector<definition*> *get_dependencies (definition *def);

  Vector<definition*> *
  get_items ()
  {
    return items;
  }

private:
  Vector<definition*> *items;
};
# 36 "/doner/binutils/binutils-515f23e/gprofng/src/Hist_data.h" 2

class DbeLine;
class MetricList;

class Hist_data
{
public:
  friend class DbeView;
  friend class er_print_histogram;
  friend class PathTree;
  friend class DataSpace;
  friend class MemorySpace;
  friend class IOActivity;
  friend class HeapActivity;


  struct HistItem
  {
    HistItem (long n);
    ~HistItem ();
    Histable *obj;
    int type;
    TValue *value;
    long size;
  };

  enum Hist_status
  {
    SUCCESS = 0,
    NO_DATA
  };

  enum Mode
  {
    ALL,
    CALLERS,
    CALLEES,
    SELF,
    MODL,
    LAYOUT,
    DETAIL
  };

  enum Sort_order
  {
    ASCEND,
    DESCEND
  };

  enum Sort_type
  {
    ALPHA,
    VALUE,
    AUX
  };

  Hist_data (MetricList *, Histable::Type, Mode, bool _viewowned = false);

  virtual ~Hist_data ();
  void dump (char *msg, FILE *f);

  Hist_status
  get_status (void)
  {
    return status;
  }


  bool
  isViewOwned (void)
  {
    return viewowned;
  }


  long size (void);


  HistItem *append_hist_item (Histable *obj);
  void append_hist_item (HistItem *hi);
  TValue *get_real_value (TValue *res, int met_index, int row);
  TValue *get_value (TValue *res, int met_index, int row);
  TValue *get_value (TValue *res, int met_index, HistItem *hi);
  void print_row(StringBuilder *sb, int row, Metric::HistMetric *hist_metric,
   const char *mark);
  void print_content (FILE *out_file, Metric::HistMetric *hist_metric, int limit);
  int print_label (FILE *out_file, Metric::HistMetric *hist_metric, int space);
  void update_total (Hist_data::HistItem *new_total);
  void update_max (Metric::HistMetric *hm_tmp);
  void update_legend_width (Metric::HistMetric *hm_tmp);


  HistItem *find_hist_item (Histable *obj);


  void sort (long ind, bool reverse);


  void resort (MetricList *mlist);


  void compute_minmax (void);


  HistItem *fetch (long index);

  HistItem *
  get_maximums (void)
  {
    return maximum;
  }

  HistItem *
  get_maximums_inc (void)
  {
    return maximum_inc;
  }

  HistItem *
  get_minimums (void)
  {
    return minimum;
  }

  HistItem *
  get_totals (void)
  {
    return total;
  }

  Vector<HistItem*> *
  get_hist_items (void)
  {
    return hist_items;
  }

  void
  set_status (Hist_status st)
  {
    status = st;
  }

  MetricList *
  get_metric_list (void)
  {
    return metrics;
  }

  Map<Histable*, int> *
  get_callsite_mark ()
  {
    return callsite_mark;
  }

  Metric::HistMetric *get_histmetrics ();
  void set_threshold (double proportion);
  bool above_threshold (HistItem *hi);
  double get_percentage (double value, int mindex);
  size_t value_maxlen (int mindex);
  size_t time_len (TValue *value, int clock);
  size_t time_maxlen (int mindex, int clock);
  size_t name_len (HistItem *item);
  size_t name_maxlen ();
  HistItem *new_hist_item (Histable *obj, int itype, TValue *value);
  HistItem *update_hist_item (HistItem *hi, TValue *value);
  Vector<uint64_t> *get_object_indices (Vector<int> *selections);

private:

  Metric::HistMetric *hist_metrics;
  Vector<HistItem*> *hist_items;
  HashMap<Histable*, HistItem*>*hi_map;
  Map<Histable*, int>*callsite_mark;
  Hist_status status;
  int nmetrics;
  MetricList *metrics;
  Histable::Type type;
  Sort_order sort_order;
  Sort_type sort_type;
  int sort_ind;
  bool rev_sort;

  Mode mode;
  HistItem *gprof_item;
  Histable *spontaneous;


  HistItem *maximum;
  HistItem *minimum;
  HistItem *maximum_inc;
  HistItem *total;
  HistItem *threshold;


  static int sort_compare_all (const void *a, const void *b, const void *arg);
  static int sort_compare_dlayout (const void *a, const void *b, const void *arg);
  static int sort_compare (HistItem *hi_1, HistItem *hi_2, Sort_type stype,
      long ind, Hist_data *hdata);


  HistItem *new_hist_item (Histable *obj);






  bool viewowned;
};





class DbeInstr;

struct CStack_data
{

  struct CStack_item
  {
    CStack_item (long n);
    ~CStack_item ();
    long count;
    int64_t val;
    Vector<DbeInstr*> *stack;
    TValue *value;
  };

  Vector<CStack_item*> *cstack_items;
  CStack_item *total;

  CStack_item *new_cstack_item ();
  CStack_data (MetricList *);

  long
  size ()
  {
    return cstack_items->size ();
  }

  CStack_item *
  fetch (long i)
  {
    return cstack_items->fetch (i);
  }

  ~CStack_data ()
  {
    cstack_items->destroy ();
    delete cstack_items;
    delete total;
  }

  MetricList *metrics;
};
# 47 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2


# 1 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h" 1
# 50 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h"
class BaseMetricTreeNode
{
public:
  BaseMetricTreeNode ();
  virtual ~BaseMetricTreeNode ();
  BaseMetricTreeNode *register_metric (BaseMetric *item);
  BaseMetricTreeNode *find (const char *name);
  void get_nearest_registered_descendents (Vector<BaseMetricTreeNode*> *new_vec);
  void get_all_registered_descendents (Vector<BaseMetricTreeNode*> *new_vec);
  char *get_description();
  char *dump();

  BaseMetricTreeNode *get_root () { return root; }
  BaseMetricTreeNode *get_parent () { return parent; }
  Vector<BaseMetricTreeNode*> *get_children () { return children; }
  bool is_registered () { return registered; }
  int get_num_registered_descendents () { return num_registered_descendents; }
  bool is_composite_metric () { return isCompositeMetric; }
  BaseMetric *get_BaseMetric () { return bm; }
  char *get_name () { return name; }
  char *get_user_name () { return uname; }
  char *get_unit () { return unit; }
  char *get_unit_uname () { return unit_uname; }

private:
  BaseMetricTreeNode (BaseMetric *item);
  BaseMetricTreeNode (const char *name, const char *uname,
        const char *_unit, const char *_unit_uname);
  void init_vars ();
  void build_basic_tree ();
  BaseMetricTreeNode *add_child (BaseMetric *item);
  BaseMetricTreeNode *add_child (const char *name, const char *uname,
      const char *unit = 
# 82 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h" 3 4
                        __null
# 82 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h"
                            , const char *unit_uname = 
# 82 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h" 3 4
                                                       __null
# 82 "/doner/binutils/binutils-515f23e/gprofng/src/BaseMetricTreeNode.h"
                                                           );
  BaseMetricTreeNode *add_child (BaseMetricTreeNode *new_node);
  void register_node (BaseMetricTreeNode *);

  BaseMetricTreeNode *root;
  BaseMetricTreeNode *parent;
  bool aggregation;
  char *name;
  char *uname;
  char *unit;
  char *unit_uname;
  Vector<BaseMetricTreeNode*> *children;
  bool isCompositeMetric;
  BaseMetric *bm;
  bool registered;
  int num_registered_descendents;
};
# 50 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/MemorySpace.h" 1
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/MemorySpace.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h" 1
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h"
# 1 "./../common/gp-experiment.h" 1
# 31 "./../common/gp-experiment.h"
# 1 "./Emsgnum.h" 1
# 32 "./../common/gp-experiment.h" 2
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h" 1
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4

# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int getcpu (unsigned int *, unsigned int *) throw ();


extern int setns (int __fd, int __nstype) throw ();


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () __attribute__ ((__warn_unused_result__));
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;
# 190 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 205 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 274 "/usr/include/time.h" 3 4
extern int getdate_err;
# 283 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 297 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 100 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 120 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 155 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 193 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 238 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 470 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 482 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 516 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 718 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 789 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 871 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 997 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1010 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));





extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1056 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1123 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1157 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ()
{
  return __thread1 == __thread2;
}


}
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h" 2







# 37 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef uint64_t Vaddr_type;
typedef uint64_t Size_type;
# 55 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef enum
{
  MASTER_SMPL = 0,
  PROGRAM_SMPL,
  PERIOD_SMPL,
  MANUAL_SMPL
} Smpl_type;

typedef enum
{
  EMPTY_PCKT = 0,
  PROF_PCKT,
  SYNC_PCKT,
  HW_PCKT,
  XHWC_PCKT,
  HEAP_PCKT,
  MPI_PCKT,
  MHWC_PCKT,
  OPROF_PCKT,
  OMP_PCKT,
  RACE_PCKT,
  FRAME_PCKT,
  OMP2_PCKT,
  DEADLOCK_PCKT,
  OMP3_PCKT,
  OMP4_PCKT,
  OMP5_PCKT,
  UID_PCKT,
  FRAME2_PCKT,
  IOTRACE_PCKT,
  LAST_PCKT,
  CLOSED_PCKT = 65535
} Pckt_type;

typedef enum
{
  EMPTY_INFO = 0,
  STACK_INFO,
  JAVA_INFO,
  OMP_INFO,
  MPI_INFO,
  OMP2_INFO,
  LAST_INFO
} Info_type;







typedef struct CommonHead_packet
{
  unsigned int tsize : 16;
  unsigned int type : 16;
} CommonHead_packet;


typedef struct CM_Packet
{
  unsigned int tsize : 16;
  unsigned int type : 16;
} CM_Packet;

typedef struct Common_packet
{
  unsigned int tsize : 16;
  unsigned int type : 16;
  pthread_t lwp_id;
  pthread_t thr_id;
  uint32_t cpu_id;
  hrtime_t tstamp;
  uint64_t frinfo;
} Common_packet;
# 189 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef enum
{
  MALLOC_TRACE = 0,
  FREE_TRACE,
  REALLOC_TRACE,
  MMAP_TRACE,
  MUNMAP_TRACE,
  HEAPTYPE_LAST
} Heap_type;
# 216 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef enum
{
  ZFS_TYPE = 0,
  NFS_TYPE,
  UFS_TYPE,
  UDFS_TYPE,
  LOFS_TYPE,
  VXFS_TYPE,
  TMPFS_TYPE,
  PCFS_TYPE,
  HSFS_TYPE,
  PROCFS_TYPE,
  FIFOFS_TYPE,
  SWAPFS_TYPE,
  CACHEFS_TYPE,
  AUTOFS_TYPE,
  SPECFS_TYPE,
  SOCKFS_TYPE,
  FDFS_TYPE,
  MNTFS_TYPE,
  NAMEFS_TYPE,
  OBJFS_TYPE,
  SHAREFS_TYPE,
  EXT2FS_TYPE,
  EXT3FS_TYPE,
  EXT4FS_TYPE,
  UNKNOWNFS_TYPE,
  FSTYPE_LAST
} FileSystem_type;

typedef enum
{
  READ_TRACE = 0,
  WRITE_TRACE,
  OPEN_TRACE,
  CLOSE_TRACE,
  OTHERIO_TRACE,
  READ_TRACE_ERROR,
  WRITE_TRACE_ERROR,
  OPEN_TRACE_ERROR,
  CLOSE_TRACE_ERROR,
  OTHERIO_TRACE_ERROR,
  IOTRACETYPE_LAST
} IOTrace_type;
# 289 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef enum
{
  WRITE_RACE = 0,
  WRITE_RACE_RED,
  READ_RACE,
  READ_RACE_RED,
  RACETYPE_LAST
} Race_type;

typedef struct Frame_packet
{
  unsigned int tsize : 16;
  unsigned int type : 16;
  uint32_t hsize;
  uint64_t uid;
} Frame_packet;

typedef struct Uid_packet
{
  unsigned int tsize : 16;
  unsigned int type : 16;
  uint32_t flags;
  uint64_t uid;
} Uid_packet;




typedef struct Common_info
{
  unsigned int hsize;
  unsigned int kind;
  uint64_t uid;
} Common_info;

typedef struct Stack_info
{
  unsigned int hsize;
  unsigned int kind;
  uint64_t uid;
} Stack_info;

typedef struct Java_info
{
  unsigned int hsize;
  unsigned int kind;
  uint64_t uid;
} Java_info;

typedef struct OMP_info
{
  unsigned int hsize;
  unsigned int kind;
  uint32_t omp_state;
  uint32_t pad;
} OMP_info;

typedef struct OMP2_info
{
  unsigned int hsize;
  unsigned int kind;
  uint32_t omp_state;
  uint32_t pad;
  uint64_t uid;
} OMP2_info;





typedef enum
{
  OMP_NO_STATE = 0,
  OMP_OVHD_STATE,
  OMP_WORK_STATE,
  OMP_IBAR_STATE,
  OMP_EBAR_STATE,
  OMP_IDLE_STATE,
  OMP_SERL_STATE,
  OMP_RDUC_STATE,
  OMP_LKWT_STATE,
  OMP_CTWT_STATE,
  OMP_ODWT_STATE,
  OMP_ATWT_STATE,
  OMP_TSKWT_STATE,
  OMP_LAST_STATE
} OMP_THR_STATE;
# 410 "/doner/binutils/binutils-515f23e/gprofng/src/data_pckts.h"
typedef struct MPI_info
{
  unsigned int hsize;
  unsigned int kind;
  uint32_t mpi_state;
  uint32_t pad;
} MPI_info;


typedef enum
{
  MPI_NO_STATE = 0,
  MPI_USER,
  MPI_PROG,
  MPI_WAIT
} MPI_THR_STATE;




typedef enum
{
  DT_HEADER = 1,
  DT_CODE,
  DT_LTABLE,
  DT_SRCFILE
} DT_type;

typedef struct DT_common
{
  DT_type type;
  unsigned int size;
} DT_common;

typedef struct DT_header
{
  DT_type type;
  unsigned int size;
  hrtime_t time;
  uint64_t vaddr;
} DT_header;

typedef struct DT_code
{
  DT_type type;
  unsigned int size;
} DT_code;

typedef struct DT_ltable
{
  DT_type type;
  unsigned int size;
} DT_ltable;

typedef struct DT_lineno
{
  unsigned int offset;
  unsigned int lineno;
} DT_lineno;

typedef struct DT_srcfile
{
  DT_type type;
  unsigned int size;
} DT_srcfile;







typedef enum
{
  ARCH_SEGMENT_TYPE = 1,
  ARCH_MSG_TYPE,
  ARCH_PLT_TYPE,
  ARCH_MODULE_TYPE,
  ARCH_FUNCTION_TYPE,
  ARCH_LDINSTR_TYPE,
  ARCH_STINSTR_TYPE,
  ARCH_PREFETCH_TYPE,
  ARCH_BRTARGET_TYPE,
  ARCH_JCLASS_TYPE,
  ARCH_JMETHOD_TYPE,
  ARCH_JUNLOAD_TYPE,
  ARCH_INF_TYPE,
  ARCH_JCLASS_LOCATION_TYPE
} ARCH_type;



typedef struct
{
  unsigned int type : 16;
  unsigned int size : 16;
} ARCH_common;






typedef struct
{
  ARCH_common common;
  int version;
  uint32_t inode;
  uint32_t textsz;
  uint32_t platform;
} ARCH_segment;



typedef struct
{
  ARCH_common common;
  uint32_t errcode;
} ARCH_message;



typedef struct
{
  ARCH_common common;
} ARCH_info;



typedef struct
{
  ARCH_common common;
  unsigned int lang_code;
  unsigned int fragmented;
} ARCH_module;



typedef struct
{
  ARCH_common common;
  uint32_t offset;
  uint32_t size;
  uint32_t save_addr;
} ARCH_function;






typedef struct
{
  ARCH_common common;
} ARCH_aninfo;



typedef struct
{
  CM_Packet comm;
  uint32_t pad;
  uint64_t class_id;
} ARCH_jclass_location;



typedef struct
{
  CM_Packet comm;
  uint32_t pad;
  uint64_t class_id;
  hrtime_t tstamp;
} ARCH_jclass;



typedef struct
{
  CM_Packet comm;
  uint32_t pad;
  uint64_t class_id;
  uint64_t method_id;
} ARCH_jmethod;
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/ABS.h" 1
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/ABS.h"
typedef enum
{
  ABS_NULL = 0x00,
  ABS_UNSUPPORTED = 0x01,
  ABS_BLOCKED = 0x02,
  ABS_INCOMPLETE = 0x03,
  ABS_REG_LOSS = 0x04,
  ABS_INVALID_EA = 0x05,
  ABS_NO_CTI_INFO = 0x10,
  ABS_INFO_FAILED = 0x20,
  ABS_CTI_TARGET = 0x30,
  ABS_CODE_RANGE = 0xFF
} ABS_code;

enum {
  NUM_ABS_RT_CODES = 7,
  NUM_ABS_PP_CODES = 5
};

extern const char *ABS_RT_CODES[NUM_ABS_RT_CODES];
extern char *ABS_PP_CODES[NUM_ABS_PP_CODES];
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Data_window.h" 1
# 33 "/doner/binutils/binutils-515f23e/gprofng/src/Data_window.h"
class Data_window
{
public:


  typedef struct
  {
    int64_t offset;
    int64_t length;
  } Span;

  Data_window (char *filename);
  ~Data_window ();



  void *bind (Span *span, int64_t minSize);
  void *bind (int64_t file_offset, int64_t minSize);
  void *get_data (int64_t offset, int64_t size, void *datap);
  int64_t get_buf_size ();
  int64_t copy_to_file (int f, int64_t offset, int64_t size);

  bool not_opened () { return !opened; }
  off64_t get_fsize () { return fsize; }

  template <typename Key_t> inline Key_t
  get_align_val (Key_t *vp)
  {
    if (sizeof (Key_t) <= sizeof (int))
      return *vp;

    Key_t val = (Key_t) 0;
    uint32_t *p1 = (uint32_t *) vp;
    uint32_t *p2 = (uint32_t*) (&val);
    p2[0] = p1[0];
    p2[1] = p1[1];
    return val;
  }

  template <typename Key_t> inline Key_t
  decode (Key_t &v)
  {
    Key_t val = get_align_val (&v);
    if (need_swap_endian)
      swapByteOrder (&val, sizeof (val));
    return val;
  }

  bool need_swap_endian;
  char *fname;

protected:
  int fd;
  bool mmap_on_file;

private:
  long page_size;
  bool use_mmap;
  bool opened;
  int64_t fsize;
  void *base;
  int64_t woffset;
  int64_t wsize;
  int64_t basesize;
};
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/Exp_Layout.h" 2



class PrUsage
{
public:
  PrUsage ();
  PrUsage *bind32 (void *p, bool need_swap_endian);
  PrUsage *bind64 (void *p, bool need_swap_endian);
  static uint64_t bind32Size ();
  static uint64_t bind64Size ();
  Vector<long long> * getMstateValues ();

  hrtime_t pr_tstamp;
  hrtime_t pr_create;
  hrtime_t pr_term;
  hrtime_t pr_rtime;


  hrtime_t pr_utime;
  hrtime_t pr_stime;
  hrtime_t pr_ttime;
  hrtime_t pr_tftime;
  hrtime_t pr_dftime;
  hrtime_t pr_kftime;
  hrtime_t pr_ltime;
  hrtime_t pr_slptime;
  hrtime_t pr_wtime;
  hrtime_t pr_stoptime;

  uint64_t pr_minf;
  uint64_t pr_majf;
  uint64_t pr_nswap;
  uint64_t pr_inblk;
  uint64_t pr_oublk;
  uint64_t pr_msnd;
  uint64_t pr_mrcv;
  uint64_t pr_sigs;
  uint64_t pr_vctx;
  uint64_t pr_ictx;
  uint64_t pr_sysc;
  uint64_t pr_ioch;
};

class DataView;
extern void *getStack (VMode, DataView*, long);
extern int stackSize (VMode, DataView*, long);
extern Histable *getStackPC (int, VMode, DataView*, long);
extern Vector<Histable*> *getStackPCs (VMode, DataView*, long);

class CommonPacket
{
public:
  CommonPacket ();
  void *getStack (VMode);
  Histable *getStackPC (int, VMode);
  Vector<Histable*>*getStackPCs (VMode);
  static int cmp (const void *a, const void *b);

  enum Tag_type { LWP, THR, CPU };
  static const int NTAGS = 3;
  uint32_t tags[NTAGS];
  hrtime_t tstamp;
  struct JThread *jthread_TBR;
  uint64_t frinfo;
  Vaddr leafpc;
  void *nat_stack;
  void *user_stack;
  static void *jvm_overhead;
};

class FramePacket
{
public:
  int
  stackSize (bool java = false)
  {
    return java ? jstack->size () / 2 : stack->size ();
  }

  Vaddr
  getFromStack (int n)
  {
    return stack->fetch (n);
  }

  Vaddr
  getMthdFromStack (int n)
  {
    return jstack->fetch (2 * n + 1);
  }

  int
  getBciFromStack (int n)
  {
    return (int) jstack->fetch (2 * n);
  }

  bool
  isLeafMark (int n)
  {
    return stack->fetch (n) == (Vaddr) ((uint64_t)(-1));
  }

  bool
  isTruncatedStack (bool java = false)
  {
    return java ? jtruncated : truncated == (Vaddr) ((uint64_t)(-2));
  }

  bool
  isFailedUnwindStack ()
  {
    return truncated == (Vaddr) ((uint64_t)(-3));
  }
  uint32_t omp_state;
  uint32_t mpi_state;
  uint64_t omp_cprid;
  Vector<Vaddr> *stack;
  Vaddr truncated;
  Vector<Vaddr> *jstack;
  bool jtruncated;
  Vector<Vaddr> *ompstack;
  Vaddr omptruncated;
};
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/MemorySpace.h" 2



# 1 "/doner/binutils/binutils-515f23e/gprofng/src/HashMap.h" 1
# 33 "/doner/binutils/binutils-515f23e/gprofng/src/MemorySpace.h" 2

class Experiment;
class Expression;
class DataView;
class DbeView;
class MemObj;

class MemObjType_t
{
public:
  MemObjType_t ();
  ~MemObjType_t ();
  int type;
  char *name;
  char *index_expr;
  char *machmodel;
  char mnemonic;
  char *short_description;
  char *long_description;
};

class MemorySpace
{
public:

  MemorySpace (DbeView *_dbev, int subtype);
  ~MemorySpace ();

  void reset (void);

  int
  getMemObjType (void)
  {
    return mstype;
  }

  char *
  getMemObjTypeName (void)
  {
    return msname;
  }

  Expression *
  getMemObjDef (void)
  {
    return msindex_exp;
  }


  static void get_filter_keywords (Vector <void*> *res);
  static Vector<void*> *getMemObjects (void);
  static void set_MemTabOrder (Vector<int> *);
  static char *mobj_define (char *, char *, char *, char *, char *);
  static char *mobj_delete (char *);
  static MemObjType_t *findMemSpaceByName (const char *mname);
  static MemObjType_t *findMemSpaceByIndex (int index);
  static char pickMnemonic (char *name);
  static Vector<char *> *getMachineModelMemObjs (char *);

private:
  HashMap<uint64_t, MemObj*> *objs;
  int findMemObject (uint64_t indx);
  MemObj *lookupMemObject (Experiment *exp, DataView*, long);
  MemObj *createMemObject (uint64_t, char *moname);

  int mstype;
  char *msname;
  Expression *msindex_exp;
  char *msindex_exp_str;
  Hist_data *hist_data_all;
  uint64_t selected_mo_index;
  int sel_ind;
  DbeView *dbev;
  int phaseIdx;
  uint64_t idx_min;
  uint64_t idx_max;
  MemObj *unk_memobj;
  MemObj *total_memobj;
};
# 51 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2


# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h"
# 1 "/usr/include/regex.h" 1 3 4
# 27 "/usr/include/regex.h" 3 4

# 27 "/usr/include/regex.h" 3 4
extern "C" {
# 55 "/usr/include/regex.h" 3 4
typedef unsigned int __re_size_t;
typedef unsigned long int __re_long_size_t;







typedef long int s_reg_t;
typedef unsigned long int active_reg_t;






typedef unsigned long int reg_syntax_t;
# 211 "/usr/include/regex.h" 3 4
extern reg_syntax_t re_syntax_options;
# 346 "/usr/include/regex.h" 3 4
typedef enum
{
  _REG_ENOSYS = -1,
  _REG_NOERROR = 0,
  _REG_NOMATCH,



  _REG_BADPAT,
  _REG_ECOLLATE,
  _REG_ECTYPE,
  _REG_EESCAPE,
  _REG_ESUBREG,
  _REG_EBRACK,
  _REG_EPAREN,
  _REG_EBRACE,
  _REG_BADBR,
  _REG_ERANGE,
  _REG_ESPACE,
  _REG_BADRPT,


  _REG_EEND,
  _REG_ESIZE,
  _REG_ERPAREN
} reg_errcode_t;
# 413 "/usr/include/regex.h" 3 4
struct re_pattern_buffer
{


  struct re_dfa_t *buffer;


  __re_long_size_t allocated;


  __re_long_size_t used;


  reg_syntax_t syntax;




  char *fastmap;





  unsigned char * translate;


  size_t re_nsub;





  unsigned can_be_null : 1;
# 457 "/usr/include/regex.h" 3 4
  unsigned regs_allocated : 2;



  unsigned fastmap_accurate : 1;



  unsigned no_sub : 1;



  unsigned not_bol : 1;


  unsigned not_eol : 1;


  unsigned newline_anchor : 1;
};

typedef struct re_pattern_buffer regex_t;
# 490 "/usr/include/regex.h" 3 4
typedef int regoff_t;






struct re_registers
{
  __re_size_t num_regs;
  regoff_t *start;
  regoff_t *end;
};
# 517 "/usr/include/regex.h" 3 4
typedef struct
{
  regoff_t rm_so;
  regoff_t rm_eo;
} regmatch_t;






extern reg_syntax_t re_set_syntax (reg_syntax_t __syntax);
# 538 "/usr/include/regex.h" 3 4
extern const char *re_compile_pattern (const char *__pattern, size_t __length,
           struct re_pattern_buffer *__buffer);





extern int re_compile_fastmap (struct re_pattern_buffer *__buffer);







extern regoff_t re_search (struct re_pattern_buffer *__buffer,
      const char *__String, regoff_t __length,
      regoff_t __start, regoff_t __range,
      struct re_registers *__regs);




extern regoff_t re_search_2 (struct re_pattern_buffer *__buffer,
        const char *__string1, regoff_t __length1,
        const char *__string2, regoff_t __length2,
        regoff_t __start, regoff_t __range,
        struct re_registers *__regs,
        regoff_t __stop);




extern regoff_t re_match (struct re_pattern_buffer *__buffer,
     const char *__String, regoff_t __length,
     regoff_t __start, struct re_registers *__regs);



extern regoff_t re_match_2 (struct re_pattern_buffer *__buffer,
       const char *__string1, regoff_t __length1,
       const char *__string2, regoff_t __length2,
       regoff_t __start, struct re_registers *__regs,
       regoff_t __stop);
# 596 "/usr/include/regex.h" 3 4
extern void re_set_registers (struct re_pattern_buffer *__buffer,
         struct re_registers *__regs,
         __re_size_t __num_regs,
         regoff_t *__starts, regoff_t *__ends);
# 639 "/usr/include/regex.h" 3 4
extern int regcomp (regex_t *__restrict __preg,
      const char *__restrict __pattern,
      int __cflags);

extern int regexec (const regex_t *__restrict __preg,
      const char *__restrict __String, size_t __nmatch,
      regmatch_t __pmatch[],
      int __eflags);

extern size_t regerror (int __errcode, const regex_t *__restrict __preg,
   char *__restrict __errbuf, size_t __errbuf_size);

extern void regfree (regex_t *__preg);



}
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h" 2
# 36 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h"

# 36 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h"
class Emsgqueue;
class Application;

struct DispTab;



class Settings
{
public:
  friend class DbeView;
  friend class DbeSession;

  Settings (Application *_app);
  Settings (Settings *_settings);
  virtual ~Settings ();
  void read_rc (bool ipc_or_rdt_mode);
  char *read_rc (char *path);
  void buildMasterTabList ();
  void updateTabAvailability ();
  Cmd_status set_name_format (char *str);

  Vector<DispTab*> *
  get_TabList ()
  {
    return tab_list;
  }

  Vector<bool> *
  get_MemTabState ()
  {
    return mem_tab_state;
  }

  Vector<int> *
  get_MemTabOrder ()
  {
    return mem_tab_order;
  }


  void set_MemTabState (Vector<bool>*sel);


  void mobj_define (MemObjType_t *, bool state);


  void indxobj_define (int type, bool state);

  Vector<bool> *
  get_IndxTabState ()
  {
    return indx_tab_state;
  }

  Vector<int> *
  get_IndxTabOrder ()
  {
    return indx_tab_order;
  }


  void set_IndxTabState (Vector<bool>*sel);

  void
  set_name_format (int fname_fmt, bool soname_fmt)
  {
    name_format = Histable::make_fmt (fname_fmt, soname_fmt);
  }

  Histable::NameFormat
  get_name_format ()
  {
    return name_format;
  }


  Cmd_status set_view_mode (char *str, bool rc);

  void
  set_view_mode (VMode mode)
  {
    view_mode = mode;
  }

  VMode
  get_view_mode ()
  {
    return view_mode;
  }


  Cmd_status set_en_desc (char *str, bool rc);

  bool check_en_desc (const char *lineage, const char *targname);

  char *set_limit (char *str, bool rc);

  char *
  set_limit (int _limit)
  {
    limit = _limit;
    return 
# 138 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h" 3 4
          __null
# 138 "/doner/binutils/binutils-515f23e/gprofng/src/Settings.h"
              ;
  }

  int
  get_limit ()
  {
    return limit;
  }

  char *set_printmode (char *_pmode);


  Cmd_status proc_compcom (const char *cmd, bool isSrc, bool rc);


  char *get_compcom_errstr (Cmd_status status, const char *cmd);



  char *
  get_str_scompcom ()
  {
    return str_scompcom;
  }

  char *
  get_str_dcompcom ()
  {
    return str_dcompcom;
  }

  int
  get_src_compcom ()
  {
    return src_compcom;
  }

  int
  get_dis_compcom ()
  {
    return dis_compcom;
  }

  void
  set_cmpline_visible (bool v)
  {
    cmpline_visible = v;
  }

  void
  set_funcline_visible (bool v)
  {
    funcline_visible = v;
  }

  void
  set_src_visible (int v)
  {
    src_visible = v;
  }

  int
  get_src_visible ()
  {
    return src_visible;
  }

  void
  set_srcmetric_visible (bool v)
  {
    srcmetric_visible = v;
  }

  bool
  get_srcmetric_visible ()
  {
    return srcmetric_visible;
  }

  void
  set_hex_visible (bool v)
  {
    hex_visible = v;
  }

  bool
  get_hex_visible ()
  {
    return hex_visible;
  }


  Cmd_status proc_thresh (char *cmd, bool isSrc, bool rc);

  int
  get_thresh_src ()
  {
    return threshold_src;
  }

  int
  get_thresh_dis ()
  {
    return threshold_dis;
  }


  Cmd_status proc_tlmode (char *cmd, bool rc);

  void
  set_tlmode (int _tlmode)
  {
    tlmode = _tlmode;
  }

  int
  get_tlmode ()
  {
    return tlmode;
  }

  void
  set_stack_align (int _stack_align)
  {
    stack_align = _stack_align;
  }

  int
  get_stack_align ()
  {
    return stack_align;
  }

  void
  set_stack_depth (int _stack_depth)
  {
    stack_depth = _stack_depth;
  }

  int
  get_stack_depth ()
  {
    return stack_depth;
  }


  Cmd_status proc_tabs (bool _rdtMode);

  Cmd_status proc_tldata (const char *cmd, bool rc);
  void set_tldata (const char* tldata_string);
  char *get_tldata ();

  char *
  get_default_metrics ()
  {
    return str_dmetrics;
  }

  char *
  get_default_sort ()
  {
    return str_dsort;
  }

  void
  set_ignore_no_xhwcprof (bool v)
  {
    ignore_no_xhwcprof = v;
  }

  bool
  get_ignore_no_xhwcprof ()
  {
    return ignore_no_xhwcprof;
  }

  void
  set_ignore_fs_warn (bool v)
  {
    ignore_fs_warn = v;
  }

  bool
  get_ignore_fs_warn ()
  {
    return ignore_fs_warn;
  }


  static char *add_pathmap (Vector<pathmap_t*> *v, const char *from, const char *to);
  void set_pathmaps (Vector<pathmap_t*> *newPathMap);


  bool set_libexpand (char *, enum LibExpand, bool);
  enum LibExpand get_lo_setting (char *);


  bool set_libdefaults ();

  void
  set_compare_mode (int mode)
  {
    compare_mode = mode;
  }

  int
  get_compare_mode ()
  {
    return compare_mode;
  }

  char *
  get_machinemodel ()
  {
    return dbe_strdup (machinemodel);
  }

  char *preload_libdirs;

protected:
  Application *app;


  char *str_vmode;
  char *str_en_desc;
  char *str_datamode;
  char *str_scompcom;
  char *str_sthresh;
  char *str_dcompcom;
  char *str_dthresh;
  char *str_dmetrics;
  char *str_dsort;
  char *str_tlmode;
  char *str_tldata;
  char *str_tabs;
  char *str_rtabs;
  char *str_search_path;
  char *str_name_format;
  char *str_limit;
  char *str_printmode;
  char *str_compare;

  bool tabs_processed;


  bool en_desc;
  char * en_desc_usr;
  regex_t * en_desc_cmp;
  Histable::NameFormat name_format;
  VMode view_mode;
  int src_compcom;
  int dis_compcom;
  int threshold_src;
  int threshold_dis;
  int cmpline_visible;
  int funcline_visible;
  int src_visible;
  bool srcmetric_visible;
  bool hex_visible;
  char* tldata;
  int tlmode;
  int stack_align;
  int stack_depth;
  int limit;
  enum PrintMode print_mode;
  char print_delim;
  int compare_mode;

  char *machinemodel;

  bool ignore_no_xhwcprof;
  bool ignore_fs_warn;

  void set_rc (const char *path, bool msg, Emsgqueue *commentq,
        bool override, bool ipc_or_rdt_mode = false);

  Vector<DispTab*> *tab_list;
  Vector<pathmap_t*> *pathmaps;
  Vector<lo_expand_t*> *lo_expands;
  enum LibExpand lo_expand_default;
  bool is_loexpand_default;
  Vector<bool> *mem_tab_state;
  Vector<int> *mem_tab_order;
  Vector<bool> *indx_tab_state;
  Vector<int> *indx_tab_order;
};
# 54 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2


# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 1
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Stats_data.h" 1
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/Stats_data.h"
class DataView;

class Stats_data
{
public:

  struct Stats_item
  {
    char *label;
    TValue value;
  };

  Stats_data ();
  Stats_data (DataView *packets);
  ~Stats_data ();
  int size ();
  Stats_item fetch (int index);
  void sum (Stats_data *data);

private:

  PrUsage * fetchPrUsage (long index);
  void compute_data ();
  Stats_data::Stats_item *create_stats_item (long long, char *);

  Vector<Stats_item*> *stats_items;
  DataView *packets;
};
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 1
# 24 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
# 1 "/usr/include/assert.h" 1 3 4
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 2



template <typename Key_t, typename Value_t>
class DefaultMap : public Map<Key_t, Value_t>
{
public:

  DefaultMap ();
  ~DefaultMap ();
  void clear ();
  void put (Key_t key, Value_t val);
  Value_t get (Key_t key);
  Value_t get (Key_t key, typename Map<Key_t, Value_t>::Relation rel);
  Value_t remove (Key_t);
  Vector<Key_t> *keySet ();
  Vector<Value_t> *values ();

private:

  struct Entry
  {
    Key_t key;
    Value_t val;
  };

  static const int CHUNK_SIZE;
  static const int HTABLE_SIZE;

  int entries;
  int nchunks;
  Entry **chunks;
  Vector<Entry*> *index;
  Entry **hashTable;
};


template <typename Key_t, typename Value_t>
const int DefaultMap<Key_t, Value_t>::CHUNK_SIZE = 16384;
template <typename Key_t, typename Value_t>
const int DefaultMap<Key_t, Value_t>::HTABLE_SIZE = 1024;

template <typename Key_t, typename Value_t>
DefaultMap<Key_t, Value_t>::DefaultMap ()
{
  entries = 0;
  nchunks = 0;
  chunks = 
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
          __null
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
              ;
  index = new Vector<Entry*>;
  hashTable = new Entry*[HTABLE_SIZE];
  for (int i = 0; i < HTABLE_SIZE; i++)
    hashTable[i] = 
# 76 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
                  __null
# 76 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
                      ;
}

template <typename Key_t, typename Value_t>
DefaultMap<Key_t, Value_t>::~DefaultMap ()
{
  for (int i = 0; i < nchunks; i++)
    delete[] chunks[i];
  delete[] chunks;
  delete index;
  delete[] hashTable;
}

template <typename Key_t, typename Value_t>
void
DefaultMap<Key_t, Value_t>::clear ()
{
  entries = 0;
  index->reset ();
  for (int i = 0; i < HTABLE_SIZE; i++)
    hashTable[i] = 
# 96 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
                  __null
# 96 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
                      ;
}

template <typename Key_t>
inline unsigned
hash (Key_t key)
{
  unsigned h = (unsigned) ((unsigned long) key);
  h ^= (h >> 20) ^ (h >> 12);
  return (h ^ (h >> 7) ^ (h >> 4));
}

template <typename Key_t, typename Value_t>
void
DefaultMap<Key_t, Value_t>::put (Key_t key, Value_t val)
{
  unsigned idx = hash (key) % HTABLE_SIZE;
  Entry *entry = hashTable[idx];
  if (entry && entry->key == key)
    {
      entry->val = val;
      return;
    }
  int lo = 0;
  int hi = entries - 1;
  while (lo <= hi)
    {
      int md = (lo + hi) / 2;
      entry = index->fetch (md);
      int cmp = entry->key < key ? -1 : entry->key > key ? 1 : 0;
      if (cmp < 0)
 lo = md + 1;
      else if (cmp > 0)
 hi = md - 1;
      else
 {
   entry->val = val;
   return;
 }
    }
  if (entries >= nchunks * CHUNK_SIZE)
    {
      nchunks++;

      Entry **new_chunks = new Entry*[nchunks];
      for (int i = 0; i < nchunks - 1; i++)
 new_chunks[i] = chunks[i];
      delete[] chunks;
      chunks = new_chunks;


      chunks[nchunks - 1] = new Entry[CHUNK_SIZE];
    }
  entry = &chunks[entries / CHUNK_SIZE][entries % CHUNK_SIZE];
  entry->key = key;
  entry->val = val;
  index->insert (lo, entry);
  hashTable[idx] = entry;
  entries++;
}

template <typename Key_t, typename Value_t>
Value_t
DefaultMap<Key_t, Value_t>::get (Key_t key)
{
  unsigned idx = hash (key) % HTABLE_SIZE;
  Entry *entry = hashTable[idx];
  if (entry && entry->key == key)
    return entry->val;

  int lo = 0;
  int hi = entries - 1;
  while (lo <= hi)
    {
      int md = (lo + hi) / 2;
      entry = index->fetch (md);
      int cmp = entry->key < key ? -1 : entry->key > key ? 1 : 0;
      if (cmp < 0)
 lo = md + 1;
      else if (cmp > 0)
 hi = md - 1;
      else
 {
   hashTable[idx] = entry;
   return entry->val;
 }
    }
  return (Value_t) 0;
}

template <typename Key_t, typename Value_t>
Value_t
DefaultMap<Key_t, Value_t>::get (Key_t key,
     typename Map<Key_t, Value_t>::Relation rel)
{
  if (rel != Map<Key_t, Value_t>::REL_EQ)
    return (Value_t) 0;
  return get (key);
}

template <typename Key_t, typename Value_t>
Value_t
DefaultMap<Key_t, Value_t>::remove (Key_t)
{

  if (1)
    
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
   (static_cast <bool> (
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
   0
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
   ) ? void (0) : __assert_fail (
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
   "0"
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h" 3 4
   , "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h", 202, __extension__ __PRETTY_FUNCTION__))
# 202 "/doner/binutils/binutils-515f23e/gprofng/src/DefaultMap.h"
             ;
  return (Value_t) 0;
}

template <typename Key_t, typename Value_t>
Vector<Value_t> *
DefaultMap<Key_t, Value_t>::values ()
{
  Vector<Value_t> *vals = new Vector<Value_t>(entries);
  for (int i = 0; i < entries; ++i)
    {
      Entry *entry = index->fetch (i);
      vals->append (entry->val);
    }
  return vals;
}

template <typename Key_t, typename Value_t>
Vector<Key_t> *
DefaultMap<Key_t, Value_t>::keySet ()
{
  Vector<Key_t> *keys = new Vector<Key_t>(entries);
  for (int i = 0; i < entries; ++i)
    {
      Entry *entry = index->fetch (i);
      keys->append (entry->key);
    }
  return keys;
}
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/HeapMap.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/HeapMap.h"
struct HeapObj;
struct HeapChunk;

typedef struct UnmapChunk
{
  long val;
  int64_t size;
  UnmapChunk *next;
} UnmapChunk;

class HeapMap
{
public:
  HeapMap ();
  ~HeapMap ();
  void allocate (uint64_t addr, long val);
  long deallocate (uint64_t addr);
  UnmapChunk *mmap (uint64_t addr, int64_t size, long val);
  UnmapChunk *munmap (uint64_t addr, int64_t size);

private:
  void allocateChunk ();
  HeapObj *getHeapObj ();
  void releaseHeapObj (HeapObj*);
  UnmapChunk *process (HeapObj *obj, uint64_t addr, int64_t size);

  HeapChunk *chunks;
  HeapObj *empty;
  HeapObj **chain;
  HeapObj *mmaps;
};
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 2

class Data_window;
class DbeFile;
class CallStack;
class JMethod;
class Sample;
class SegMem;
class LoadObject;
class SourceFile;
class UserLabel;
class PRBTree;
class Emsg;
class Emsgqueue;
struct JThread;
struct GCEvent;
class FileData;
class Module;
class Experiment;
template <class ITEM> class Vector;
# 66 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
typedef struct
{
  Vector<DbeInstr*> *natpcs;
  Vector<Histable*> *jpcs;
  long idx;
  FramePacket *frp;
  hrtime_t tstamp;
  uint32_t thrid;
  bool last_ctx;
} cstk_ctx;



typedef struct
{
  cstk_ctx* cstCtxAr[10000];
  int last_idx;
  long idx_begin;
  long idx_end;
  DataDescriptor *dDscr;
  Experiment *exp;
  void *cstk;
} cstk_ctx_chunk;

class Experiment : public Histable, public DbeMessages
{
public:

  enum Exp_status
  {
    SUCCESS,
    INCOMPLETE,
    FAILURE
  };

  Experiment ();
  virtual ~Experiment ();

  virtual Histable_type
  get_type ()
  {
    return EXPERIMENT;
  };
  virtual Vector<Histable*> *get_comparable_objs ();

  int groupId;
  Experiment *founder_exp;
  Vector<Experiment*> *children_exps;


  char *hostname;
  hrtime_t start_sec;
  char *username;
  char *architecture;
  Platform_t platform;
  WSize_t wsize;
  int clock;
  int varclock;
  int maxclock;
  int minclock;
  int ncpus;
  int hw_cpuver;
  char *machinemodel;
  char *os_version;
  int page_size;
  int npages;
  int exp_maj_version;
  int exp_min_version;
  int hex_field_width;

  int broken;
  int obsolete;
  bool hwc_default;
  int hwc_bogus;
  int hwc_lost_int;
  int hwc_scanned;
  int invalid_packet;
  bool exec_started;
  bool dataspaceavail;
  bool leaklistavail;
  bool heapdataavail;
  bool racelistavail;
  bool iodataavail;
  bool deadlocklistavail;
  bool timelineavail;
  bool ifreqavail;
  bool ompavail;
  bool has_java;
  char *uarglist;
  char *utargname;
  char *ucwd;
  char *cversion;
  char *dversion;
  char *jversion;


  Exp_status open (char *directory_name);


  Exp_status update ();


  Collection_params *
  get_params ()
  {
    return &coll_params;
  }

  Exp_status
  get_status ()
  {
    return status;
  }


  int
  nsamples ()
  {
    return samples->size ();
  }


  void purge ();

  void resetShowHideStack ();
  int save_notes (char*, bool);
  int delete_notes (bool);
  Experiment *getBaseFounder ();

  hrtime_t
  getStartTime ()
  {
    return exp_start_time;
  }
  hrtime_t getRelativeStartTime ();

  hrtime_t
  getWallStartSec ()
  {
    return start_sec;
  }

  hrtime_t
  getLastEvent ()
  {
    if (last_event != ZERO_TIME)
      return last_event;
    return exp_start_time;
  }

  hrtime_t
  getGCDuration ()
  {
    return gc_duration;
  }

  int
  getPID ()
  {
    return pid;
  }

  int
  getUserExpId ()
  {
    return userExpId;
  }

  int
  getExpIdx ()
  {
    return expIdx;
  }

  void
  setExpIdx (int idx)
  {
    expIdx = idx;
  }

  void
  setUserExpId (int idx)
  {
    userExpId = idx;
  }

  void
  setTinyThreshold (int limit)
  {
    tiny_threshold = limit;
  }

  bool
  isDiscardedTinyExperiment ()
  {
    return discardTiny;
  }

  Exp_status open_epilogue ();
  void read_experiment_data (bool read_ahead);
  static int copy_file_to_archive (const char *name, const char *aname, int hide_msg);
  static int copy_file_to_common_archive (const char *name, const char *aname,
        int hide_msg, const char *common_archive, int relative_path = 0);
  static int copy_file (char *name, char *aname, int hide_msg,
   char *common_archive = 
# 270 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 3 4
                         __null
# 270 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
                             , int relative_path = 0);




  DataDescriptor *get_raw_events (int data_id);
  Vector<DataDescriptor*> *getDataDescriptors ();



  int base_data_id (int data_id);
  DataView *create_derived_data_view (int data_id, DataView *dview);

  Vector<BaseMetric*>*
  get_metric_list ()
  {
    return metrics;
  }

  char *
  get_expt_name ()
  {
    return expt_name;
  };

  Vector<char*> *get_descendants_names ();
  char *get_fndr_arch_name ();
  char *get_arch_name ();
  char *getNameInArchive (const char *fname, bool archiveFile = false);
  char *checkFileInArchive (const char *fname, bool archiveFile = false);
  DbeFile *findFileInArchive (const char *className, const char *runTimePath);
  DbeFile *findFileInArchive (const char *fname);
  bool create_dir (char *dname);

  Vaddr
  ret_stack_base ()
  {
    return stack_base;
  };


  DbeInstr *map_Vaddr_to_PC (Vaddr addr, hrtime_t ts);
  DbeInstr *map_jmid_to_PC (Vaddr mid, int lineno, hrtime_t ts);
  Sample *map_event_to_Sample (hrtime_t ts);
  GCEvent *map_event_to_GCEvent (hrtime_t ts);

  DataView *
  getOpenMPdata ()
  {
    return openMPdata;
  }

  time_t
  get_mtime ()
  {
    return mtime;
  }

  Emsg *fetch_comments (void);
  Emsg *fetch_runlogq (void);
  Emsg *fetch_errors (void);
  Emsg *fetch_warnings (void);
  Emsg *fetch_notes (void);
  Emsg *fetch_ifreq (void);
  Emsg *fetch_pprocq (void);


  Emsgqueue *commentq;
  Emsgqueue *runlogq;

  Emsgqueue *errorq;
  Emsgqueue *warnq;
  Emsgqueue *notesq;
  Emsgqueue *pprocq;
  Emsgqueue *ifreqq;
  Map<const char*, LoadObject*> *loadObjMap;
  Vector<LoadObject*> *loadObjs;
  void append (LoadObject *lo);
  LoadObject *createLoadObject (const char *path, uint64_t chksum = 0);
  LoadObject *createLoadObject (const char *path, const char *runTimePath);
  SourceFile *get_source (const char *path);
  void set_clock (int clk);

  CallStack *
  callTree ()
  {
    return cstack;
  }

  CallStack *
  callTreeShowHide ()
  {
    return cstackShowHide;
  }

  uint32_t mapTagValue (Prop_type, uint64_t value);
  Histable *getTagObj (Prop_type, uint32_t idx);
  Vector<Histable*> *getTagObjs (Prop_type);

  JThread *map_pckt_to_Jthread (uint32_t tid, hrtime_t tstamp);
  JThread *get_jthread (uint32_t tid);

  Vector<JThread*> *
  get_jthreads ()
  {
    return jthreads;
  }

  Vector<GCEvent*> *
  get_gcevents ()
  {
    return gcevents;
  }

  bool need_swap_endian;
  Collection_params coll_params;


  uint64_t min_thread;
  uint64_t max_thread;
  uint64_t thread_cnt;
  uint64_t min_lwp;
  uint64_t max_lwp;
  uint64_t lwp_cnt;
  uint64_t min_cpu;
  uint64_t max_cpu;
  uint64_t cpu_cnt;
  uint64_t dsevents;
  uint64_t dsnoxhwcevents;


  PacketDescriptor *newPacketDescriptor (int kind, DataDescriptor *dDscr);
  PacketDescriptor *getPacketDescriptor (int kind);


  void dump_stacks (FILE *);
  void dump_map (FILE *);


  void DBG_memuse (Sample *);
  void DBG_memuse (const char *sname);
  void init_cache ();

  DefaultMap<int64_t, FileData*> *
  getFDataMap ()
  {
    return fDataMap;
  }
  CallStack *cstack;

protected:

  Exp_status status;
  Vector<SegMem*> *seg_items;
  CallStack *cstackShowHide;
  PRBTree *maps;

  hrtime_t gc_duration;
  hrtime_t exp_start_time;
  hrtime_t last_event;
  hrtime_t non_paused_time;
  hrtime_t resume_ts;
  void update_last_event (hrtime_t ts );

  char *expt_name;
  char *arch_name;
  char *fndr_arch_name;
  char *dyntext_name;

  int yyparse ();
  Vaddr stack_base;


  void write_header ();
  void write_coll_params ();

  Exp_status find_expdir (char *directory_name);


  void read_data_file (const char*, const char*);
  int read_log_file ();
  void read_labels_file ();
  void read_notes_file ();
  void read_archives ();
  int read_java_classes_file ();
  void read_map_file ();
  int read_overview_file ();
  int read_dyntext_file ();
  void read_omp_file ();
  void read_omp_preg ();
  void read_omp_task ();
  void read_ifreq_file ();
  void read_frameinfo_file ();




  virtual int process_arglist_cmd (char *, char *);
  virtual int process_desc_start_cmd (char *, hrtime_t, char *, char *, int, char *);
  virtual int process_desc_started_cmd (char *, hrtime_t, char *, char *, int, char *);
  virtual int process_fn_load_cmd (Module *mod, char *fname, Vaddr vaddr, int fsize, hrtime_t ts);
  virtual int process_fn_unload_cmd (char *, Vaddr, hrtime_t);
  virtual int process_hwcounter_cmd (char *, int, char *, char *, int, int, int, char *);
  virtual int process_hwsimctr_cmd (char *, int, char *, char *, char*, int, int, int, int, int);
  virtual int process_jcm_load_cmd (char*, Vaddr, Vaddr, int, hrtime_t);
  virtual int process_jcm_unload_cmd (char*, Vaddr, hrtime_t);
  virtual int process_Linux_kernel_cmd (hrtime_t);
  virtual int process_jthr_end_cmd (char *, uint64_t, Vaddr, Vaddr, hrtime_t);
  virtual int process_jthr_start_cmd (char *, char *, char *, char *, uint64_t, Vaddr, Vaddr, hrtime_t);
  virtual int process_gc_end_cmd (hrtime_t);
  virtual int process_gc_start_cmd (hrtime_t);
  virtual int process_sample_cmd (char *, hrtime_t, int id, char *lbl);
  virtual int process_sample_sig_cmd (char *, int);
  virtual int process_seg_map_cmd (char *, hrtime_t, Vaddr, int, int, int64_t, int64_t, int64_t, char *);
  virtual int process_seg_unmap_cmd (char *, hrtime_t, Vaddr);


  time_t mtime;
  hrtime_t exp_rel_start_time;
  bool exp_rel_start_time_set;
  Vector<UserLabel*> *userLabels;
  int userExpId;
  int expIdx;
  PRBTree *jmaps;
  Experiment* baseFounder;


  class ExperimentFile;


  class ExperimentHandler;
  class ExperimentLabelsHandler;

  uint64_t readPacket (Data_window *dwin, Data_window::Span *span);
  void readPacket (Data_window *dwin, char *ptr, PacketDescriptor *pDscr,
     DataDescriptor *dDscr, int arg, uint64_t pktsz);


  DataDescriptor *get_profile_events ();
  DataDescriptor *get_sync_events ();
  DataDescriptor *get_hwc_events ();
  DataDescriptor *get_heap_events ();
  DataDescriptor *get_heapsz_events ();
  DataDescriptor *get_iotrace_events ();
  DataDescriptor *get_race_events ();
  DataDescriptor *get_deadlock_events ();
  DataDescriptor *get_sample_events ();
  DataDescriptor *get_gc_events ();
  DataDescriptor *getDataDescriptor (int data_id);
  DataDescriptor *newDataDescriptor (int data_id, int flags = 0,
         DataDescriptor *master_dDscr = 
# 520 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 3 4
                                       __null
# 520 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
                                           );


  struct UIDnode;
  struct RawFramePacket;

  Vector<RawFramePacket*>*frmpckts;
  static int frUidCmp (const void*, const void*);
  RawFramePacket *find_frame_packet (uint64_t uid);

  static const int CHUNKSZ = 16384;
  long nnodes;
  long nchunks;
  UIDnode **chunks;
  UIDnode **uidHTable;
  Vector<UIDnode*> *uidnodes;
  bool resolveFrameInfo;
  bool discardTiny;
  int tiny_threshold;


  static int uidNodeCmp (const void *a, const void *b);
  UIDnode *add_uid (Data_window *dwin, uint64_t uid, int size, uint32_t *array, uint64_t link_uid);
  UIDnode *add_uid (Data_window *dwin, uint64_t uid, int size, uint64_t *array, uint64_t link_uid);
  UIDnode *new_uid_node (uint64_t uid, uint64_t val);
  UIDnode *get_uid_node (uint64_t uid, uint64_t val);
  UIDnode *get_uid_node (uint64_t uid);
  UIDnode *find_uid_node (uint64_t uid);

  ExperimentFile *logFile;


  Vector<DataDescriptor*> *dataDscrs;
  Vector<PacketDescriptor*> *pcktDscrs;
  long blksz;


  DataView *openMPdata;


  Map2D<uint32_t, hrtime_t, uint64_t> *mapPRid;
  Map2D<uint32_t, hrtime_t, void*> *mapPReg;
  Map2D<uint32_t, hrtime_t, void*> *mapTask;


  Map<const char*, DbeFile *> *archiveMap;
  Map<const char*, SourceFile*>*sourcesMap;

  void init ();
  void fini ();
  void post_process ();
  void constructJavaStack (FramePacket *, UIDnode *, Map<uint64_t, uint64_t> *);
  void resolve_frame_info (DataDescriptor*);
  void cleanup_cstk_ctx_chunk ();
  void register_metric (Metric::Type type);
  void register_metric (Hwcentry *ctr, const char* aux, const char* username);

  Sample *sample_last_used;
  GCEvent *gcevent_last_used;
  char *first_sample_label;
  Module *get_jclass (const char *className, const char *fileName);
  LoadObject *get_j_lo (const char *className, const char *fileName);

  Vector<BaseMetric*> *metrics;
  Vector<JThread*> *jthreads;
  Vector<JThread*> *jthreads_idx;
  Vector<GCEvent*> *gcevents;
  Vector<UnmapChunk*> *heapUnmapEvents;
  Vector<Sample*> *samples;

  DefaultMap<int64_t, FileData*> *fDataMap;
  DefaultMap<int, int64_t> *vFdMap;

  Vector<Vector<Histable*>*> *tagObjs;
  bool sparse_threads;

  SegMem **smemHTable;
  DbeInstr **instHTable;
  Map<unsigned long long, JMethod*> *jmidHTable;


  int pid;
  int ppid;
  int pgrp;
  int sid;


  struct MapRecord
  {

    enum
    {
      LOAD, UNLOAD
    } kind;
    Histable *obj;
    Vaddr base;
    Size size;
    hrtime_t ts;
    uint64_t foff;
  };

  void mrec_insert (MapRecord *mrec);
  SegMem *update_ts_in_maps (Vaddr addr, hrtime_t ts);
  int read_warn_file ();
  LoadObject *get_dynfunc_lo (const char *loName);
  Function *create_dynfunc (Module *mod, char *fname, int64_t vaddr, int64_t fsize);
  char *get_archived_name (const char *fname, bool archiveFile = false);

  Vector<MapRecord*> *mrecs;

private:
  void add_evt_time_to_profile_events (DataDescriptor *dDscr);
  DataView *create_heapsz_data_view (DataView *heap_dview);
  void compute_heapsz_data_view (DataView *heapsz_dview);
};

struct JThread
{
  JThread *next;
  char *name;
  char *group_name;
  char *parent_name;
  uint32_t tid;
  Vaddr jthr;
  Vaddr jenv;
  uint32_t jthr_id;
  hrtime_t start;
  hrtime_t end;

  JThread ()
  {
    name = 
# 651 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 3 4
          __null
# 651 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
              ;
    group_name = 
# 652 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 3 4
                __null
# 652 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
                    ;
    parent_name = 
# 653 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h" 3 4
                 __null
# 653 "/doner/binutils/binutils-515f23e/gprofng/src/Experiment.h"
                     ;
  }

  ~JThread ()
  {
    free (name);
    free (group_name);
    free (parent_name);
  }
  bool is_system ();
};

struct GCEvent
{

  GCEvent ()
  {
    id = -1;
  }

  ~GCEvent () { }

  hrtime_t start;
  hrtime_t end;
  int id;
};

class ExperimentLoadCancelException
{
public:

  ExperimentLoadCancelException () { };

  ~ExperimentLoadCancelException () { };
};
# 57 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 2

class DbeSession;
class Experiment;
class Expression;
class ExpGroup;
class Function;
class JMethod;
class Histable;
class DbeView;
class Module;
class LoadObject;
class DataObject;
class SourceFile;
class Settings;
class StringBuilder;
class UserLabel;
class DbeFile;
class DbeJarFile;
class FileData;
class HeapData;
template <typename ITEM> class DbeSyncMap;
template <class ITEM> class Vector;

struct DispTab;
struct List;
struct Countable;
class IndexObjType_t;

typedef struct
{
  char *path;
  Experiment *exp;
  DbeSession *ds;
  bool read_ahead;
} exp_ctx;

class DbeSession
{
public:
  DbeSession (Settings *_settings, bool _ipc_mode, bool _rdt_mode);
  ~DbeSession ();

  void reset ();
  void reset_data ();

  void
  set_interactive (bool _interactive)
  {
    interactive = _interactive;
  }

  bool
  is_interactive ()
  {
    return interactive;
  }

  bool is_datamode_available ();
  bool is_leaklist_available ();
  bool is_heapdata_available ();
  bool is_iodata_available ();
  bool is_racelist_available ();
  bool is_deadlocklist_available ();
  bool is_timeline_available ();
  bool is_ifreq_available ();
  bool is_omp_available ();
  bool has_java ();
  bool has_ompavail ();



  int get_clock (int id);


  int createView ();
  int createView (int index, int cloneindex);
  DbeView *getView (int index);
  void dropView (int index);


  Vector<char*> *get_group_or_expt (char *path);

  void open_experiment (Experiment *exp, char *path);
  Experiment *get_exp (int exp_ind);
  Vector<Vector<char*>*> *getExperimensGroups ();
  char *setExperimentsGroups (Vector<Vector<char*>*> *groups);
  char *drop_experiment (int exp_ind);
  int find_experiment (char *path);

  int
  nexps ()
  {
    return exps->size ();
  }
  int ngoodexps ();


  DataObject *createDataObject ();
  DataObject *createDataObject (DataObject *d, DataObject *p = 
# 155 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 3 4
                                                              __null
# 155 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h"
                                                                  );
  DataObject *createMasterDataObject (DataObject *);
  Vector<DataObject*> *get_dobj_elements (DataObject *);

  DataObject *
  get_Total_DataObject ()
  {
    return d_total;
  };

  DataObject *
  get_Unknown_DataObject ()
  {
    return d_unknown;
  };

  DataObject *
  get_Scalars_DataObject ()
  {
    return d_scalars;
  };

  DataObject *find_dobj_by_name (char *dobj_name);
  DataObject *find_dobj_match (DataObject *dobj);
  DataObject *find_dobj_master (DataObject *dobj);

  int
  ndobjs ()
  {
    return dobjs->size ();
  }


  bool
  check_ignore_no_xhwcprof ()
  {
    return settings->get_ignore_no_xhwcprof ();
  };


  bool
  check_ignore_fs_warn ()
  {
    return settings->get_ignore_fs_warn ();
  };


  DbeSyncMap<LoadObject> *loadObjMap;
  void append (LoadObject *lobj);
  LoadObject *createLoadObject (const char *nm, int64_t cksum = 0);
  LoadObject *createLoadObject (const char *nm, const char *runTimePath, DbeFile *df);

  Vector<LoadObject *> *
  get_LoadObjects ()
  {
    return lobjs;
  };

  void dobj_updateHT (DataObject *dobj);
  LoadObject *get_Total_LoadObject ();
  Vector<LoadObject*> *get_text_segments ();
  LoadObject *get_Unknown_LoadObject ();
  LoadObject *find_lobj_by_name (const char *lobj_name, int64_t cksum = 0);


  Vector<DispTab*> *
  get_TabList ()
  {
    return settings->get_TabList ();
  };

  Vector<bool> *
  get_MemTabList ()
  {
    return settings->get_MemTabState ();
  };

  void mobj_define (MemObjType_t *);


  BaseMetric *find_base_reg_metric (char *mcmd);
  Vector<BaseMetric*> *get_base_reg_metrics ();

  Vector<BaseMetric*> *
  get_all_reg_metrics ()
  {
    return reg_metrics;
  };

  BaseMetricTreeNode *get_reg_metrics_tree ();
  BaseMetric *register_metric_expr (BaseMetric::Type type, char *aux, char *expr_spec);
  BaseMetric *register_metric (BaseMetric::Type type);
  BaseMetric *register_metric (char *name, char *username, char *_def);
  BaseMetric *register_metric (Hwcentry *ctr, const char* cmdname, const char* username);
  void drop_metric (BaseMetric *);
  Module *createModule (LoadObject *lo, const char *nm);
  Module *createUnknownModule (LoadObject *lo);
  Module *createClassFile (char *className);
  DbeFile *getDbeFile (char *filename, int filetype);
  SourceFile *get_Unknown_Source ();
  SourceFile *createSourceFile (const char *path);
  Histable *createHistObject (Histable::Type);
  Function *createFunction ();
  Function *create_hide_function (LoadObject *lo);
  Function *get_Total_Function ();
  Function *get_Unknown_Function ();
  Function *get_JUnknown_Function ();
  Function *get_jvm_Function ();
  LoadObject *get_OMP_LoadObject ();
  Function *get_OMP_Function (int);
  JMethod *createJMethod ();
  Histable *createIndexObject (int idxtype, int64_t idx);
  Histable *createIndexObject (int idxtype, Histable *hobj);

  enum SpecialFunction
  {
    TruncatedStackFunc,
    FailedUnwindFunc,
    LastSpecialFunction
  };
  Function *getSpecialFunction (SpecialFunction);

  Histable *
  findObjectById (uint64_t _id)
  {
    long id = (long) _id;
    return (id >= 0 && id < objs->size ()) ? objs->fetch (id) : 
# 281 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 3 4
                                                               __null
# 281 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h"
                                                                   ;
  }

  Histable *findObjectById (Histable::Type type, int subtype, uint64_t id);


  bool find_obj (FILE *dis_file, FILE *inp_file, Histable *&obj, char *name,
   const char *sel, Histable::Type type, bool xdefault);
  int ask_which (FILE *dis_file, FILE *inp_file, Vector<Histable*> *list, char *name);
  LoadObject *map_NametoLoadObject (char *name, Vector<Histable*> *, int which);
  Module *map_NametoModule (char *name, Vector<Histable*> *, int which);
  Function *map_NametoFunction (char *, Vector<Histable*> *, const char *);
  DataObject *map_NametoDataObject (char *name, Vector<Histable*> *, int which);
  bool match_FName (char *name, Function *func);


  Vector<Function *> *match_func_names (const char *ustr, Histable::NameFormat nfmt);
  Vector<DataObject *> *match_dobj_names (char *);


  Vector<JThread*> *match_java_threads (char *ustr, int matchParent,
     Vector<uint64_t> * &grids,
     Vector<uint64_t> * &expids);

  Vector<FileData *> *match_file_names (char *ustr, Histable::NameFormat nfmt);


  Vector<char*> *
  get_search_path ()
  {
    return search_path;
  }

  Vector<DbeFile*>*get_classpath ();
  void set_search_path (Vector<char*> *path, bool reset);
  void set_search_path (char *lpath, bool reset);
  bool add_classpath (char *path);
  bool add_path (char *path);
  void set_pathmaps (Vector<pathmap_t*> *newPathMap);
  Vector<pathmap_t*> *get_pathmaps ();


  void dump_stacks (FILE *);
  void dump_dataobjects (FILE *);
  void dump_segments (FILE *);
  void dump_map (FILE *);


  int registerPropertyName (const char *name);
  int getPropIdByName (const char *name);
  char* getPropName (int propId);
  char* getPropUName (int propId);

  Vector<UserLabel*> *userLabels;
  UserLabel *findUserLabel (const char *name);
  DbeJarFile *get_JarFile (const char *name);
  void append (UserLabel *lbl);
  void append (SourceFile *sf);
  void append (Experiment *exp);
  void append (Hwcentry *exp);
  void set_need_refind ();


  Expression *findObjDefByName (const char *);
  void get_filter_keywords (Vector<void*> *res);


  Settings *
  get_settings ()
  {
    return settings;
  }


  Vector<void*> *getIndxObjDescriptions (void);
  Vector<void*> *getCustomIndxObjects (void);
  char *indxobj_define (const char *, char *, const char *, char *, char *);
  char *getIndexSpaceName (int index);
  char *getIndexSpaceDescr (int index);
  Expression *getIndexSpaceExpr (int index);
  char *getIndexSpaceExprStr (int index);
  int findIndexSpaceByName (const char *mname);
  void removeIndexSpaceByName (const char *mname);
  IndexObjType_t *getIndexSpace (int index);
  IndexObjType_t *findIndexSpace (const char *mname);
  Expression *ql_parse (const char *expr_spec);
  BaseMetric *find_metric (BaseMetric::Type type, const char *cmd, const char *expr_spec = 
# 367 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h" 3 4
                                                                                          __null
# 367 "/doner/binutils/binutils-515f23e/gprofng/src/DbeSession.h"
                                                                                              );
  static void dump (char *msg, Vector<Metric*> *mlist);
  static void dump (char *msg, Vector<BaseMetric*> *mlist);
  static Platform_t platform;
  Vector<ExpGroup *> *expGroups;
  HashMap<char*, LoadObject *> *comp_lobjs;
  HashMap<char*, DbeLine *> *comp_dbelines;
  HashMap<char*, SourceFile*>*comp_sources;
  char *localized_SP_UNKNOWN_NAME;

  void
  set_lib_visibility_used ()
  {
    lib_visibility_used = true;
  }

  bool
  is_lib_visibility_used ()
  {
    return lib_visibility_used;
  }

  void unlink_tmp_files ();
  char *get_tmp_file_name (const char *nm, bool for_java);

  Vector<char *> *tmp_files;
  int status_ompavail;
  int archive_mode;
  bool ipc_mode;
  bool rdt_mode;



  Vector<char*> *list_mach_models ();
  char *load_mach_model (char *);

  char *
  get_mach_model ()
  {
    return dbe_strdup (mach_model_loaded);
  };
  Vector<SourceFile *> *get_sources ();

private:
  void init ();
  void check_tab_avail ();
  bool add_path (char *path, Vector<char*> *pathes);
  Experiment *createExperiment ();




  Experiment *createExperimentPart1 ();
  void createExperimentPart2 (Experiment *exp);

  Histable *findIndexObject (int idxtype, uint64_t idx);
  void append_mesgs (StringBuilder *sb, char *path, Experiment *exp);
  static void insert_metric (BaseMetric *mtr, Vector<BaseMetric*> *mlist);
  void update_metric_tree (BaseMetric *m);

  char *find_mach_model (char *);
  Vector<Experiment*> *exps;
  Vector<Histable*> *objs;
  Vector<DataObject*> *dobjs;
  Vector<LoadObject*> *lobjs;
  Vector<Hwcentry*> *hwcentries;
  Vector<HashMap<uint64_t, Histable*>*> *idxobjs;
  HashMap<char*, SourceFile*> *sourcesMap;
  Vector<SourceFile*> *sources;
  Map<const char*, DbeJarFile*>*dbeJarFiles;
  Vector<Countable*> *metrics;
  Vector<BaseMetric*> *reg_metrics;
  BaseMetricTreeNode* reg_metrics_tree;
  Vector<char*> *search_path;
  Vector<char*> *classpath;
  Vector<DbeFile*> *classpath_df;
  Map<const char*, DbeFile*>*dbeFiles;
  Vector<DbeView*> *views;
  bool interactive;
  bool lib_visibility_used;
  LoadObject *lo_total;
  Function *f_total;
  LoadObject *lo_unknown;
  Function *f_unknown;
  SourceFile *sf_unknown;
  Function *f_jvm;
  Vector<Function*> *f_special;
  Function *j_unknown;
  LoadObject *lo_omp;
  Vector<Function*> *omp_functions;
  DataObject *d_unknown;
  DataObject *d_scalars;
  DataObject *d_total;
  List **dnameHTable;
  Settings *settings;
  Vector<IndexObjType_t*> *dyn_indxobj;
  int dyn_indxobj_indx;
  int dyn_indxobj_indx_fixed;

  void propNames_name_store (int propId, const char *propName);
  void propNames_name_store (int propId, const char *propName,
        const char *propUName, VType_type vType, int flags);
  char* propNames_name_fetch (int propId);
  Vector<PropDescr*> *propNames;
  char *defExpName;
  int user_exp_id_counter;
  char *mach_model_loaded;
  char *tmp_dir_name;
};


extern DbeSession *dbeSession;

extern Vector<char *> *split_str (char *str, char delimiter);
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 1
# 59 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 1
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
typedef enum
{
  NORMAL = 0, CANCELED
} PtreePhaseStatus;

class PathTree
{
public:

  PathTree (DbeView *_dbev, int _indxtype = -1)
  {
    construct (_dbev, _indxtype, PATHTREE_MAIN);
  }

  ~PathTree ();

  static void make_deltas (int vtype, TValue *v1, TValue *v2);
  static void make_ratios (int vtype, TValue *v1, TValue *v2);

  typedef enum
  {
    COMPUTEOPT_NONE = 0,
    COMPUTEOPT_OMP_CALLEE
  } PtreeComputeOption;

  Hist_data *compute_metrics (MetricList *, Histable::Type,
         Hist_data::Mode, Vector<Histable*>*,
         Histable*, Vector<Histable*>* sel_objs = 
# 59 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 3 4
                                                 __null
# 59 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
                                                     ,
         PtreeComputeOption flag = COMPUTEOPT_NONE);

  CStack_data *get_cstack_data (MetricList *);

  Vector<Histable*> *get_clr_instr (Histable *);
  Vector<void*> *get_cle_instr (Histable *, Vector<Histable*>*&);

  int
  get_status ()
  {
    return status;
  }

  int
  get_depth ()
  {
    return depth;
  }

  int
  getStackProp ()
  {
    return stack_prop;
  }

  typedef long NodeIdx;

  struct Node
  {
    inline void
    reset ()
    {
      ancestor = 0;
      descendants = 
# 93 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 3 4
                   __null
# 93 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
                       ;
      instr = 
# 94 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 3 4
             __null
# 94 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
                 ;
      funclist = 0;
    }

    NodeIdx ancestor;
    Vector<NodeIdx> *descendants;
    Histable *instr;
    NodeIdx funclist;
  };

  static const int CHUNKSZ = 16384;

  inline Node *
  NODE_IDX (NodeIdx idx)
  {
    return idx ? &chunks[idx / CHUNKSZ][idx % CHUNKSZ] : 
# 109 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 3 4
                                                        __null
# 109 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
                                                            ;
  }


  Emsg *fetch_stats (void);
  void delete_stats (void);
  Emsg *fetch_warnings (void);
  void delete_warnings (void);

  NodeIdx
  get_func_nodeidx (Function * func)
  {
    return fn_map == 
# 121 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 3 4
                    __null 
# 121 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
                         ? (NodeIdx) 0 : fn_map->get (func);
  }

  void print (FILE *);
  void dumpNodes (FILE *, Histable *);


  int get_ftree_depth ();
  Vector<void*>* get_ftree_level (BaseMetric *bm, int dpth);
  Vector<void*>* get_ftree_node_children (BaseMetric *bm, NodeIdx node_idx);
  Vector<Function*>* get_ftree_funcs ();
  Vector<Function*>* get_funcs ();

private:

  enum
  {
    MAX_DESC_HTABLE_SZ = 65535
  };

  typedef struct hash_node
  {
    NodeIdx nd;
    struct hash_node *next;
  } hash_node_t;

  int desc_htable_size;
  int desc_htable_nelem;
  hash_node_t **descHT;

  struct Slot
  {
    int id;
    ValueTag vtype;
    union
    {
      int **mvals;
      int64_t **mvals64;
    };
  };

  typedef enum
  {
    PATHTREE_MAIN = 0,
    PATHTREE_INTERNAL_OMP,
    PATHTREE_INTERNAL_FUNCTREE
  } PathTreeType;

  DbeView *dbev;
  int indxtype;
  int stack_prop;
  Expression *indx_expr;
  Histable *total_obj;
  Map<Function*, NodeIdx> *fn_map;
  Map<uint64_t, NodeIdx> *pathMap;
  Map<uint64_t, uint64_t> *hideMap;
  int status;
  NodeIdx root_idx;
  Node *root;
  int depth;
  long nodes;
  long dnodes;
  long nchunks;
  Node **chunks;
  int nslots;
  Slot *slots;
  int phaseIdx;
  int nexps;
  Emsgqueue *statsq;
  Emsgqueue *warningq;
  Hist_data *hist_data;
  int percent;
  int ndone;
  Histable **obj_list;
  Node **node_list;
  int *xlate;
  bool cancel_ok;
  PathTreeType pathTreeType;
  PathTree *ptree_internal;
  PathTree *ftree_internal;
  bool ftree_needs_update;
  Vector<Vector<NodeIdx>*> *depth_map;

  void init ();
  void fini ();
  PtreePhaseStatus reset ();
  PtreePhaseStatus add_experiment (int);
  PtreePhaseStatus process_packets (Experiment*, DataView*, int);
  DataView *get_filtered_events (int exp_index, int data_type);
  void construct (DbeView *_dbev, int _indxtype, PathTreeType _pathTreeType);

  PathTree (DbeView *_dbev, int _indxtype, PathTreeType _pathTreeType)
  {
    construct (_dbev, _indxtype, _pathTreeType);
  }

  inline int *
  allocate_chunk (int **p, NodeIdx idx)
  {
    int *res = new int[CHUNKSZ];
    for (int i = 0; i < CHUNKSZ; i++)
      res[i] = 0;
    p[idx] = res;
    return res;
  };

  inline int64_t *
  allocate_chunk (int64_t **p, NodeIdx idx)
  {
    int64_t *res = new int64_t[CHUNKSZ];
    for (int i = 0; i < CHUNKSZ; i++)
      res[i] = 0;
    p[idx] = res;
    return res;
  };

  inline Node *
  allocate_chunk (Node **p, NodeIdx idx)
  {
    Node *res = new Node[CHUNKSZ];
    for (int i = 0; i < CHUNKSZ; i++)
      res[i].reset ();
    p[idx] = res;
    return res;
  };

  inline bool
  IS_MVAL_ZERO (Slot& slot, NodeIdx idx)
  {
    if (slot.vtype == VT_LLONG || slot.vtype == VT_ULLONG)
      {
 int64_t *tmp = slot.mvals64[idx / CHUNKSZ];
 return tmp ? tmp[idx % CHUNKSZ] == 0 : true;
      }
    else
      {
 int *tmp = slot.mvals[idx / CHUNKSZ];
 return tmp ? tmp[idx % CHUNKSZ] == 0 : true;
      }
  }

  inline void
  ASN_METRIC_VAL (TValue& v, Slot& slot, NodeIdx idx)
  {
    if (slot.vtype == VT_LLONG)
      {
 int64_t *tmp = slot.mvals64[idx / CHUNKSZ];
 if (tmp)
   v.ll = tmp[idx % CHUNKSZ];
      }
    else if (slot.vtype == VT_ULLONG)
      {
 uint64_t *tmp = (uint64_t *) slot.mvals64[idx / CHUNKSZ];
 if (tmp)
   v.ull = tmp[idx % CHUNKSZ];
      }
    else
      {
 int *tmp = slot.mvals[idx / CHUNKSZ];
 if (tmp)
   v.i = tmp[idx % CHUNKSZ];
      }
  }

  inline void
  ADD_METRIC_VAL (TValue& v, Slot& slot, NodeIdx idx)
  {
    if (slot.vtype == VT_LLONG)
      {
 int64_t *tmp = slot.mvals64[idx / CHUNKSZ];
 if (tmp)
   v.ll += tmp[idx % CHUNKSZ];
      }
    else if (slot.vtype == VT_ULLONG)
      {
 uint64_t *tmp = (uint64_t *) slot.mvals64[idx / CHUNKSZ];
 if (tmp)
   v.ull += tmp[idx % CHUNKSZ];
      }
    else
      {
 int *tmp = slot.mvals[idx / CHUNKSZ];
 if (tmp) v.i += tmp[idx % CHUNKSZ];
      }
  }

  inline void
  SUB_METRIC_VAL (TValue& v, Slot& slot, NodeIdx idx)
  {
    if (slot.vtype == VT_LLONG)
      {
 int64_t *tmp = slot.mvals64[idx / CHUNKSZ];
 if (tmp)
   v.ll -= tmp[idx % CHUNKSZ];
      }
    else if (slot.vtype == VT_ULLONG)
      {
 uint64_t *tmp = (uint64_t *) slot.mvals64[idx / CHUNKSZ];
 if (tmp)
   v.ull -= tmp[idx % CHUNKSZ];
      }
    else
      {
 int *tmp = slot.mvals[idx / CHUNKSZ];
 if (tmp)
   v.i -= tmp[idx % CHUNKSZ];
      }
  }

  inline void
  INCREMENT_METRIC (Slot *slot, NodeIdx idx, int64_t val)
  {
    if (slot->vtype == VT_LLONG)
      {
 int64_t *tmp = slot->mvals64[idx / CHUNKSZ];
 if (tmp == 
# 336 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 3 4
           __null
# 336 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
               )
   tmp = allocate_chunk (slot->mvals64, idx / CHUNKSZ);
 tmp[idx % CHUNKSZ] += val;
      }
    else if (slot->vtype == VT_ULLONG)
      {
 uint64_t *tmp = (uint64_t *) slot->mvals64[idx / CHUNKSZ];
 if (tmp == 
# 343 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 3 4
           __null
# 343 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
               )
   tmp = (uint64_t *) allocate_chunk (slot->mvals64, idx / CHUNKSZ);
 tmp[idx % CHUNKSZ] += val;
      }
    else
      {
 int *tmp = slot->mvals[idx / CHUNKSZ];
 if (tmp == 
# 350 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 3 4
           __null
# 350 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
               )
   tmp = allocate_chunk (slot->mvals, idx / CHUNKSZ);
 tmp[idx % CHUNKSZ] += (int) val;
      }
  }

  inline Slot *
  SLOT_IDX (int idx)
  {
    if (idx < 0 || idx >= nslots)
      return 
# 360 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 3 4
            __null
# 360 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
                ;
    return &slots[idx];
  }

  int allocate_slot (int id, ValueTag vtype);
  void allocate_slots (Slot *slots, int nslots);
  int find_slot (int);
  NodeIdx new_Node (NodeIdx, Histable*, bool);
  NodeIdx find_path (Experiment*, DataView*, long);
  NodeIdx find_desc_node (NodeIdx, Histable*, bool);
  NodeIdx find_in_desc_htable (NodeIdx, Histable*, bool);
  Histable *get_hist_obj (Node *, Histable* = 
# 371 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 3 4
                                             __null
# 371 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
                                                 );
  Histable *get_hist_func_obj (Node *);
  Histable *get_compare_obj (Histable *obj);
  void get_metrics (NodeIdx, int);
  void get_metrics (Vector<Function*> *, Histable *);
  void get_clr_metrics (Vector<Histable*>*, NodeIdx, int, int);
  void get_clr_metrics (Vector<Histable*>*);
  void get_cle_metrics (Vector<Histable*>*, NodeIdx, int, int, int);
  void get_cle_metrics (Vector<Histable*>*, NodeIdx, int);
  void get_cle_metrics (Vector<Histable*>*);
  void get_self_metrics (Vector<Histable*>*, NodeIdx, bool, int);
  void get_self_metrics (Vector<Histable*>*);
  void get_self_metrics (Histable *, Vector<Function*> *funclist,
    Vector<Histable*>* sel_objs = 
# 384 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h" 3 4
                                 __null
# 384 "/doner/binutils/binutils-515f23e/gprofng/src/PathTree.h"
                                     );
  void get_cstack_list (CStack_data *, NodeIdx, int);


  void ftree_reset ();
  void ftree_build (PathTree *mstr);
  void ftree_build (PathTree *mstr, NodeIdx mstr_node_idx, NodeIdx local_node_idx);
  void depth_map_build ();
  void depth_map_build (NodeIdx node_idx, int depth);
  Vector<void*>* get_level (BaseMetric *bm, int dpth);
  Vector<void*>* get_nodes (BaseMetric *bm, Vector<NodeIdx> *node_idxs);
  Vector<void*>* get_node_children (BaseMetric *bm, NodeIdx node_idx);
  bool ftree_debug_match_hist_data (Hist_data *data, Hist_data *data_tmp);
  void ftree_dump ();


  void print (FILE *, PathTree::Node*, int);
  void printn (FILE *);
  int dbg_nodes (PathTree::Node*);
};
# 60 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 2

class Application;
class DataView;
class Experiment;
class Expression;
class FilterSet;
class FilterNumeric;
class FilterExp;
class Function;
class Histable;
class MetricList;
class Module;
class Ovw_data;
class PathTree;
class DataSpace;
class MemorySpace;
class Stats_data;
class LoadObject;
class IOActivity;
class HeapActivity;

class DbeView
{
public:
  DbeView (Application *app, Settings *_settings, int _vindex);
  DbeView (DbeView *dbev, int _vindex);
  ~DbeView ();


  Settings *
  get_settings ()
  {
    return settings;
  };


  Vector<DispTab*> *
  get_TabList ()
  {
    return settings->get_TabList ();
  };


  Vector<bool> *
  get_MemTabState ()
  {
    return settings->get_MemTabState ();
  };


  void
  set_MemTabState (Vector<bool>*sel)
  {
    settings->set_MemTabState (sel);
  };


  Vector<bool> *
  get_IndxTabState ()
  {
    return settings->get_IndxTabState ();
  };


  void
  set_IndxTabState (Vector<bool>*sel)
  {
    settings->set_IndxTabState (sel);
  };


  Cmd_status
  set_name_format (char *str)
  {
    return settings->set_name_format (str);
  };

  void
  set_name_format (int fname_format, bool soname)
  {
    settings->set_name_format (fname_format, soname);
  };

  Histable::NameFormat
  get_name_format ()
  {
    return settings->name_format;
  }


  Cmd_status set_view_mode (char *str, bool fromRC);
  void set_view_mode (VMode mode);

  VMode
  get_view_mode ()
  {
    return settings->get_view_mode ();
  };


  Cmd_status set_en_desc (char *str, bool rc);

  bool
  check_en_desc (const char * lineage_name = 
# 163 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 3 4
                                            __null
# 163 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
                                                , const char *targname = 
# 163 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 3 4
                                                                         __null
# 163 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
                                                                             )
  {
    return settings->check_en_desc (lineage_name, targname);
  };


  char *
  set_limit (char *str, bool rc)
  {
    settings->set_limit (str, rc);
    return 
# 173 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 3 4
          __null
# 173 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
              ;
  };

  char *
  set_limit (int _limit)
  {
    settings->limit = _limit;
    return 
# 180 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 3 4
          __null
# 180 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
              ;
  };

  int
  get_limit ()
  {
    return settings->limit;
  };


  char *
  set_printmode (char *str)
  {
    return settings->set_printmode (str);
  };

  enum PrintMode
  get_printmode ()
  {
    return settings->print_mode;
  };

  char
  get_printdelimiter ()
  {
    return settings->print_delim;
  };

  char *
  get_printmode_str ()
  {
    return dbe_strdup (settings->str_printmode);
  };



  Cmd_status
  proc_compcom (const char *cmd, bool isSrc, bool rc)
  {
    return settings->proc_compcom (cmd, isSrc, rc);
  };

  char *
  get_str_scompcom ()
  {
    return settings->str_scompcom;
  };

  char *
  get_str_dcompcom ()
  {
    return settings->str_dcompcom;
  };

  void
  set_src_compcom (int v)
  {
    settings->src_compcom = v;
  };

  int
  get_src_compcom ()
  {
    return settings->src_compcom;
  };

  void
  set_dis_compcom (int v)
  {
    settings->dis_compcom = v;
  };

  int
  get_dis_compcom ()
  {
    return settings->dis_compcom;
  };

  void
  set_cmpline_visible (bool vis)
  {
    settings->set_cmpline_visible (vis);
  }

  int
  get_cmpline_visible ()
  {
    return settings->cmpline_visible;
  }

  void
  set_funcline_visible (bool vis)
  {
    settings->set_funcline_visible (vis);
  }

  int
  get_funcline_visible ()
  {
    return settings->funcline_visible;
  }


  void
  set_src_visible (int vis)
  {
    settings->set_src_visible (vis);
  }

  int
  get_src_visible ()
  {
    return settings->src_visible;
  }

  void
  set_srcmetric_visible (bool vis)
  {
    settings->set_srcmetric_visible (vis);
  }

  bool
  get_srcmetric_visible ()
  {
    return settings->srcmetric_visible;
  }

  void
  set_hex_visible (bool vis)
  {
    settings->set_hex_visible (vis);
  }

  bool
  get_hex_visible ()
  {
    return settings->hex_visible;
  }


  Cmd_status
  proc_thresh (char *cmd, bool isSrc, bool rc)
  {
    return settings->proc_thresh (cmd, isSrc, rc);
  };

  void
  set_thresh_src (int v)
  {
    settings->threshold_src = v;
  };

  int
  get_thresh_src ()
  {
    return settings->threshold_src;
  };

  void
  set_thresh_dis (int v)
  {
    settings->threshold_dis = v;
  };

  int
  get_thresh_dis ()
  {
    return settings->threshold_dis;
  };


  Cmd_status
  proc_tlmode (char *cmd, bool rc)
  {
    return settings->proc_tlmode (cmd, rc);
  };

  void
  set_tlmode (int _tlmode)
  {
    settings->tlmode = _tlmode;
  };

  int
  get_tlmode ()
  {
    return settings->tlmode;
  };

  void
  set_stack_align (int _stack_align)
  {
    settings->stack_align = _stack_align;
  };

  int
  get_stack_align ()
  {
    return settings->stack_align;
  };

  void
  set_stack_depth (int _stack_depth)
  {
    settings->stack_depth = _stack_depth;
  };

  int
  get_stack_depth ()
  {
    return settings->stack_depth;
  };


  Cmd_status
  proc_tldata (char *cmd, bool rc)
  {
    return settings->proc_tldata (cmd, rc);
  };

  void
  set_tldata (const char* tldata_cmd)
  {
    settings->set_tldata (tldata_cmd);
  };

  char*
  get_tldata ()
  {
    return settings->get_tldata ();
  };


  enum LibExpand get_lo_expand (int idx);


  bool set_lo_expand (int idx, enum LibExpand how);


  bool set_libexpand (char *liblist, enum LibExpand flag);
  void update_lo_expands ();
  bool set_libdefaults ();
  void reset ();
  void reset_data (bool all);

  char *
  get_error_msg ()
  {
    return error_msg;
  };

  void
  clear_error_msg ()
  {
    error_msg = 
# 434 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 3 4
               __null
# 434 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
                   ;
  };

  char *
  get_warning_msg ()
  {
    return warning_msg;
  };

  void
  clear_warning_msg ()
  {
    warning_msg = 
# 446 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 3 4
                 __null
# 446 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
                     ;
  };
  char *get_processor_msg (int type);


  BaseMetric *register_metric_expr (BaseMetric::Type type, char *aux, char *expr_spec);
  Vector<BaseMetric*> *get_all_reg_metrics ();
  void reset_metric_list (MetricList *mlist, int cmp_mode);


  MetricList *get_metric_ref (MetricType mtype);


  MetricList *get_metric_list (int dsptype, int subtype);
  MetricList *get_metric_list (MetricType mtype);
  MetricList *get_metric_list (MetricType mtype, bool compare, int gr_num);
  MetricList *get_compare_mlist (MetricList *met_list, int grInd);


  char *setMetrics (char *metricspec, bool fromRcFile);


  char *setSort (char *sortname, MetricType mtype, bool fromRcFile);


  void setSort (int visindex, MetricType mtype, bool reverse);


  void resortData (MetricType mtype);


  char *getSort (MetricType mtype);
  char *getSortCmd (MetricType mtype);


  void reset_metrics ();
  bool comparingExperiments ();

  int
  get_compare_mode ()
  {
    return settings->compare_mode;
  };

  void
  reset_compare_mode (int mode)
  {
    settings->compare_mode = mode;
  };

  void set_compare_mode (int mode);
  void add_compare_metrics (MetricList *mlist);
  void remove_compare_metrics (MetricList *mlist);
  Histable *get_compare_obj (Histable *obj);


  void ifreq (FILE *);


  void add_experiment (int index, bool enabled);
  void add_subexperiment (int index, bool enabled);
  void add_experiment_epilogue ();
  void drop_experiment (int index);
  bool get_exp_enable (int n);
  void set_exp_enable (int n, bool e);


  char *set_filter (const char *filter_spec);
  char *get_filter (void);
  char *get_advanced_filter ();
  void backtrack_filter ();
  void update_advanced_filter ();
  FilterExp *get_FilterExp (Experiment *exp);

  Expression *
  get_filter_expr ()
  {
    return cur_filter_expr;
  };


  Vector<FilterNumeric*> *get_all_filters (int nexp);
  FilterNumeric *get_FilterNumeric (int nexp, int idx);
  bool set_pattern (int n, Vector<char *> *pattern_str, bool *error);
  bool set_pattern (int m, char *pattern);


  PathTree *
  get_path_tree ()
  {
    return ptree;
  };

  DataSpace *
  get_data_space ()
  {
    return dspace;
  };

  IOActivity *
  get_io_space ()
  {
    return iospace;
  };

  HeapActivity *
  get_heap_space ()
  {
    return heapspace;
  };
  Hist_data *get_data (MetricList *mlist, Histable *selObj, int type, int subtype);
  int get_sel_ind (Histable *selObj, int type, int subtype);


  Hist_data *get_hist_data (MetricList *mlist, Histable::Type type,
       int subtype,
       Hist_data::Mode mode,
       Vector<Histable*> *objs = 
# 563 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 3 4
                                __null
# 563 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
                                    ,
       Histable *context = 
# 564 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 3 4
                          __null
# 564 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
                              ,
       Vector<Histable*> *sel_objs = 
# 565 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 3 4
                                    __null
# 565 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
                                        ,
       PathTree::PtreeComputeOption flag = PathTree::COMPUTEOPT_NONE
       );
  Hist_data *get_hist_data (MetricList *mlist, Histable::Type type,
       int subtype,
       Hist_data::Mode mode, Histable *obj,
       Histable *context = 
# 571 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 3 4
                          __null
# 571 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
                              ,
       Vector<Histable*> *sel_objs = 
# 572 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h" 3 4
                                    __null
# 572 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
                                        ,
       PathTree::PtreeComputeOption flag = PathTree::COMPUTEOPT_NONE
       );
  CStack_data *get_cstack_data (MetricList *);
  Stats_data *get_stats_data (int index);
  Ovw_data *get_ovw_data (int index);

  char *names_src[3];
  char *names_dis[3];





  DataView *get_filtered_events (int idx, int data_id);
  DataView *get_filtered_events (int idx, int data_id,
     const int sortprops[], int sortprop_count);
# 599 "/doner/binutils/binutils-515f23e/gprofng/src/DbeView.h"
  bool adjust_filter (Experiment *exp);


  Hist_data *func_data;
  Hist_data *line_data;
  Hist_data *pc_data;
  Hist_data *src_data;
  Hist_data *dis_data;
  Hist_data *fitem_data;
  Hist_data *callers;
  Hist_data *callees;
  Hist_data *dobj_data;
  Hist_data *dlay_data;
  Hist_data *iofile_data;
  Hist_data *iovfd_data;
  Hist_data *iocs_data;
  Hist_data *heapcs_data;
  Vector<Hist_data*> *indx_data;
  Vector<int> *lobjectsNoJava;


  MemorySpace *getMemorySpace (int subtype);
  char *get_mobj_name (int subtype);
  void addIndexSpace (int type);
  Hist_data *get_indxobj_data (int subtype);
  void set_indxobj_sel (int subtype, int sel_ind);
  Histable *get_indxobj_sel (int subtype);
  void set_obj_sel_io (int type, long sel_ind);
  Histable *set_sel_obj (Histable *obj);
  Histable *get_sel_obj (Histable::Type type);
  Histable *get_sel_obj_io (uint64_t id, Histable::Type type);
  Histable *get_sel_obj_heap (uint64_t id);
  Histable *sel_obj;
  Histable *sel_dobj;
  Histable *sel_binctx;
  Vector<Histable*> *sel_idxobj;
  char *error_msg;
  char *warning_msg;
  Vector<int> *marks;
  Vector<int_pair_t> *marks2dsrc;
  Vector<int_pair_t> *marks2dsrc_inc;
  Vector<int_pair_t> *marks2ddis;
  Vector<int_pair_t> *marks2ddis_inc;

  void dump_nodes (FILE *);
  void dump_profile (FILE *);
  void dump_sync (FILE *);
  void dump_iotrace (FILE *);
  void dump_hwc (FILE *);
  void dump_heap (FILE *);
  void dump_gc_events (FILE *);

  int vindex;
  bool func_scope;

  bool
  get_func_scope ()
  {
    return func_scope;
  };

  void
  set_func_scope (bool scope_only)
  {
    func_scope = scope_only;
  };


  bool filter_active;

  bool
  get_filter_active ()
  {
    return filter_active;
  };

  DerivedMetrics *
  get_derived_metrics ()
  {
    return derived_metrics;
  }


  int
  getPhaseIdx ()
  {
    return phaseIdx;
  }

  enum DbeView_status
  {
    DBEVIEW_SUCCESS = 0,
    DBEVIEW_NO_DATA,
    DBEVIEW_IO_ERROR,
    DBEVIEW_BAD_DATA,
    DBEVIEW_BAD_SYMBOL_DATA,
    DBEVIEW_NO_SEL_OBJ
  };
  static char *status_str (DbeView_status status);

  bool
  isOmpDisMode ()
  {
    return ompDisMode;
  }

  void
  setOmpDisMode ()
  {
    ompDisMode = true;
  }

  void
  resetOmpDisMode ()
  {
    ompDisMode = false;
  }

  bool
  isShowHideChanged ()
  {
    return showHideChanged;
  }

  void
  setShowHideChanged ()
  {
    showHideChanged = true;
  }

  void
  resetShowHideChanged ()
  {
    showHideChanged = false;
  }

  bool
  isNewViewMode ()
  {
    return newViewMode;
  }

  void
  setNewViewMode ()
  {
    newViewMode = true;
  }

  void
  resetNewViewMode ()
  {
    newViewMode = false;
  }

  bool
  isFilterHideMode ()
  {
    return filterHideMode;
  }

  void
  setFilterHideMode ()
  {
    filterHideMode = true;
  }

  void
  resetFilterHideMode ()
  {
    filterHideMode = false;
  }

  bool
  isShowAll ()
  {
    return showAll;
  }

  void
  setShowAll ()
  {
    showAll = true;
  }

  void
  resetShowAll ()
  {
    showAll = false;
  }
  void resetAndConstructShowHideStacks ();

private:
  void init ();
  Metric *get_compare_metric (Metric *mtr, int groupNum);


  FilterSet *get_filter_set (int n);

  void purge_events (int n = -1);

  char *cur_filter_str;
  char *prev_filter_str;
  Expression *cur_filter_expr;
  bool noParFilter;


  Vector<MemorySpace*> *memspaces;
  MemorySpace *addMemorySpace (int mtype);

  Vector<FilterSet*> *filters;
  Vector<enum LibExpand> *lo_expands;
  Vector<BaseMetric*> *reg_metrics;
  Vector<MetricList*> *metrics_lists;

  Vector<MetricList*> *metrics_ref_lists;
  DerivedMetrics *derived_metrics;

  DataSpace *dspace;
  PathTree *ptree;
  Vector<PathTree *> *indxspaces;
  IOActivity *iospace;
  HeapActivity *heapspace;
  int phaseIdx;
  bool ompDisMode;
  bool filterHideMode;
  bool showAll;
  bool showHideChanged;
  bool newViewMode;


  Vector<Vector<DataView*>*> *dataViews;
  Settings *settings;

  Application *app;
  Function *convert_line_to_func (DbeLine *dbeLine);
  DbeInstr *convert_line_to_instr (DbeLine *dbeLine);
  DbeInstr *convert_func_to_instr (Function *func);
  DbeInstr *lastSelInstr;
  Function *lastSelFunc;
  void constructShowHideStack (DataDescriptor* dDscr, Experiment *exp);
  void resetAndConstructShowHideStack (Experiment *exp);
};
# 33 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/CallStack.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/CallStack.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DbeLock.h" 1
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/DbeLock.h"
class DbeLock
{
public:
  DbeLock ();
  ~DbeLock ();
  void aquireLock ();
  void releaseLock ();

private:
  pthread_mutex_t lock;
};
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/CallStack.h" 2

class DataDescriptor;
class FramePacket;
class DbeInstr;
class Histable;
template <class ITEM> class Vector;
class CallStackNode;

class Descendants
{
public:
  Descendants ();
  ~Descendants ();
  CallStackNode *find (Histable *hi, int *index);
  void append (CallStackNode *item);
  void insert (int ind, CallStackNode *item);
  int volatile count;

private:

  enum
  {
    DELTA = 8
  };

  int limit;
  CallStackNode **data;
  CallStackNode *first_data[4];
};

class CallStackNode : public Descendants
{
public:
  CallStackNode (CallStackNode *_ancestor, Histable *_instr);
  ~CallStackNode ();
  bool compare (long start, long end, Vector<Histable*> *objs, CallStackNode *mRoot);
  void dump ();

  CallStackNode *
  get_ancestor ()
  {
    return ancestor;
  }

  Histable *
  get_instr ()
  {
    return instr;
  }

  CallStackNode *alt_node;
  Histable *instr;
  CallStackNode *ancestor;
};

class CallStack
{
public:
  static CallStack *getInstance (Experiment *exp);
  virtual ~CallStack () { };

  virtual void add_stack (DataDescriptor *dDscr, long idx, FramePacket *frp,
     cstk_ctx_chunk* cstCtxChunk) = 0;



  virtual void *add_stack (Vector<Histable*> *objs) = 0;


  virtual void print (FILE *) = 0;


  static int stackSize (void *stack);
  static Histable *getStackPC (void *stack, int n);
  static Vector<Histable*> *getStackPCs (void *stack, bool get_hide_stack = false);
  static void setHideStack (void *stack, void *hideStack);
  static int compare (void *stack1, void *stack2);

  virtual CallStackNode *
  get_node (int)
  {
    return 
# 109 "/doner/binutils/binutils-515f23e/gprofng/src/CallStack.h" 3 4
          __null
# 109 "/doner/binutils/binutils-515f23e/gprofng/src/CallStack.h"
              ;
  };

};
# 35 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.h" 1
# 42 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.h"
# 1 "./../common/cc_libcollector.h" 1
# 34 "./../common/cc_libcollector.h"
typedef enum
{
  FOLLOW_NONE = 0x0,
  FOLLOW_EXEC = 0x1,
  FOLLOW_FORK = 0x2,
  FOLLOW_ON = 0x3,
  FOLLOW_COMBO = 0x4,
  FOLLOW_ALL = 0x7
} Follow_type;
# 43 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.h" 2





typedef struct {
    int min;
    int res;
    int max;
    int hival;
    int normval;
    int lowval;
} clk_params_t;
# 64 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.h"
class Coll_Ctrl {
public:


  Coll_Ctrl(int _interactive = 0, bool _defHWC = false, bool _kernelHWC = false);
  ~Coll_Ctrl();

  Coll_Ctrl(Coll_Ctrl *cc);
  char *check_expt(char **);
  char *setup_experiment();
  void close_expt();
  void interrupt();
  void delete_expt();


  char *enable_expt();
  void disable_expt() { enabled = 0; };
  int isenabled() { return enabled; };


  int isopened() { return opened; };


  void set_clk_params(int min, int res, int max, int hi, int norm, int lo);
  char *set_clkprof(const char *valptr, char **warn);
  char *reset_clkprof(int val);
  int get_sys_period() { return clk_params.min; };
  int get_clk_min() { return clk_params.min; };
  int get_clk_max() { return clk_params.max; };
  int get_clk_res() { return clk_params.res; };
  int get_clkprof_mode() { return clkprof_enabled; };
  int get_clkprof_timer() { return clkprof_timer; };


  char *set_synctrace(const char *valptr);
  int get_synctrace_mode() { return synctrace_enabled; };
  int get_synctrace_thresh() { return synctrace_thresh; };
  int get_synctrace_scope() { return synctrace_scope; };


  char *set_heaptrace(const char *);
  int get_heaptrace_mode() { return heaptrace_enabled; };
  int get_heaptrace_checkmode() { return heaptrace_checkenabled; };


  char *set_iotrace(const char *);
  int get_iotrace_mode() { return iotrace_enabled; };


  void setup_hwc();
  char *set_hwcstring(const char *str, char **warn);
  char *add_hwcstring(const char *str, char **warn);
  char *add_default_hwcstring(const char *str, char **warn, bool add, bool forKernel = false);
  void set_hwcdefault();
  void disable_hwc();
  int get_hwc_cnt() { return hwcprof_enabled_cnt; };
  int get_hwc_mode() { return hwcprof_enabled_cnt ? 1 : 0; };
  char *get_hwc_string() { return hwc_string; };

  Hwcentry *
  get_hwc_entry (int n)
  {
    if (n < 0 || n >= hwcprof_enabled_cnt)
      return 0;
    return &hwctr[n];
  };

  void hwcentry_dup (Hwcentry *, Hwcentry *);
  char *get_hwc_counter (int n) { return get_hwc_entry (n)->name; };


  char *set_count (const char *);
  int get_count () { return count_enabled; };
  void set_Iflag () { Iflag = 1; };
  void set_Nflag () { Nflag = 1; };



  char *set_time_run (const char *);
  int get_time_run (void) { return time_run; };
  int get_start_delay (void) { return start_delay; };


  char *set_attach_pid (char *);
  int get_attach_pid (void) { return attach_pid; };






  char *set_java_mode (const char *);
  int get_java_mode () { return java_mode; };
  int get_java_default () { return java_default; };


  char *set_java_path (const char *);
  char *get_java_path () { return java_path; };


  char *set_java_args (char *);
  char *get_java_args () { return java_args; };
  int get_java_arg_cnt () { return njava_args; };


  char *set_archive_mode (const char *);
  char *get_archive_mode () { return archive_mode; };


  char *set_follow_mode (const char *);
  Follow_type get_follow_mode () { return follow_mode; };
  int get_follow_default () { return follow_default; };
  char *get_follow_usr_spec () { return follow_spec_usr; };
  char *get_follow_cmp_spec () { return follow_spec_cmp; };


  char *set_prof_idle (const char *);
  int get_prof_idle () { return prof_idle; };



  char *set_debug_mode (int);
  int get_debug_mode () { return debug_mode; };


  int find_sig (const char *);

  char *find_signal_name (int signal);


  char *set_pauseresume_signal (int, int);
  int get_pauseresume_signal () { return pauseresume_sig; };
  int get_pauseresume_pause () { return pauseresume_pause; };


  char *set_sample_signal (int);
  int get_sample_signal () { return sample_sig; };


  char *set_sample_period (const char *);
  int get_sample_period (void) { return sample_period; };


  char *set_size_limit (const char *);
  int get_size_limit (void) { return size_limit; };



  int set_target (char *);
  char *get_target () { return target_name; };


  void set_default_stem (const char *);
  char *set_expt (const char *, char **, bool);
  char *get_expt () { return expt_name; };


  char *set_directory (char *, char **);

  char *get_directory () { return udir_name ? udir_name : store_dir; };


  char *get_experiment () { return store_ptr; };
  char *update_expt_name (bool verbose = true, bool ckonly = false, bool newname = false);


  void remove_exp_dir ();


  char *
  get_data_desc ()
  {
    return data_desc;
  };


  char *set_group (char *);
  char *get_group () { return expt_group; };


  char *show (int);
  char *show_expt ();


  char **get_collect_args ();


  char *get_node_name () { return node_name; };
  long get_ncpus () { return ncpus; };
  int get_cpu_clk_freq () { return cpu_clk_freq; };
  int get_cpc_cpuver () { return cpc_cpuver; };


  void set_nofswarn () { nofswarn = 1; };


  char *get (char *);
  char *set (char *, const char *);
  char *unset (char *);
  void set_project_home (char *);

private:
  int interactive;
  bool defHWC;
  bool kernelHWC;
  int opened;
  int enabled;
  volatile int uinterrupt;


  char *node_name;
  long ncpus;
  int cpu_clk_freq;
  int cpc_cpuver;
  long sys_resolution;
  int sys_period;
  int sample_period;
  int sample_default;
  int size_limit;
  long npages;
  long page_size;
  clk_params_t clk_params;
# 296 "/doner/binutils/binutils-515f23e/gprofng/src/collctrl.h"
  char *default_stem;
  char *uexpt_name;
  char *expt_name;
  char *expt_dir;
  char *base_name;
  char *udir_name;

  char *store_dir;
  char *prev_store_dir;
  char *store_ptr;
  char *expt_group;
  char *project_home;

  char *target_name;
  char *data_desc;
  char *lockname;
  int lockfd;

  int nofswarn;
  int expno;


  int debug_mode;



  int clkprof_enabled;


  int clkprof_default;


  int clkprof_timer;
  int clkprof_timer_target;



  int hwcprof_default;
  int hwcprof_enabled_cnt;
  char *hwc_string;
  Hwcentry hwctr[20];

  int synctrace_enabled;



  int synctrace_thresh;



  int synctrace_scope;

  int heaptrace_enabled;




  int heaptrace_checkenabled;
  int iotrace_enabled;



  int count_enabled;
  int Iflag;
  int Nflag;


  int attach_pid;


  int time_run;
  int start_delay;


  int java_mode;
  int java_default;
  char *java_path;
  char *java_args;
  int njava_args;


  Follow_type follow_mode;
  int follow_default;
  char *follow_spec_usr;
  char *follow_spec_cmp;
  int prof_idle;
  char *archive_mode;


  int pauseresume_sig;
  int pauseresume_pause;
  int sample_sig;
  char *report_signal_conflict (int);
  char *check_consistency ();
  void determine_profile_params ();
  char *preprocess_names ();
  char *get_exp_name (const char *);
  char *create_exp_dir ();
  void build_data_desc ();
  char *check_group ();
  char *join_group ();
  void free_hwc_fields (Hwcentry *tmpctr);


  void set_clkprof_timer_target (int microseconds);
  void adjust_clkprof_timer (int microseconds);
  hrtime_t clkprof_timer_2_hwcentry_min_time (int clkprof_microseconds);
};
# 36 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Command.h" 1
# 43 "/doner/binutils/binutils-515f23e/gprofng/src/Command.h"
enum CmdType
{

  FUNCS = 0,
  HOTPCS,
  HOTLINES,
  FDETAIL,
  OBJECTS,
  LDETAIL,
  PDETAIL,
  SOURCE,
  DISASM,
  METRIC_LIST,
  METRICS,
  SORT,
  GPROF,
  GMETRIC_LIST,
  FSINGLE,
  CSINGLE,
  CPREPEND,
  CAPPEND,
  CRMFIRST,
  CRMLAST,
  CALLTREE,
  CALLFLAME,


  SCOMPCOM,
  STHRESH,
  DCOMPCOM,
  COMPCOM,
  DTHRESH,


  LEAKS,
  ALLOCS,
  HEAP,
  HEAPSTAT,


  IOACTIVITY,
  IOVFD,
  IOCALLSTACK,
  IOSTAT,


  RACE_EVNTS,
  RACE_SUM,


  DEADLOCK_EVNTS,
  DEADLOCK_SUM,


  DOBJECTS,
  DO_SINGLE,
  DO_LAYOUT,
  DO_METRIC_LIST,


  MEMOBJ,
  MEMOBJLIST,
  MEMOBJDEF,
  MEMOBJDROP,
  MACHINEMODEL,


  INDXOBJDEF,
  INDXOBJLIST,
  INDXOBJ,
  INDX_METRIC_LIST,


  OBJECT_LIST,
  OBJECT_SELECT,
  SAMPLE_LIST,
  SAMPLE_SELECT,
  THREAD_LIST,
  THREAD_SELECT,
  LWP_LIST,
  LWP_SELECT,
  CPU_LIST,
  CPU_SELECT,


  OBJECT_SHOW,
  OBJECT_HIDE,
  OBJECT_API,
  OBJECTS_DEFAULT,


  FILTERS,


  COMPARE,
  PRINTMODE,
  HEADER,
  OVERVIEW_NEW,
  SAMPLE_DETAIL,
  STATISTICS,
  EXP_LIST,
  DESCRIBE,
  OUTFILE,
  APPENDFILE,
  LIMIT,
  NAMEFMT,
  VIEWMODE,
  EN_DESC,
  SETPATH,
  ADDPATH,
  PATHMAP,
  LIBDIRS,
  SCRIPT,
  VERSION_cmd,
  QUIT,
  PROCSTATS,


  ADD_EXP,
  DROP_EXP,
  OPEN_EXP,


  DMETRICS,
  DSORT,
  TLMODE,
  TLDATA,
  TABS,
  TIMELINE,
  MPI_TIMELINE,
  MPI_CHART,
  TIMELINE_CLASSIC_TBR,
  SOURCE_V2,
  DISASM_V2,
  RTABS,
  DUALSOURCE,
  SOURCEDISAM,

  HELP,
  IFREQ,
  DUMPNODES,
  DUMPSTACKS,
  DUMPUNK,
  DUMPFUNC,
  DUMPDOBJS,
  DUMPMAP,
  DUMPENTITIES,
  DUMP_PROFILE,
  DUMP_SYNC,
  DUMP_HWC,
  DUMP_HEAP,
  DUMP_IOTRACE,
  RACE_ACCS,
  DMPI_FUNCS,
  DMPI_MSGS,
  DMPI_EVENTS,
  DMEM,
  DUMP_GC,
  DKILL,
  IGNORE_NO_XHWCPROF,
  IGNORE_FS_WARN,
  QQUIT,
  HHELP,
  NO_CMD,
  DUMMY_CMD,


  LOADOBJECT,
  LOADOBJECT_LIST,
  LOADOBJECT_SELECT,


  LAST_CMD,
  STDIN,
  COMMENT,
  WHOAMI,


  AMBIGUOUS_CMD,
  UNKNOWN_CMD
};

typedef struct
{
  const CmdType token;
  const char *str;
  const char *alt;
  const char *arg;
  const int arg_count;
  char **desc;
} Cmdtable;


class Command
{
public:


  static CmdType get_command (char *cmd, int &arg_count, int &param);
  static const char *get_cmd_str (CmdType type);
  static void print_help (char *prog_name, bool cmd_line, bool usermode, FILE *outf);
  static char *get_err_string (Cmd_status err);

  static const char *DEFAULT_METRICS;
  static const char *DEFAULT_SORT;
  static const char *DEFAULT_CMD;
  static const char *ALL_CMD;
  static const char *ANY_CMD;
  static const char *NONE_CMD;
  static const char *HWC_CMD;
  static const char *BIT_CMD;

private:
  static const int user_no;
  static const int hidden_no;
  static const int command_no;

  static void init_desc ();
  static char *fmt_help (int nc, char head);
};


struct DispTab
{
  DispTab (int ntype, int num, bool vis, CmdType token)
  {
    type = ntype;
    order = num;
    visible = vis;
    available = true;
    cmdtoken = token;
  }

  void setAvailability (bool val) { available = val; }

  int type;
  int order;
  bool visible;
  bool available;
  CmdType cmdtoken;
  int param;
};
# 37 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.h"
class MetricList;
template <class ITEM> class Vector;
typedef long long Obj;

Vector<char*> *dbeGetInitMessages (void);
Vector<char*> *dbeGetExpPreview (int dbevindex, char *exp_name);
char *dbeGetExpParams (int dbevindex, char *exp_name);
char *dbeCreateDirectories (const char *dirname);
char *dbeDeleteFile (const char *pathname);
Vector<char*> *dbeReadFile (const char *pathname);
int dbeWriteFile (const char *pathname, const char *contents);
char *dbeGetFileAttributes (const char *filename, const char *format);
char *dbeGetFiles (const char *dirname, const char *format);
char *dbeGetRunningProcesses (const char *format);
char *dbeOpenExperimentList (int dbevindex, Vector<Vector<char*>*> *groups,
        bool sessionRestart);
char *dbeReadRCFile (int dbevindex, char* path);
char *dbeSetExperimentsGroups (Vector<Vector<char*>*> *groups);
Vector<Vector<char*>*> *dbeGetExperimensGroups ();
char *dbeDropExperiment (int dbevindex, Vector<int> *drop_index);
Vector<char*> *dbeGetExpsProperty (const char *prop_name);
Vector<char*> *dbeGetExpName (int dbevindex);
Vector<int> *dbeGetExpState (int dbevindex);
Vector<bool> *dbeGetExpEnable (int dbevindex);
bool dbeSetExpEnable (int dbevindex, Vector<bool> *enable);
Vector<char*> *dbeGetExpInfo (int dbevindex);
bool dbeGetViewModeEnable ();
bool dbeGetJavaEnable ();
int dbeUpdateNotes (int dbevindex, int exp_id, int type, char* text,
      bool handle_file);
Vector<void*> *dbeGetTabListInfo (int dbevindex);
Vector<bool> *dbeGetTabSelectionState (int dbevindex);
void dbeSetTabSelectionState (int dbevindex, Vector<bool> *selected);
Vector<bool> *dbeGetMemTabSelectionState (int dbevindex);
void dbeSetMemTabSelectionState (int dbevindex, Vector<bool> *selected);
Vector<bool> *dbeGetIndxTabSelectionState (int dbevindex);
void dbeSetIndxTabSelectionState (int dbevindex, Vector<bool> *selected);
Vector<char*> *dbeGetLoadObjectName (int dbevindex);
Vector<void *> *dbeGetLoadObjectList (int dbevindex);
Vector<char*> *dbeGetSearchPath (int dbevindex);
void dbeSetSearchPath (int dbevindex, Vector<char*> *path);
Vector<void*> *dbeGetPathmaps (int dbevindex);
char *dbeSetPathmaps (Vector<char*> *from, Vector<char*> *to);
char *dbeAddPathmap (int dbevindex, char *from, char *to);
char *dbeGetMsg (int dbevindex, int type);
int dbeInitView (int index, int cloneindex);
void dbeDeleteView (int dbevindex);


MetricList *dbeGetMetricListV2 (int dbevindex, MetricType mtype,
    Vector<int> *type, Vector<int> *subtype,
    Vector<bool> *sort, Vector<int> *vis,
    Vector<char*> *aux, Vector<char*> *expr_spec,
    Vector<char*> *legends);
Vector<void*> *dbeGetRefMetricsV2 ();
Vector<void*> *dbeGetCurMetricsV2 (int dbevindex, MetricType mtype);
void dbeSetSort (int dbevindex, int sort_index, MetricType mtype, bool reverse);


Vector<void*> *dbeGetRefMetricTree (int dbevindex, bool include_unregistered);
Vector<void*> *dbeGetRefMetricTreeValues (int dbevindex, Vector<char *> *met_cmds,
       Vector<char *> *non_met_cmds);
Vector<char*> *dbeGetOverviewText (int dbevindex);
Vector<int> *dbeGetAnoValue (int dbevindex);
void dbeSetAnoValue (int dbevindex, Vector<int> *set);
int dbeGetNameFormat (int dbevindex);
bool dbeGetSoName (int dbevindex);
void dbeSetNameFormat (int dbevindex, int fnames, bool soname);
int dbeGetViewMode (int dbevindex);
void dbeSetViewMode (int dbevindex, int nmode);
Vector<void*> *dbeGetTLValue (int dbevindex);
void dbeSetTLValue (int dbevindex, const char *tldata_cmd,
      int entitiy_prop_id, int stackalign, int stackdepth);
Vector<void*> *dbeGetExpFounderDescendants ();
Vector<void*> *dbeGetExpSelection (int dbevindex);
Vector<void*> *dbeGetSampleStatus (int dbevindex, int nselected,
       Vector<bool> *selected);
Vector<unsigned> *dbeGetSampleSize (int dbevindex, Vector<bool> *selected);
char *dbeCheckPattern (int dbevindex, Vector<bool> *selected, char *pattern,
         int type);
char *dbeSetFilterStr (int dbevindex, char *filter_str);
char *dbeGetFilterStr (int dbevindex);
int dbeValidateFilterExpression (char *str_expr);
Vector<void*> *dbeGetFilterKeywords (int dbevindex);
Vector<void*> *dbeGetFilters (int dbevindex, int nexp);
bool dbeUpdateFilters (int dbevindex, Vector<bool> *selected,
         Vector<char*> *pattern_str);
char *dbeComposeFilterClause (int dbevindex, int type, int subtype,
         Vector<int>*selections);
Vector<int> *dbeGetLoadObjectState (int dbevindex);
void dbeSetLoadObjectState (int dbevindex, Vector<int> *selected);
void dbeSetLoadObjectDefaults (int dbevindex);
Vector<void*> *dbeGetMemObjects (int dbevindex);
char *dbeDefineMemObj (char *name, char *index_expr, char *_machmodel,
         char *sdesc, char *ldesc);
char *dbeDeleteMemObj (char *name);
Vector<char*> *dbeGetCPUVerMachineModel (int dbevindex);
char *dbeLoadMachineModel (char *name);
char *dbeGetMachineModel ();
Vector<char*> *dbeListMachineModels ();
void dbeDetectLoadMachineModel (int dbevindex);
Vector<void*> *dbeGetIndxObjDescriptions (int dbevindex);
Vector<void*> *dbeGetCustomIndxObjects (int dbevindex);
char *dbeDefineIndxObj (char *name, char *index_expr, char *sdesc, char *ldesc);
void dbeSetSelObj (int dbevindex, Obj sel_obj, int type, int subtype);
void dbeSetSelObjV2 (int dbevindex, uint64_t id);
Obj dbeGetSelObj (int dbevindex, int type, int subtype);
uint64_t dbeGetSelObjV2 (int dbevindex, char *typeStr);
int dbeGetSelIndex (int dbevindex, Obj sel_obj, int type, int subtype);
Vector<uint64_t> *dbeGetSelObjsIO (int dbevindex, Vector<uint64_t> *ids, int type);
Vector<uint64_t> *dbeGetSelObjIO (int dbevindex, uint64_t id, int type);
uint64_t dbeGetSelObjHeapTimestamp (int dbevindex, uint64_t id);
int dbeGetSelObjHeapUserExpId (int dbevindex, uint64_t id);
char *dbeSetPrintLimit (int dbevindex, int limit);
int dbeGetPrintLimit (int dbevindex);
char *dbeSetPrintMode (int dbevindex, char *printmode);
int dbeGetPrintMode (int dbevindex);
char *dbeGetPrintModeString (int dbevindex);
char dbeGetPrintDelim (int dbevindex);
Vector<void*> *dbeGetTotals (int dbevindex, int dsptype, int subtype);
Vector<void*> *dbeGetHotMarks (int dbevindex, int type);
Vector<void*> *dbeGetHotMarksInc (int dbevindex, int type);
Vector<void*> *dbeGetSummaryHotMarks (int dbevindex, Vector<Obj> *sel_objs, int type);
Vector<uint64_t> *dbeGetFuncId (int dbevindex, int type, int begin, int length);
Vector<void*> *dbeGetFuncCalleeInfo (int dbevindex, int type, Vector<int>* idxs, int groupId);
Vector<void*> *dbeGetFuncCallerInfo (int dbevindex, int type, Vector<int>* idxs, int groupId);
Vector<void*> *dbeGetFuncCalleeInfoById (int dbevindex, int type, int idx);
Vector<void*> *dbeGetFuncCallerInfoById (int dbevindex, int type, int idx);
char *dbePrintData (int dbevindex, int type, int subtype, char *printer,
      char *fname, FILE *outfile);
int dbeSetFuncData (int dbevindex, Obj sel_obj, int type, int subtype);
Vector<void*> *dbeGetFuncList (int dbevindex, int type, int subtype);
Vector<void*> *dbeGetFuncListV2 (int dbevindex, int mtype, Obj sel_obj, int type, int subtype);
Vector<void*> *dbeGetFuncListMini (int dbevindex, int type, int subtype);
Vector<Obj> *dbeGetComparableObjsV2 (int dbevindex, Obj sel_obj, int type);
Obj dbeConvertSelObj (Obj obj, int type);
Vector<int> *dbeGetGroupIds (int dbevindex);
Vector<void*> *dbeGetTableDataV2 (int dbevindex, char *mlistStr, char *modeStr,
      char *typeStr, char *subtypeStr, Vector<uint64_t> *ids);

int dbeGetCallTreeNumLevels (int dbevindex);
Vector<void*> *dbeGetCallTreeLevel (int dbevindex, char *mcmd, int level);
Vector<void*> *dbeGetCallTreeLevels (int dbevindex, char *mcmd);
Vector<void*> *dbeGetCallTreeChildren (int dbevindex, char *mcmd, Vector<int >*nodes);
Vector<void*> *dbeGetCallTreeLevelFuncs (int dbevindex, int level_start, int level_end);
Vector<void*> *dbeGetCallTreeFuncs (int dbevindex);
Vector<char*> *dbeGetNames (int dbevindex, int type, Obj sel_obj);
Vector<void*> *dbeGetTotalMax (int dbevindex, int type, int subtype);
Vector<void*> *dbeGetStatisOverviewList (int dbevindex);
Vector<void*> *dbeGetStatisList (int dbevindex);
Vector<void*> *dbeGetSummary (int dbevindex, Vector<Obj> *objs, int type, int subtype);
Vector<void*> *dbeGetSummaryV2 (int dbevindex, Vector<Obj> *objs, int type, int subtype);
Vector<int> *dbeGetFounderExpId (Vector<int> *expIds);
Vector<int> *dbeGetUserExpId (Vector<int> *expIds);
Vector<int> *dbeGetExpGroupId (Vector<int> *expIds);
char *dbeGetExpName (int dbevindex, char *dir_name);
Vector<char*> *dbeGetHwcHelp (int dbevindex, bool forKernel);
Vector<Vector<char*>*> *dbeGetHwcSets (int dbevindex, bool forKernel);
Vector<void*> *dbeGetHwcsAll (int dbevindex, bool forKernel);
Vector<char*> *dbeGetHwcAttrList (int dbevindex, bool forKernel);
int dbeGetHwcMaxConcurrent (int dbevindex, bool forKernel);
int dbeGetHwcMaxReg (int dbevindex);

Vector<char*> *dbeGetIfreqData (int dbevindex);
Vector<void*> *dbeGetLeakListInfo (int dbevindex, bool leakflag);
Vector<void*> *dbeMpviewGetTlFuncReps (int dbevindex, int exp_id,
           long long binSizeTime, long long startTime, long long endTime,
           long long binSizeRank, long long startRank, long long endRank);
Vector<void*> *dbeMpviewGetTlMsgReps (int dbevindex, int exp_id, int throttle,
          long long binSizeTime, long long startTime, long long endTime,
          long long binSizeRank, long long startRank, long long endRank);
Vector<long long> *dbeMpviewGetAxisRange (int dbevindex, int exp_id,
       int chart_type, int axis_type);
Vector<char*> *dbeMpviewGetAxisDiscreteLabels (int dbevindex, int exp_id,
            int chart_type, int axis_type);
Vector<void*> *dbeMpviewGetFuncDetails (int dbevindex, int exp_id, Obj funcId);
Vector<void*> *dbeMpviewGetMesgDetails (int dbevindex, int exp_id, Obj mesgId);
Vector<long long> *dbeMpviewGetChartData (int dbevindex, int exp_id, int ctype,
       int attr1, long long start1,
       long long end1, int nbins1,
       int attr2, long long start2,
       long long end2, int nbins2,
       int metric, int reduction);
void dbeMpviewFilterSet (int dbevindex, int exp_id, Vector<int> *ctid,
    Vector<int > *axid, Vector<long long> *startVal,
    Vector<long long> *endVal);
void dbeMpviewLoadStacks (int dbevindex, int exp_id);


Obj dbeGetObject (int dbevindex, Obj sel_func, Obj sel_pc);
char *dbeGetName (int dbevindex, int exp_id);
Vector<char*> *dbeGetExpVerboseName (Vector<int> *exp_ids);
long long dbeGetStartTime (int dbevindex, int exp_id);
long long dbeGetRelativeStartTime (int dbevindex, int exp_id);
long long dbeGetEndTime (int dbevindex, int exp_id);
int dbeGetClock (int dbevindex, int exp_id);
long long dbeGetWallStartSec (int dbevindex, int exp_id);
char *dbeGetHostname (int dbevindex, int exp_id);
Vector<void*> *dbeGetEntityProps (int dbevindex);
Vector<void*> *dbeGetEntities (int dbevindex, int exp_id, int ekind);
Vector<void*> *dbeGetEntitiesV2 (int dbevindex, Vector<int> *exp_ids, int ekind);
Vector<void*> *dbeGetTLDetails (int dbevindex, int exp_id, int data_id,
    int entity_prop_id, Obj event_id);
Vector<Obj> *dbeGetStackFunctions (int dbevindex, Obj stack);
Vector<void*> *dbeGetStacksFunctions (int dbevindex, Vector<Obj> *stacks);
Vector<Obj> *dbeGetStackPCs (int dbevindex, Obj stack);
Vector<char*> *dbeGetStackNames (int dbevindex, Obj stack);
Vector<void*> *dbeGetSamples (int dbevindex, int exp_id, int64_t lo, int64_t hi);
Vector<void*> *dbeGetGCEvents (int dbevindex, int exp_id, int64_t lo, int64_t hi);
Vector<Vector<char*>*>* dbeGetIOStatistics (int dbevindex);
Vector<Vector<char*>*>* dbeGetHeapStatistics (int dbevindex);
Vector<char*> *dbeGetFuncNames (int dbevindex, Vector<Obj> *funcs);
Vector<char*> *dbeGetObjNamesV2 (int dbevindex, Vector<uint64_t> *ids);
char *dbeGetFuncName (int dbevindex, Obj func);
char *dbeGetObjNameV2 (int dbevindex, uint64_t id);
Vector<uint64_t> *dbeGetFuncIds (int dbevindex, Vector<Obj> *funcs);
uint64_t dbeGetFuncId (int dbevindex, Obj func);
char *dbeGetDataspaceTypeDesc (int dbevindex, Obj stack);
Vector<void*> *dbeGetDataDescriptorsV2 (int exp_id);
Vector<void*> *dbeGetDataPropertiesV2 (int exp_id, int data_id);
Vector<void*> *dbeGetExperimentTimeInfo (Vector<int> *exp_ids);
Vector<void*> *dbeGetExperimentDataDescriptors (Vector<int> *exp_ids);


Vector<long long> *dbeGetAggregatedValue (int data_id, char *lfilter, char *fexpr,
       char *pname_ts, hrtime_t start_ts,
       hrtime_t delta, int num,
       char *pname_key, char *aggr_func);
Vector<char*> *dbeGetLineInfo (Obj pc);
int dbeSetAlias (char *name, char *uname, char *expr);
Vector<char*> *dbeGetAlias (char *name);
Vector<Vector<long long>*> *dbeGetXYPlotData (int data_id, char *lfilter,
           char *arg, char *func1, char *aggr1,
           char *func2, char *aggr2,
           char *func3, char *aggr3);
Vector<bool> *dbeHasTLData (int dbev_index, Vector<int> *exp_ids,
       Vector<int> *data_ids,
       Vector<int> *entity_prop_ids,
       Vector<int> *entity_prop_values,
       Vector<int> *auxs);
Vector<void*> *dbeGetTLData (int dbevindex, int exp_id, int data_id,
        int entity_prop_id, int entity_prop_val, int aux,
        hrtime_t start_ts, hrtime_t delta, int num,
        bool getRepresentatives, Vector<char*> *chartProperties);
Vector<long long> *dbeGetTLEventCenterTime (int dbevindex, int exp_id,
         int data_id, int entity_prop_id,
         int entity_prop_val, int aux,
         long long event_idx, long long move_count);
long long dbeGetTLEventIdxNearTime (int dbevindex, int exp_id,
        int data_id,
        int entity_prop_id, int entity_prop_val, int aux,
        int searchDirection,
        long long timestamp);


int dbeGetSignalValue (char *);
char *dbeSendSignal (pid_t, int);
char *dbeGetCollectorControlValue (char *);
char *dbeSetCollectorControlValue (char *, char *);
char *dbeUnsetCollectorControlValue (char *);
char *dbeCheckConnection (char *);
void dbe_archive (Vector<long long> *ids, Vector<const char *> *locations);
void dbeSetLocation (const char *fname, const char *location);
void dbeSetLocations (Vector<const char *> *fnames, Vector<const char *> *locations);
Vector<void*> *dbeResolvedWith_setpath (const char *path);
Vector<void*> *dbeResolvedWith_pathmap (const char *old_prefix, const char *new_prefix);
# 38 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DbeApplication.h" 1
# 33 "/doner/binutils/binutils-515f23e/gprofng/src/DbeApplication.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Application.h" 1
# 39 "/doner/binutils/binutils-515f23e/gprofng/src/Application.h"
class Settings;
class Emsg;
class Emsgqueue;


class Application
{
public:
  Application (int argc, char *argv[], char *_run_dir = 
# 47 "/doner/binutils/binutils-515f23e/gprofng/src/Application.h" 3 4
                                                       __null
# 47 "/doner/binutils/binutils-515f23e/gprofng/src/Application.h"
                                                           );
  virtual ~Application ();
  void set_name (const char *_name);
  char *get_cur_dir ();




  static int set_progress (int percentage, const char *proc_str);
  static char *get_realpath (const char *_name);


  void queue_comment (Emsg *m);
  Emsg *fetch_comments (void);
  void delete_comments (void);


  int get_number_of_worker_threads ();

  char *get_version () { return prog_version; }
  char *get_name () { return prog_name; }
  char *get_run_dir () { return run_dir; }
  Emsgqueue *get_comments_queue () { return commentq; };

protected:
  void set_run_dir (char *fdhome = 
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/Application.h" 3 4
                                  __null
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/Application.h"
                                      );
  typedef int (*ProgressFunc)(int, const char *);


  virtual void usage () = 0;



  void print_version_info ();


  virtual int check_args (int argc, char *argv[]);

  void read_rc ();
  static void set_progress_func (ProgressFunc func) { progress_func = func; }

protected:
  Emsgqueue *commentq;
  Settings *settings;
  char *prog_version;
  char *prog_name;
  char *whoami;
  char *run_dir;
  char *run_dir_with_spaces;
  char *cur_dir;
  int lic_found;
  char *lic_err;

private:
  void set_ut_email (int argc, char *argv[]);
  int number_of_worker_threads;
  static ProgressFunc progress_func;
};

extern Application *theApplication;
# 34 "/doner/binutils/binutils-515f23e/gprofng/src/DbeApplication.h" 2

template <class ITEM> class Vector;

class DbeApplication : public Application
{
public:
  DbeApplication (int argc, char *argv[], char *_run_dir = 
# 40 "/doner/binutils/binutils-515f23e/gprofng/src/DbeApplication.h" 3 4
                                                          __null
# 40 "/doner/binutils/binutils-515f23e/gprofng/src/DbeApplication.h"
                                                              );
  ~DbeApplication ();
  Vector<char*> *initApplication (char *fdhome, char *licpath, ProgressFunc func);

  bool rdtMode;
  bool ipcMode;
};

extern DbeApplication *theDbeApplication;
# 39 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/LoadObject.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/LoadObject.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Stabs.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/Stabs.h"
enum cpf_instr_type_t {
    CPF_INSTR_TYPE_LD = 0,
    CPF_INSTR_TYPE_ST,
    CPF_INSTR_TYPE_PREFETCH,
    CPF_INSTR_TYPE_BRTARGET,
    CPF_INSTR_TYPE_UNKNOWN,
    CPF_INSTR_TYPE_NTYPES
};

class Function;
class LoadObject;
class Module;
class ComC;
class Elf;
class Dwarf;
class Symbol;
class Reloc;
struct cpf_stabs_t;
class SourceFile;
template <typename Key_t, typename Value_t> class Map;

class Include {
  public:
    typedef struct {
 SourceFile *srcfile;
 int lineno;
    } SrcFileInfo;
    Include();
    ~Include();
    void new_src_file(SourceFile *source, int lineno, Function *func = 
# 56 "/doner/binutils/binutils-515f23e/gprofng/src/Stabs.h" 3 4
                                                                         __null
# 56 "/doner/binutils/binutils-515f23e/gprofng/src/Stabs.h"
                                                                             );
    void new_include_file(SourceFile *source, Function *func);
    void end_include_file(Function *func);
    void push_src_files(Function *func);

  private:
    Vector<SrcFileInfo*> *stack;
};


class Stabs {
  public:

    enum Stab_status {
 DBGD_ERR_NONE,
 DBGD_ERR_CANT_OPEN_FILE,
 DBGD_ERR_BAD_ELF_LIB,
 DBGD_ERR_BAD_ELF_FORMAT,
 DBGD_ERR_NO_STABS,
 DBGD_ERR_BAD_STABS,
 DBGD_ERR_NO_DWARF,
 DBGD_ERR_CHK_SUM
    };

    static Stabs *NewStabs(char *_path, char *lo_name);
    Stabs(char *_path, char *_lo_name);
    ~Stabs();

    bool is_relocatable(){ return isRelocatable; }
    long long get_textsz() { return textsz; }
    Platform_t get_platform() { return platform; }
    WSize_t get_class() { return wsize;}
    Stab_status get_status() { return status;}

    Stab_status read_stabs(ino64_t srcInode, Module *module, Vector<ComC*> *comComs, bool readDwarf = false);
    Stab_status read_archive(LoadObject *lo);
    bool read_symbols(Vector<Function*> *functions);
    uint64_t mapOffsetToAddress(uint64_t img_offset);
    char *sym_name(uint64_t target, uint64_t instr, int flag);
  Elf *openElf (bool dbg_info = false);
    void read_hwcprof_info(Module *module);
    void dump();
    void read_dwarf_from_dot_o(Module *mod);

    static bool is_fortran(Sp_lang_code lc) { return (lc == Sp_lang_fortran) || (lc == Sp_lang_fortran90); }
    static Function *find_func(char *fname, Vector<Function*> *functions, bool fortran, bool inner_names=false);
    Module *append_Module(LoadObject *lo, char *name, int lastMod = 0);
    Function *append_Function(Module *module, char *fname);
    Function *append_Function(Module *module, char *linkerName, uint64_t pc);
    Function *map_PC_to_func(uint64_t pc, uint64_t &low_pc, Vector<Function*> *functions);
    char *path;
    char *lo_name;

  private:
  Elf *elfDbg;
  Elf *elfDis;
    Stab_status status;

    long long textsz;
    Platform_t platform;
    WSize_t wsize;
    bool isRelocatable;
    Symbol *last_PC_to_sym;

    Vector<cpf_stabs_t> analyzerInfoMap;

    bool check_Comm(Vector<ComC*> *comComs);
    void check_Info(Vector<ComC*> *comComs);
    void check_Loop(Vector<ComC*> *comComs);
    void check_AnalyzerInfo();
    void append_local_funcs(Module *module, int first_ind);
  Stab_status srcline_Stabs (Module *module, unsigned int StabSec, unsigned int StabStrSec, bool comdat);
  Stab_status archive_Stabs (LoadObject *lo, unsigned int StabSec, unsigned int StabStrSec, bool comdat);


    void check_Symtab();
    void readSymSec(unsigned int sec, Elf *elf);
    void check_Relocs();
    void get_save_addr(bool need_swap_endian);
    Symbol *map_PC_to_sym(uint64_t pc);
    Symbol *pltSym;
    Vector<Symbol*> *SymLst;
    Vector<Symbol*> *SymLstByName;
    Vector<Reloc*> *RelLst;
    Vector<Reloc*> *RelPLTLst;
    Vector<Symbol*> *LocalLst;
    Vector<char*> *LocalFile;
    Vector<int> *LocalFileIdx;

    Elf *openElf(char *fname, Stab_status &st);
    Map<const char*, Symbol*> *get_elf_symbols();
    Dwarf *dwarf;

    bool st_check_symtab, st_check_relocs;
    Function *createFunction(LoadObject *lo, Module *module, Symbol *sym);
    void fixSymtabAlias();


    Dwarf *openDwarf();

    Vector<Module*> *stabsModules;
    static char *get_type_name(int t);
};
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/LoadObject.h" 2
# 41 "/doner/binutils/binutils-515f23e/gprofng/src/LoadObject.h"
class Emsg;
class Elf;
class Experiment;
class Function;
class Module;
template <typename Key_t, typename Value_t> class HashMap;
template <typename Key_t, typename Value_t> class Map;
template <class ITEM> class Vector;

enum
{
  CMP_PATH = 1,
  CMP_RUNTIMEPATH = 2,
  CMP_CHKSUM = 4
};

class LoadObject : public HistableFile, public DbeLock
{
public:


  enum seg_type
  {
    SEG_TEXT,
    SEG_DATA,
    SEG_BSS,
    SEG_HEAP,
    SEG_STACK,
    SEG_DEVICE,
    SEG_UNKNOWN
  };


  enum Arch_status
  {
    ARCHIVE_SUCCESS,
    ARCHIVE_EXIST,
    ARCHIVE_BAD_STABS,
    ARCHIVE_ERR_SEG,
    ARCHIVE_ERR_OPEN,
    ARCHIVE_ERR_MAP,
    ARCHIVE_WARN_MTIME,
    ARCHIVE_WARN_HOST,
    ARCHIVE_ERR_VERSION,
    ARCHIVE_NO_STABS,
    ARCHIVE_WRONG_ARCH,
    ARCHIVE_NO_LIBDWARF,
    ARCHIVE_NO_DWARF,
    ARCHIVE_WARN_CHECKSUM
  };

  LoadObject (const char *loname);

  static LoadObject *create_item (const char *nm, int64_t chksum);
  static LoadObject *create_item (const char *nm, const char *_runTimePath, DbeFile *df);

  virtual ~LoadObject ();
  virtual void set_name (char *string);
  virtual uint64_t get_addr ();
  virtual Vector<Histable*> *get_comparable_objs ();

  virtual Histable_type
  get_type ()
  {
    return LOADOBJECT;
  };

  virtual int64_t
  get_size ()
  {
    return size;
  }

  char *
  get_pathname ()
  {
    return pathname;
  }

  void
  set_archname (char *aname)
  {
    free (arch_name);
    arch_name = aname;
  }

  bool
  is_relocatable ()
  {
    return isRelocatable;
  }

  bool compare (const char *nm, int64_t _checksum);
  int compare (const char *_path, const char *_runTimePath, DbeFile *df);
  void set_platform (Platform_t pltf, int wsz);
  void dump_functions (FILE *);
  int get_index (Function *func);
  char *get_alias (Function *func);
  DbeInstr *find_dbeinstr (uint64_t file_off);
  Function *find_function (uint64_t offset);
  Function *find_function (char *fname);
  Function *find_function (char *fname, unsigned int chksum);
  Module *find_module (char *mname);
  Module *get_comparable_Module (Module *mod);
  void append_module (Module *mod);
  Elf *get_elf ();
  Stabs *openDebugInfo (char *fname, Stabs::Stab_status *stp = 
# 147 "/doner/binutils/binutils-515f23e/gprofng/src/LoadObject.h" 3 4
                                                              __null
# 147 "/doner/binutils/binutils-515f23e/gprofng/src/LoadObject.h"
                                                                  );
  Arch_status read_stabs ();
  Arch_status sync_read_stabs ();
  void post_process_functions ();
  char *status_str (Arch_status rv, char *arg = 
# 151 "/doner/binutils/binutils-515f23e/gprofng/src/LoadObject.h" 3 4
                                               __null
# 151 "/doner/binutils/binutils-515f23e/gprofng/src/LoadObject.h"
                                                   );
  Function *get_hide_function ();
  DbeInstr *get_hide_instr (DbeInstr *instr);
  uint32_t get_checksum ();

  Emsg *
  fetch_warnings (void)
  {
    return warnq->fetch ();
  }

  Emsg *
  fetch_comments (void)
  {
    return commentq->fetch ();
  }

  unsigned int flags;
  bool isReadStabs;
  bool need_swap_endian;
  int seg_idx;
  seg_type type;
  int64_t size;
  int64_t max_size;
  int64_t min_size;
  Vector<Function*> *functions;
  Vector<Module*> *seg_modules;
  HashMap<char*, Module*> *modules;
  Module *noname;
  Platform_t platform;
  WSize_t wsize;
  Stabs *objStabs;
  HashMap<char*, Function*> *comp_funcs;
  Experiment *firstExp;
  char *runTimePath;
  time_t mtime;
  int64_t checksum;

private:
  Elf *elf_lo;
  bool elf_inited;
  DbeInstr **instHTable;
  char *pathname;
  ino64_t inode;
  bool isRelocatable;
  char *arch_name;
  Emsgqueue *warnq;
  Emsgqueue *commentq;
  Function **funcHTable;
  Function *h_function;
  DbeInstr *h_instr;
  HashMap<char*, Module*> *seg_modules_map;

  static int func_compare (const void *p1, const void *p2);
  int read_archive ();
  void init_datatypes ();
  void update_datatypes (Module*, Vaddr, uint32_t datatype_id);
};
# 41 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/IndexObject.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/IndexObject.h"
class IndexObject : public Histable
{
public:
  IndexObject (int _indextype, uint64_t _index);
  IndexObject (int _indextype, Histable *_obj);
  bool requires_string_sort ();

  virtual Histable_type
  get_type ()
  {
    return INDEXOBJ;
  }

  virtual char *get_name (NameFormat = NA);
  virtual void set_name (char*);
  virtual void set_name_from_context (Expression::Context *);
  virtual Histable *convertto (Histable_type, Histable* = 
# 43 "/doner/binutils/binutils-515f23e/gprofng/src/IndexObject.h" 3 4
                                                         __null
# 43 "/doner/binutils/binutils-515f23e/gprofng/src/IndexObject.h"
                                                             );

  virtual uint64_t
  get_addr ()
  {
    return id;
  }

  uint64_t
  get_index ()
  {
    return id;
  }

  Histable *
  get_obj ()
  {
    return obj;
  }


  static const uint64_t INDXOBJ_EXPGRID_SHIFT = 60;
  static const uint64_t INDXOBJ_EXPID_SHIFT = 32;
  static const uint64_t INDXOBJ_PAYLOAD_SHIFT = 0;
  static const uint64_t INDXOBJ_EXPGRID_MASK =
 ((1LLU << (64 - INDXOBJ_EXPGRID_SHIFT)) - 1);
  static const uint64_t INDXOBJ_EXPID_MASK =
 ((1LLU << (INDXOBJ_EXPGRID_SHIFT - INDXOBJ_EXPID_SHIFT)) - 1);
  static const uint64_t INDXOBJ_PAYLOAD_MASK =
 ((1LLU << (INDXOBJ_EXPID_SHIFT - INDXOBJ_PAYLOAD_SHIFT)) - 1);

private:

  int indextype;
  Histable *obj;
  bool nameIsFinal;
};

typedef enum IndexObjTypes
{
  INDEX_THREADS = 0,
  INDEX_CPUS,
  INDEX_SAMPLES,
  INDEX_GCEVENTS,
  INDEX_SECONDS,
  INDEX_PROCESSES,
  INDEX_EXPERIMENTS,
  INDEX_BYTES,
  INDEX_DURATION,
  INDEX_LAST
} IndexObjTypes_t;

class IndexObjType_t
{
public:
  IndexObjType_t ();
  ~IndexObjType_t ();
  int type;
  char *name;
  char *i18n_name;
  char *index_expr_str;
  Expression *index_expr;
  char mnemonic;
  char *short_description;
  char *long_description;
  MemObjType_t *memObj;
};
# 43 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/IOActivity.h" 1
# 31 "/doner/binutils/binutils-515f23e/gprofng/src/IOActivity.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/FileData.h" 1
# 67 "/doner/binutils/binutils-515f23e/gprofng/src/FileData.h"
class FileData : public Histable
{
  friend class IOActivity;
public:
  FileData (const char *fName);
  FileData (FileData *fData);
  ~FileData ();

  virtual char *get_name (Histable::NameFormat nfmt);
  virtual Histable *convertto (Histable_type, Histable* = 
# 76 "/doner/binutils/binutils-515f23e/gprofng/src/FileData.h" 3 4
                                                         __null
# 76 "/doner/binutils/binutils-515f23e/gprofng/src/FileData.h"
                                                             );

  char *get_raw_name (Histable::NameFormat nfmt);
  void setFsType (FileSystem_type fst);
  void setFsType (const char* fst);

  virtual Histable_type
  get_type ()
  {
    return histType;
  };

  virtual uint64_t
  get_addr ()
  {
    return virtualFd;
  };

  uint64_t
  get_index ()
  {
    return virtualFd;
  };

  void init ();

  char *
  getFileName ()
  {
    return fileName;
  }

  void
  addReadEvent (hrtime_t rt, int64_t nb)
  {
    readTime += rt;
    readBytes += nb;
    readCnt++;
  }

  hrtime_t
  getReadTime ()
  {
    return readTime;
  }

  int64_t
  getReadBytes ()
  {
    return readBytes;
  }

  int32_t
  getReadCnt ()
  {
    return readCnt;
  }

  void
  addWriteEvent (hrtime_t wt, int64_t nb)
  {
    writeTime += wt;
    writeBytes += nb;
    writeCnt++;
  }

  hrtime_t
  getWriteTime ()
  {
    return writeTime;
  }

  int64_t
  getWriteBytes ()
  {
    return writeBytes;
  }

  int32_t
  getWriteCnt ()
  {
    return writeCnt;
  }

  void
  addOtherEvent (hrtime_t ot)
  {
    otherTime += ot;
    otherCnt++;
  }

  hrtime_t
  getOtherTime ()
  {
    return otherTime;
  }

  int32_t
  getOtherCnt ()
  {
    return otherCnt;
  }

  void
  addErrorEvent (hrtime_t er)
  {
    errorTime += er;
    errorCnt++;
  }

  hrtime_t
  getErrorTime ()
  {
    return errorTime;
  }

  int32_t
  getErrorCnt ()
  {
    return errorCnt;
  }

  void setFileDesList (int fd);

  Vector<int> *
  getFileDesList ()
  {
    return fileDesList;
  }

  void
  setFileDes (int fd)
  {
    fileDes = fd;
  }

  int32_t
  getFileDes ()
  {
    return fileDes;
  }

  void setVirtualFds (int64_t vfd);

  Vector<int64_t> *
  getVirtualFds ()
  {
    return virtualFds;
  }

  char *
  getFsType ()
  {
    return fsType;
  }

  void
  setVirtualFd (int64_t vFd)
  {
    virtualFd = vFd;
  }

  int64_t
  getVirtualFd ()
  {
    return virtualFd;
  }

  void
  setHistType (Histable::Type hType)
  {
    histType = hType;
  }

  Histable::Type
  getHistType ()
  {
    return histType;
  }

  void setWriteStat (hrtime_t wt, int64_t nb);

  hrtime_t
  getWSlowestBytes ()
  {
    return wSlowestBytes;
  }

  int64_t
  getWSmallestBytes ()
  {
    return wSmallestBytes;
  }

  int64_t
  getWLargestBytes ()
  {
    return wLargestBytes;
  }

  int32_t
  getW0KB1KBCnt ()
  {
    return w0KB1KBCnt;
  }

  int32_t
  getW1KB8KBCnt ()
  {
    return w1KB8KBCnt;
  }

  int32_t
  getW8KB32KBCnt ()
  {
    return w8KB32KBCnt;
  }

  int32_t
  getW32KB128KBCnt ()
  {
    return w32KB128KBCnt;
  }

  int32_t
  getW128KB256KBCnt ()
  {
    return w128KB256KBCnt;
  }

  int32_t
  getW256KB512KBCnt ()
  {
    return w256KB512KBCnt;
  }

  int32_t
  getW512KB1000KBCnt ()
  {
    return w512KB1000KBCnt;
  }

  int32_t
  getW1000KB10MBCnt ()
  {
    return w1000KB10MBCnt;
  }

  int32_t
  getW10MB100MBCnt ()
  {
    return w10MB100MBCnt;
  }

  int32_t
  getW100MB1GBCnt ()
  {
    return w100MB1GBCnt;
  }

  int32_t
  getW1GB10GBCnt ()
  {
    return w1GB10GBCnt;
  }

  int32_t
  getW10GB100GBCnt ()
  {
    return w10GB100GBCnt;
  }

  int32_t
  getW100GB1TBCnt ()
  {
    return w100GB1TBCnt;
  }

  int32_t
  getW1TB10TBCnt ()
  {
    return w1TB10TBCnt;
  }

  void setReadStat (hrtime_t rt, int64_t nb);

  hrtime_t
  getRSlowestBytes ()
  {
    return rSlowestBytes;
  }

  int64_t
  getRSmallestBytes ()
  {
    return rSmallestBytes;
  }

  int64_t
  getRLargestBytes ()
  {
    return rLargestBytes;
  }

  int32_t
  getR0KB1KBCnt ()
  {
    return r0KB1KBCnt;
  }

  int32_t
  getR1KB8KBCnt ()
  {
    return r1KB8KBCnt;
  }

  int32_t
  getR8KB32KBCnt ()
  {
    return r8KB32KBCnt;
  }

  int32_t
  getR32KB128KBCnt ()
  {
    return r32KB128KBCnt;
  }

  int32_t
  getR128KB256KBCnt ()
  {
    return r128KB256KBCnt;
  }

  int32_t
  getR256KB512KBCnt ()
  {
    return r256KB512KBCnt;
  }

  int32_t
  getR512KB1000KBCnt ()
  {
    return r512KB1000KBCnt;
  }

  int32_t
  getR1000KB10MBCnt ()
  {
    return r1000KB10MBCnt;
  }

  int32_t
  getR10MB100MBCnt ()
  {
    return r10MB100MBCnt;
  }

  int32_t
  getR100MB1GBCnt ()
  {
    return r100MB1GBCnt;
  }

  int32_t
  getR1GB10GBCnt ()
  {
    return r1GB10GBCnt;
  }

  int32_t
  getR10GB100GBCnt ()
  {
    return r10GB100GBCnt;
  }

  int32_t
  getR100GB1TBCnt ()
  {
    return r100GB1TBCnt;
  }

  int32_t
  getR1TB10TBCnt ()
  {
    return r1TB10TBCnt;
  }

private:
  char *fileName;
  hrtime_t readTime;
  hrtime_t writeTime;
  hrtime_t otherTime;
  hrtime_t errorTime;
  int64_t readBytes;
  int64_t writeBytes;
  int32_t readCnt;
  int32_t writeCnt;
  int32_t otherCnt;
  int32_t errorCnt;
  Vector<int> *fileDesList;
  Vector<int64_t> *virtualFds;
  char fsType[16];
  int64_t virtualFd;
  int32_t fileDes;
  Histable::Type histType;


  hrtime_t wSlowestBytes;
  int64_t wSmallestBytes;
  int64_t wLargestBytes;
  int32_t w0KB1KBCnt;
  int32_t w1KB8KBCnt;
  int32_t w8KB32KBCnt;
  int32_t w32KB128KBCnt;
  int32_t w128KB256KBCnt;
  int32_t w256KB512KBCnt;
  int32_t w512KB1000KBCnt;
  int32_t w1000KB10MBCnt;
  int32_t w10MB100MBCnt;
  int32_t w100MB1GBCnt;
  int32_t w1GB10GBCnt;
  int32_t w10GB100GBCnt;
  int32_t w100GB1TBCnt;
  int32_t w1TB10TBCnt;


  hrtime_t rSlowestBytes;
  int64_t rSmallestBytes;
  int64_t rLargestBytes;
  int32_t r0KB1KBCnt;
  int32_t r1KB8KBCnt;
  int32_t r8KB32KBCnt;
  int32_t r32KB128KBCnt;
  int32_t r128KB256KBCnt;
  int32_t r256KB512KBCnt;
  int32_t r512KB1000KBCnt;
  int32_t r1000KB10MBCnt;
  int32_t r10MB100MBCnt;
  int32_t r100MB1GBCnt;
  int32_t r1GB10GBCnt;
  int32_t r10GB100GBCnt;
  int32_t r100GB1TBCnt;
  int32_t r1TB10TBCnt;
};
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/IOActivity.h" 2



class Experiment;
class Expression;
class DataView;
class DbeView;

class IOActivity
{
public:

  IOActivity (DbeView *_dbev);
  void reset (void);
  Hist_data *compute_metrics (MetricList *, Histable::Type, Hist_data::Mode,
         Histable*);

  ~IOActivity ()
  {
    this->reset ();
  }

private:
  void computeData (Histable::Type);
  void computeCallStack (Histable::Type, VMode viewMode);
  void createHistItemTotals (Hist_data *, MetricList *, Histable::Type, bool);
  void computeHistTotals (Hist_data *, MetricList *);
  void computeHistData (Hist_data *, MetricList *, Hist_data::Mode, Histable *);

  Vector<FileData*> *fDataObjs;
  Vector<FileData*> *fDataObjsFile;
  Vector<FileData*> *fDataObjsVfd;
  Vector<FileData*> *fDataObjsCallStack;
  bool hasFile;
  bool hasVfd;
  bool hasCallStack;
  HashMap<char*, FileData*> *fDataHash;
  FileData *fDataTotal;


  DefaultMap<void*, FileData*> *fDataCalStkMap;


  DefaultMap<long, FileData*> *fDataVfdMap;


  Hist_data *hist_data_file_all;
  Hist_data *hist_data_vfd_all;
  Hist_data *hist_data_callstack_all;
  Hist_data *hist_data_callstack;

  DbeView *dbev;
};
# 44 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/PreviewExp.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/PreviewExp.h"
class PreviewExp : public Experiment
{
public:
  PreviewExp ();
  ~PreviewExp ();

  virtual Exp_status experiment_open (char *path);

  Vector<char*> *preview_info ();

  char *
  getArgList ()
  {
    return uarglist;
  }

private:
  char *mqueue_str (Emsgqueue *msgqueue, char *null_str);

  int is_group;
};
# 45 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Function.h" 1
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/Function.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/SourceFile.h" 1
# 25 "/doner/binutils/binutils-515f23e/gprofng/src/SourceFile.h"
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Map.h" 1
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/SourceFile.h" 2

template <typename Key_t, typename Value_t> class Map;



class SourceFile : public HistableFile
{
public:

  enum OpenStatus
  {
    OS_OK,
    OS_NOTREAD,
    OS_NOSRC,
    OS_TIMESRC
  };

  SourceFile (const char *file_name);
  virtual ~SourceFile ();
  virtual void set_name (char *);
  virtual char *get_name (NameFormat = NA);

  bool readSource ();
  Vector<Function *> *get_functions ();
  DbeLine *find_dbeline (Function *func, int lineno);
  char *getLine (int lineno);

  int
  getLineCount ()
  {
    return srcLines ? srcLines->size () : 0;
  }

  ino64_t
  getInode ()
  {
    return srcInode;
  }

  time_t
  getMTime ()
  {
    return srcMTime;
  }

  void
  setMTime (time_t tm)
  {
    srcMTime = tm;
  }

  bool
  isTmp ()
  {
    return isTmpFile;
  }

  void
  setTmp (bool set)
  {
    isTmpFile = set;
  }

  Histable_type
  get_type ()
  {
    return SOURCEFILE;
  }

  DbeLine *
  find_dbeline (int lineno)
  {
    return find_dbeline (
# 98 "/doner/binutils/binutils-515f23e/gprofng/src/SourceFile.h" 3 4
                        __null
# 98 "/doner/binutils/binutils-515f23e/gprofng/src/SourceFile.h"
                            , lineno);
  }

  unsigned int flags;

private:
  static int curId;
  OpenStatus status;
  ino64_t srcInode;
  time_t srcMTime;
  Vector<char *> *srcLines;
  bool isTmpFile;

  Vector<DbeLine*> *lines;
  Map<int, DbeLine*> *dbeLines;
  Map<Function *, Function *> *functions;
  bool read_stabs;
};
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/Function.h" 2

class Module;
class Symbol;
class InlinedSubr;
struct SrcInfo;
struct PCInfo;
template <class ITEM> class Vector;

const uint64_t FUNC_NO_SAVE = (uint64_t) - 1;
const uint64_t FUNC_ROOT = (uint64_t) - 2;

enum
{
  FUNC_FLAG_PLT = 1,
  FUNC_FLAG_DYNAMIC = 2,
  FUNC_FLAG_RESDER = 4,
  FUNC_FLAG_NO_OFFSET = 8,
  FUNC_FLAG_SIMULATED = 16,
  FUNC_FLAG_NATIVE = 32,
  FUNC_NOT_JNI = 64,
  FUNC_JNI_CHECKED = 128
};

const int MAXDBUF = 32768;

class Function : public Histable
{
public:

  enum MPFuncTypes
  {
    MPF_DOALL,
    MPF_PAR,
    MPF_SECT,
    MPF_TASK,
    MPF_CLONE,
    MPF_OUTL
  };

  Function (uint64_t _id);
  virtual ~Function ();

  virtual uint64_t get_addr ();
  virtual char *get_name (NameFormat = NA);
  virtual Vector<Histable*> *get_comparable_objs ();
  virtual void set_name (char *);
  virtual Histable *convertto (Histable_type type, Histable *obj = 
# 75 "/doner/binutils/binutils-515f23e/gprofng/src/Function.h" 3 4
                                                                  __null
# 75 "/doner/binutils/binutils-515f23e/gprofng/src/Function.h"
                                                                      );

  virtual Histable_type
  get_type ()
  {
    return FUNCTION;
  };

  virtual int64_t
  get_size ()
  {
    return size;
  };

  void set_comparable_name (const char *string);
  void set_mangled_name (const char *string);
  void set_match_name (const char *string);


  void findDerivedFunctions ();
  void findKrakatoaDerivedFunctions ();
  void add_PC_info (uint64_t offset, int lineno, SourceFile *cur_src = 
# 96 "/doner/binutils/binutils-515f23e/gprofng/src/Function.h" 3 4
                                                                      __null
# 96 "/doner/binutils/binutils-515f23e/gprofng/src/Function.h"
                                                                          );
  void pushSrcFile (SourceFile* source, int lineno);
  SourceFile *popSrcFile ();
  int func_cmp (Function *func, SourceFile *srcContext = 
# 99 "/doner/binutils/binutils-515f23e/gprofng/src/Function.h" 3 4
                                                        __null
# 99 "/doner/binutils/binutils-515f23e/gprofng/src/Function.h"
                                                            );
  void copy_PCInfo (Function *f);
  DbeLine *mapPCtoLine (uint64_t addr, SourceFile *src = 
# 101 "/doner/binutils/binutils-515f23e/gprofng/src/Function.h" 3 4
                                                        __null
# 101 "/doner/binutils/binutils-515f23e/gprofng/src/Function.h"
                                                            );
  DbeInstr *mapLineToPc (DbeLine *dbeLine);
  DbeInstr *find_dbeinstr (int flag, uint64_t addr);
  DbeInstr *create_hide_instr (DbeInstr *instr);
  uint64_t find_previous_addr (uint64_t addr);
  SourceFile *getDefSrc ();
  char *getDefSrcName ();
  void setDefSrc (SourceFile *sf);
  void setLineFirst (int lineno);
  Vector<SourceFile*> *get_sources ();

  char *
  get_mangled_name ()
  {
    return mangled_name;
  }

  char *
  get_match_name ()
  {
    return match_name;
  }

  inline Function *
  cardinal ()
  {
    return alias ? alias : this;
  }

  unsigned int flags;
  Module *module;
  int line_first;
  int line_last;
  int64_t size;
  uint64_t save_addr;
  DbeInstr *derivedNode;
  bool isOutlineFunction;
  unsigned int chksum;
  char *img_fname;
  uint64_t img_offset;
  SourceFile *curr_srcfile;
  DbeLine *defaultDbeLine;
  Function *usrfunc;
  Function *alias;
  bool isUsed;
  bool isHideFunc;
  SourceFile *def_source;
  Function *indexStabsLink;
  Symbol *elfSym;
  InlinedSubr *inlinedSubr;
  int inlinedSubrCnt;

private:
  DbeInstr **instHTable;
  int *addrIndexHTable;
  void setSource ();
  PCInfo *lookup_PCInfo (uint64_t offset);
  SrcInfo *new_srcInfo ();

  char *mangled_name;
  char *match_name;
  char *comparable_name;
  char *name_buf;
  NameFormat current_name_format;
  Vector<PCInfo*> *linetab;
  Vector<DbeInstr*> *instrs;
  Vector<uint64_t> *addrs;
  uint64_t instr_id;
  Vector<SourceFile*> *sources;
  SrcInfo *curr_srcinfo;
  SrcInfo *srcinfo_list;
};

class JMethod : public Function
{
public:
  JMethod (uint64_t _id);
  virtual ~JMethod ();
  virtual void set_name (char *);
  virtual uint64_t get_addr ();

  void
  set_addr (Vaddr _addr)
  {
    addr = _addr;
  }

  uint64_t
  get_mid ()
  {
    return mid;
  }

  void
  set_mid (uint64_t _mid)
  {
    mid = _mid;
  }

  char *
  get_signature ()
  {
    return signature;
  }

  void
  set_signature (const char *s)
  {
    signature = dbe_strdup (s);
  }


  bool jni_match (Function *func);

private:
  uint64_t mid;
  Vaddr addr;
  char *signature;
  Function *jni_function;
};
# 46 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/MetricList.h" 1
# 34 "/doner/binutils/binutils-515f23e/gprofng/src/MetricList.h"
class MetricList
{
public:

  MetricList (Vector<BaseMetric*> *base_metrics, MetricType type);
  MetricList (MetricList *old);
  MetricList (MetricType _mtype);
  ~MetricList ();






  char *set_metrics (const char *metric_cmd, bool fromRcFile, DerivedMetrics *derived_metrics);




  void set_metrics (MetricList *metrics_list);


  char *get_metrics ();



  char *set_sort (const char *metric_cmd, bool fromRcFile);


  void set_fallback_sort ();


  void set_sort (int visindex, bool reverse);

  char *get_sort_name ();

  bool
  get_sort_rev ()
  {
    return sort_reverse;
  }

  void
  set_sort_rev (bool v)
  {
    sort_reverse = v;
  }

  int
  get_sort_ref_index ()
  {
    return sort_ref_index;
  }

  void
  set_sort_ref_index (int ind)
  {
    sort_ref_index = ind;
  }

  bool set_sort_metric (char *metric_cmd, BaseMetric::SubType mst, bool reverse);
  Metric *find_metric (char *cmd, BaseMetric::SubType st);
  Metric *find_metric_by_name (char *cmd);
  int get_listorder (char *cmd, BaseMetric::SubType st, const char *expr = 
# 97 "/doner/binutils/binutils-515f23e/gprofng/src/MetricList.h" 3 4
                                                                          __null
# 97 "/doner/binutils/binutils-515f23e/gprofng/src/MetricList.h"
                                                                              );
  int get_listorder (Metric *mtr);
  Metric *get_sort_metric ();
  char *get_sort_cmd ();

  MetricType
  get_type ()
  {
    return mtype;
  }

  Vector<Metric*> *
  get_items ()
  {
    return items;
  }

  Metric *
  get (long i)
  {
    return items->get (i);
  }

  void
  put (long i, Metric *m)
  {
    items->put (i, m);
  }

  void
  append (Metric *m)
  {
    items->append (m);
  }

  long
  size ()
  {
    return items ? items->size () : 0;
  }

  Metric *append (BaseMetric *bm, BaseMetric::SubType st, int visbits);


  void print_metric_list (FILE *dis_file, char *leader, int debug);



  int add_matching_dmetrics (Vector<BaseMetric*> *base_items, char *cmd,
      BaseMetric::SubType *subtypes, int nsubtypes,
      int dmetrics_vis,
       bool fromRcFile);

private:

  char *parse_metric_spec (char *cmd, BaseMetric::SubType *subtypes,
      int *nsubtypes, int *dmetrics_visb, bool *isOK);

  Vector<Metric*> *items;
  MetricType mtype;


  int sort_ref_index;
  bool sort_reverse;
};
# 48 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Module.h" 1
# 34 "/doner/binutils/binutils-515f23e/gprofng/src/Module.h"
class LoadObject;
class MetricList;
class ComC;
class Disasm;
class Hist_data;
class Stabs;
class SourceFile;
class DataObject;
class JMethod;
template <class ITEM> class Vector;

class InlinedSubr
{
public:
  InlinedSubr ();
  DbeLine *dbeLine;
  Function *func;
  char *fname;
  uint64_t low_pc;
  uint64_t high_pc;
  int level;

  bool
  contains (InlinedSubr *p)
  {
    return low_pc <= p->low_pc && high_pc >= p->high_pc;
  }

  bool
  contains (uint64_t pc)
  {
    return low_pc <= pc && high_pc > pc;
  }
};

class Module : public HistableFile
{
public:

  enum Anno_Errors
  {
    AE_OK,
    AE_NOTREAD,
    AE_NOSRC,
    AE_NOOBJ,
    AE_NOLOBJ,
    AE_NOSTABS,
    AE_NOSYMTAB,
    AE_TIMESRC,
    AE_TIMEDIS,
    AE_TIMESTABS,
    AE_TIMESTABS_DIFF,
    AE_OTHER
  };


  enum Anno_Types
  {
    AT_LIST = 0,
    AT_SRC,
    AT_SRC_ONLY,
    AT_DIS,
    AT_COM,
    AT_QUOTE,
    AT_FUNC,
    AT_EMPTY,
    AT_DIS_ONLY
  };

  Module ();
  virtual ~Module ();
  virtual int64_t get_size ();
  virtual void set_name (char *str);
  virtual Vector<Histable*> *get_comparable_objs ();
  virtual int readFile ();

  virtual Histable_type
  get_type ()
  {
    return MODULE;
  }

  inline Anno_Errors
  get_status ()
  {
    return status;
  }

  inline void
  set_file_name (char *fnm)
  {
    free (file_name);
    file_name = fnm;
  }


  char *anno_str (char *fnm = 
# 130 "/doner/binutils/binutils-515f23e/gprofng/src/Module.h" 3 4
                             __null
# 130 "/doner/binutils/binutils-515f23e/gprofng/src/Module.h"
                                 );


  Hist_data *get_data (DbeView *dbev, MetricList *mlist,
         Histable::Type type, TValue *ftotal, SourceFile *srcFile,
         Function *func, Vector<int> *marks, int threshold,
         int vis_bits, int src_visible, bool hex_visible,
         bool func_scope, bool src_only,
         Vector<int_pair_t> *marks2d = 
# 138 "/doner/binutils/binutils-515f23e/gprofng/src/Module.h" 3 4
                                      __null
# 138 "/doner/binutils/binutils-515f23e/gprofng/src/Module.h"
                                          ,
         Vector<int_pair_t> *marks2d_inc = 
# 139 "/doner/binutils/binutils-515f23e/gprofng/src/Module.h" 3 4
                                          __null
# 139 "/doner/binutils/binutils-515f23e/gprofng/src/Module.h"
                                              );

  Vector<uint64_t> *getAddrs (Function *func);
  SourceFile *setIncludeFile (char *includeFile);

  SourceFile *
  getIncludeFile ()
  {
    return curr_inc;
  }

  SourceFile *
  getMainSrc ()
  {
    return main_source;
  }

  char *
  getResolvedObjectPath ()
  {
    return stabsPath ? stabsPath : get_name ();
  }

  char *
  getDebugPath ()
  {
    setFile ();
    return stabsPath;
  }

  void read_stabs (bool all = true);
  void dump_dataobjects (FILE *out);
  DataObject *get_dobj (uint32_t dtype_id);
  void reset_datatypes ();
  void read_hwcprof_info ();
  bool is_fortran ();
  SourceFile *findSource (const char *fname, bool create);
  bool openStabs (bool all = true);
  LoadObject *createLoadObject (const char *lo_name);
  JMethod *find_jmethod (const char *nm, const char *sig);

  unsigned int flags;
  Sp_lang_code lang_code;
  char *file_name;
  Vector<Function*> *functions;
  LoadObject *loadobject;
  LoadObject *dot_o_file;
  unsigned fragmented;
  int real_timestamp;
  int curr_timestamp;
  char *comp_flags;
  char *comp_dir;
  char *linkerStabName;
  Stabs *objStabs;
  bool readStabs;
  bool hasStabs;
  bool hasDwarf;
  uint64_t hdrOffset;
  unsigned hwcprof;
  Vector<inst_info_t*> *infoList;
  Vector<memop_info_t*> ldMemops;
  Vector<memop_info_t*> stMemops;
  Vector<memop_info_t*> pfMemops;
  Vector<target_info_t*> bTargets;
  Vector<datatype_t*> *datatypes;
  Vector<SourceFile*> *includes;
  Module *indexStabsLink;
  InlinedSubr *inlinedSubr;

protected:
  void removeStabsTmp ();


  Anno_Errors checkTimeStamp (bool chkDis);


  bool read_ar (int ar, int obj, char *obj_base);
  bool setFile ();



  Stabs *openDebugInfo ();


  bool openDisPC ();


  bool computeMetrics (DbeView *dbev, Function *func, MetricList *mlist,
         Histable::Type type, bool src_metric,
         bool func_scope, SourceFile *source);
  void init_line ();
  void init_index (Hist_data *witems, int &wlindex, int &wmsize, int &wmindex);

  void set_src_data (Function *func, int vis_bits, int cmpline_visible,
       int funcline_visible);
  void set_dis_data (Function *func, int vis_bits, int cmpline_visible,
       int src_visible, bool hex_vis, bool func_scope,
       int funcline_visible);
  void set_src (Anno_Types type, DbeLine *dbeline);
  void set_dis (DbeInstr *instr, Anno_Types type, bool nextFile, char *dis_str);
  void set_MPSlave ();
  void set_one (Hist_data::HistItem *org_item, Anno_Types type, const char *text);
  void set_ComCom (int vis_bits);

  virtual char *get_disasm (uint64_t inst_address, uint64_t end_address,
       uint64_t start_address, uint64_t f_offset,
       int64_t &inst_size);

  Anno_Errors status;
  Anno_Errors openSourceFlag;
  bool hexVisible;
  time_t disMTime;
  time_t stabsMTime;
  SourceFile *main_source;
  SourceFile *curr_inc;
  SourceFile *srcContext;
  Vector<ComC*> *comComs;
  Disasm *disasm;
  Hist_data *src_items;
  Hist_data *dis_items;
  Hist_data *data_items;
  DbeView * cur_dbev;
  TValue *total;
  TValue *maximum;
  TValue *maximum_inc;
  TValue *empty;
  int name_idx;
  int size_index;
  int addr_index;

  int curline;
  int cindex, cline;
  int sindex, sline;
  int dindex;
  DbeInstr *daddr;
  int mindex;
  int mline;

  char *disPath;
  char *stabsPath;
  char *stabsTmp;
  char *disName;
  char *stabsName;
};
# 49 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DataSpace.h" 1
# 33 "/doner/binutils/binutils-515f23e/gprofng/src/DataSpace.h"
class DbeView;
class DataView;

class DataSpace
{
public:
  DataSpace (DbeView *_dbev, int picked = 0);
  ~DataSpace ();
  void reset ();
  Hist_data *compute_metrics (MetricList *, Histable::Type,
         Hist_data::Mode, Histable*);
  Hist_data *get_layout_data (Hist_data *sorted_data, Vector<int> *marks,
         int threshold);

  static char *status_str ();

private:
  Histable *get_hist_obj (Histable::Type, DataView*, long);

  DbeView *dbev;
};
# 50 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DataObject.h" 1
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/DataObject.h"
extern char *DOBJ_UNSPECIFIED;
extern char *DOBJ_UNIDENTIFIED;
extern char *DOBJ_UNDETERMINED;
extern char *DOBJ_ANON;
extern char *DOBJ_UNASCERTAINABLE;
extern char *DOBJ_UNVERIFIABLE;
extern char *DOBJ_UNRESOLVABLE;

class DataObject : public Histable
{
public:
  DataObject ();
  ~DataObject ();

  static const unsigned UNSPECIFIED_ID = 0xFFFFFFFF;

  int64_t size;
  int64_t offset;
  DataObject *parent;
  Histable *scope;
  DataObject *master;

  Histable_type get_type () { return DOBJECT; }
  int64_t get_size () { return size; }
  int64_t get_offset () { return offset; }
  DataObject *get_parent () { return parent; }
  DataObject *get_master () { return master; }
  char *get_typename () { return _typename; }
  char *get_instname () { return _instname; }
  Histable *get_scope () { return scope; }

  char *get_unannotated_name ()
  {
    if (_unannotated_name)
      return _unannotated_name;
    return get_name ();
  }

  uint64_t get_addr ();
  char get_offset_mark ();
  char *get_offset_name ();
  void set_dobjname (char *type_name, char *inst_name);
  void set_name (char *);
  Histable *convertto (Histable_type type, Histable *obj = 
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/DataObject.h" 3 4
                                                          __null
# 72 "/doner/binutils/binutils-515f23e/gprofng/src/DataObject.h"
                                                              );
  DbeEA *find_dbeEA (Vaddr EA);

private:
  char *_unannotated_name;
  char *_typename;
  char *_instname;
  Vector<DbeEA*> *EAs;
};
# 52 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/MemObject.h" 1
# 53 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Filter.h" 1
# 30 "/doner/binutils/binutils-515f23e/gprofng/src/Filter.h"
class Experiment;

class FilterNumeric
{
public:
  FilterNumeric (Experiment *, const char *, const char *);
  ~FilterNumeric ();


  void set_range (uint64_t findex, uint64_t lindex, uint64_t total);



  char *get_pattern ();



  char *get_status ();

  char *get_advanced_filter ();



  bool set_pattern (char *, bool *);


  bool is_selected (uint64_t number);

  char *
  get_cmd ()
  {
    return cmd;
  };

  char *
  get_name ()
  {
    return name;
  };

  uint64_t
  nelem ()
  {
    return nitems;
  };

  char *prop_name;

private:

  typedef struct
  {
    uint64_t first;
    uint64_t last;
  } RangePair;

  void update_status ();
  void update_range ();


  bool include_range (uint64_t findex, uint64_t lindex);


  uint64_t get_next_number (char *s, char **e, bool *fail);


  Vector<RangePair *> *items;
  uint64_t nselected;
  uint64_t nitems;

  Experiment *exp;
  char *cmd;
  char *name;
  char *pattern;
  char *status;


  uint64_t first;
  uint64_t last;
};
# 54 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/FilterSet.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/FilterSet.h"
class Experiment;
class FilterNumeric;
class DbeView;






class FilterSet
{
public:

  FilterSet (DbeView *_dbev, Experiment *_exp);
  ~FilterSet ();
  char *get_advanced_filter ();
  FilterNumeric *get_filter (int);

  bool
  get_enabled ()
  {
    return enbl;
  }

  void
  set_enabled (bool b)
  {
    enbl = b;
  }

  Vector<FilterNumeric*> *
  get_all_filters ()
  {
    return dfilter;
  }

private:

  DbeView *dbev;
  Experiment *exp;
  bool enbl;
  Vector<FilterNumeric*> *dfilter;
};
# 55 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/FilterExp.h" 1
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/FilterExp.h"
class FilterExp
{
public:

  FilterExp (Expression *_expr, Expression::Context *_ctx, bool _noParFilter) :
      expr (_expr), ctx (_ctx), noParFilter (_noParFilter) { };

  ~FilterExp ()
  {
    delete ctx;
  }

  bool
  passes ()
  {
    return expr ? expr->passes (ctx) : true;
  }

  void
  put (DataView *dview, long eventId)
  {
    ctx->put (dview, eventId);
  }

  Expression *expr;
  Expression::Context *ctx;
  bool noParFilter;
};
# 56 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Sample.h" 1
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/Sample.h"
class PrUsage;

class Sample
{
  friend class Experiment;
public:
  Sample (int num);
  ~Sample ();
  PrUsage *get_usage ();

  char *
  get_start_label ()
  {
    return start_label;
  }

  char *
  get_end_label ()
  {
    return end_label;
  }

  hrtime_t
  get_start_time ()
  {
    return start_time;
  }

  hrtime_t
  get_end_time ()
  {
    return end_time;
  }

  int
  get_number ()
  {
    return number;
  }

private:
  void validate_usage ();
  bool validated;
  char *start_label;
  char *end_label;
  hrtime_t start_time;
  hrtime_t end_time;
  PrUsage *prusage;
  int number;
};
# 57 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Print.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/Print.h"
# 1 "/usr/include/c++/9/stdlib.h" 1 3
# 28 "/doner/binutils/binutils-515f23e/gprofng/src/Print.h" 2



# 1 "/doner/binutils/binutils-515f23e/gprofng/src/Ovw_data.h" 1
# 29 "/doner/binutils/binutils-515f23e/gprofng/src/Ovw_data.h"
class Sample;
class DataView;

class Ovw_data
{
public:

  enum OVW_LMS_STORAGE
  {


    OVW_LMS_USER,
    OVW_LMS_SYSTEM,
    OVW_LMS_TRAP,
    OVW_LMS_USER_LOCK,
    OVW_LMS_DFAULT,
    OVW_LMS_TFAULT,
    OVW_LMS_KFAULT,
    OVW_LMS_STOPPED,
    OVW_LMS_WAIT_CPU,
    OVW_LMS_SLEEP,
    OVW_NUMVALS
  };


  struct Ovw_item
  {
    Value values [OVW_NUMVALS + 1];
    int states;
    Value total;
    int size;
    timestruc_t start;
    timestruc_t duration;
    timestruc_t end;
    timestruc_t tlwp;
    double nlwp;
    ValueTag type;
    int number;
    char *start_label;
    char *end_label;
  };

  Ovw_data (DataView *, hrtime_t exp_start);
  Ovw_data ();
  ~Ovw_data ();
  void sum (Ovw_data *data);
  Ovw_item get_totals ();
  Ovw_item get_labels ();


  static Ovw_item *reset_item (Ovw_item *item);

  int
  size ()
  {
    return ovw_items->size ();
  }

  Ovw_item
  fetch (int index)
  {
    return *ovw_items->fetch (index);
  }

private:

  void extract_data (Ovw_item *ovw_item, Sample *sample);

  Vector<Ovw_item*> *ovw_items;
  Ovw_item *totals;
  DataView *packets;
};
# 32 "/doner/binutils/binutils-515f23e/gprofng/src/Print.h" 2





# 1 "/doner/binutils/binutils-515f23e/gprofng/src/HeapData.h" 1
# 48 "/doner/binutils/binutils-515f23e/gprofng/src/HeapData.h"
class HeapData : public Histable
{
  friend class HeapActivity;
public:
  HeapData (char *sName);
  HeapData (HeapData *hData);
  ~HeapData ();
  char *get_raw_name (Histable::NameFormat nfmt);
  void init ();
  void setStackName (char* sName);
  void setPeakMemUsage (int64_t pmu, uint64_t sId, hrtime_t ts, int procId, int uei);

  virtual char *get_name (Histable::NameFormat nfmt);
  virtual void set_name (char * _name);
  virtual Histable *convertto (Histable_type, Histable* = 
# 62 "/doner/binutils/binutils-515f23e/gprofng/src/HeapData.h" 3 4
                                                         __null
# 62 "/doner/binutils/binutils-515f23e/gprofng/src/HeapData.h"
                                                             );

  virtual Histable_type
  get_type ()
  {
    return histType;
  }

  virtual uint64_t
  get_addr ()
  {
    return stackId;
  }

  uint64_t
  get_index ()
  {
    return stackId;
  }

  char *
  getStackName ()
  {
    return stackName;
  }

  void
  addAllocEvent (uint64_t nb)
  {
    allocBytes += nb;
    allocCnt++;
  }

  uint64_t
  getAllocBytes ()
  {
    return allocBytes;
  }

  int32_t
  getAllocCnt ()
  {
    return allocCnt;
  }

  void
  addLeakEvent (uint64_t nb)
  {
    leakBytes += nb;
    leakCnt++;
  }

  uint64_t
  getLeakBytes ()
  {
    return leakBytes;
  }

  int32_t
  getLeakCnt ()
  {
    return leakCnt;
  }

  void
  setStackId (uint64_t sId)
  {
    stackId = sId;
  }

  uint64_t
  getStackId ()
  {
    return stackId;
  }

  void
  setTimestamp (hrtime_t ts)
  {
    timestamp = ts;
  }

  hrtime_t
  getTimestamp ()
  {
    return timestamp;
  }

  void
  setHistType (Histable::Type hType)
  {
    histType = hType;
  }

  Histable::Type
  getHistType ()
  {
    return histType;
  }

  int64_t
  getPeakMemUsage ()
  {
    return peakMemUsage;
  }

  Vector<uint64_t> *
  getPeakStackIds ()
  {
    return peakStackIds;
  }

  Vector<hrtime_t> *
  getPeakTimestamps ()
  {
    return peakTimestamps;
  }

  void
  setPid (int procId)
  {
    pid = procId;
  }

  int
  getPid ()
  {
    return pid;
  }

  void
  setUserExpId (int uei)
  {
    userExpId = uei;
  }

  int
  getUserExpId ()
  {
    return userExpId;
  }

  void setAllocStat (int64_t nb);

  int64_t
  getASmallestBytes ()
  {
    return aSmallestBytes;
  }

  int64_t
  getALargestBytes ()
  {
    return aLargestBytes;
  }

  int32_t
  getA0KB1KBCnt ()
  {
    return a0KB1KBCnt;
  }

  int32_t
  getA1KB8KBCnt ()
  {
    return a1KB8KBCnt;
  }

  int32_t
  getA8KB32KBCnt ()
  {
    return a8KB32KBCnt;
  }

  int32_t
  getA32KB128KBCnt ()
  {
    return a32KB128KBCnt;
  }

  int32_t
  getA128KB256KBCnt ()
  {
    return a128KB256KBCnt;
  }

  int32_t
  getA256KB512KBCnt ()
  {
    return a256KB512KBCnt;
  }

  int32_t
  getA512KB1000KBCnt ()
  {
    return a512KB1000KBCnt;
  }

  int32_t
  getA1000KB10MBCnt ()
  {
    return a1000KB10MBCnt;
  }

  int32_t
  getA10MB100MBCnt ()
  {
    return a10MB100MBCnt;
  }

  int32_t
  getA100MB1GBCnt ()
  {
    return a100MB1GBCnt;
  }

  int32_t
  getA1GB10GBCnt ()
  {
    return a1GB10GBCnt;
  }

  int32_t
  getA10GB100GBCnt ()
  {
    return a10GB100GBCnt;
  }

  int32_t
  getA100GB1TBCnt ()
  {
    return a100GB1TBCnt;
  }

  int32_t
  getA1TB10TBCnt ()
  {
    return a1TB10TBCnt;
  }

  void setLeakStat (int64_t nb);

  int64_t
  getLSmallestBytes ()
  {
    return lSmallestBytes;
  }

  int64_t
  getLLargestBytes ()
  {
    return lLargestBytes;
  }

  int32_t
  getL0KB1KBCnt ()
  {
    return l0KB1KBCnt;
  }

  int32_t
  getL1KB8KBCnt ()
  {
    return l1KB8KBCnt;
  }

  int32_t
  getL8KB32KBCnt ()
  {
    return l8KB32KBCnt;
  }

  int32_t
  getL32KB128KBCnt ()
  {
    return l32KB128KBCnt;
  }

  int32_t
  getL128KB256KBCnt ()
  {
    return l128KB256KBCnt;
  }

  int32_t
  getL256KB512KBCnt ()
  {
    return l256KB512KBCnt;
  }

  int32_t
  getL512KB1000KBCnt ()
  {
    return l512KB1000KBCnt;
  }

  int32_t
  getL1000KB10MBCnt ()
  {
    return l1000KB10MBCnt;
  }

  int32_t
  getL10MB100MBCnt ()
  {
    return l10MB100MBCnt;
  }

  int32_t
  getL100MB1GBCnt ()
  {
    return l100MB1GBCnt;
  }

  int32_t
  getL1GB10GBCnt ()
  {
    return l1GB10GBCnt;
  }

  int32_t
  getL10GB100GBCnt ()
  {
    return l10GB100GBCnt;
  }

  int32_t
  getL100GB1TBCnt ()
  {
    return l100GB1TBCnt;
  }

  int32_t
  getL1TB10TBCnt ()
  {
    return l1TB10TBCnt;
  }

private:
  char *stackName;
  uint64_t allocBytes;
  uint64_t leakBytes;
  int32_t allocCnt;
  int32_t leakCnt;
  Histable::Type histType;
  int64_t peakMemUsage;
  uint64_t stackId;
  Vector<uint64_t> *peakStackIds;
  hrtime_t timestamp;
  Vector<hrtime_t> *peakTimestamps;
  int pid;
  int userExpId;

  int64_t aSmallestBytes;
  int64_t aLargestBytes;
  int32_t a0KB1KBCnt;
  int32_t a1KB8KBCnt;
  int32_t a8KB32KBCnt;
  int32_t a32KB128KBCnt;
  int32_t a128KB256KBCnt;
  int32_t a256KB512KBCnt;
  int32_t a512KB1000KBCnt;
  int32_t a1000KB10MBCnt;
  int32_t a10MB100MBCnt;
  int32_t a100MB1GBCnt;
  int32_t a1GB10GBCnt;
  int32_t a10GB100GBCnt;
  int32_t a100GB1TBCnt;
  int32_t a1TB10TBCnt;

  int64_t lSmallestBytes;
  int64_t lLargestBytes;
  int32_t l0KB1KBCnt;
  int32_t l1KB8KBCnt;
  int32_t l8KB32KBCnt;
  int32_t l32KB128KBCnt;
  int32_t l128KB256KBCnt;
  int32_t l256KB512KBCnt;
  int32_t l512KB1000KBCnt;
  int32_t l1000KB10MBCnt;
  int32_t l10MB100MBCnt;
  int32_t l100MB1GBCnt;
  int32_t l1GB10GBCnt;
  int32_t l10GB100GBCnt;
  int32_t l100GB1TBCnt;
  int32_t l1TB10TBCnt;
};
# 38 "/doner/binutils/binutils-515f23e/gprofng/src/Print.h" 2


const char nl[] = "\n";
const char tab[] = "\t";


enum Print_destination
{
  DEST_PRINTER = 0,
  DEST_FILE = 1,
  DEST_OPEN_FILE = 2
};

enum Print_mode
{
  MODE_LIST,
  MODE_DETAIL,
  MODE_GPROF,
  MODE_ANNOTATED
};

struct Print_params
{
  Print_destination dest;
  char *name;
  int ncopies;
  bool header;
  FILE *openfile;
};

class Experiment;
class MetricList;
class DbeView;
class Stack_coverage;
class Function;
class LoadObject;


class er_print_common_display
{
public:
  er_print_common_display ()
  {
    out_file = 
# 81 "/doner/binutils/binutils-515f23e/gprofng/src/Print.h" 3 4
              __null
# 81 "/doner/binutils/binutils-515f23e/gprofng/src/Print.h"
                  ;
    pr_params.header = false;
  }

  virtual ~er_print_common_display () { }


  int open (Print_params *);

  void
  set_out_file (FILE *o)
  {
    out_file = o;
    pr_params.dest = DEST_FILE;
  }



  bool print_output ();


  virtual void data_dump () = 0;

  void header_dump (int exp_idx);



  char *get_output (int max);

protected:
  DbeView *dbev;
  FILE *out_file;
  Print_params pr_params;
  char *tmp_file;
  int exp_idx1, exp_idx2;
  bool load;
  bool header;
};

class er_print_histogram : public er_print_common_display
{
public:
  er_print_histogram (DbeView *dbv, Hist_data *data, MetricList *metrics_list,
        Print_mode disp_type, int limit, char *sort_name,
        Histable *sobj, bool show_load, bool show_header);
  void data_dump ();

private:
  void dump_list (int limit);
  void dump_detail (int limit);
  void get_gprof_width (Metric::HistMetric *hist_metric, int limit);
  void dump_gprof (int limit);
  void dump_annotated_dataobjects (Vector<int> *marks, int threshold);
  void dump_annotated ();

  Stack_coverage *stack_cov;
  Hist_data *hist_data;
  MetricList *mlist;
  Print_mode type;
  int number_entries;
  char *sort_metric;
  Histable *sel_obj;
};

class er_print_ctree : public er_print_common_display
{
public:
  er_print_ctree (DbeView *dbv, Vector<Histable*> *cstack, Histable *sobj,
    int limit);
  void data_dump ();
  void print_children (Hist_data *data, int index, Histable *obj, char *prefix,
         Hist_data::HistItem *total);

private:
  Vector<Histable*> *cstack;
  Histable *sobj;
  MetricList *mlist;
  Metric::HistMetric *hist_metric;
  int limit;
  int print_row;
};

class er_print_gprof : public er_print_common_display
{
public:
  er_print_gprof (DbeView *dbv, Vector<Histable*> *cstack);
  void data_dump ();
private:
  Vector<Histable*> *cstack;
};

class er_print_leaklist : public er_print_common_display
{
public:
  er_print_leaklist (DbeView *dbv, bool show_leak,
       bool show_alloca, int limit);
  void data_dump ();

private:
  bool leak;
  bool alloca;
  int limit;
};

class er_print_heapactivity : public er_print_common_display
{
public:
  er_print_heapactivity (DbeView *_dbev, Histable::Type _type,
    bool _printStat, int _limit);
  void data_dump ();

private:
  void printStatistics (Hist_data *hist_data);
  void printCallStacks (Hist_data *hist_data);

  Histable::Type type;
  bool printStat;
  int limit;
};

class er_print_ioactivity : public er_print_common_display
{
public:
  er_print_ioactivity (DbeView *_dbev, Histable::Type _type,
         bool _printStat, int _limit);
  void data_dump ();

private:
  void printStatistics (Hist_data *hist_data);
  void printCallStacks (Hist_data *hist_data);

  Histable::Type type;
  bool printStat;
  int limit;
};

class er_print_experiment : public er_print_common_display
{
public:
  er_print_experiment (DbeView *me, int bgn_idx, int end_idx, bool show_load,
    bool show_header, bool show_stat, bool show_over, bool show_odetail);
  void data_dump ();

private:
  int max_len1, max_len2, max_len3;
  void overview_sum (int &maxlen);
  void overview_dump (int exp_idx, int &maxlen);
  void overview_summary (Ovw_data *ovw_data, int &maxlen);
  void overview_item (Ovw_data::Ovw_item *ovw_item,
        Ovw_data::Ovw_item *ovw_item_labels);
  void overview_value (Value *value, ValueTag value_tag, double total_value);
  void statistics_sum (int &maxlen);
  void statistics_dump (int exp_idx, int &maxlen);
  void statistics_item (Stats_data *stats_data);

  bool stat;
  bool over;
  bool odetail;
};



char *pr_load_objects (Vector<LoadObject*> *loadobjects, char *lead);
char *pr_samples (Experiment *exp);
char *pr_mesgs (Emsg *msg, const char *null_str, const char *lead);
void print_load_object (FILE *out_file);
void print_header (Experiment *exp, FILE *out_file);


int print_label (FILE *out_file, MetricList *metrics_list,
   Metric::HistMetric *hist_metric, int space);
void print_anno_file (char *name, const char *sel, const char *srcFile,
        bool isDisasm, FILE *dis_file, FILE *inp_file,
        FILE *out_file, DbeView *dbev, bool xdefault);
void print_html_title (FILE *out_file, char *title);
void print_html_label (FILE *out_file, MetricList *metrics_list);
void print_html_content (FILE *out_file, Hist_data *d, MetricList *metrics_list,
    int limit, Histable::NameFormat nfmt);
void print_html_one (FILE *out_file, Hist_data *data, Hist_data::HistItem *item,
       MetricList *metrics_list, Histable::NameFormat nfmt);
void print_html_trailer (FILE* out_file);
char *html_ize_name (char *name);
void print_delim_label (FILE *out_file, MetricList *metrics_list, char delim);
void print_delim_content (FILE *out_file, Hist_data *data,
     MetricList *metrics_list, int limit,
     Histable::NameFormat nfmt, char delim);
void print_delim_one (FILE *out_file, Hist_data *data, Hist_data::HistItem *item,
        MetricList *metrics_list, Histable::NameFormat nfmt, char delim);
void print_delim_trailer (FILE* out_file, char delim);
char *csv_ize_name (char *name, char delim);
char *split_metric_name (char *name);
# 58 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/StringBuilder.h" 1
# 59 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/ExpGroup.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/ExpGroup.h"
class Experiment;
class LoadObject;

class ExpGroup
{
public:
  ExpGroup (char *nm);
  ~ExpGroup ();
  void append (Experiment *exp);
  void drop_experiment (Experiment *exp);
  Vector<Experiment*> *get_founders ();
  void create_list_of_loadObjects ();
  LoadObject *get_comparable_loadObject (LoadObject *lo);

  Vector<Experiment*> *exps;
  Vector<LoadObject*> *loadObjs;
  Map <LoadObject*, int> *loadObjsMap;
  Experiment *founder;
  char *name;
  int groupId;
  static int phaseCompareIdx;
};
# 61 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2

# 1 "/doner/binutils/binutils-515f23e/gprofng/src/UserLabel.h" 1
# 27 "/doner/binutils/binutils-515f23e/gprofng/src/UserLabel.h"
class Expression;
class StringBuilder;

class UserLabel
{
public:

  enum
  {
    REL_TIME = 0,
    ABS_TIME = 1,
    CUR_TIME = 2
  };

  UserLabel (char *_name);
  ~UserLabel ();
  void register_user_label (int groupId);
  void gen_expr ();
  char *dump ();
  static void dump (const char *msg, Vector<UserLabel*> *labels);

  char *name, *comment, *str_expr, *all_times, *hostname;
  bool start_f, stop_f;
  Expression *expr;
  timeval start_tv;
  long long atime, timeStart, timeStop, start_sec, start_hrtime;
  int id, relative;

private:
  void gen_time_expr (StringBuilder *sb, long long hrtime, char *op);

  static int last_id;
};
# 63 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2
# 1 "/doner/binutils/binutils-515f23e/gprofng/src/DbeFile.h" 1
# 26 "/doner/binutils/binutils-515f23e/gprofng/src/DbeFile.h"
class DbeJarFile;
class Experiment;
template <class ITEM> class Vector;

class DbeFile
{
public:

  enum
  {
    F_NOT_FOUND = 0,
    F_FICTION = 1,
    F_LOADOBJ = 2,
    F_SOURCE = 4,
    F_JAVACLASS = 8,
    F_JAVA_SOURCE = 16,
    F_DOT_O = 32,
    F_DEBUG_FILE = 64,
    F_DOT_A_LIB = 128,
    F_DIR_OR_JAR = 256,
    F_DIRECTORY = 512,
    F_FILE = 1024,
    F_JAR_FILE = 2048,
    F_UNKNOWN = 65536
  };

  DbeFile (const char *filename);
  ~DbeFile ();

  char *
  get_name ()
  {
    return name;
  };

  bool
  get_need_refind ()
  {
    return need_refind;
  };

  char *get_location (bool find_needed = true);
  char *getResolvedPath ();
  char *get_location_info ();
  struct stat64 *get_stat ();
  bool compare (DbeFile *df);
  void set_need_refind (bool val);
  void set_location (const char *filename);
  int check_access (const char *filename);
  char *find_file (const char *filename);
  DbeFile *getJarDbeFile (char *fnm, int sym);
  char *find_in_jar_file (const char *filename, DbeJarFile *jfile);
  DbeJarFile *get_jar_file ();

  bool inArchive;
  int filetype;
  struct stat64 sbuf;
  DbeFile *container;
  char *orig_location;
  Experiment *experiment;

protected:
  static bool isJarOrZip (const char *fnm);
  char *find_package_name (const char *filename, const char *dirname);
  char *find_in_directory (const char *filename, const char *dirname);
  bool find_in_pathmap (char *filename);
  void find_in_archives (char *filename);
  void find_in_setpath (char *filename, Vector<char*> *searchPath);
  void find_in_classpath (char *filename, Vector<DbeFile*> *classPath);

  char *name;
  char *location;
  char *location_info;
  bool need_refind;
  DbeJarFile *jarFile;
};
# 64 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 2



static Coll_Ctrl *col_ctr = 
# 67 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                           __null
# 67 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                               ;

template<> VecType Vector<int>::type ()
{
  return VEC_INTEGER;
}

template<> VecType Vector<unsigned>::type ()
{
  return VEC_INTEGER;
}

template<> VecType Vector<char>::type ()
{
  return VEC_CHAR;
}

template<> VecType Vector<bool>::type ()
{
  return VEC_BOOL;
}

template<> VecType Vector<double>::type ()
{
  return VEC_DOUBLE;
}

template<> VecType Vector<long long>::type ()
{
  return VEC_LLONG;
}

template<> VecType Vector<uint64_t>::type ()
{
  return VEC_LLONG;
}

template<> VecType Vector<void*>::type ()
{
  return VEC_VOIDARR;
}

template<> VecType Vector<char*>::type ()
{
  return VEC_STRING;
}

template<> VecType Vector<Vector<int>*>::type ()
{
  return VEC_INTARR;
}

template<> VecType Vector<Vector<char*>*>::type ()
{
  return VEC_STRINGARR;
}

template<> VecType Vector<Vector<long long>*>::type ()
{
  return VEC_LLONGARR;
}


Vector<unsigned> __dummy_unsigned_vector;


static const char *
dsp_type_to_string (int t)
{
  switch (t)
    {
      case DSP_FUNCTION: return "DSP_FUNCTION";
      case DSP_LINE: return "DSP_LINE";
      case DSP_PC: return "DSP_PC";
      case DSP_SOURCE: return "DSP_SOURCE";
      case DSP_DISASM: return "DSP_DISASM";
      case DSP_SELF: return "DSP_SELF";
      case DSP_CALLER: return "DSP_CALLER";
      case DSP_CALLEE: return "DSP_CALLEE";
      case DSP_CALLTREE: return "DSP_CALLTREE";
      case DSP_TIMELINE: return "DSP_TIMELINE";
      case DSP_STATIS: return "DSP_STATIS";
      case DSP_EXP: return "DSP_EXP";
      case DSP_LEAKLIST: return "DSP_LEAKLIST";
      case DSP_MEMOBJ: return "DSP_MEMOBJ";
      case DSP_DATAOBJ: return "DSP_DATAOBJ";
      case DSP_DLAYOUT: return "DSP_DLAYOUT";
      case DSP_SRC_FILE: return "DSP_SRC_FILE";
      case DSP_IFREQ: return "DSP_IFREQ";
      case DSP_RACES: return "DSP_RACES";
      case DSP_INDXOBJ: return "DSP_INDXOBJ";
      case DSP_DUALSOURCE: return "DSP_DUALSOURCE";
      case DSP_SOURCE_DISASM: return "DSP_SOURCE_DISASM";
      case DSP_DEADLOCKS: return "DSP_DEADLOCKS";
      case DSP_SOURCE_V2: return "DSP_SOURCE_V2";
      case DSP_DISASM_V2: return "DSP_DISASM_V2";
      case DSP_IOACTIVITY: return "DSP_IOACTIVITY";
      case DSP_OVERVIEW: return "DSP_OVERVIEW";
      case DSP_IOCALLSTACK: return "DSP_IOCALLSTACK";
      case DSP_HEAPCALLSTACK: return "DSP_HEAPCALLSTACK";
      case DSP_SAMPLE: return "DSP_SAMPLE";
    default:
      break;
    }
  return ((char *) ("ERROR"));
}

enum
{
  COMPARE_BIT = 1 << 8,
  MTYPE_MASK = (1 << 8) - 1,
  GROUP_ID_SHIFT = 16
};

static DbeView *
getDbeView (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 185 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 185 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  return dbev;
}


Vector<char*> *
dbeGetInitMessages ()
{

  Emsg *msg = theDbeApplication->fetch_comments ();
  int size = 0;
  while (msg != 
# 197 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 197 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
    {
      size++;
      msg = msg->next;
    }


  Vector<char*> *list = new Vector<char*>(size);
  msg = theDbeApplication->fetch_comments ();
  size = 0;
  int i = 0;
  while (msg != 
# 208 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 208 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
    {
      char *str = msg->get_msg ();
      list->store (i, dbe_strdup (str));
      i++;
      msg = msg->next;
    }


  theDbeApplication->delete_comments ();
  return list;
}

Vector<char*> *
dbeGetExpPreview (int , char *exp_name)
{
  PreviewExp *preview = new PreviewExp ();
  preview->experiment_open (exp_name);
  preview->open_epilogue ();


  Vector<char*> *info = preview->preview_info ();
  int size = info->size ();
  Vector<char*> *list = new Vector<char*>(size);


  for (int i = 0; i < size; i++)
    {
      char *str = info->fetch (i);
      if (str == 
# 237 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 237 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 str = gettext("N/A");
      list->store (i, dbe_strdup (str));
    }
  delete info;
  delete preview;
  return list;
}

char *
dbeGetExpParams (int , char *exp_name)
{
  PreviewExp *preview = new PreviewExp ();
  preview->experiment_open (exp_name);


  char *arg_list = dbe_strdup (preview->getArgList ());
  delete preview;
  return arg_list;
}
# 266 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
char *
dbeGetFileAttributes (const char *filename, const char *format)
{
  if (format != 
# 269 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 269 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
    {
      if (!strcmp (format, ((char *) ("/bin/ls -dl "))))
 {

   struct stat64 sbuf;
   sbuf.st_mode = 0;
   dbe_stat (filename, &sbuf);
   if (
# 277 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
      0400 
# 277 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              & sbuf.st_mode)
     {
       if (
# 279 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          ((((
# 279 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
          sbuf.st_mode
# 279 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          )) & 0170000) == (0040000)) 
# 279 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                 != 0)
  return dbe_sprintf (((char *) ("%s %s\n")), ((char *) ("drwxrwxr-x")), filename);
       else if (
# 281 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               ((((
# 281 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
               sbuf.st_mode
# 281 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               )) & 0170000) == (0100000)) 
# 281 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                      != 0)
  return dbe_sprintf (((char *) ("%s %s\n")), ((char *) ("-rwxrwxr-x")), filename);
     }
 }
    }
  return dbe_strdup (((char *) ("")));
}
# 298 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
char *
dbeGetFiles (const char *dirname, const char *format)
{
  if (format != 
# 301 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 301 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
    return dbe_read_dir (dirname, format);
  return dbe_strdup (((char *) ("")));
}







char *
dbeCreateDirectories (const char *dirname)
{
  if (dirname != 
# 315 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 315 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    {
      char *res = dbe_create_directories (dirname);
      if (res != 
# 318 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 318 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 return res;
    }
  return dbe_strdup (((char *) ("")));
}







char *
dbeDeleteFile (const char *pathname)
{

  if (pathname != 
# 334 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 334 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
    {
      char *res = dbe_delete_file (pathname);
      if (res != 
# 337 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 337 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 return res;
    }
  return dbe_strdup (((char *) ("")));
}
# 351 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
Vector<char*> *
dbeReadFile (const char *pathname)
{
  Vector<char*> *result = new Vector<char*>(2);
  int limit = 1024 * 1024;
  char * contents = (char *) malloc (limit);
  StringBuilder sb;
  if (
# 358 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     __null 
# 358 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
          == contents)
    {
      sb.sprintf (((char *) ("\nError: Cannot allocate %d bytes\n")), limit);
      result->store (0, 
# 361 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                       __null
# 361 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                           );
      result->store (1, sb.toString ());
      return result;
    }
  int fd = open (pathname, 
# 365 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                          00
# 365 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                  );
  if (fd >= 0)
    {
      int64_t bytes = read_from_file (fd, contents, limit);
      close (fd);
      if (bytes >= limit)
 {
   sb.sprintf (((char *) ("\nError: file size is greater than the limit (%d bytes)\n")), limit);
   result->store (0, 
# 373 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null
# 373 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        );
   result->store (1, sb.toString ());
 }
      else
 {
   contents[bytes] = '\0';
   result->store (0, contents);
   result->store (1, 
# 380 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null
# 380 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        );
 }
    }
  else
    {
      sb.sprintf (((char *) ("\nError: Cannot open file %s\n")), pathname);
      result->store (0, 
# 386 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                       __null
# 386 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                           );
      result->store (1, sb.toString ());
      free (contents);
    }
  return result;
}
# 400 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
int
dbeWriteFile (const char *pathname, const char *contents)
{
  int result = -1;
  size_t len = 0;
  if (
# 405 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     __null 
# 405 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
          != contents)
    len = strlen (contents);
  size_t limit = 1024 * 1024;
  if (len > limit) return result;
  unlink (pathname);
  mode_t mode = 
# 410 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               0400 
# 410 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       | 
# 410 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         0200
# 410 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                ;
  int fd = open (pathname, 
# 411 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                          01 
# 411 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                   | 
# 411 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                     0100 
# 411 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                             | 
# 411 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                               01000
# 411 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                      , mode);
  if (fd >= 0)
    {
      chmod (pathname, 0600);
      ssize_t bytes = 0;
      if (len > 0)
 bytes = write (fd, contents, len);
      close (fd);
      result = (int) bytes;
    }
  return result;
}
# 431 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
char *
dbeGetRunningProcesses (const char *format)
{
  if (format != 
# 434 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 434 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
    return dbe_get_processes (format);
  return dbe_strdup (((char *) ("")));
}




char *
dbeOpenExperimentList (int , Vector<Vector<char*>*> *groups,
         bool sessionRestart)
{
  if (sessionRestart)
    dbeSession->reset ();
  char *errstr;

  try
    {
      errstr = dbeSession->setExperimentsGroups (groups);
    }
  catch (ExperimentLoadCancelException *)
    {
      errstr = dbe_strdup (((char *) ("Experiment Load Cancelled")));
    }
  return errstr;
}




char *
dbeDropExperiment (int , Vector<int> *drop_index)
{
  for (int i = drop_index->size () - 1; i >= 0; i--)
    {
      char *ret = dbeSession->drop_experiment (drop_index->fetch (i));
      if (ret != 
# 470 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 470 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
   return ret;
    }
  return 
# 473 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
        __null
# 473 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
            ;
}






char *
dbeReadRCFile (int dbevindex, char* path)
{
  DbeView *dbev = getDbeView (dbevindex);
  char *err_msg = dbev->get_settings ()->read_rc (path);
  return err_msg;
}

char *
dbeSetExperimentsGroups (Vector<Vector<char*>*> *groups)
{
  int cmp_mode = dbeSession->get_settings ()->get_compare_mode ();
  if (groups->size () < 2)
    cmp_mode = CMP_DISABLE;
  else if (cmp_mode == CMP_DISABLE)
    cmp_mode = CMP_ENABLE;
  for (int i = 0;; i++)
    {
      DbeView *dbev = dbeSession->getView (i);
      if (dbev == 
# 500 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 500 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
 break;
      dbev->get_settings ()->set_compare_mode (cmp_mode);
    }
  char *err_msg = dbeSession->setExperimentsGroups (groups);


  dbeDetectLoadMachineModel (0);
  return err_msg;
}

Vector<Vector<char*>*> *
dbeGetExperimensGroups ()
{
  Vector<Vector<char*>*> *grops = dbeSession->getExperimensGroups ();
  return grops;
}

Vector<int> *
dbeGetFounderExpId (Vector<int> *expIds)
{
  Vector<int> *ret = new Vector<int>(expIds->size ());
  for (int i = 0; i < expIds->size (); i++)
    {
      int expId = expIds->fetch (i);
      Experiment *exp = dbeSession->get_exp (expId);
      if (exp != 
# 526 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 526 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 {
   int founderExpId = exp->getBaseFounder ()->getExpIdx ();
   ret->store (i, founderExpId);
 }
      else
 ret->store (i, -1);
    }
  return ret;
}

Vector<int> *
dbeGetUserExpId (Vector<int> *expIds)
{

  Vector<int> *ret = new Vector<int>(expIds->size ());
  for (int i = 0; i < expIds->size (); i++)
    {
      int expId = expIds->fetch (i);
      Experiment *exp = dbeSession->get_exp (expId);
      if (exp != 
# 546 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 546 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 {
   int userExpId = exp->getUserExpId ();
   ret->store (i, userExpId);
 }
      else
 ret->store (i, -1);
    }
  return ret;
}




Vector<int> *
dbeGetExpGroupId (Vector<int> *expIds)
{
  Vector<int> *ret = new Vector<int>(expIds->size ());
  for (int i = 0; i < expIds->size (); i++)
    {
      int expId = expIds->fetch (i);
      Experiment *exp = dbeSession->get_exp (expId);
      if (exp != 
# 568 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 568 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 {
   int gId = exp->groupId;
   ret->store (i, gId);
 }
      else
 ret->store (i, -1);
    }
  return ret;
}

Vector<char*> *
dbeGetExpsProperty (const char *prop_name)
{
  long nexps = dbeSession->nexps ();
  if (prop_name == 
# 583 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null 
# 583 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       || nexps == 0)
    return 
# 584 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 584 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  Vector<char*> *list = new Vector<char*>(nexps);
  StringBuilder sb;
  int empty = 1;
  int prop = 99;
  if (strcasecmp (prop_name, ((char *) ("ERRORS"))) == 0)
    prop = 1;
  else if (strcasecmp (prop_name, ((char *) ("WARNINGS"))) == 0)
    prop = 2;
  if (prop < 3)
    {
      for (long i = 0; i < nexps; i++)
 {
   Experiment *exp = dbeSession->get_exp (i);
   char *nm = exp->get_expt_name ();
   sb.setLength (0);
   for (Emsg *emsg = (prop == 1) ? exp->fetch_errors () : exp->fetch_warnings ();
    emsg; emsg = emsg->next)
     sb.appendf (((char *) ("%s: %s\n")), STR (nm), STR (emsg->get_msg ()));
   char *s = 
# 603 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 603 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
   if (sb.length () > 0)
     {
       s = sb.toString ();
       empty = 0;
     }
   list->append (s);
 }
    }
  if (empty)
    {
      delete list;
      list = 
# 615 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 615 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
    }
  return list;
}




Vector<char*> *
dbeGetExpName (int )
{
  int size = dbeSession->nexps ();
  if (size == 0)
    return 
# 628 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 628 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  Vector<char*> *list = new Vector<char*>(size);


  for (int i = 0; i < size; i++)
    {
      Experiment *texp = dbeSession->get_exp (i);
      char *buf = dbe_sprintf (((char *) ("%s [%s]")), texp->get_expt_name (),
          texp->utargname != 
# 637 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                            __null 
# 637 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                 ? texp->utargname : gettext("(unknown)"));
      list->store (i, buf);
    }
  return list;
}




Vector<int> *
dbeGetExpState (int )
{
  int size = dbeSession->nexps ();
  if (size == 0)
    return 
# 651 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 651 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  Vector<int> *state = new Vector<int>(size);


  for (int i = 0; i < size; i++)
    {
      Experiment *exp = dbeSession->get_exp (i);
      int set = EXP_SUCCESS;
      if (exp->get_status () == Experiment::FAILURE)
 set |= EXP_FAILURE;
      if (exp->get_status () == Experiment::INCOMPLETE)
 set |= EXP_INCOMPLETE;
      if (exp->broken)
 set |= EXP_BROKEN;
      if (exp->obsolete)
 set |= EXP_OBSOLETE;
      state->store (i, set);
    }
  return state;
}




Vector<bool> *
dbeGetExpEnable (int dbevindex)
{
  DbeView *dbev = getDbeView (dbevindex);
  int size = dbeSession->nexps ();
  if (dbev == 
# 681 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 681 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || size == 0)
    return 
# 682 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 682 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  Vector<bool> *enable = new Vector<bool>(size);
  for (int i = 0; i < size; i++)
    {
      bool val = dbev->get_exp_enable (i) && !dbeSession->get_exp (i)->broken;
      enable->store (i, val);
    }
  return enable;
}




bool
dbeSetExpEnable (int dbevindex, Vector<bool> *enable)
{
  DbeView *dbev = getDbeView (dbevindex);
  bool ret = false;
  int size = dbeSession->nexps ();
  if (dbev == 
# 703 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 703 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || size == 0)
    return false;


  for (int i = 0; i < size; i++)
    if (!dbeSession->get_exp (i)->broken
 && dbev->get_exp_enable (i) != enable->fetch (i))
      {
 dbev->set_exp_enable (i, enable->fetch (i));
 ret = true;
      }
  return ret;
}




Vector<char*> *
dbeGetExpInfo (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 724 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 724 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  int size = dbeSession->nexps ();
  if (size == 0)
    return 
# 728 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 728 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  Vector<char*> *list = new Vector<char*>(size * 2 + 1);


  Vector<LoadObject*> *text_segments = dbeSession->get_text_segments ();
  char *msg = pr_load_objects (text_segments, ((char *) ("")));
  delete text_segments;
  list->store (0, msg);
  int k = 1;
  for (int i = 0; i < size; i++)
    {
      Experiment *exp = dbeSession->get_exp (i);
      char *msg0 = pr_mesgs (exp->fetch_notes (), ((char *) ("")), ((char *) ("")));
      char *msg1 = pr_mesgs (exp->fetch_errors (), gettext("No errors\n"), ((char *) ("")));
      char *msg2 = pr_mesgs (exp->fetch_warnings (), gettext("No warnings\n"), ((char *) ("")));
      char *msg3 = pr_mesgs (exp->fetch_comments (), ((char *) ("")), ((char *) ("")));
      char *msg4 = pr_mesgs (exp->fetch_pprocq (), ((char *) ("")), ((char *) ("")));
      msg = dbe_sprintf (((char *) ("%s%s%s%s")), msg1, msg2, msg3, msg4);
      list->store (k++, msg0);
      list->store (k++, msg);
      free (msg1);
      free (msg2);
      free (msg3);
      free (msg4);
    }
  return list;
}

bool
dbeGetViewModeEnable ()
{
  return dbeSession->has_ompavail () || dbeSession->has_java ();
}

bool
dbeGetJavaEnable ()
{
  return dbeSession->has_java ();
}

int
dbeUpdateNotes (int dbevindex, int exp_id, int type, char* text, bool handle_file)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 774 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 774 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  int size = dbeSession->nexps ();
  if (size == 0)
    return -1;
  Experiment *exp = dbeSession->get_exp (exp_id);
  return (type == 0) ? exp->save_notes (text, handle_file) : exp->delete_notes (handle_file);
}




Vector<char*> *
dbeGetLoadObjectName (int )
{
  Vector<LoadObject*> *lobjs = dbeSession->get_text_segments ();
  int size = lobjs->size ();


  Vector<char*> *list = new Vector<char*>(size);


  LoadObject *lo;
  int index;
  if (lobjs != 
# 798 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 798 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, lo = ((lobjs)->size() > 0) ? (lobjs)->fetch(0) : (LoadObject*)0; index < (lobjs)->size(); lo = (++index < (lobjs)->size()) ? (lobjs)->fetch(index) : (LoadObject*)0)
  {
    list->store (index, dbe_strdup (lo->get_name ()));
  }
  delete lobjs;
  return list;
}




Vector<void*> *
dbeGetTabList (int )
{



  return 
# 815 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
        __null
# 815 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
            ;
}




Vector<void*> *
dbeGetTabListInfo (int dbevindex)
{
  int index;
  DispTab *dsptab;
  DbeView *dbev = getDbeView (dbevindex);


  dbev->get_settings ()->proc_tabs (theDbeApplication->rdtMode);
  Vector<DispTab*> *tabs = dbev->get_TabList ();


  int size = 0;
  if (tabs != 
# 834 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 834 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, dsptab = ((tabs)->size() > 0) ? (tabs)->fetch(0) : (DispTab*)0; index < (tabs)->size(); dsptab = (++index < (tabs)->size()) ? (tabs)->fetch(index) : (DispTab*)0)
  {
    if (!dsptab->available)
      continue;
    size++;
  }
  Vector<void*> *data = new Vector<void*>(2);
  Vector<int> *typelist = new Vector<int>(size);
  Vector<char*> *cmdlist = new Vector<char*>(size);
  Vector<int> *ordlist = new Vector<int>(size);


  int i = 0;

  if (tabs != 
# 848 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 848 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, dsptab = ((tabs)->size() > 0) ? (tabs)->fetch(0) : (DispTab*)0; index < (tabs)->size(); dsptab = (++index < (tabs)->size()) ? (tabs)->fetch(index) : (DispTab*)0)
  {
    if (!dsptab->available)
      continue;
    typelist->store (i, dsptab->type);
    cmdlist->store (i, dbe_strdup (Command::get_cmd_str (dsptab->cmdtoken)));
    ordlist->store (i, dsptab->order);
    i++;
  }
  data->store (0, typelist);
  data->store (1, cmdlist);
  data->store (2, ordlist);
  return data;
}



Vector<bool> *
dbeGetTabSelectionState (int dbevindex)
{
  int index;
  DispTab *dsptab;
  DbeView *dbev = getDbeView (dbevindex);
  Vector<DispTab*> *tabs = dbev->get_TabList ();


  int size = 0;
  if (tabs != 
# 875 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 875 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, dsptab = ((tabs)->size() > 0) ? (tabs)->fetch(0) : (DispTab*)0; index < (tabs)->size(); dsptab = (++index < (tabs)->size()) ? (tabs)->fetch(index) : (DispTab*)0)
  {
    if (!dsptab->available)
      continue;
    size++;
  }
  Vector<bool> *states = new Vector<bool>(size);


  int i = 0;
  if (tabs != 
# 885 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 885 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, dsptab = ((tabs)->size() > 0) ? (tabs)->fetch(0) : (DispTab*)0; index < (tabs)->size(); dsptab = (++index < (tabs)->size()) ? (tabs)->fetch(index) : (DispTab*)0)
  {
    if (!dsptab->available)
      continue;
    states->store (i++, dsptab->visible);
  }
  return states;
}


void
dbeSetTabSelectionState (int dbevindex, Vector<bool> *selected)
{
  int index;
  DispTab *dsptab;
  DbeView *dbev = getDbeView (dbevindex);
  Vector<DispTab*> *tabs = dbev->get_TabList ();
  int i = 0;
  if (tabs != 
# 903 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 903 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, dsptab = ((tabs)->size() > 0) ? (tabs)->fetch(0) : (DispTab*)0; index < (tabs)->size(); dsptab = (++index < (tabs)->size()) ? (tabs)->fetch(index) : (DispTab*)0)
  {
    if (!dsptab->available)
      continue;
    dsptab->visible = selected->fetch (i++);
  }
}


Vector<bool> *
dbeGetMemTabSelectionState (int dbevindex)
{
  int index;
  bool dsptab;
  DbeView *dbev = getDbeView (dbevindex);
  Vector<bool> *memtabs = dbev->get_MemTabState ();


  int size = memtabs->size ();
  Vector<bool> *states = new Vector<bool>(size);


  int i = 0;
  if (memtabs != 
# 926 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 926 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, dsptab = ((memtabs)->size() > 0) ? (memtabs)->fetch(0) : (bool)0; index < (memtabs)->size(); dsptab = (++index < (memtabs)->size()) ? (memtabs)->fetch(index) : (bool)0)
  {
    states->store (i++, dsptab);
  }
  return states;
}



void
dbeSetMemTabSelectionState (int dbevindex, Vector<bool> *selected)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 939 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 939 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->set_MemTabState (selected);
}


Vector<bool> *
dbeGetIndxTabSelectionState (int dbevindex)
{
  int index;
  bool dsptab;
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 951 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 951 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Vector<bool> *indxtabs = dbev->get_IndxTabState ();


  int size = indxtabs->size ();
  Vector<bool> *states = new Vector<bool>(size);


  int i = 0;
  if (indxtabs != 
# 961 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 961 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, dsptab = ((indxtabs)->size() > 0) ? (indxtabs)->fetch(0) : (bool)0; index < (indxtabs)->size(); dsptab = (++index < (indxtabs)->size()) ? (indxtabs)->fetch(index) : (bool)0)
  {
    states->store (i++, dsptab);
  }
  return states;
}


void
dbeSetIndxTabSelectionState (int dbevindex, Vector<bool> *selected)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 973 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 973 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->set_IndxTabState (selected);
}




Vector<char*> *
dbeGetSearchPath (int )
{
  Vector<char*> *path = dbeSession->get_search_path ();
  int size = path->size ();
  Vector<char*> *list = new Vector<char*>(size);
  int index;
  char *name;
  if (path != 
# 989 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 989 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, name = ((path)->size() > 0) ? (path)->fetch(0) : (char*)0; index < (path)->size(); name = (++index < (path)->size()) ? (path)->fetch(index) : (char*)0)
  {
    list->store (index, dbe_strdup (name));
  }
  return list;
}




void
dbeSetSearchPath (int , Vector<char*> *path)
{
  dbeSession->set_search_path (path, true);
  return;
}




Vector<void*> *
dbeGetPathmaps (int )
{
  int index;
  pathmap_t *pthmap;
  Vector<pathmap_t*> *path = dbeSession->get_pathmaps ();
  int size = path->size ();
  Vector<void*> *data = new Vector<void*>(2);
  Vector<char*> *oldlist = new Vector<char*>(size);
  Vector<char*> *newlist = new Vector<char*>(size);

  int i = 0;
  if (path != 
# 1021 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 1021 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, pthmap = ((path)->size() > 0) ? (path)->fetch(0) : (pathmap_t*)0; index < (path)->size(); pthmap = (++index < (path)->size()) ? (path)->fetch(index) : (pathmap_t*)0)
  {
    oldlist->store (i, dbe_strdup (pthmap->old_prefix));
    newlist->store (i, dbe_strdup (pthmap->new_prefix));
    i++;
  }
  data->store (0, oldlist);
  data->store (1, newlist);
  return data;
}

char *
dbeSetPathmaps (Vector<char*> *from, Vector<char*> *to)
{
  if (from == 
# 1035 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 1035 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || to == 
# 1035 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                           __null 
# 1035 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                || from->size () != to->size ())
    return dbe_strdup ("dbeSetPathmaps: size of 'from' does not match for size of 'to'\n");
  Vector<pathmap_t*> *newPath = new Vector<pathmap_t*>(from->size ());
  for (int i = 0, sz = from->size (); i < sz; i++)
    {
      char *err = Settings::add_pathmap (newPath, from->get (i), to->get (i));
      if (err)
 {
   newPath->destroy ();
   delete newPath;
   return err;
 }
    }
  dbeSession->set_pathmaps (newPath);
  return 
# 1049 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
        __null
# 1049 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
            ;
}



char *
dbeAddPathmap (int , char *from, char *to)
{
  Vector<pathmap_t*> *pmp = dbeSession->get_pathmaps ();
  char *err = Settings::add_pathmap (pmp, from, to);
  return err;
}



char *
dbeGetMsg (int dbevindex, int type)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 1068 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 1068 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  char *msgstr = 
# 1070 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 1070 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    ;
  if (type == ERROR_MSG)
    msgstr = dbev->get_error_msg ();
  else if (type == WARNING_MSG)
    msgstr = dbev->get_warning_msg ();
  else if (type == PSTAT_MSG)
    msgstr = dbev->get_processor_msg (PSTAT_MSG);
  else if (type == PWARN_MSG)
    msgstr = dbev->get_processor_msg (PWARN_MSG);
  return msgstr ? dbe_strdup (msgstr) : 
# 1079 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                       __null
# 1079 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                           ;
}


int
dbeInitView (int id, int cloneid)
{
  return dbeSession->createView (id, cloneid);
}



void
dbeDeleteView (int dbevindex)
{
  dbeSession->dropView (dbevindex);
  return;
}

MetricList *
dbeGetMetricListV2 (int dbevindex, MetricType mtype,
      Vector<int> *type, Vector<int> *subtype, Vector<bool> *sort,
      Vector<int> *vis, Vector<char*> *cmd,
      Vector<char*> *expr_spec, Vector<char*> *legends)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  MetricList *mlist = new MetricList (mtype);
  for (int i = 0, msize = type->size (); i < msize; i++)
    {
      BaseMetric *bm = dbev->register_metric_expr ((BaseMetric::Type) type->fetch (i),
         cmd->fetch (i),
         expr_spec->fetch (i));
      Metric *m = new Metric (bm, (Metric::SubType) subtype->fetch (i));
      m->set_raw_visbits (vis->fetch (i));
      if (m->legend == 
# 1113 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 1113 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          )
 m->legend = dbe_strdup (legends->fetch (i));
      mlist->append (m);
      if (sort->fetch (i))
 {
   mlist->set_sort_ref_index (i);
 }
    }
  return mlist;
}

static Vector<void*> *
dbeGetMetricList (MetricList *mlist)
{
  int clock_val = dbeSession->get_clock (-1);
  Vector<Metric*> *items = mlist->get_items ();
  int size = items->size ();

  Vector<int> *type = new Vector<int>(size);
  Vector<int> *subtype = new Vector<int>(size);
  Vector<int> *clock = new Vector<int>(size);
  Vector<int> *flavors = new Vector<int>(size);
  Vector<int> *vis = new Vector<int>(size);
  Vector<bool> *sorted = new Vector<bool>(size);
  Vector<int> *value_styles = new Vector<int>(size);
  Vector<char*> *aux = new Vector<char*>(size);
  Vector<char*> *name = new Vector<char*>(size);
  Vector<char*> *abbr = new Vector<char*>(size);
  Vector<char*> *comd = new Vector<char*>(size);
  Vector<char*> *unit = new Vector<char*>(size);
  Vector<char*> *user_name = new Vector<char*>(size);
  Vector<char*> *expr_spec = new Vector<char*>(size);
  Vector<char*> *legend = new Vector<char*>(size);
  Vector<int> *valtype = new Vector<int>(size);
  Vector<char*> *data_type_name = new Vector<char*>(size);
  Vector<char*> *data_type_uname = new Vector<char*>(size);
  Vector<char*> *short_desc = new Vector<char*>(size);

  int sort_index = mlist->get_sort_ref_index ();

  for (int i = 0; i < size; i++)
    {
      Metric *m = items->fetch (i);
      type->append (m->get_type ());
      subtype->append (m->get_subtype ());
      flavors->append (m->get_flavors ());
      abbr->append (dbe_strdup (m->get_abbr ()));
      char *s = m->get_abbr_unit ();
      if ((m->get_visbits () & VAL_RATIO) != 0)
 s = 
# 1162 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
    __null
# 1162 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
        ;
      unit->append (dbe_strdup (s ? s : ((char *) (""))));
      value_styles->append (m->get_value_styles ());
      vis->append (m->get_visbits ());
      sorted->append (i == sort_index);
      clock->append (m->get_type () == Metric::HWCNTR ? clock_val
       : m->get_clock_unit ());
      aux->append (dbe_strdup (m->get_aux ()));
      name->append (dbe_strdup (m->get_name ()));
      comd->append (dbe_strdup (m->get_cmd ()));
      user_name->append (dbe_strdup (m->get_username ()));
      expr_spec->append (dbe_strdup (m->get_expr_spec ()));
      legend->append (dbe_strdup (m->legend));
      valtype->append (m->get_vtype2 ());

      char* _data_type_name = 
# 1177 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                             __null
# 1177 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                 ;
      char* _data_type_uname = 
# 1178 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                              __null
# 1178 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                  ;
      int data_type = m->get_packet_type ();
      if (data_type >= 0 && data_type < DATA_LAST)
 {
   _data_type_name = dbe_strdup (get_prof_data_type_name (data_type));
   _data_type_uname = dbe_strdup (get_prof_data_type_uname (data_type));
 }
      data_type_name->append (_data_type_name);
      data_type_uname->append (_data_type_uname);

      char* _short_desc = 
# 1188 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 1188 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             ;
      if (m->get_type () == Metric::HWCNTR)
 {
   Hwcentry * hwctr = m->get_hw_ctr ();
   if (hwctr)
     _short_desc = dbe_strdup (hwctr->short_desc);
 }
      short_desc->append (_short_desc);
    }


  Vector<void*> *data = new Vector<void*>(16);
  data->append (type);
  data->append (subtype);
  data->append (clock);
  data->append (flavors);
  data->append (value_styles);
  data->append (user_name);
  data->append (expr_spec);
  data->append (aux);
  data->append (name);
  data->append (abbr);
  data->append (comd);
  data->append (unit);
  data->append (vis);
  data->append (sorted);
  data->append (legend);
  data->append (valtype);
  data->append (data_type_name);
  data->append (data_type_uname);
  data->append (short_desc);
  return data;
}

Vector<void*> *
dbeGetRefMetricsV2 ()
{
  MetricList *mlist = new MetricList (MET_NORMAL);
  Vector<BaseMetric*> *base_metrics = dbeSession->get_base_reg_metrics ();
  for (long i = 0, sz = base_metrics->size (); i < sz; i++)
    {
      BaseMetric *bm = base_metrics->fetch (i);
      Metric *m;
      if (bm->get_flavors () & Metric::EXCLUSIVE)
 {
   m = new Metric (bm, Metric::EXCLUSIVE);
   m->enable_all_visbits ();
   mlist->append (m);
 }
      else if (bm->get_flavors () & BaseMetric::STATIC)
 {
   m = new Metric (bm, BaseMetric::STATIC);
   m->enable_all_visbits ();
   mlist->append (m);
 }
    }
  Vector<void*> *data = dbeGetMetricList (mlist);
  delete mlist;
  return data;
}

Vector<void*> *
dbeGetCurMetricsV2 (int dbevindex, MetricType mtype)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  MetricList *mlist = dbev->get_metric_list (mtype);
  Vector<void*> *data = dbeGetMetricList (mlist);
  return data;
}


static int
convert_visbits_to_gui_checkbox_bits (BaseMetric *bm, const int visbits)
{






  int valuebits = visbits;
  const int value_styles = bm->get_value_styles ();
  if ((value_styles & VAL_TIMEVAL) &&
      !(value_styles & VAL_VALUE))
    {
      unsigned mask = ~(VAL_VALUE | VAL_TIMEVAL);
      valuebits = (unsigned) valuebits & mask;
      if (visbits & VAL_VALUE)
 valuebits |= VAL_TIMEVAL;
      if (visbits & VAL_TIMEVAL)
 valuebits |= VAL_TIMEVAL;
    }
  return valuebits;
}

static Vector<void*> *
dbeGetMetricTreeNode (BaseMetricTreeNode* curr, MetricList *mlist,
        bool include_unregistered, bool has_clock_profiling_data)
{
  Vector<void*> *data = new Vector<void*>(2);


  Vector<void*> *fields = new Vector<void*>();
  Vector<char*> *name = new Vector<char*>(1);
  Vector<char*> *username = new Vector<char*>(1);
  Vector<char*> *description = new Vector<char*>(1);
  Vector<int> * flavors = new Vector<int>(1);
  Vector<int> * vtype = new Vector<int>(1);
  Vector<int> * vstyles_capable = new Vector<int>(1);



  Vector<int> *vstyles_e_defaults = new Vector<int>(1);
  Vector<int> *vstyles_i_defaults = new Vector<int>(1);
  Vector<bool> *registered = new Vector<bool>(1);
  Vector<bool> *aggregation = new Vector<bool>(1);
  Vector<bool> *has_value = new Vector<bool>(1);
  Vector<char*> *unit = new Vector<char*>(1);
  Vector<char*> *unit_uname = new Vector<char*>(1);

  char *_name = 
# 1308 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 1308 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   ;
  char *_username = 
# 1309 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null
# 1309 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       ;
  char *_description = dbe_strdup (curr->get_description ());


  int _flavors = 0;
  int _vtype = 0;
  int _vstyles_capable = 0;
  int _vstyles_e_default_values = 0;
  int _vstyles_i_derault_values = 0;
  bool _registered = curr->is_registered ()
   || curr->get_num_registered_descendents () > 0;
  bool _aggregation = curr->is_composite_metric ()
   && curr->get_num_registered_descendents () > 0;
  bool _has_value = false;
  char *_unit = 
# 1323 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 1323 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   ;
  char *_unit_uname = 
# 1324 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 1324 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         ;

  BaseMetric *bm = curr->get_BaseMetric ();
  if (bm)
    {
      _name = dbe_strdup (bm->get_cmd ());
      _username = dbe_strdup (bm->get_username ());
      if (!include_unregistered && !curr->is_registered ())
 abort ();
      _flavors = bm->get_flavors ();
      _vtype = bm->get_vtype ();
      _vstyles_capable = bm->get_value_styles ();
      int e_visbits = bm->get_default_visbits (BaseMetric::EXCLUSIVE);
      int i_visbits = bm->get_default_visbits (BaseMetric::INCLUSIVE);
      _vstyles_e_default_values = convert_visbits_to_gui_checkbox_bits (bm, e_visbits);
      _vstyles_i_derault_values = convert_visbits_to_gui_checkbox_bits (bm, i_visbits);

      if (has_clock_profiling_data && bm->get_hw_ctr ())
 {
   bool hide = true;
   if (dbe_strcmp (bm->get_hw_ctr ()->name, ((char *) ("c_stalls"))) == 0 ||
       dbe_strcmp (bm->get_hw_ctr ()->name, ((char *) ("K_c_stalls"))) == 0)
     {
       bool is_time = (bm->get_value_styles () & VAL_TIMEVAL) != 0;
       if (is_time)

  hide = false;
     }
   if (hide)
     {
       _vstyles_e_default_values |= VAL_HIDE_ALL;
       _vstyles_i_derault_values |= VAL_HIDE_ALL;
     }
 }
    }
  else
    {

      _name = dbe_strdup (curr->get_name ());
      _username = dbe_strdup (curr->get_user_name ());
     if (curr->get_unit ())
 {
   _has_value = true;
   _unit = dbe_strdup (curr->get_unit ());
   _unit_uname = dbe_strdup (curr->get_unit_uname ());
 }
    }
  name->append (_name);
  username->append (_username);
  description->append (_description);
  flavors->append (_flavors);
  vtype->append (_vtype);
  vstyles_capable->append (_vstyles_capable);
  vstyles_e_defaults->append (_vstyles_e_default_values);
  vstyles_i_defaults->append (_vstyles_i_derault_values);
  registered->append (_registered);
  aggregation->append (_aggregation);
  has_value->append (_has_value);
  unit->append (_unit);
  unit_uname->append (_unit_uname);

  fields->append (name);
  fields->append (username);
  fields->append (description);
  fields->append (flavors);
  fields->append (vtype);
  fields->append (vstyles_capable);
  fields->append (vstyles_e_defaults);
  fields->append (vstyles_i_defaults);
  fields->append (registered);
  fields->append (aggregation);
  fields->append (has_value);
  fields->append (unit);
  fields->append (unit_uname);
  data->append (fields);


  Vector<BaseMetricTreeNode*> *children = curr->get_children ();
  int num_children = children->size ();
  Vector<void*> *children_list = new Vector<void*>(num_children);
  BaseMetricTreeNode *child_node;
  int index;

  if (children != 
# 1407 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 1407 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, child_node = ((children)->size() > 0) ? (children)->fetch(0) : (BaseMetricTreeNode*)0; index < (children)->size(); child_node = (++index < (children)->size()) ? (children)->fetch(index) : (BaseMetricTreeNode*)0)
  {
    if (include_unregistered
 || child_node->is_registered ()
 || child_node->get_num_registered_descendents () > 0)
      {



 if (!include_unregistered &&
     !child_node->is_registered () &&
     (child_node->get_BaseMetric () != 
# 1418 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                      __null 
# 1418 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                           ||
      child_node->is_composite_metric ()))
   {
     Vector<BaseMetricTreeNode*> *registered_descendents =
      new Vector<BaseMetricTreeNode*>();
     child_node->get_nearest_registered_descendents (registered_descendents);
     int idx2;
     BaseMetricTreeNode*desc_node;
     if (registered_descendents != 
# 1426 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
    __null
# 1426 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
    ) for (idx2 = 0, desc_node = ((registered_descendents)->size() > 0) ? (registered_descendents)->fetch(0) : (BaseMetricTreeNode*)0; idx2 < (registered_descendents)->size(); desc_node = (++idx2 < (registered_descendents)->size()) ? (registered_descendents)->fetch(idx2) : (BaseMetricTreeNode*)0)
     {
       Vector<void*> *desc_data;
       desc_data = dbeGetMetricTreeNode (desc_node, mlist,
    include_unregistered, has_clock_profiling_data);
       children_list->append (desc_data);
     }
     delete registered_descendents;
     continue;
   }
 Vector<void*> *child_data;
 child_data = dbeGetMetricTreeNode (child_node, mlist,
    include_unregistered, has_clock_profiling_data);
 children_list->append (child_data);
      }
  }
  data->append (children_list);
  return data;
}

Vector<void*> *
dbeGetRefMetricTree (int dbevindex, bool include_unregistered)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  MetricList *mlist = dbev->get_metric_list (MET_NORMAL);
  bool has_clock_profiling_data = false;
  for (long i = 0, sz = mlist->get_items ()->size (); i < sz; i++)
    {
      Metric *m = mlist->get_items ()->fetch (i);
      if (m->get_packet_type () == DATA_CLOCK)
 {
   has_clock_profiling_data = true;
   break;
 }
    }
  BaseMetricTreeNode *curr = dbeSession->get_reg_metrics_tree ();
  return dbeGetMetricTreeNode (curr, mlist, include_unregistered, has_clock_profiling_data);
}

static Vector<void*> *
dbeGetTableDataV2Data (DbeView *dbev, Hist_data *data);

static Vector<void*> *dbeGetTableDataOneColumn (Hist_data *data, int met_ind);
static Vector<void*> *
dbeGetTableDataOneColumn (DbeView *dbev, Vector<Hist_data::HistItem*> *data,
     ValueTag vtype, int metricColumnNumber);

static hrtime_t
dbeCalcGroupDuration (int grInd)
{
  int thisGroupSize = 1;
  hrtime_t max_time = 0;
  Experiment *exp;
  if (dbeSession->expGroups->size () > 0)
    {
      ExpGroup *grp = dbeSession->expGroups->fetch (grInd);
      thisGroupSize = grp->exps->size ();
      for (int ii = 0; ii < thisGroupSize; ii++)
 {
   exp = grp->exps->fetch (ii);
   Vector<DataDescriptor*> *ddscr = exp->getDataDescriptors ();
   delete ddscr;
   if (exp != 
# 1488 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 1488 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
     {
       hrtime_t tot_time = exp->getLastEvent () - exp->getStartTime ()
        + exp->getRelativeStartTime ();
       if (max_time < tot_time)
  max_time = tot_time;
     }
 }
    }
  else
    {
      exp = dbeSession->get_exp (0);
      if (exp != 
# 1500 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 1500 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 max_time = exp->getLastEvent () - exp->getStartTime ();
    }
  return max_time;
}

static hrtime_t
dbeCalcGroupGCDuration (int grInd)
{
  int thisGroupSize = 1;
  hrtime_t tot_time = 0;
  Experiment *exp;
  if (dbeSession->expGroups->size () > 0)
    {
      ExpGroup *grp = dbeSession->expGroups->fetch (grInd);
      thisGroupSize = grp->exps->size ();
      for (int ii = 0; ii < thisGroupSize; ii++)
 {
   exp = grp->exps->fetch (ii);
   Vector<DataDescriptor*> *ddscr = exp->getDataDescriptors ();
   delete ddscr;
   if (exp != 
# 1521 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 1521 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
     tot_time += exp->getGCDuration ();
 }
    }
  else
    {
      exp = dbeSession->get_exp (0);
      if (exp != 
# 1528 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 1528 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 tot_time = exp->getGCDuration ();
    }
  return tot_time;
}

Vector<void*> *
dbeGetRefMetricTreeValues (int dbevindex, Vector<char *> *metric_cmds,
      Vector<char *> *non_metric_cmds)
{
  DbeView *dbev = dbeSession->getView (dbevindex);






  int numMetrics = metric_cmds->size ();
  int numNonMetrics = non_metric_cmds->size ();
  int totalColumns = numMetrics + numNonMetrics;
  Vector<void*> *valueTable = new Vector<void*>(totalColumns);
  Vector<void*> *highlightTable = new Vector<void*>(totalColumns);


  Vector<void*> *rc = new Vector<void*>(2);
  rc->append (valueTable);
  rc->append (highlightTable);
  if (dbeSession->nexps () == 0)
    {
      for (int jj = 0; jj < totalColumns; jj++)
 {
   Vector<void *> *columnData = new Vector<void *>();
   valueTable->append (columnData);
   highlightTable->append (columnData);
 }
      return rc;
    }

  int ngroups = dbeSession->expGroups->size ();
  if (ngroups == 0 || !dbev->comparingExperiments ())
    ngroups = 1;

  Vector<double> *groupTotalTime = new Vector<double>(ngroups);
  Vector<double> *groupCpuTime = new Vector<double>(ngroups);

  for (int ii = 0; ii < totalColumns; ii++)
    {
      Vector<bool> *columnData = new Vector<bool>(ngroups);
      highlightTable->append (columnData);
      for (int grInd = 0; grInd < ngroups; grInd++)
 columnData->store (grInd, false);
    }

  if (numMetrics > 0)
    {
      MetricList *bmlist;

      BaseMetricTreeNode *root = dbeSession->get_reg_metrics_tree ();
      int index;
      char *mcmd;
      Vector<BaseMetric*> *base_metrics = new Vector<BaseMetric*>();
      if (metric_cmds != 
# 1589 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     __null
# 1589 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     ) for (index = 0, mcmd = ((metric_cmds)->size() > 0) ? (metric_cmds)->fetch(0) : (char *)0; index < (metric_cmds)->size(); mcmd = (++index < (metric_cmds)->size()) ? (metric_cmds)->fetch(index) : (char *)0)
      {
 BaseMetricTreeNode *bmt_node = root->find (mcmd);
 if (!bmt_node)
   abort ();
 BaseMetric * baseNetric = bmt_node->get_BaseMetric ();
 if (!baseNetric)
   abort ();
 base_metrics->append (baseNetric);
      }


      bmlist = new MetricList (base_metrics, MET_SRCDIS);



      Vector<Hist_data::HistItem *> *v_totals = new Vector<Hist_data::HistItem *>(ngroups);
      for (int grInd = 0; grInd < ngroups; grInd++)
 {
   MetricList *mlist;
   if (ngroups > 1)
     mlist = dbev->get_compare_mlist (bmlist, grInd);
   else
     mlist = bmlist;
   if (mlist->size () != numMetrics)
     abort ();

   Hist_data *data;
   data = dbev->get_hist_data (mlist, Histable::FUNCTION, 0,
          Hist_data::ALL);
   Hist_data::HistItem * totals = data->get_totals ();
   v_totals->append (totals);
 }


      {
 Metric *mitem;
 int index;
 if (bmlist->get_items () != 
# 1627 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
__null
# 1627 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
) for (index = 0, mitem = ((bmlist->get_items ())->size() > 0) ? (bmlist->get_items ())->fetch(0) : (Metric*)0; index < (bmlist->get_items ())->size(); mitem = (++index < (bmlist->get_items ())->size()) ? (bmlist->get_items ())->fetch(index) : (Metric*)0)
 {
   Vector<void*> * columnData = dbeGetTableDataOneColumn (dbev,
       v_totals, mitem->get_vtype (), index);
   valueTable->append (columnData);
 }
      }


      {
 Metric *mitem;
 int index;
 if (bmlist->get_items () != 
# 1639 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
__null
# 1639 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
) for (index = 0, mitem = ((bmlist->get_items ())->size() > 0) ? (bmlist->get_items ())->fetch(0) : (Metric*)0; index < (bmlist->get_items ())->size(); mitem = (++index < (bmlist->get_items ())->size()) ? (bmlist->get_items ())->fetch(index) : (Metric*)0)
 {
   if (mitem->is_time_val ()
       && mitem->get_vtype () == VT_ULLONG)
     {
       Vector<long long> *cycleValues = (Vector<long long> *)valueTable->fetch (index);
       Vector<double> *timeValues = new Vector<double>(ngroups);
       
# 1646 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
      (static_cast <bool> (
# 1646 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
      cycleValues->size () == ngroups
# 1646 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
      ) ? void (0) : __assert_fail (
# 1646 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
      "cycleValues->size () == ngroups"
# 1646 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
      , "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc", 1646, __extension__ __PRETTY_FUNCTION__))
# 1646 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                              ;
       for (int grInd = 0; grInd < ngroups; grInd++)
  {
    long long cycles = cycleValues->fetch (grInd);
    int expId;
    if (dbeSession->expGroups->size () > 0)
      {
        ExpGroup *gr = dbeSession->expGroups->fetch (grInd);
        Experiment *exp = gr->exps->fetch (0);
        expId = exp->getExpIdx ();
      }
    else
      expId = -1;
    int clock = dbeSession->get_clock (expId);
    double time;
    if (clock)
      time = cycles / (1.e+6 * clock);
    else
      time = cycles;
    timeValues->store (grInd, time);
  }
       delete cycleValues;
       valueTable->store (index, timeValues);
     }
 }
      }


      int bestCpuTimeIndx = -1;
      {
 Metric *mitem;
 int index;
 if (bmlist->get_items () != 
# 1678 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
__null
# 1678 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
) for (index = 0, mitem = ((bmlist->get_items ())->size() > 0) ? (bmlist->get_items ())->fetch(0) : (Metric*)0; index < (bmlist->get_items ())->size(); mitem = (++index < (bmlist->get_items ())->size()) ? (bmlist->get_items ())->fetch(index) : (Metric*)0)
 {
   BaseMetric::Type type = mitem->get_type ();
   if (type == BaseMetric::CP_KERNEL_CPU)
     {
       bestCpuTimeIndx = index;
       break;
     }
   if (type == BaseMetric::CP_TOTAL_CPU)
     {

       bestCpuTimeIndx = index;

       continue;
     }

   bool isTime = ((mitem->get_value_styles () & VAL_TIMEVAL) != 0);
   bool isHwcCycles = (type == BaseMetric::HWCNTR
         && (dbe_strcmp (mitem->get_aux (), "cycles") == 0)
         && isTime);
   if (isHwcCycles)
     if (bestCpuTimeIndx < 0)
       bestCpuTimeIndx = index;
 }
 if (bestCpuTimeIndx >= 0)
   {
     Vector<double> *timeValues = (Vector<double> *)valueTable->fetch (bestCpuTimeIndx);
     if (timeValues->type () == VEC_DOUBLE)
       for (int grInd = 0; grInd < ngroups; grInd++)
  {
    double time = timeValues->fetch (grInd);
    groupCpuTime->append (time);
  }
   }
      }


      {
 Metric *mitem;
 int index;
 if (bmlist->get_items () != 
# 1718 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
__null
# 1718 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
) for (index = 0, mitem = ((bmlist->get_items ())->size() > 0) ? (bmlist->get_items ())->fetch(0) : (Metric*)0; index < (bmlist->get_items ())->size(); mitem = (++index < (bmlist->get_items ())->size()) ? (bmlist->get_items ())->fetch(index) : (Metric*)0)
 {
   BaseMetric::Type type = mitem->get_type ();
   if (type == BaseMetric::CP_TOTAL)
     {
       Vector<double> *timeValues = (Vector<double> *)valueTable->fetch (index);
       if (timeValues->type () != VEC_DOUBLE)
  continue;
       for (int grInd = 0; grInd < ngroups; grInd++)
  {
    double time = timeValues->fetch (grInd);
    groupTotalTime->append (time);
  }
       break;
     }
 }
      }




      {
 Metric *mitem;
 int index;
 if (bmlist->get_items () != 
# 1742 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
__null
# 1742 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
) for (index = 0, mitem = ((bmlist->get_items ())->size() > 0) ? (bmlist->get_items ())->fetch(0) : (Metric*)0; index < (bmlist->get_items ())->size(); mitem = (++index < (bmlist->get_items ())->size()) ? (bmlist->get_items ())->fetch(index) : (Metric*)0)
 {
   BaseMetric::Type type = mitem->get_type ();
   Vector<bool> * columnHilites = (Vector<bool> *)highlightTable->fetch (index);


   if (index == bestCpuTimeIndx)
     {
       for (int grInd = 0; grInd < ngroups; grInd++)
  columnHilites->store (grInd, true);
       continue;
     }


   bool typeIsCycles = (type == BaseMetric::HWCNTR
         && dbe_strcmp (mitem->get_aux (), ((char *) ("cycles"))) == 0);
   bool typeIsInsts = (type == BaseMetric::HWCNTR
   && dbe_strcmp (mitem->get_aux (), ((char *) ("insts"))) == 0);
   if (type == BaseMetric::CP_TOTAL
       || type == BaseMetric::CP_TOTAL_CPU
       || type == BaseMetric::CP_LMS_USER
       || type == BaseMetric::CP_LMS_SYSTEM
       || type == BaseMetric::CP_LMS_TRAP
       || type == BaseMetric::CP_LMS_USER_LOCK
       || type == BaseMetric::CP_LMS_SLEEP
       || type == BaseMetric::CP_KERNEL_CPU
       || type == BaseMetric::OMP_WORK
       || typeIsCycles
       || typeIsInsts

       )
     continue;


   bool isTime = ((mitem->get_value_styles () & VAL_TIMEVAL) != 0);
   if (isTime)
     {
       if (groupCpuTime->size () == 0)
  continue;
       Vector<double> *timeValues = (Vector<double> *)valueTable->fetch (index);
       if (timeValues->type () != VEC_DOUBLE)
  continue;
       for (int grInd = 0; grInd < ngroups; grInd++)
  {
    double thistime = timeValues->fetch (grInd);
    double usertime = groupCpuTime->fetch (grInd);
    if (thistime / (10.0 / 100) > usertime)
      columnHilites->store (grInd, true);
  }
       continue;
     }


   if (type == BaseMetric::HWCNTR)
     {
       Hwcentry *hwctr = mitem->get_hw_ctr ();
       if (!hwctr)
  continue;
       if (!hwctr->metric)
  continue;
       if (groupCpuTime->size () == 0)
  continue;
       if (mitem->get_base_metric ()->get_dependent_bm ())
  continue;
       Vector<long long> *llValues = (Vector<long long> *)valueTable->fetch (index);
       if (llValues->type () != VEC_LLONG)
  continue;
       int overflowVal = hwctr->val;
       if (!overflowVal)
  continue;
       if (overflowVal > (4000000))


  continue;

       for (int grInd = 0; grInd < ngroups; grInd++)
  {
    double thisVal = llValues->fetch (grInd);
    thisVal /= overflowVal;
    double usertime = groupCpuTime->fetch (grInd);
    if (thisVal > usertime * 15)
      columnHilites->store (grInd, true);
  }
       continue;
     }


   if (type == BaseMetric::DEADLOCKS ||
       type == BaseMetric::RACCESS ||
       type == BaseMetric::HEAP_ALLOC_BYTES ||
       type == BaseMetric::HEAP_LEAK_BYTES)
     {
       Vector<long long> *llValues = (Vector<long long> *)valueTable->fetch (index);
       if (llValues->type () != VEC_LLONG)
  continue;
       for (int grInd = 0; grInd < ngroups; grInd++)
  {
    long long thisVal = llValues->fetch (grInd);
    if (thisVal)
      columnHilites->store (grInd, true);
  }
       continue;
     }

 }
      }
    }

  if (numNonMetrics > 0)
    {
      int index;
      char *mcmd;
      if (non_metric_cmds != 
# 1854 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     __null
# 1854 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     ) for (index = 0, mcmd = ((non_metric_cmds)->size() > 0) ? (non_metric_cmds)->fetch(0) : (char *)0; index < (non_metric_cmds)->size(); mcmd = (++index < (non_metric_cmds)->size()) ? (non_metric_cmds)->fetch(index) : (char *)0)
      {
 if (dbe_strcmp (mcmd, ((char *) ("YXXX_TOTAL_TIME_PLUS_THREADS"))) == 0
     && groupCpuTime->size () == ngroups)
   {
     Vector<char *> *columnData = new Vector<char *>(ngroups);
     for (int grInd = 0; grInd < ngroups; grInd++)
       {
  double totaltime = groupTotalTime->fetch (grInd);
  columnData->append (dbe_sprintf (((char *) ("%0.3f %s")), totaltime, gettext("Seconds")));
       }
     valueTable->append (columnData);
   }
 else if (dbe_strcmp (mcmd, "PROFDATA_TYPE_DURATION") == 0)
   {
     Vector<double> *columnData = new Vector<double>(ngroups);
     for (int grInd = 0; grInd < ngroups; grInd++)
       {
  hrtime_t duration = dbeCalcGroupDuration (grInd);
  double seconds = duration * 1.e-9;
  columnData->append (seconds);
       }
     valueTable->append (columnData);
   }
 else if (dbe_strcmp (mcmd, "PROFDATA_TYPE_GCDURATION") == 0)
   {
     Vector<double> *columnData = new Vector<double>(ngroups);
     for (int grInd = 0; grInd < ngroups; grInd++)
       {
  hrtime_t duration = dbeCalcGroupGCDuration (grInd);
  double seconds = duration * 1.e-9;
  columnData->append (seconds);
       }
     valueTable->append (columnData);
   }
 else
   {
     Vector<char *> *columnData = new Vector<char *>(ngroups);
     char * valueString = ((char *) ("<unknown>"));
     for (int grInd = 0; grInd < ngroups; grInd++)
       columnData->append (dbe_strdup (valueString));
     valueTable->append (columnData);
   }
      }
    }
  return rc;
}

Vector<char*> *
dbeGetOverviewText (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  Vector<char*> *info = new Vector<char*>;
  char *field;
  int ngroups = dbeSession->expGroups->size ();
  if (ngroups == 0 || !dbev->comparingExperiments ())
    ngroups = 1;
  for (int grInd = 0; grInd < ngroups; grInd++)
    {
      int thisGroupSize = 1;
      Experiment *exp;
      if (dbeSession->expGroups->size () > 0)
 {
   ExpGroup *gr = dbeSession->expGroups->fetch (grInd);
   exp = gr->exps->fetch (0);
   thisGroupSize = gr->exps->size ();
 }
      else
 {
   if (dbeSession->nexps () == 0)
     return info;
   exp = dbeSession->get_exp (0);
 }
      char * expHeader;
      if (ngroups == 1)
 expHeader = dbe_strdup (gettext("Experiment      :"));
      else if (grInd == 0)
 expHeader = dbe_strdup (gettext("Base Group      : "));
      else if (ngroups == 2)
 expHeader = dbe_strdup (gettext("Compare Group   : "));
      else
 expHeader = dbe_sprintf (gettext("Compare Group %d : "), grInd);
      if (thisGroupSize == 1)
 info->append (dbe_sprintf ("%s%s", expHeader, exp->get_expt_name ()));
      else
 info->append (dbe_sprintf ("%s%s (plus %d more)",
     expHeader, exp->get_expt_name (), thisGroupSize - 1));
      free (expHeader);
      field = exp->uarglist;
      if (field && field[0])
 info->append (dbe_sprintf (gettext("  Target        : '%s'"), field));
      field = exp->hostname;
      if (field && field[0])
 info->append (dbe_sprintf (gettext("  Host          : %s (%s, %s)"),
       field,
       exp->architecture ? exp->architecture
       : gettext("<CPU architecture not recorded>"),
       exp->os_version ? exp->os_version
       : gettext("<OS version not recorded>")));
      time_t start_sec = (time_t) exp->start_sec;
      char *p = ctime (&start_sec);
      hrtime_t tot_time = dbeCalcGroupDuration (grInd);
      double seconds = tot_time * 1.e-9;
      info->append (dbe_sprintf (
  gettext("  Start Time    : %s  Duration      : %0.3f Seconds"),
  p, seconds));

      info->append (dbe_strdup (((char *) (""))));
    }
  return info;
}




void
dbeSetSort (int dbevindex, int sort_index, MetricType mtype, bool reverse)
{
  DbeView *dbev;

  dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 1975 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 1975 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->setSort (sort_index, mtype, reverse);
  return;
}




Vector<int> *
dbeGetAnoValue (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 1988 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 1988 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Vector<int> *set = new Vector<int>(9);
  set->store (0, dbev->get_src_compcom ());
  set->store (1, dbev->get_dis_compcom ());
  set->store (2, dbev->get_thresh_src ());
  set->store (3, dbev->get_thresh_src ());
  set->store (4, dbev->get_src_visible ());
  set->store (5, (int) dbev->get_srcmetric_visible ());
  set->store (6, (int) dbev->get_hex_visible ());
  set->store (7, (int) dbev->get_cmpline_visible ());
  set->store (8, (int) dbev->get_func_scope ());
  return set;
}




void
dbeSetAnoValue (int dbevindex, Vector<int> *set)
{
  DbeView *dbev;
  dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2011 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2011 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  if (set->size () != 10)
    return;
  dbev->set_src_compcom (set->fetch (0));
  dbev->set_dis_compcom (set->fetch (1));
  dbev->set_thresh_src (set->fetch (2));
  dbev->set_thresh_dis (set->fetch (3));
  dbev->set_src_visible (set->fetch (4));
  dbev->set_srcmetric_visible ((bool)set->fetch (5));
  dbev->set_hex_visible ((bool)set->fetch (6));
  dbev->set_cmpline_visible ((bool)set->fetch (7));
  dbev->set_func_scope (set->fetch (8));
  dbev->set_funcline_visible ((bool)set->fetch (9));
  return;
}




int
dbeGetNameFormat (int dbevindex)
{
  DbeView *dbev;
  dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2036 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2036 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Histable::NameFormat fmt = dbev->get_name_format ();
  return Histable::fname_fmt (fmt);
}

bool
dbeGetSoName (int dbevindex)
{
  DbeView *dbev;
  dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2047 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2047 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Histable::NameFormat fmt = dbev->get_name_format ();
  return Histable::soname_fmt (fmt);
}




void
dbeSetNameFormat (int dbevindex, int nformat, bool soname)
{
  DbeView *dbev;
  dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2061 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2061 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->set_name_format (nformat, soname);
}




int
dbeGetViewMode (int dbevindex)
{
  DbeView *dbev;
  dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2074 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2074 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  return (int) dbev->get_view_mode ();
}


void
dbeSetViewMode (int dbevindex, int nmode)
{
  DbeView *dbev;
  dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2085 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2085 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->set_view_mode ((VMode) nmode);
  return;
}



Vector<void*> *
dbeGetTLValue (int dbevindex)
{
  DbeView *dbev;
  dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2098 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2098 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Vector<char *> *strings = new Vector<char *>();
  char *tldata_cmd = dbev->get_tldata ();
  strings->store (0, tldata_cmd);

  Vector<int> *ints = new Vector<int>(3);
  int val;
  val = dbev->get_tlmode ();
  ints->store (0, val);
  val = dbev->get_stack_align ();
  ints->store (1, val);
  val = dbev->get_stack_depth ();
  ints->store (2, val);

  Vector<void*> *objs = new Vector<void*>(2);
  objs->store (0, strings);
  objs->store (1, ints);
  return objs;
}




void
dbeSetTLValue (int dbevindex, const char *tldata_cmd,
        int entitiy_prop_id, int stackalign, int stackdepth)
{
  DbeView *dbev;
  dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2128 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2128 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->set_tldata (tldata_cmd);
  dbev->set_tlmode (entitiy_prop_id);
  dbev->set_stack_align (stackalign);
  dbev->set_stack_depth (stackdepth);
  return;
}




Vector<void*> *
dbeGetExpFounderDescendants ()
{
  int size = dbeSession->nexps ();
  if (size == 0)
    return 
# 2145 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 2145 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  Vector<void*> *table = new Vector<void*>(2);
  Vector<int> *founderExpIds = new Vector<int>();
  Vector<Vector<int> *> *subExpIds = new Vector<Vector<int>*>();
  for (int index = 0; index < size; index++)
    {
      Experiment *exp = dbeSession->get_exp (index);
      if (exp->founder_exp == 
# 2152 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                             __null
# 2152 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                 )
 {
   founderExpIds->append (exp->getExpIdx ());
   Vector<int> *subExps = new Vector<int>();
   for (int i = 0; i < exp->children_exps->size (); i++)
     {
       Experiment * subExp = exp->children_exps->fetch (i);
       subExps->append (subExp->getExpIdx ());
     }
   subExpIds->append (subExps);
 }
    }
  table->store (0, founderExpIds);
  table->store (1, subExpIds);
  return table;
}




Vector<void*> *
dbeGetExpSelection (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2176 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2176 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  int size = dbeSession->nexps ();
  if (size == 0)
    return 
# 2180 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 2180 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  Vector<void*> *table = new Vector<void*>(3);
  Vector<char*> *names = new Vector<char*>(size);
  Vector<bool> *enable = new Vector<bool>(size);
  Vector<int> *userExpIds = new Vector<int>(size);


  for (int index = 0; index < size; index++)
    {
      Experiment *exp = dbeSession->get_exp (index);
      char *buf = dbeGetName (dbevindex, index);
      names->store (index, buf);
      bool val;
      val = dbev->get_exp_enable (index);
      enable->store (index, val);
      userExpIds->store (index, exp->getUserExpId ());
    }
  table->store (0, names);
  table->store (1, enable);
  table->store (2, userExpIds);
  return table;
}

int
dbeValidateFilterExpression (char *str_expr)
{
  if (str_expr == 
# 2206 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 2206 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
    return 0;
  Expression *expr = dbeSession->ql_parse (str_expr);
  if (expr == 
# 2209 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2209 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    return 0;
  delete expr;
  return 1;
}

Vector<void*> *
dbeGetFilterKeywords (int )
{
  Vector <char*> *kwCategory = new Vector<char *>();
  Vector <char*> *kwCategoryI18N = new Vector<char *>();
  Vector <char*> *kwDataType = new Vector<char *>();
  Vector <char*> *kwKeyword = new Vector<char *>();
  Vector <char*> *kwFormula = new Vector<char *>();
  Vector <char*> *kwDescription = new Vector<char *>();
  Vector <void*> *kwEnumDescs = new Vector<void *>();

  Vector<void*> *res = new Vector<void*>(7);
  res->append (kwCategory);
  res->append (kwCategoryI18N);
  res->append (kwDataType);
  res->append (kwKeyword);
  res->append (kwFormula);
  res->append (kwDescription);
  res->append (kwEnumDescs);

  char *vtypeNames[] = { ((char *) ("NONE")), ((char *) ("INT32")), ((char *) ("UINT32")), ((char *) ("INT64")), ((char *) ("UINT64")), ((char *) ("STRING")), ((char *) ("DOUBLE")), ((char *) ("OBJECT")), ((char *) ("DATE")), ((char *) ("BOOL")), ((char *) ("ENUM")) };

  kwCategory->append (dbe_strdup (((char *) ("FK_SECTION"))));
  kwCategoryI18N->append (dbe_strdup (gettext("Global Definitions")));
  kwDataType->append (
# 2239 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 2239 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         );
  kwKeyword->append (
# 2240 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null
# 2240 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        );
  kwFormula->append (
# 2241 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null
# 2241 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        );
  kwDescription->append (
# 2242 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 2242 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            );
  kwEnumDescs->append (
# 2243 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 2243 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          );
  dbeSession->get_filter_keywords (res);
  MemorySpace::get_filter_keywords (res);


  int nexp = dbeSession->nexps ();
  for (int ii = 0; ii < nexp; ++ii)
    {
      Experiment* fexp = dbeSession->get_exp (ii);
      if (fexp->founder_exp != 
# 2252 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                              __null
# 2252 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                  )
 continue;



      kwCategory->append (dbe_strdup (((char *) ("FK_SECTION"))));
      kwCategoryI18N->append (dbe_sprintf (((char *) ("%s [EXPGRID==%d]")),
        fexp->get_expt_name (),
        fexp->groupId));
      kwDataType->append (
# 2261 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 2261 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             );
      kwKeyword->append (
# 2262 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 2262 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            );
      kwFormula->append (
# 2263 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 2263 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            );
      kwDescription->append (
# 2264 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                            __null
# 2264 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                );
      kwEnumDescs->append (
# 2265 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                          __null
# 2265 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                              );

      int nchildren = fexp->children_exps->size ();
      Experiment *exp;

      {
 char *propUName = dbeSession->getPropUName (PROP_EXPID);


 Vector <char*> *enumDescs = new Vector<char *>();
 int jj = 0;
 exp = fexp;
 while (1)
   {
     char * expBasename = get_basename (exp->get_expt_name ());
     char * targetName = exp->utargname ? exp->utargname
      : (char *) gettext("(unknown)");
     enumDescs->append (dbe_sprintf (((char *) ("(%d) -> %s [%s, PID %d]")),
         exp->getUserExpId (), expBasename,
         targetName, exp->getPID ()));
     if (jj >= nchildren)
       break;
     exp = fexp->children_exps->fetch (jj);
     jj++;
   }
 kwCategory->append (dbe_strdup (((char *) ("FK_EXPLIST"))));
 kwCategoryI18N->append (dbe_strdup (gettext("Experiments")));
 kwDataType->append (dbe_strdup (vtypeNames[TYPE_INT32]));
 kwKeyword->append (dbe_strdup (((char *) ("EXPID"))));
 kwFormula->append (
# 2294 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null
# 2294 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       );
 kwDescription->append (propUName);
 kwEnumDescs->append (enumDescs);
      }


      if (nchildren == 0)
 exp = fexp;
      else
 exp = fexp->children_exps->fetch (0);
      int expIdx = exp->getExpIdx ();
      Vector<void*> *data = dbeGetDataDescriptorsV2 (expIdx);
      if (data == 
# 2306 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 2306 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
 continue;
      Vector<int> *dataId = (Vector<int>*)data->fetch (0);
      Vector<char*> *dataName = (Vector<char*>*)data->fetch (1);
      Vector<char*> *dataUName = (Vector<char*>*)data->fetch (2);
      if (dataId == 
# 2311 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null 
# 2311 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        || dataName == 
# 2311 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                       __null
# 2311 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                           )
 {
   destroy (data);
   continue;
 }

      int ndata = dataId->size ();
      for (int j = 0; j < ndata; ++j)
 {

   char * catName = dataName->fetch (j);
   char * dUname = dataUName ? dataUName->fetch (j) : catName;
   char * catUname = dUname ? dUname : catName;

   Vector<void*> *props = dbeGetDataPropertiesV2 (expIdx, dataId->fetch (j));
   if (props == 
# 2326 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 2326 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
     continue;
   Vector<char*> *propUName = (Vector<char*>*)props->fetch (1);
   Vector<int> *propTypeId = (Vector<int> *)props->fetch (2);
   Vector<char*> *propType = (Vector<char*>*)props->fetch (3);
   Vector<char*> *propName = (Vector<char*>*)props->fetch (5);
   Vector<Vector<char*>*> *propStateNames =
    (Vector<Vector<char*>*> *)props->fetch (6);
   Vector<Vector<char*>*> *propStateUNames =
    (Vector<Vector<char*>*> *)props->fetch (7);
   if (propName == 
# 2336 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null 
# 2336 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       || propUName == 
# 2336 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                       __null 
# 2336 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                            || propType == 
# 2336 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                           __null
       
# 2337 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
      || propName->size () <= 0)
     {
       destroy (props);
       continue;
     }
   int nprop = propName->size ();
   for (int k = 0; k < nprop; ++k)
     {
       if (propTypeId->fetch (k) == TYPE_OBJ)
  continue;
       if (dbe_strcmp (propName->fetch (k), ((char *) ("FRINFO"))) == 0)
  continue;


       Vector<char*> *enumDescs = new Vector<char *>();
       Vector<char*>* stateNames = propStateNames->fetch (k);
       Vector<char*>* stateUNames = propStateUNames->fetch (k);
       int nStates = stateNames ? stateNames->size () : 0;
       for (int kk = 0; kk < nStates; ++kk)
  {
    const char *stateName = stateNames->fetch (kk);
    if (stateName == 
# 2358 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null 
# 2358 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         || strlen (stateName) == 0)
      continue;
    const char *stateUName = stateUNames->fetch (kk);
    if (stateUName == 
# 2361 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null 
# 2361 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          || strlen (stateUName) == 0)
      stateUName = stateName;
    enumDescs->append (dbe_sprintf (((char *) ("(%d) -> %s")), kk, stateUName));
  }
       kwCategory->append (dbe_strdup (catName));
       kwCategoryI18N->append (dbe_strdup (catUname));
       kwDataType->append (dbe_strdup (propType->fetch (k)));
       kwKeyword->append (dbe_strdup (propName->fetch (k)));
       kwFormula->append (
# 2369 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 2369 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             );
       kwDescription->append (dbe_strdup (propUName->fetch (k)));
       kwEnumDescs->append (enumDescs);
     }
   destroy (props);
 }
      destroy (data);
    }
  return (res);
}




Vector<void*> *
dbeGetFilters (int dbevindex, int nexp)
{
  FilterNumeric *filt;
  int index;
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2389 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2389 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Vector<FilterNumeric *>*filters = dbev->get_all_filters (nexp);
  if (filters == 
# 2392 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 2392 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    return 
# 2393 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 2393 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  Vector <int> *findex = new Vector<int>();
  Vector <char*> *shortname = new Vector<char *>();

  Vector <char*> *i18n_name = new Vector<char *>();

  Vector <char*> *pattern = new Vector<char *>();

  Vector <char*> *status = new Vector<char *>();


  if (filters != 
# 2406 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 2406 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, filt = ((filters)->size() > 0) ? (filters)->fetch(0) : (FilterNumeric *)0; index < (filters)->size(); filt = (++index < (filters)->size()) ? (filters)->fetch(index) : (FilterNumeric *)0)
  {
    findex->append (index);
    shortname->append (dbe_strdup (filt->get_cmd ()));
    i18n_name->append (dbe_strdup (filt->get_name ()));
    pattern->append (dbe_strdup (filt->get_pattern ()));
    status->append (dbe_strdup (filt->get_status ()));
  }
  Vector<void*> *res = new Vector<void*>(5);
  res->store (0, findex);
  res->store (1, shortname);
  res->store (2, i18n_name);
  res->store (3, pattern);
  res->store (4, status);
  return (res);
}




char *
dbeSetFilterStr (int dbevindex, char *filter_str)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2430 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2430 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->clear_error_msg ();
  dbev->clear_warning_msg ();
  char *ret = dbev->set_filter (filter_str);
  return ret;
}


char *
dbeGetFilterStr (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2443 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2443 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  char *ret = dbev->get_filter ();
  return ret;
}





bool
dbeUpdateFilters (int dbevindex, Vector<bool> *selected, Vector<char *> *pattern_str)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2457 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2457 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->clear_error_msg ();
  dbev->clear_warning_msg ();


  int size = selected->size ();
  int nselexp = -1;
  for (int index = 0; index < size; index++)
    {
      if (selected->fetch (index) == true)
 {
   nselexp = index;
   break;
 }
    }
  if (nselexp == -1)
    return false;

  bool ret = false;
  for (int j = 0; j < size; j++)
    {
      if (selected->fetch (j) == false)
 continue;
      bool error;
      if (dbev->set_pattern (j, pattern_str, &error))
 ret = true;
    }
  dbev->update_advanced_filter ();
  return ret;
}

char *
dbeComposeFilterClause (int dbevindex, int type, int subtype, Vector<int> *selections)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2493 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2493 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();

  Hist_data *data;
  switch (type)
    {
    case DSP_FUNCTION:
      data = dbev->func_data;
      break;
    case DSP_DLAYOUT:
      data = dbev->dlay_data;
      break;
    case DSP_DATAOBJ:
      data = dbev->dobj_data;
      break;
    case DSP_MEMOBJ:
    case DSP_INDXOBJ:
      data = dbev->get_indxobj_data (subtype);
      break;
    case DSP_LINE:
      data = dbev->line_data;
      break;
    case DSP_PC:
      data = dbev->pc_data;
      break;
    case DSP_SOURCE:
      data = dbev->src_data;
      break;
    case DSP_DISASM:
      data = dbev->dis_data;
      break;
    case DSP_IOACTIVITY:
      data = dbev->iofile_data;
      break;
    case DSP_IOVFD:
      data = dbev->iovfd_data;
      break;
    case DSP_IOCALLSTACK:
      data = dbev->iocs_data;
      break;
    case DSP_HEAPCALLSTACK:
      data = dbev->heapcs_data;
      break;
    default:
      return 
# 2537 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 2537 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
    }
  if (data == 
# 2539 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2539 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    return 
# 2540 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 2540 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  Vector<uint64_t> *obj_ids = data->get_object_indices (selections);
  if (obj_ids == 
# 2544 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null 
# 2544 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     || obj_ids->size () == 0)
    return 
# 2545 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 2545 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  uint64_t sel;
  int index;
  int found = 0;
  char buf[128];
  StringBuilder sb;
  sb.append ('(');
  switch (type)
    {
    case DSP_LINE:
    case DSP_PC:
    case DSP_SOURCE:
    case DSP_DISASM:
    case DSP_FUNCTION:
      sb.append (((char *) ("LEAF IN ")));
      break;
    case DSP_MEMOBJ:
    case DSP_INDXOBJ:
      sb.append (dbeSession->getIndexSpaceName (subtype));
      sb.append (((char *) (" IN ")));
      break;
    }
  if (obj_ids != 
# 2568 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 2568 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, sel = ((obj_ids)->size() > 0) ? (obj_ids)->fetch(0) : (uint64_t)0; index < (obj_ids)->size(); sel = (++index < (obj_ids)->size()) ? (obj_ids)->fetch(index) : (uint64_t)0)
  {
    if (found == 0)
      {
 found = 1;
 sb.append ('(');
      }
    else
      sb.append (((char *) (", ")));
    snprintf (buf, sizeof (buf), ((char *) ("%llu")), (long long) sel);
    sb.append (buf);
  }
  if (found == 1)
    sb.append (')');

  switch (type)
    {
    case DSP_DLAYOUT:
    case DSP_DATAOBJ:
      sb.append (((char *) (" SOME IN DOBJ")));
      break;
    }
  sb.append (')');
  return sb.toString ();
}




Vector<void *> *
dbeGetLoadObjectList (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2601 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2601 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Vector<LoadObject*> *lobjs = dbeSession->get_text_segments ();
  int size = lobjs->size ();


  Vector<char *> *names = new Vector<char *>(size);
  Vector<int> *states = new Vector<int>(size);
  Vector<int> *indices = new Vector<int>(size);
  Vector<char *> *paths = new Vector<char *>(size);
  Vector<int> *isJava = new Vector<int>(size);


  int index;
  LoadObject *lo;
  char *lo_name;
# 2625 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
  int new_index = 0;
  if (dbev->lobjectsNoJava == 
# 2626 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                             __null
# 2626 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                 )
    dbev->lobjectsNoJava = new Vector<int>(1);
  else
    dbev->lobjectsNoJava->reset ();

  if (lobjs != 
# 2631 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 2631 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, lo = ((lobjs)->size() > 0) ? (lobjs)->fetch(0) : (LoadObject*)0; index < (lobjs)->size(); lo = (++index < (lobjs)->size()) ? (lobjs)->fetch(index) : (LoadObject*)0)
  {

    enum LibExpand expand = dbev->get_lo_expand (lo->seg_idx);

    lo_name = lo->get_name ();
    if (lo_name != 
# 2637 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 2637 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
      {
 size_t len = strlen (lo_name);
 if (len > 7 && streq (lo_name + len - 7, ((char *) (".class>"))))
   isJava->store (new_index, 1);
 else
   isJava->store (new_index, 0);
      }
    else
      isJava->store (new_index, 0);
    dbev->lobjectsNoJava->append (index);

    names->store (new_index, dbe_sprintf (((char *) ("%s")), lo_name));
    states->store (new_index, (int) expand);
    indices->store (new_index, (int) lo->seg_idx);
    paths->store (new_index, dbe_sprintf (((char *) ("%s")), lo->get_pathname ()));
    new_index++;
  }
  Vector<void*> *res = new Vector<void*>(5);
  res->store (0, names);
  res->store (1, states);
  res->store (2, indices);
  res->store (3, paths);
  res->store (4, isJava);
  delete lobjs;
  return res;
}

Vector<int> *
dbeGetLoadObjectState (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2669 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2669 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Vector<LoadObject*> *lobjs = dbeSession->get_text_segments ();
  int size = lobjs->size ();


  Vector<int> *states = new Vector<int>(size);
  char *lo_name;
# 2685 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
  int new_index = 0;
  if (dbev->lobjectsNoJava == 
# 2686 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                             __null
# 2686 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                 )
    dbev->lobjectsNoJava = new Vector<int>(1);
  else
    dbev->lobjectsNoJava->reset ();


  int index;
  LoadObject *lo;

  if (lobjs != 
# 2695 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 2695 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, lo = ((lobjs)->size() > 0) ? (lobjs)->fetch(0) : (LoadObject*)0; index < (lobjs)->size(); lo = (++index < (lobjs)->size()) ? (lobjs)->fetch(index) : (LoadObject*)0)
  {

    lo_name = lo->get_name ();
    if (lo_name != 
# 2699 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 2699 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
      {
 size_t len = strlen (lo_name);
 if (len > 7 && streq (lo_name + len - 7, ((char *) (".class>"))))
   continue;
      }
    else
      dbev->lobjectsNoJava->append (index);

    enum LibExpand expand = dbev->get_lo_expand (lo->seg_idx);
    states->store (new_index, (int) expand);
    new_index++;
  }
  delete lobjs;
  return states;
}


void
dbeSetLoadObjectState (int dbevindex, Vector<int> *selected)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2721 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2721 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Vector<LoadObject*> *lobjs = dbeSession->get_text_segments ();

  int index;
  bool changed = false;

  LoadObject *lo;
  int new_index = 0;
  dbev->setShowAll ();
  if (lobjs != 
# 2731 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 2731 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, lo = ((lobjs)->size() > 0) ? (lobjs)->fetch(0) : (LoadObject*)0; index < (lobjs)->size(); lo = (++index < (lobjs)->size()) ? (lobjs)->fetch(index) : (LoadObject*)0)
  {
    if (dbev->lobjectsNoJava != 
# 2733 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                               __null
# 2733 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                   )
      {

 if (dbev->lobjectsNoJava->fetch (new_index) != index)
   continue;
      }

    enum LibExpand expand = (enum LibExpand) selected->fetch (new_index);
    if (expand == LIBEX_HIDE)
      {
 dbev->resetShowAll ();
 dbeSession->set_lib_visibility_used ();
      }
    changed = changed | dbev->set_libexpand (lo->get_pathname (), expand);
    new_index++;
  }
  delete lobjs;
  if (changed == true)
    {
      dbev->setShowHideChanged ();
      dbev->update_lo_expands ();
    }

  return;
}


void
dbeSetLoadObjectDefaults (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2764 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2764 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->set_libdefaults ();
}


Vector<char*>*
dbeGetCPUVerMachineModel (int dbevindex)
{
  Vector<char*>* table = new Vector<char*>();
  DbeView *dbev = dbeSession->getView (dbevindex);
  char * mach_model = dbev->get_settings ()->get_machinemodel ();
  if (mach_model != 
# 2776 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null
# 2776 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       )
    {
      table->append (mach_model);
      return table;
    }
  int grsize = dbeSession->expGroups->size ();
  for (int j = 0; j < grsize; j++)
    {
      ExpGroup *gr = dbeSession->expGroups->fetch (j);
      Vector<Experiment*> *exps = gr->exps;
      for (int i = 0, sz = exps->size (); i < sz; i++)
 {
   Experiment *exp = exps->fetch (i);
   char *model = exp->machinemodel;
   if (model != 
# 2790 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 2790 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
     table->append (dbe_strdup (model));
 }
    }
  return table;
}


void
dbeDetectLoadMachineModel (int dbevindex)
{
  if (dbeSession->is_datamode_available ())
    {
      char *model = dbeGetMachineModel ();
      if (model == 
# 2804 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 2804 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
 {
   Vector<char*>* models = dbeGetCPUVerMachineModel (dbevindex);
   char * machineModel = ((char *) ("generic"));
   if (models->size () > 0)
     {
       machineModel = models->get (0);
       for (int i = 1; i < models->size (); i++)
  {
    if (strncmp (models->get (i), machineModel, strlen (machineModel)) == 0)
      {
        machineModel = ((char *) ("generic"));
        break;
      }
  }
       dbeLoadMachineModel (machineModel);
     }
   delete models;
 }
    }
}


char *
dbeDefineMemObj (char *name, char *index_expr, char *machinemodel,
   char *sdesc, char *ldesc)
{
  return MemorySpace::mobj_define (name, index_expr, machinemodel, sdesc, ldesc);
}

char *
dbeDeleteMemObj (char *name)
{
  return MemorySpace::mobj_delete (name);
}

Vector<void*> *
dbeGetMemObjects (int )
{
  Vector<void*> *res = MemorySpace::getMemObjects ();
  return res;
}


char *
dbeLoadMachineModel (char *name)
{
  return dbeSession->load_mach_model (name);
}

char *
dbeGetMachineModel ()
{
  return dbeSession->get_mach_model ();
}

Vector <char *> *
dbeListMachineModels ()
{
  return dbeSession->list_mach_models ();
}


char *
dbeDefineIndxObj (char *name, char *index_expr, char *sdesc, char *ldesc)
{
  return dbeSession->indxobj_define (name, 
# 2870 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                          __null
# 2870 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                              , index_expr, sdesc, ldesc);
}

Vector<void*> *
dbeGetIndxObjDescriptions (int )
{
  Vector<void*> *res = dbeSession->getIndxObjDescriptions ();
  return res;
}

Vector<void*> *
dbeGetCustomIndxObjects (int )
{
  Vector<void*> *res = dbeSession->getCustomIndxObjects ();
  return res;
}

void
dbeSetSelObj (int dbevindex, Obj sel_obj_or_ind, int type, int subtype)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2891 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2891 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Histable *sel_obj;
  Hist_data *data;
  int sel_ind = (int) sel_obj_or_ind;

  switch (type)
    {
    case DSP_FUNCTION:
      data = dbev->func_data;
      break;
    case DSP_LINE:
      data = dbev->line_data;
      break;
    case DSP_PC:
      data = dbev->pc_data;
      break;
    case DSP_CALLER:
      data = dbev->callers;
      break;
    case DSP_CALLEE:
      data = dbev->callees;
      break;
    case DSP_SOURCE:
      data = dbev->src_data;
      break;
    case DSP_DISASM:
      data = dbev->dis_data;
      break;
    case DSP_DLAYOUT:
      data = dbev->dlay_data;
      if (data == 
# 2922 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 2922 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
 {
   dbev->sel_binctx = 
# 2924 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 2924 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         ;
   return;
 }
      if (sel_ind >= 0 && sel_ind < dbev->dlay_data->size ())
 dbev->sel_dobj = dbev->dlay_data->fetch (sel_ind)->obj;
      return;
    case DSP_DATAOBJ:
      data = dbev->dobj_data;
      if (data == 
# 2932 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 2932 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
 {
   dbev->sel_binctx = 
# 2934 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 2934 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         ;
   return;
 }
      if (sel_ind >= 0 && sel_ind < dbev->dobj_data->size ())
 dbev->sel_dobj = dbev->dobj_data->fetch (sel_ind)->obj;
      return;
    case DSP_MEMOBJ:
    case DSP_INDXOBJ:
      dbev->set_indxobj_sel (subtype, sel_ind);
      sel_obj = dbev->get_indxobj_sel (subtype);
      if (sel_obj && sel_obj->get_type () == Histable::INDEXOBJ)
 dbev->set_sel_obj (((IndexObject*) sel_obj)->get_obj ());
      return;
    case DSP_SOURCE_V2:
    case DSP_DISASM_V2:
    case DSP_TIMELINE:
    case DSP_LEAKLIST:
    case DSP_RACES:
    case DSP_DEADLOCKS:
    case DSP_DUALSOURCE:
    case DSP_SOURCE_DISASM:
    case DSP_IOACTIVITY:
    case DSP_IOVFD:
    case DSP_IOCALLSTACK:
    case DSP_HEAPCALLSTACK:
    case DSP_MINICALLER:
      dbev->set_sel_obj ((Histable *) sel_obj_or_ind);
      return;
    default:

      return;
    }
  if (type != DSP_SOURCE && type != DSP_DISASM && type != DSP_SOURCE_V2
      && type != DSP_DISASM_V2)
    dbev->sel_binctx = 
# 2968 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 2968 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          ;

  if (data == 
# 2970 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 2970 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || data->get_status () != Hist_data::SUCCESS
      || sel_ind >= data->size ())
    return;

  if (sel_ind >= 0 && sel_ind < data->size ())
    dbev->set_sel_obj (data->fetch (sel_ind)->obj);
}

void
dbeSetSelObjV2 (int dbevindex, uint64_t id)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 2982 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 2982 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->set_sel_obj (dbeSession->findObjectById (id));
}

Obj
dbeGetSelObj (int dbevindex, int type, int subtype)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  Histable *sel_obj = 
# 2991 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 2991 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         ;
  switch (type)
    {
    case DSP_FUNCTION:
      sel_obj = dbev->get_sel_obj (Histable::FUNCTION);
      break;
    case DSP_LINE:
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
      sel_obj = dbev->get_sel_obj (Histable::LINE);
      break;
    case DSP_PC:
    case DSP_DISASM:
    case DSP_DISASM_V2:
      sel_obj = dbev->get_sel_obj (Histable::INSTR);
      break;
    case DSP_SRC_FILE:
      sel_obj = dbev->get_sel_obj (Histable::SOURCEFILE);
      break;
    case DSP_DATAOBJ:
    case DSP_DLAYOUT:
      if (dbev->sel_dobj)
 sel_obj = dbev->sel_dobj->convertto (Histable::DOBJECT);
      break;
    case DSP_MEMOBJ:
    case DSP_INDXOBJ:
      sel_obj = dbev->get_indxobj_sel (subtype);
      break;
    default:
      abort ();
    }
  if (0) if((mpmt_debug_opt & 524288)) fprintf(
# 3022 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 stderr
# 3022 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 , ((char *) ("### dbeGetSelObj: Dbe.cc:%d %s (%d) returns %s\n")), 3023, dsp_type_to_string (type), type, sel_obj ? sel_obj->dump () : "NULL")
                                                                                   ;
  return (Obj) sel_obj;
}

Obj
dbeConvertSelObj (Obj obj, int type)
{
  Histable *sel_obj = (Histable *) obj;
  if (0) if((mpmt_debug_opt & 524288)) fprintf(
# 3031 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 stderr
# 3031 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 , ((char *) ("### dbeConvertSelObj: Dbe.cc:%d %s (%d) sel_obj=%s\n")), 3032, dsp_type_to_string (type), type, sel_obj ? sel_obj->dump () : "NULL")

            ;
  if (sel_obj == 
# 3034 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 3034 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    return (Obj) 
# 3035 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 3035 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    ;
  switch (type)
    {
    case DSP_FUNCTION:
      return (Obj) sel_obj->convertto (Histable::FUNCTION);
    case DSP_LINE:
      return (Obj) sel_obj->convertto (Histable::LINE);
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
      {
 SourceFile* srcCtx = 
# 3045 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 3045 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         ;
 if (sel_obj->get_type () == Histable::INSTR)
   {
     DbeInstr* dbei = (DbeInstr *) sel_obj;
     srcCtx = (SourceFile*) dbei->convertto (Histable::SOURCEFILE);
   }
 else if (sel_obj->get_type () == Histable::LINE)
   {
     DbeLine * dbel = (DbeLine *) sel_obj;
     srcCtx = dbel->sourceFile;
   }
 sel_obj = sel_obj->convertto (Histable::LINE, srcCtx);
 if (0) if((mpmt_debug_opt & 524288)) fprintf(
# 3057 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
stderr
# 3057 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
, ((char *) ("### dbeConvertSelObj: Dbe.cc:%d %s (%d) returns %s\n")), 3058, dsp_type_to_string (type), type, sel_obj ? sel_obj->dump () : "NULL")
                                                                                  ;
 if (sel_obj && sel_obj->get_type () == Histable::LINE)
   {
     DbeLine * dbel = (DbeLine *) sel_obj;
     return (Obj) dbel->dbeline_base;
   }
 return (Obj) sel_obj->convertto (Histable::LINE, srcCtx);
      }
    case DSP_PC:
    case DSP_DISASM:
    case DSP_DISASM_V2:
      return (Obj) sel_obj->convertto (Histable::INSTR);
    case DSP_SRC_FILE:
      return (Obj) sel_obj->convertto (Histable::SOURCEFILE);
    default:
      abort ();
    }
  return (Obj) 
# 3075 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 3075 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  ;
}

uint64_t
dbeGetSelObjV2 (int dbevindex, char *typeStr)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3082 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3082 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Histable *obj = 
# 3084 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 3084 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     ;
  if (typeStr != 
# 3085 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 3085 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    {
      if (streq (typeStr, ((char *) ("FUNCTION"))))
 obj = dbev->get_sel_obj (Histable::FUNCTION);
      else if (streq (typeStr, ((char *) ("INSTRUCTION"))))
 obj = dbev->get_sel_obj (Histable::INSTR);
      else if (streq (typeStr, ((char *) ("SOURCELINE"))))
 obj = dbev->get_sel_obj (Histable::LINE);
      else if (streq (typeStr, ((char *) ("SOURCEFILE"))))
 obj = dbev->get_sel_obj (Histable::SOURCEFILE);
    }
  if (0) if((mpmt_debug_opt & 524288)) fprintf(
# 3096 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 stderr
# 3096 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 , ((char *) ("### dbeGetSelObjV2: Dbe.cc:%d %s returns %s\n")), 3097, STR (typeStr), obj ? obj->dump () : "NULL")
                                                         ;
  return obj != 
# 3098 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null 
# 3098 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    ? obj->id : (uint64_t) - 1;
}

Vector<uint64_t> *
dbeGetSelObjsIO (int dbevindex, Vector<uint64_t> *ids, int type)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3105 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3105 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Vector<uint64_t> *res = 
# 3107 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 3107 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             ;
  Vector<uint64_t> *result = new Vector<uint64_t>();
  for (int i = 0; i < ids->size (); i++)
    {
      res = dbeGetSelObjIO (dbevindex, ids->fetch (i), type);
      if (res != 
# 3112 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 3112 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 {
   result->addAll (res);
   delete res;
 }
    }
  return result;
}

Vector<uint64_t> *
dbeGetSelObjIO (int dbevindex, uint64_t id, int type)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3125 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3125 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Histable *obj = 
# 3127 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 3127 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     ;
  Vector<uint64_t> *res = 
# 3128 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 3128 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             ;
  int size = 0;
  switch (type)
    {
    case DSP_IOACTIVITY:
      obj = dbev->get_sel_obj_io (id, Histable::IOACTFILE);
      size = obj != 
# 3134 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null 
# 3134 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        ? ((FileData*) obj)->getVirtualFds ()->size () : 0;
      if (size)
 {
   res = new Vector<uint64_t>();
   Vector<int64_t> *vfds = ((FileData*) obj)->getVirtualFds ();
   for (int i = 0; i < size; i++)
     res->append (vfds->fetch (i));
 }
      break;
    case DSP_IOVFD:
      obj = dbev->get_sel_obj_io (id, Histable::IOACTVFD);
      if (obj)
 {
   res = new Vector<uint64_t>();
   res->append (obj->id);
 }
      break;
    case DSP_IOCALLSTACK:
      obj = dbev->get_sel_obj_io (id, Histable::IOCALLSTACK);
      if (obj)
 {
   Vector<Obj> *instrs = dbeGetStackPCs (dbevindex, obj->id);
   if (instrs == 
# 3156 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 3156 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
     return 
# 3157 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
           __null
# 3157 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
               ;
   int stsize = instrs->size ();
   res = new Vector<uint64_t>(stsize);
   for (int i = 0; i < stsize; i++)
     {
       Histable *objFunc = (DbeInstr*) (instrs->fetch (i));
       if (objFunc->get_type () != Histable::LINE)
  {
    objFunc = objFunc->convertto (Histable::FUNCTION);
    res->insert (0, objFunc->id);
  }
     }
   delete instrs;
 }
      break;
    default:
      break;
    }
  return res;
}

uint64_t
dbeGetSelObjHeapTimestamp (int dbevindex, uint64_t id)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3182 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3182 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Histable *obj = 
# 3184 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 3184 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     ;
  uint64_t res = 0;
  Vector<uint64_t> *peakStackIds;
  Vector<hrtime_t> *peakTimestamps;


  bool foundPeakId = false;
  if (id > 0)
    {
      obj = dbev->get_sel_obj_heap (0);
      if (obj != 
# 3194 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 3194 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 {
   peakStackIds = ((HeapData*) obj)->getPeakStackIds ();
   peakTimestamps = ((HeapData*) obj)->getPeakTimestamps ();
   for (int i = 0; i < peakStackIds->size (); i++)
     {
       if (id == peakStackIds->fetch (i))
  {
    res = peakTimestamps->fetch (i);
    foundPeakId = true;
    break;
  }
     }
 }
    }




  if (id == 0 || !foundPeakId)
    {
      obj = dbev->get_sel_obj_heap (0);
      res = obj != 
# 3216 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null 
# 3216 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       ? ((HeapData*) obj)->getPeakTimestamps ()->fetch (0) : 0;
    }
  return res;
}

int
dbeGetSelObjHeapUserExpId (int dbevindex, uint64_t id)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3225 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3225 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Histable *obj = 
# 3227 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 3227 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     ;
  int res = 0;
  obj = dbev->get_sel_obj_heap (id);
  res = obj != 
# 3230 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null 
# 3230 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   ? ((HeapData*) obj)->getUserExpId () : 0;
  return res;
}




int
dbeGetSelIndex (int dbevindex, Obj sel_obj, int type, int subtype)
{
  Hist_data *data;
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3242 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3242 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  switch (type)
    {
    case DSP_FUNCTION:
      data = dbev->func_data;
      break;
    case DSP_LINE:
      data = dbev->line_data;
      break;
    case DSP_PC:
      data = dbev->pc_data;
      break;
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
      data = dbev->src_data;
      break;
    case DSP_DISASM:
    case DSP_DISASM_V2:
      data = dbev->dis_data;
      break;
    case DSP_DLAYOUT:
      data = dbev->dlay_data;
      break;
    case DSP_DATAOBJ:
      data = dbev->dobj_data;
      break;
    case DSP_MEMOBJ:
    case DSP_INDXOBJ:
      data = dbev->get_indxobj_data (subtype);
      break;
    default:
      data = 
# 3274 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 3274 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
      break;
    }
  if (data == 
# 3277 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 3277 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || data->get_status () != Hist_data::SUCCESS)
    return -1;

  Histable *chk_obj = (Histable *) sel_obj;
  Vector<Hist_data::HistItem*> *histItems = data->get_hist_items ();
  if (histItems == 
# 3282 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null 
# 3282 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       || chk_obj == 
# 3282 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                     __null
# 3282 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                         )
    return -1;
  for (int i = 0, sz = histItems->size (); i < sz; i++)
    {
      if (histItems->get (i)->obj == chk_obj)
 return i;
      if (histItems->get (i)->obj == 
# 3288 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                    __null
# 3288 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                        )
 continue;
      if (histItems->get (i)->obj->get_type () == Histable::LINE
   && chk_obj->get_type () == Histable::LINE)
 {
   if (((DbeLine*) histItems->get (i)->obj)->convertto (Histable::FUNCTION)
       == ((DbeLine*) chk_obj)->convertto (Histable::FUNCTION)
       && ((DbeLine*) histItems->get (i)->obj)->lineno
       == ((DbeLine*) chk_obj)->lineno)
     return i;
 }
      else if (histItems->get (i)->obj->get_type () == Histable::INSTR
  && chk_obj->get_type () == Histable::INSTR)
 if (((DbeInstr*) histItems->get (i)->obj)->convertto (Histable::FUNCTION)
     == ((DbeInstr*) chk_obj)->convertto (Histable::FUNCTION)
     && ((DbeInstr*) histItems->get (i)->obj)->addr
     == ((DbeInstr*) chk_obj)->addr)
   return i;
    }

  Histable *chk_obj1 = 
# 3308 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 3308 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          ;
  switch (type)
    {
    case DSP_FUNCTION:
      chk_obj1 = chk_obj->convertto (Histable::FUNCTION);
      break;
    case DSP_LINE:
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
      chk_obj1 = chk_obj->convertto (Histable::LINE);
      break;
    case DSP_PC:
    case DSP_DISASM:
    case DSP_DISASM_V2:
      chk_obj1 = chk_obj->convertto (Histable::INSTR);
      break;
    }
  if (chk_obj1 && chk_obj != chk_obj1)
    for (int i = 0, sz = histItems->size (); i < sz; i++)
      if (histItems->get (i)->obj == chk_obj1)
 return i;

  if (type == DSP_LINE)
    {
      for (int i = 0, sz = histItems->size (); i < sz; i++)
 if (histItems->get (i)->obj != 
# 3333 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                               __null
     
# 3334 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
    && chk_obj->convertto (Histable::FUNCTION)
     == histItems->get (i)->obj->convertto (Histable::FUNCTION))
   return i;
    }
  else if (type == DSP_PC)
    {
      for (int i = 0, sz = histItems->size (); i < sz; i++)
 if (histItems->get (i)->obj != 
# 3341 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                               __null
     
# 3342 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
    && (histItems->get (i)->obj)->convertto (Histable::FUNCTION)
     == (chk_obj)->convertto (Histable::FUNCTION)
     && ((DbeLine*) histItems->get (i)->obj->convertto (Histable::LINE))->lineno
     == ((DbeLine*) chk_obj->convertto (Histable::LINE))->lineno)
   return i;
      for (int i = 0, sz = histItems->size (); i < sz; i++)
 if (histItems->get (i)->obj != 
# 3348 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                               __null
     
# 3349 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
    && (histItems->get (i)->obj)->convertto (Histable::FUNCTION)
     == (chk_obj)->convertto (Histable::FUNCTION))
   return i;
    }



  if (dbev->isOmpDisMode () && type == DSP_FUNCTION)
    {
      int p = dbeGetSelIndex (dbevindex, sel_obj, DSP_DISASM, subtype);
      if (p != -1)
 return p;
    }
  return -1;
}



char *
dbePrintData (int dbevindex, int type, int subtype, char *printer,
       char *fname, FILE *outfile)
{
  Histable *current_obj;
  Function *func;
  Module *module;
  MetricList *mlist_orig;
  bool header;
  Print_params params;
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3378 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3378 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();


  if (printer != 
# 3382 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 3382 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    {
      params.dest = DEST_PRINTER;
      params.name = printer;
    }
  else if (outfile != 
# 3387 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 3387 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         )
    {
      params.dest = DEST_OPEN_FILE;
      params.openfile = outfile;
      params.name = 
# 3391 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null
# 3391 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       ;
    }
  else
    {
      params.dest = DEST_FILE;
      params.name = fname;
      if (*(params.name) == '\0')
 {
   free (params.name);
   return dbe_strdup (gettext("Please enter the name of the file to which to print"));
 }
    }
  params.ncopies = 1;
  if (outfile != 
# 3404 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 3404 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    header = false;
  else
    header = !(type == DSP_SOURCE || type == DSP_SOURCE_V2 || type == DSP_DISASM_V2);

  params.header = header;


  if (type == DSP_SELF || type == DSP_CALLER || type == DSP_CALLEE
      || type == DSP_CALLTREE)
    mlist_orig = dbev->get_metric_list (MET_CALL);
  else if (type == DSP_DATAOBJ || type == DSP_DLAYOUT || type == DSP_MEMOBJ)
    mlist_orig = dbev->get_metric_list (MET_DATA);
  else if (type == DSP_INDXOBJ)
    mlist_orig = dbev->get_metric_list (MET_INDX);
  else if (type == DSP_IOACTIVITY || type == DSP_IOVFD
    || type == DSP_IOCALLSTACK)
    mlist_orig = dbev->get_metric_list (MET_IO);
  else if (type == DSP_HEAPCALLSTACK)
    mlist_orig = dbev->get_metric_list (MET_HEAP);
  else
    mlist_orig = dbev->get_metric_list (MET_NORMAL);




  MetricList *mlist = new MetricList (mlist_orig);
  Hist_data *data = 
# 3431 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null
# 3431 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       ;
  er_print_common_display *cd = 
# 3432 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                               __null
# 3432 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                   ;
  int ix;

  switch (type)
    {
    case DSP_FUNCTION:
    case DSP_LINE:
    case DSP_PC:
    case DSP_MEMOBJ:
    case DSP_INDXOBJ:
    case DSP_DATAOBJ:
      data = dbev->get_hist_data (mlist,
      ((type == DSP_FUNCTION) ? Histable::FUNCTION :
       (type == DSP_LINE) ? Histable::LINE :
       (type == DSP_PC) ? Histable::INSTR :
       (type == DSP_INDXOBJ) ? Histable::INDEXOBJ :
       (type == DSP_MEMOBJ) ? Histable::MEMOBJ
       : Histable::DOBJECT),
      subtype, Hist_data::ALL);
      if (data->get_status () != Hist_data::SUCCESS)
 return DbeView::status_str (DbeView::DBEVIEW_NO_DATA);

      cd = new er_print_histogram (dbev, data, mlist, MODE_LIST,
       dbev->get_limit (),
       mlist->get_sort_name (), 
# 3456 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                               __null
# 3456 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                   , true, true);
      break;
    case DSP_DLAYOUT:
      {
 data = dbev->get_hist_data (mlist, Histable::DOBJECT, 0, Hist_data::LAYOUT);
 if (data->get_status () != Hist_data::SUCCESS)
   return DbeView::status_str (DbeView::DBEVIEW_NO_DATA);
 cd = new er_print_histogram (dbev, data, mlist, MODE_ANNOTATED,
         dbev->get_thresh_dis (),
         mlist->get_sort_name (), 
# 3465 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                 __null
# 3465 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                     , true, true);
 break;
      }


    case DSP_SOURCE:
    case DSP_DISASM:
    case DSP_SOURCE_V2:
    case DSP_DISASM_V2:
      if (dbev->sel_obj == 
# 3474 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                          __null
# 3474 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                              )
 return 
# 3475 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
       __null
# 3475 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
           ;
      current_obj = dbev->sel_obj->convertto (Histable::FUNCTION);
      if (current_obj->get_type () != Histable::FUNCTION)
 return dbe_strdup (gettext("Not a real function; no source or disassembly available."));
      func = (Function*) current_obj->convertto (Histable::FUNCTION);
      if (func->flags & FUNC_FLAG_SIMULATED)
 return dbe_strdup (gettext("Not a real function; no source or disassembly available."));
      if (func->get_name () == 
# 3482 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                              __null
# 3482 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                  )
 return dbe_strdup (gettext("Source location not recorded in experiment"));
      module = func->module;
      if (module == 
# 3485 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null 
# 3485 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        || module->get_name () == 
# 3485 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                  __null
# 3485 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                      )
 return dbe_strdup (gettext("Object name not recorded in experiment"));
      ix = module->loadobject->seg_idx;
      if (dbev->get_lo_expand (ix) == LIBEX_HIDE)
 return dbe_strdup (gettext("No source or disassembly available for hidden object"));
      cd = new er_print_histogram (dbev, dbev->func_data, mlist, MODE_ANNOTATED,
       type == DSP_DISASM || type == DSP_DISASM_V2,
       mlist->get_sort_name (),
       func, false, false);
      break;


    case DSP_SELF:
    case DSP_CALLER:
    case DSP_CALLEE:
      if (dbev->sel_obj == 
# 3500 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                          __null
# 3500 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                              )
 return 
# 3501 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
       __null
# 3501 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
           ;
      current_obj = dbev->sel_obj->convertto (Histable::FUNCTION);
      cd = new er_print_histogram (dbev, dbev->func_data, mlist, MODE_GPROF, 1,
       mlist->get_sort_name (), current_obj,
       false, false);
      break;


    case DSP_STATIS:
      cd = new er_print_experiment (dbev, 0, dbeSession->nexps () - 1,
        true, true, true, true, false);
      delete mlist;
      break;
    case DSP_EXP:
      cd = new er_print_experiment (dbev, 0, dbeSession->nexps () - 1,
        true, true, false, false, false);
      delete mlist;
      break;
    case DSP_LEAKLIST:
      cd = new er_print_leaklist (dbev, true, true, dbev->get_limit ());
      delete mlist;
      break;
    case DSP_HEAPCALLSTACK:
      cd = new er_print_heapactivity (dbev, Histable::HEAPCALLSTACK, false,
          dbev->get_limit ());
      delete mlist;
      break;
    case DSP_IOACTIVITY:
      cd = new er_print_ioactivity (dbev, Histable::IOACTFILE, false,
        dbev->get_limit ());
      delete mlist;
      break;
    case DSP_IOVFD:
      cd = new er_print_ioactivity (dbev, Histable::IOACTVFD, false,
        dbev->get_limit ());
      delete mlist;
      break;


    case DSP_IOCALLSTACK:
      cd = new er_print_ioactivity (dbev, Histable::IOCALLSTACK, false,
        dbev->get_limit ());
      delete mlist;
      break;


    default:
      delete mlist;
      return dbe_strdup (gettext("Print not available"));
    }


  char *buf = 
# 3553 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3553 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 ;


  if (cd->open (&params) == 0)
    {

      cd->data_dump ();
      if (params.dest == DEST_PRINTER)
 {
   if (streq ((char *) params.name, ((char *) ("-"))))
     {

       int maxbytes = 2 * 1024 * 1024;
       char *report = cd->get_output (maxbytes);
       delete data;
       delete cd;
       return report;
     }
 }
      if (cd->print_output () == false)
 buf = dbe_sprintf (((char *) ("%s: %s")),
      gettext("Unable to submit print request to"),
      params.name);
    }
  else

    buf = dbe_sprintf (((char *) ("%s: %s")),
         gettext("Unable to open file"),
         params.name);


  if (data)
    if (data->isViewOwned () == false)
      delete data;
  delete cd;
  return buf;
}



char *
dbeSetPrintLimit (int dbevindex, int limit)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3597 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3597 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  return (dbev->set_limit (limit));
}


int
dbeGetPrintLimit (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3607 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3607 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  int limit = dbev->get_limit ();
  return limit;
}


char *
dbeSetPrintMode (int dbevindex, char * pmode)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3618 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3618 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  char *r = dbev->set_printmode (pmode);
  return r;
}


int
dbeGetPrintMode (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3629 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3629 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  return (dbev->get_printmode ());
}


char *
dbeGetPrintModeString (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3639 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3639 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  return ( dbev->get_printmode_str ());
}


char
dbeGetPrintDelim (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 3649 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 3649 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  return (dbev->get_printdelimiter ());
}


static void
set_file_names (Function *func, char *names[3])
{
  Module *module = func->module;
  LoadObject *loadobject = module->loadobject;
  if (loadobject == 
# 3660 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null
# 3660 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       )
    loadobject = dbeSession->get_Unknown_LoadObject ();
  free (names[0]);
  free (names[1]);
  free (names[2]);
  SourceFile *sf = func->getDefSrc ();
  char *src_name = sf->dbeFile->get_location_info ();
  DbeFile *df = module->dbeFile;
  if (df == 
# 3668 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
           __null 
# 3668 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                || (df->filetype & DbeFile::F_JAVACLASS) == 0)
    df = module->loadobject->dbeFile;
  char *lo_name = df->get_location_info ();
  char *dot_o_name = lo_name;
  if (module->dot_o_file)
    dot_o_name = module->dot_o_file->dbeFile->get_location_info ();
  names[0] = dbe_sprintf (((char *) ("%s: %s")), gettext("Source File"), src_name);
  names[1] = dbe_sprintf (((char *) ("%s: %s")), gettext("Object File"), dot_o_name);
  names[2] = dbe_sprintf (((char *) ("%s: %s")), gettext("Load Object"), lo_name);
}
# 3687 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
int
dbeSetFuncData (int dbevindex, Obj sel_obj, int type, int subtype)
{
  MetricList *_mlist;
  Histable *org_obj;
  Hist_data *data = 
# 3692 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null
# 3692 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       ;
  int index, sel_index;
  Function *func;
  char *name;
  int ix;

  DbeView *dbev = dbeSession->getView (dbevindex);
  sel_index = -1;
  dbev->resetOmpDisMode ();
  dbev->error_msg = dbev->warning_msg = 
# 3701 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                       __null
# 3701 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                           ;


  _mlist = dbev->get_metric_list (MET_NORMAL);
  MetricList *mlist = new MetricList (_mlist);


  org_obj = (Histable *) sel_obj;



  switch (type)
    {

    case DSP_FUNCTION:
    case DSP_LINE:
    case DSP_PC:
    case DSP_DATAOBJ:
    case DSP_MEMOBJ:
    case DSP_INDXOBJ:
      switch (type)
 {
 case DSP_FUNCTION:
   if (dbev->func_data)
     delete dbev->func_data;
   dbev->func_data = data = dbev->get_hist_data (mlist,
       Histable::FUNCTION, subtype, Hist_data::ALL);
   break;
 case DSP_LINE:
   if (dbev->line_data)
     delete dbev->line_data;
   dbev->line_data = data = dbev->get_hist_data (mlist,
           Histable::LINE, subtype, Hist_data::ALL);
   break;
 case DSP_PC:
   if (dbev->pc_data)
     delete dbev->pc_data;
   dbev->pc_data = data = dbev->get_hist_data (mlist,
          Histable::INSTR, subtype, Hist_data::ALL);
   break;
 case DSP_DATAOBJ:
   if (dbev->dobj_data)
     delete dbev->dobj_data;
   mlist = dbev->get_metric_list (MET_DATA);
   dbev->dobj_data = data = dbev->get_hist_data (mlist,
        Histable::DOBJECT, subtype, Hist_data::ALL);
   break;
 case DSP_MEMOBJ:
   mlist = dbev->get_metric_list (MET_DATA);
   data = dbev->get_hist_data (mlist, Histable::MEMOBJ, subtype,
          Hist_data::ALL);
   dbev->indx_data->store (subtype, data);
   break;
 case DSP_INDXOBJ:
   mlist = dbev->get_metric_list (MET_INDX);
   data = dbev->get_hist_data (mlist, Histable::INDEXOBJ, subtype,
          Hist_data::ALL);
   dbev->indx_data->store (subtype, data);
   break;
 default:
   break;
 }


      if (data->get_status () == Hist_data::SUCCESS)
 {

   sel_index = -1;
   if (org_obj)
     {
       Hist_data::HistItem *hi;
       if (data->get_hist_items () != 
# 3772 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
      __null
# 3772 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
      ) for (index = 0, hi = ((data->get_hist_items ())->size() > 0) ? (data->get_hist_items ())->fetch(0) : (Hist_data::HistItem*)0; index < (data->get_hist_items ())->size(); hi = (++index < (data->get_hist_items ())->size()) ? (data->get_hist_items ())->fetch(index) : (Hist_data::HistItem*)0)
       {
  if (hi->obj == org_obj)
    {
      sel_index = index;
      break;
    }
       }
       if (sel_index == -1 && (type == DSP_LINE || type == DSP_PC))
  {
    if (data->get_hist_items () != 
# 3782 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
   __null
# 3782 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
   ) for (index = 0, hi = ((data->get_hist_items ())->size() > 0) ? (data->get_hist_items ())->fetch(0) : (Hist_data::HistItem*)0; index < (data->get_hist_items ())->size(); hi = (++index < (data->get_hist_items ())->size()) ? (data->get_hist_items ())->fetch(index) : (Hist_data::HistItem*)0)
    {
      name = hi->obj->get_name ();
      if (strcmp (name, ((char *) ("<Total>"))) &&
   strcmp (name, gettext("<Unknown>")))
        {
   int done = 0;
   switch (type)
     {
     case DSP_LINE:
       if (org_obj->convertto (Histable::FUNCTION)
         == hi->obj->convertto (Histable::FUNCTION))
         {
    sel_index = index;
    done = 1;
         }
       break;
     case DSP_PC:
       if (hi->obj->convertto (Histable::FUNCTION)
    == org_obj->convertto (Histable::FUNCTION)
    && ((DbeLine*) hi->obj->convertto (Histable::LINE))->lineno
    == ((DbeLine*) org_obj->convertto (Histable::LINE))->lineno)
         {
    sel_index = index;
    done = 1;
         }
       break;
     }
   if (done)
     break;
        }
    }
  }
       if (sel_index == -1 && type == DSP_PC)
  {
    if (data->get_hist_items () != 
# 3817 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
   __null
# 3817 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
   ) for (index = 0, hi = ((data->get_hist_items ())->size() > 0) ? (data->get_hist_items ())->fetch(0) : (Hist_data::HistItem*)0; index < (data->get_hist_items ())->size(); hi = (++index < (data->get_hist_items ())->size()) ? (data->get_hist_items ())->fetch(index) : (Hist_data::HistItem*)0)
    {
      name = hi->obj->get_name ();
      if (strcmp (name, ((char *) ("<Total>"))) &&
   strcmp (name, gettext("<Unknown>")))
        {
   int done = 0;
   if (hi->obj->convertto (Histable::FUNCTION) ==
       org_obj->convertto (Histable::FUNCTION))
     {
       sel_index = index;
       done = 1;
     }
   if (done)
     break;
        }
    }
  }
     }
   if (sel_index == -1)
     {
       Hist_data::HistItem *hi;
       if (data->get_hist_items () != 
# 3839 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
      __null
# 3839 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
      ) for (index = 0, hi = ((data->get_hist_items ())->size() > 0) ? (data->get_hist_items ())->fetch(0) : (Hist_data::HistItem*)0; index < (data->get_hist_items ())->size(); hi = (++index < (data->get_hist_items ())->size()) ? (data->get_hist_items ())->fetch(index) : (Hist_data::HistItem*)0)
       {
  name = hi->obj->get_name ();
  if (strcmp (name, ((char *) ("<Total>"))) &&
      strcmp (name, gettext("<Unknown>")))
    {
      sel_index = index;
      break;
    }
       }
     }
 }
      else
 dbev->error_msg = DbeView::status_str (DbeView::DBEVIEW_NO_DATA);
      return sel_index;



    case DSP_DLAYOUT:
      if (dbev->dlay_data)
 delete dbev->dlay_data;
      dbev->marks->reset ();
      mlist = dbev->get_metric_list (MET_DATA);


      data = dbev->get_hist_data (mlist, Histable::DOBJECT, subtype,
      Hist_data::LAYOUT);

      dbev->dlay_data = data = dbev->get_data_space ()->get_layout_data (data,
       dbev->marks, dbev->get_thresh_dis ());
      if (data->get_status () != Hist_data::SUCCESS)
 dbev->error_msg = DbeView::status_str (DbeView::DBEVIEW_NO_DATA);
      return sel_index;


    case DSP_SOURCE_V2:
    case DSP_DISASM_V2:
    case DSP_SOURCE:
    case DSP_DISASM:
      {
 if (org_obj == 
# 3879 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 3879 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
   {
     dbev->error_msg = DbeView::status_str (DbeView::DBEVIEW_NO_SEL_OBJ);
     return sel_index;
   }
 if (org_obj->get_type () != Histable::FUNCTION)
   {
     dbev->error_msg = dbe_strdup (
      gettext("Not a real function; no source or disassembly available."));
     return sel_index;
   }
 func = (Function *) org_obj;
 if (func->flags & FUNC_FLAG_SIMULATED)
   {
     dbev->error_msg = dbe_strdup (
      gettext("Not a real function; no source or disassembly available."));
     return sel_index;
   }
 if (func->get_name () == 
# 3897 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 3897 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             )
   {
     dbev->error_msg = dbe_strdup (
      gettext("Source location not recorded in experiment"));
     return sel_index;
   }
 Module *module = func->module;
 if ((module == 
# 3904 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 3904 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   ) || (module->get_name () == 
# 3904 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                __null
# 3904 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                    ))
   {
     dbev->error_msg = dbe_strdup (
          gettext("Object name not recorded in experiment"));
     return sel_index;
   }
 ix = module->loadobject->seg_idx;
 if (dbev->get_lo_expand (ix) == LIBEX_HIDE)
   {
     dbev->error_msg = dbe_strdup (
   gettext("No source or disassembly available for hidden object"));
     return sel_index;
   }

 if ((type == DSP_DISASM || type == DSP_DISASM_V2)
      && dbev->get_view_mode () == VMODE_USER
     && dbeSession->is_omp_available ())
   dbev->setOmpDisMode ();

 dbev->marks->reset ();
 SourceFile *srcContext = 
# 3924 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 3924 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             ;
 switch (dbev->sel_obj->get_type ())
   {
   case Histable::FUNCTION:
     {
       Function *f = (Function *) dbev->sel_obj;
       srcContext = f->getDefSrc ();
       dbev->sel_binctx = f->module;
       break;
     }
   case Histable::LINE:
     {
       DbeLine *dl = (DbeLine *) dbev->sel_obj;
       srcContext = dl->sourceFile;
       Function *f = dl->func;
       if (f)
  dbev->sel_binctx = f;
       break;
     }
   case Histable::INSTR:
     {
       Function *f = (Function *) dbev->sel_obj->convertto (Histable::FUNCTION);
       if (f)
  {
    dbev->sel_binctx = f;
    srcContext = f->getDefSrc ();
  }
       break;
     }
   default:
     break;
   }
 mlist = dbev->get_metric_list (MET_SRCDIS);



 if (type == DSP_SOURCE)
   {
     if (dbev->src_data)
       delete dbev->src_data;


     if (dbev->func_data == 
# 3966 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                           __null
# 3966 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                               )
       dbev->func_data = data = dbev->get_hist_data (mlist,
       Histable::FUNCTION, subtype, Hist_data::ALL);
     dbev->marks2dsrc->reset ();
     dbev->marks2dsrc_inc->reset ();
     data = dbev->src_data = module->get_data (dbev, mlist,
     Histable::LINE, dbev->func_data->get_totals ()->value,
     srcContext, func, dbev->marks,
     dbev->get_thresh_src (), dbev->get_src_compcom (),
     dbev->get_src_visible (), dbev->get_hex_visible (),
     false, false, dbev->marks2dsrc, dbev->marks2dsrc_inc);
     set_file_names (func, dbev->names_src);
     if (srcContext)
       {
  free (dbev->names_src[0]);
  dbev->names_src[0] = dbe_sprintf (gettext("Source File: %s"),
         srcContext->dbeFile->get_location_info ());
       }
     Obj obj = (Obj) func->convertto (Histable::LINE, srcContext);
     sel_index = dbeGetSelIndex (dbevindex, obj, type, subtype);
   }
 else
   {
     if (dbev->dis_data)
       delete dbev->dis_data;


     if (dbev->func_data == 
# 3993 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                           __null
# 3993 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                               )
       dbev->func_data = data = dbev->get_hist_data (mlist,
      Histable::FUNCTION, subtype, Hist_data::ALL);
     dbev->marks2ddis->reset ();
     dbev->marks2ddis_inc->reset ();
     data = dbev->dis_data = module->get_data (dbev, mlist,
    Histable::INSTR, dbev->func_data->get_totals ()->value,
    srcContext, func, dbev->marks, dbev->get_thresh_dis (),
    dbev->get_dis_compcom (), dbev->get_src_visible (),
    dbev->get_hex_visible (), dbev->get_func_scope (),
    false, dbev->marks2ddis, dbev->marks2ddis_inc);
     set_file_names (func, dbev->names_dis);
     if (srcContext)
       {
  free (dbev->names_dis[0]);
  dbev->names_dis[0] = dbe_sprintf (gettext("Source File: %s"),
        srcContext->dbeFile->get_location_info ());
       }
     Obj obj = (Obj) func->convertto (Histable::INSTR);
     sel_index = dbeGetSelIndex (dbevindex, obj, type, subtype);
   }
 return sel_index;
      }


    case DSP_SELF:
    case DSP_CALLER:
    case DSP_CALLEE:
      if (org_obj == 
# 4021 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null
# 4021 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        )
 {
   dbev->error_msg = DbeView::status_str (DbeView::DBEVIEW_NO_SEL_OBJ);
   return sel_index;
 }


      if (dbev->callers)
 delete dbev->callers;
      mlist = dbev->get_metric_list (MET_CALL);
      dbev->callers = dbev->get_hist_data (mlist, Histable::FUNCTION, subtype,
        Hist_data::CALLERS, org_obj);
      if (dbev->callers->get_status () != Hist_data::SUCCESS)
 {
   dbev->error_msg = DbeView::status_str (DbeView::DBEVIEW_NO_DATA);
   return sel_index;
 }


      if (dbev->callees)
 delete dbev->callees;
      dbev->callees = dbev->get_hist_data (mlist, Histable::FUNCTION, subtype,
        Hist_data::CALLEES, org_obj);
      if (dbev->callees->get_status () != Hist_data::SUCCESS)
 {
   dbev->error_msg = DbeView::status_str (DbeView::DBEVIEW_NO_DATA);
   return sel_index;
 }


      if (dbev->fitem_data)
 delete dbev->fitem_data;
      dbev->fitem_data = dbev->get_hist_data (mlist, Histable::FUNCTION, subtype,
           Hist_data::SELF, org_obj);
      if (dbev->fitem_data->get_status () != Hist_data::SUCCESS)
 {
   dbev->error_msg = DbeView::status_str (DbeView::DBEVIEW_NO_DATA);
   return sel_index;
 }
      return sel_index;
    default:
      abort ();
    }
  return sel_index;
}

Vector<void*>*
dbeGetTotals (int dbevindex, int dsptype, int subtype)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  MetricList *mlist = dbev->get_metric_list (dsptype, subtype);
  Hist_data *data = dbev->get_hist_data (mlist, Histable::FUNCTION, 0,
      Hist_data::ALL);
  Hist_data::HistItem *totals = data->get_totals ();
  Vector<void*> *tbl = new Vector<void*>(mlist->size ());
  for (long i = 0, sz = mlist->size (); i < sz; i++)
    {
      Metric *m = mlist->get (i);
      switch (m->get_vtype ())
 {
 case VT_DOUBLE:
   {
     Vector<double> *lst = new Vector<double>(1);
     lst->append (totals->value[i].d);
     tbl->append (lst);
     break;
   }
 case VT_INT:
   {
     Vector<int> *lst = new Vector<int>(1);
     lst->append (totals->value[i].i);
     tbl->append (lst);
     break;
   }
 case VT_LLONG:
 case VT_ULLONG:
 case VT_ADDRESS:
   {
     Vector<long long> *lst = new Vector<long long>(1);
     lst->append (totals->value[i].ll);
     tbl->append (lst);
     break;
   }
 case VT_LABEL:
   {
     Vector<char *> *lst = new Vector<char *>(1);
     Histable::NameFormat nfmt = dbev->get_name_format ();
     lst->append (dbe_strdup (totals->obj->get_name (nfmt)));
     tbl->append (lst);
     break;
   }
 default:
   abort ();
 }
    }
  Vector<void*> *res = new Vector<void*>(2);
  res->append (dbeGetMetricList (mlist));
  res->append (tbl);
  return res;
}

Vector<void*>*
dbeGetHotMarks (int dbevindex, int type)
{
  Vector<void*>* table = new Vector<void*>(2);
  Vector<int>* table0 = new Vector<int> ();
  Vector<int>* table1 = new Vector<int> ();
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 4129 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 4129 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    return 
# 4130 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4130 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  switch (type)
    {
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
      for (int i = 0; i < dbev->marks2dsrc->size (); i++)
 {
   table0->append (dbev->marks2dsrc->fetch (i).index1);
   table1->append (dbev->marks2dsrc->fetch (i).index2);
 }
      break;
    case DSP_DISASM:
    case DSP_DISASM_V2:
      for (int i = 0; i < dbev->marks2ddis->size (); i++)
 {
   table0->append (dbev->marks2ddis->fetch (i).index1);
   table1->append (dbev->marks2ddis->fetch (i).index2);
 }
      break;
    default:
      break;
    }
  table->store (0, table0);
  table->store (1, table1);
  return table;
}

Vector<void*>*
dbeGetHotMarksInc (int dbevindex, int type)
{
  Vector<void*>* table = new Vector<void*>(2);
  Vector<int>* table0 = new Vector<int> ();
  Vector<int>* table1 = new Vector<int> ();
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 4165 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 4165 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    return 
# 4166 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4166 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  switch (type)
    {
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
      for (int i = 0; i < dbev->marks2dsrc_inc->size (); i++)
 {
   table0->append (dbev->marks2dsrc_inc->fetch (i).index1);
   table1->append (dbev->marks2dsrc_inc->fetch (i).index2);
 }
      break;
    case DSP_DISASM:
    case DSP_DISASM_V2:
      for (int i = 0; i < dbev->marks2ddis_inc->size (); i++)
 {
   table0->append (dbev->marks2ddis_inc->fetch (i).index1);
   table1->append (dbev->marks2ddis_inc->fetch (i).index2);
 }
      break;
    default:
      break;
    }
  table->store (0, table0);
  table->store (1, table1);
  return table;
}

Vector<void*>*
dbeGetSummaryHotMarks (int dbevindex, Vector<Obj> *sel_objs, int type)
{
  Vector<void*>* table = new Vector<void*>(2);
  Vector<int>* table0 = new Vector<int> ();
  Vector<int>* table1 = new Vector<int> ();
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 4201 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 4201 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    return 
# 4202 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4202 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  if (sel_objs == 
# 4203 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null 
# 4203 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      || sel_objs->size () == 0)
    return 
# 4204 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4204 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  Hist_data *data;
  Vector<int_pair_t> *marks2d;
  Vector<int_pair_t>* marks2d_inc;
  switch (type)
    {
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
      data = dbev->src_data;
      marks2d = dbev->marks2dsrc;
      marks2d_inc = dbev->marks2dsrc_inc;
      break;
    case DSP_DISASM:
    case DSP_DISASM_V2:
      data = dbev->dis_data;
      marks2d = dbev->marks2ddis;
      marks2d_inc = dbev->marks2ddis_inc;
      break;
    default:
      data = 
# 4224 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 4224 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
      marks2d = 
# 4225 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 4225 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   ;
      marks2d_inc = 
# 4226 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null
# 4226 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       ;
      break;
    }
  if (data == 
# 4229 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 4229 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || data->get_status () != Hist_data::SUCCESS
      || marks2d_inc == 
# 4230 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                       __null 
# 4230 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            || marks2d == 
# 4230 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                          __null
# 4230 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                              )
    return 
# 4231 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4231 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  MetricList *orig_mlist = data->get_metric_list ();
  MetricList *prop_mlist = new MetricList (dbev->get_metric_ref (MET_NORMAL));
  if (prop_mlist && dbev->comparingExperiments ())
    prop_mlist = dbev->get_compare_mlist (prop_mlist, 0);
  Metric *mitem;
  int index, index2;
  index2 = 0;
  if (prop_mlist->get_items () != 
# 4240 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 4240 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, mitem = ((prop_mlist->get_items ())->size() > 0) ? (prop_mlist->get_items ())->fetch(0) : (Metric*)0; index < (prop_mlist->get_items ())->size(); mitem = (++index < (prop_mlist->get_items ())->size()) ? (prop_mlist->get_items ())->fetch(index) : (Metric*)0)
  {
    if (mitem->get_subtype () == Metric::STATIC)
      continue;

    for (int i = 0; i < marks2d_inc->size (); i++)
      {
 int found = 0;
 for (int j = 0; j < sel_objs->size (); j++)
   {
     int sel_index = (int) sel_objs->fetch (j);
     int marked_index = marks2d_inc->fetch (i).index1;
     if (sel_index == marked_index)
       {
  found = 1;
  break;
       }
   }
 if (!found)
   continue;
 int mindex = marks2d_inc->fetch (i).index2;
 Metric *orig_metric = orig_mlist->get_items ()->fetch (mindex);
 if (orig_metric->get_id () == mitem->get_id ()
     && mitem->get_subtype () == Metric::INCLUSIVE)
   {
     table0->append (index2);
     table1->append (1);
   }
      }

    for (int i = 0; i < marks2d->size (); i++)
      {
 int found = 0;
 for (int j = 0; j < sel_objs->size (); j++)
   {
     int sel_index = (int) sel_objs->fetch (j);
     int marked_index = marks2d->fetch (i).index1;
     if (sel_index == marked_index)
       {
  found = 1;
  break;
       }
   }
 if (!found)
   continue;
 int mindex = marks2d->fetch (i).index2;
 Metric *orig_metric = orig_mlist->get_items ()->fetch (mindex);
 if (orig_metric->get_id () == mitem->get_id ()
     && mitem->get_subtype () == Metric::EXCLUSIVE)
   {
     table0->append (index2);
     table1->append (0);
   }
      }
    if (!(mitem->get_subtype () == Metric::EXCLUSIVE
   || mitem->get_subtype () == Metric::DATASPACE))
      index2++;
  }
  table->store (0, table0);
  table->store (1, table1);
  return table;
}



Vector<uint64_t>*
dbeGetFuncId (int dbevindex, int type, int begin, int length)
{
  Vector<uint64_t>* table = new Vector<uint64_t > ();
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 4310 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 4310 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();

  Hist_data *data;
  Function* given_func = 
# 4314 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 4314 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            ;
  switch (type)
    {
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
      data = dbev->src_data;
      break;
    case DSP_DISASM:
    case DSP_DISASM_V2:
      data = dbev->dis_data;
      break;
    default:
      data = 
# 4326 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 4326 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
      abort ();
    }

  if (data == 
# 4330 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 4330 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || data->get_status () != Hist_data::SUCCESS)
    return 
# 4331 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4331 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  if (begin < 0 || begin + length > data->size ())
    return 
# 4334 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4334 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  switch (type)
    {
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
    case DSP_DISASM:
    case DSP_DISASM_V2:
      {
 for (int i = begin; i < begin + length; i++)
   {
     given_func = 
# 4345 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 4345 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     ;
     Histable * sel_obj = data->fetch (i)->obj;
     if (sel_obj != 
# 4347 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null
# 4347 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       )
       given_func = (Function*) (sel_obj)->convertto (Histable::FUNCTION, (Histable*) dbev);
     if (given_func == 
# 4349 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 4349 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          )
       table->append (0);
     else
       table->append (given_func->id);
   }
      }
      break;
    default:
      abort ();
    }
  return table;
}

Vector<void*>*
dbeGetFuncCallerInfo (int dbevindex, int type, Vector<int>* idxs, int groupId)
{
  Vector<void*>* data = new Vector<void*>();
  if (type == DSP_SOURCE_V2 || type == DSP_DISASM_V2)
    {
      Obj sel_func = dbeGetSelObj (dbevindex, DSP_FUNCTION, 0);
      if (sel_func == 0)
 return data;
      Vector<Obj> * cmpObjs = dbeGetComparableObjsV2 (dbevindex, sel_func, type);
      if (cmpObjs == 
# 4372 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null
# 4372 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        )
 return data;
      DbeView *dbev = dbeSession->getView (dbevindex);
      int mtype = MET_COMMON | COMPARE_BIT | ((groupId + 1) << GROUP_ID_SHIFT);
      MetricList *mlist = dbev->get_metric_list ((MetricType) (mtype & MTYPE_MASK),
       (mtype & COMPARE_BIT) != 0,
       mtype >> GROUP_ID_SHIFT);
      Histable *selObj = (Histable *) cmpObjs->fetch (groupId);
      int subtype = 0;
      Hist_data *hist_data = dbev->get_data (mlist, selObj, type, subtype);
      if (hist_data == 
# 4382 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 4382 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          )
 return data;
    }
  for (int i = 0; i < idxs->size (); i++)
    data->append (dbeGetFuncCallerInfoById (dbevindex, type, idxs->fetch (i)));
  return data;
}





Vector<void*>*
dbeGetFuncCallerInfoById (int dbevindex, int type, int idx)
{
  Vector<void*>* table = new Vector<void*>(3);
  Vector<uint64_t>* table0 = new Vector<uint64_t> ();
  Vector<int>* table1 = new Vector<int> ();
  Vector<char*>* table2 = new Vector<char*>();

  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 4403 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 4403 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Hist_data *data;
  Function* given_func = 
# 4406 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 4406 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            ;
  Vector<Histable*> *instr_info = 
# 4407 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                 __null
# 4407 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                     ;
  switch (type)
    {
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
      data = dbev->src_data;
      break;
    case DSP_DISASM:
    case DSP_DISASM_V2:
      data = dbev->dis_data;
      break;
    default:
      data = 
# 4419 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 4419 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
      abort ();
    }
  if (data == 
# 4422 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 4422 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || data->get_status () != Hist_data::SUCCESS)
    return 
# 4423 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4423 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  if (idx < 0 || idx >= data->size ())
    return 
# 4426 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4426 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  switch (type)
    {
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
    case DSP_DISASM:
    case DSP_DISASM_V2:
      {
 Histable * sel_obj = data->fetch (idx)->obj;
 if (sel_obj == 
# 4435 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 4435 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
   return 
# 4436 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
         __null
# 4436 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
             ;
 given_func = (Function*) (sel_obj)->convertto (Histable::FUNCTION, (Histable*) dbev);
 if (given_func == 
# 4438 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 4438 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
   return 
# 4439 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
         __null
# 4439 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
             ;
 PathTree * ptree = dbev->get_path_tree ();
 if (ptree == 
# 4441 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 4441 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
   return 
# 4442 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
         __null
# 4442 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
             ;
 instr_info = ptree->get_clr_instr (given_func);
 DefaultMap<uint64_t, int> * line_seen = new DefaultMap<uint64_t, int>();
 for (int j = 0; j < ((Vector<Histable*>*)instr_info)->size (); j++)
   {
     Histable *instr = ((Vector<Histable*>*)instr_info)->fetch (j);
     Function *cur_func = 
# 4448 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 4448 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             ;
     if (instr->get_type () == Histable::INSTR)
       cur_func = ((DbeInstr*) instr)->func;
     else if (instr->get_type () == Histable::LINE)
       cur_func = ((DbeLine*) instr)->func;
     if (cur_func == 
# 4453 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null 
# 4453 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         || (cur_func->flags & FUNC_FLAG_SIMULATED))
  continue;
     Histable* line;
     switch (type)
       {
       case DSP_SOURCE:
       case DSP_SOURCE_V2:
  if (cur_func != 
# 4460 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 4460 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
    {
      SourceFile *sourceFile = cur_func->getDefSrc ();
      if (sourceFile == 
# 4463 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                       __null 
# 4463 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            ||
   (sourceFile->flags & 0x01) != 0)
        continue;
    }
  line = instr->convertto (Histable::LINE, 
# 4467 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                          __null
# 4467 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                              );
  break;
       case DSP_DISASM:
       case DSP_DISASM_V2:
  line = instr->convertto (Histable::INSTR, 
# 4471 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                           __null
# 4471 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                               );
  break;
       default:
  abort ();
       }
     uint64_t func_id = cur_func->id;
     uint64_t line_id = instr->id;
     int is_null = 0;
     int line_no = -1;
     switch (type)
       {
       case DSP_SOURCE:
       case DSP_SOURCE_V2:
  is_null = (((DbeLine*) line)->func == 
# 4484 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                       __null
# 4484 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                           ) ? 1 : 0;
  if (is_null)
    ((DbeLine*) line)->func = cur_func;
  line_no = ((DbeLine*) line)->lineno;
  if (line_seen->get (line_id) == 0)
    {
      line_seen->put (line_id, 1);
      table0->append (func_id);
      table1->append (line_no);
      Histable::NameFormat nfmt = dbev->get_name_format ();
      table2->append (dbe_strdup (line->get_name (nfmt)));
    }
  if (is_null)
    ((DbeLine*) line)->func = 
# 4497 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                             __null
# 4497 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                 ;
  break;
       case DSP_DISASM:
       case DSP_DISASM_V2:
  is_null = (((DbeInstr*) line)->func == 
# 4501 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                        __null
# 4501 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                            ) ? 1 : 0;
  if (is_null)
    ((DbeInstr*) line)->func = cur_func;
  line_no = ((DbeInstr*) line)->addr;
  if (line_seen->get (line_id) == 0)
    {
      line_seen->put (line_id, 1);
      table0->append (func_id);
      table1->append (line_no);
      Histable::NameFormat nfmt = dbev->get_name_format ();
      table2->append (dbe_strdup (line->get_name (nfmt)));
    }
  if (is_null)
    ((DbeInstr*) line)->func = 
# 4514 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                              __null
# 4514 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                  ;
  break;
       default:
  abort ();
       }
  }
 delete line_seen;
 delete instr_info;
      }
      break;
    default:
      abort ();
    }
  table->store (0, table0);
  table->store (1, table1);
  table->store (2, table2);
  return table;
}

Vector<void*>*
dbeGetFuncCalleeInfo (int dbevindex, int type, Vector<int>* idxs, int groupId)
{
  Vector<void*>* data = new Vector<void*>();
  if (type == DSP_SOURCE_V2 || type == DSP_DISASM_V2)
    {
      Obj sel_func = dbeGetSelObj (dbevindex, DSP_FUNCTION, 0);
      if (sel_func == 0)
 return data;
      Vector<Obj> * cmpObjs = dbeGetComparableObjsV2 (dbevindex, sel_func, type);
      if (cmpObjs == 
# 4543 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null
# 4543 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        )
 return data;
      DbeView *dbev = dbeSession->getView (dbevindex);
      int mtype = MET_COMMON | COMPARE_BIT | ((groupId + 1) << GROUP_ID_SHIFT);
      MetricList *mlist = dbev->get_metric_list ((MetricType) (mtype & MTYPE_MASK),
       (mtype & COMPARE_BIT) != 0,
       mtype >> GROUP_ID_SHIFT);
      Histable *selObj = (Histable *) cmpObjs->fetch (groupId);
      int subtype = 0;
      Hist_data *hist_data = dbev->get_data (mlist, selObj, type, subtype);
      if (hist_data == 
# 4553 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 4553 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          )
 return data;
    }

  for (int i = 0; i < idxs->size (); i++)
    data->append (dbeGetFuncCalleeInfoById (dbevindex, type, idxs->fetch (i)));
  return data;
}






Vector<void*>*
dbeGetFuncCalleeInfoById (int dbevindex, int type, int idx)
{
  Vector<void*>* table = new Vector<void*>(3);
  Vector<int>* table0 = new Vector<int>();
  Vector<uint64_t>* table1 = new Vector<uint64_t > ();
  Vector<char*>* table2 = new Vector<char*>();
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 4575 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 4575 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Hist_data *data;
  Function* given_func = 
# 4578 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 4578 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            ;
  Vector<Histable*> *instr_info = 
# 4579 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                 __null
# 4579 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                     ;
  Vector<void*> *func_info = 
# 4580 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                            __null
# 4580 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                ;

  switch (type)
    {
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
      data = dbev->src_data;
      break;
    case DSP_DISASM:
    case DSP_DISASM_V2:
      data = dbev->dis_data;
      break;
    default:
      data = 
# 4593 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 4593 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
      abort ();
    }
  if (data == 
# 4596 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 4596 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || data->get_status () != Hist_data::SUCCESS)
    return 
# 4597 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4597 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  if (idx < 0 || idx >= data->size ())
    return 
# 4599 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4599 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  switch (type)
    {
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
    case DSP_DISASM:
    case DSP_DISASM_V2:
      {
 Histable * sel_obj = data->fetch (idx)->obj;
 if (sel_obj == 
# 4608 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 4608 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
   return 
# 4609 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
         __null
# 4609 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
             ;
 given_func = (Function*) (sel_obj)->convertto (Histable::FUNCTION, (Histable*) dbev);
 if (given_func == 
# 4611 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 4611 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
   return 
# 4612 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
         __null
# 4612 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
             ;
 PathTree * ptree = dbev->get_path_tree ();
 if (ptree == 
# 4614 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 4614 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
   return 
# 4615 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
         __null
# 4615 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
             ;
 Vector<Histable*> *instrs = 
# 4616 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                            __null
# 4616 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                ;
 Vector<void*> *callee_instrs = ptree->get_cle_instr (given_func, instrs);
 func_info = new Vector<void*>();
 instr_info = new Vector<Histable*>();
 for (long a = 0, sz_a = callee_instrs ? callee_instrs->size () : 0; a < sz_a; a++)
   {
     Vector<Histable*> *temp = ((Vector<Vector<Histable*>*>*)callee_instrs)->get (a);
     DefaultMap<Function*, int> * func_seen = new DefaultMap<Function*, int>();
     Histable* instr0 = (Histable*) instrs->fetch (a);
     for (long b = 0, sz_b = temp ? temp->size () : 0; b < sz_b; b++)
       {
  Histable *instr = temp->get (b);
  if (instr->get_type () == Histable::INSTR)
    {
      Function* func1 = ((DbeInstr *) instr)->func;
      func_seen->put (func1, 1);
    }
  else if (instr->get_type () == Histable::LINE)
    {
      Function* func1 = ((DbeLine *) instr)->func;
      func_seen->put (func1, 1);
    }
       }
     Vector<Function*> *funcs = func_seen->keySet ();
     delete func_seen;
     if (funcs->size () > 0)
       {
  instr_info->append (instr0);
  func_info->append (funcs);
       }
   }
 delete instrs;
 destroy (callee_instrs);

 DefaultMap<uint64_t, Vector<int>* > * instr_idxs = new DefaultMap<uint64_t, Vector<int>* >();
 DefaultMap<uint64_t, int> * func_idxs = new DefaultMap<uint64_t, int>();
 for (long j = 0, sz_j = instr_info ? instr_info->size () : 0; j < sz_j; j++)
   {
     Histable *instr = instr_info->get (j);
     Function *cur_func = 
# 4655 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 4655 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             ;
     if (instr->get_type () == Histable::INSTR)
       cur_func = ((DbeInstr*) instr)->func;
     else if (instr->get_type () == Histable::LINE)
       cur_func = ((DbeLine*) instr)->func;
     if (cur_func != 
# 4660 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null 
# 4660 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         && (cur_func->flags & FUNC_FLAG_SIMULATED))
       continue;
     Histable* line;
     switch (type)
       {
       case DSP_SOURCE:
       case DSP_SOURCE_V2:
  if (cur_func != 
# 4667 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 4667 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
    {
      SourceFile *sourceFile = cur_func->getDefSrc ();
      if (sourceFile == 
# 4670 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                       __null 
# 4670 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            ||
   (sourceFile->flags & 0x01) != 0)

        continue;
    }
  line = instr->convertto (Histable::LINE, 
# 4675 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                          __null
# 4675 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                              );
  if (type == DSP_SOURCE_V2)
    line = dbev->get_compare_obj (line);
  break;
       case DSP_DISASM:
       case DSP_DISASM_V2:
  line = instr;
  if (type == DSP_DISASM_V2)
    line = dbev->get_compare_obj (line);
  break;
       default:
  abort ();
       }
     if (func_idxs->get (line->id) == 0)
       {
  func_idxs->put (line->id, 1);
  Vector<int> *temp_idx = new Vector<int>();
  temp_idx->append (j);
  instr_idxs->put (line->id, temp_idx);
       }
     else
       {
  Vector<int> *temp_idx = instr_idxs->get (line->id);
  temp_idx->append (j);
       }
   }
 for (long i = 0; i < data->size (); i++)
   {
     Histable* line = data->fetch (i)->obj;
     if (line == 
# 4704 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 4704 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
       continue;
     Vector<int> * instr_idx = instr_idxs->get (line->id);
     if (instr_idx == 
# 4707 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 4707 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         )
       continue;
     for (long j = 0; j < instr_idx->size (); j++)
       {
  Vector<void*>* callee_funcs_vec = (Vector<void*>*)func_info;
  if (callee_funcs_vec->size () == 0)
    continue;
  Vector<Function*>* callee_funcs_value = (Vector<Function*>*)callee_funcs_vec->fetch (instr_idx->fetch (j));
  for (int k = 0; callee_funcs_value != 
# 4715 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                       __null 
# 4715 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                            && k < callee_funcs_value->size (); k++)
    {
      uint64_t funcobj_id = ((Function*) callee_funcs_value->fetch (k))->id;
      int old_size = table0->size ();
      if (old_size > 0 && i == table0->fetch (old_size - 1)
   && funcobj_id == table1->fetch (old_size - 1))
        continue;
      table0->append (i);
      table1->append (funcobj_id);
      table2->append (dbe_strdup (((Function*) callee_funcs_value->fetch (k))->get_name ()));
    }
       }
   }
 delete instr_idxs;
 delete func_idxs;
 destroy (func_info);
 delete instr_info;
      }
      break;
    default:
      abort ();
    }
  table->store (0, table0);
  table->store (1, table1);
  table->store (2, table2);
  return table;
}




Vector<void*> *
dbeGetFuncListMini (int dbevindex, int type, int )
{
  Hist_data *data;
  DbeView *dbev = dbeSession->getView (dbevindex);
  switch (type)
    {
    case DSP_FUNCTION:
      data = dbev->func_data;
      break;
    default:
      data = 
# 4757 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 4757 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
      break;
    }
  if (data == 
# 4760 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 4760 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || data->get_status () != Hist_data::SUCCESS)
    return 
# 4761 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4761 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  MetricList *mlist = data->get_metric_list ();


  int nvisible = 0;
  for (long i = 0, sz = mlist->size (); i < sz; i++)
    {
      Metric *m = mlist->get (i);
      if (m->is_visible () || m->is_tvisible () || m->is_pvisible ())
 nvisible++;
    }
  Vector<void*> *table = new Vector<void*>(nvisible + 1);


  Hist_data::HistItem *totals = data->get_totals ();
  for (long i = 0, sz = mlist->size (); i < sz; i++)
    {
      Metric *m = mlist->get (i);
      if (!m->is_visible () && !m->is_tvisible () && !m->is_pvisible ())
 continue;
      TValue res;
      TValue *v = data->get_value (&res, i, totals);
      if ((m->get_visbits () & VAL_RATIO) != 0)
 {
   Vector<double> *col = new Vector<double>(1);
   double d = (v->tag != VT_LABEL) ? v->to_double () : 100.;
   col->append (d);
   table->append (col);
   continue;
 }
      switch (m->get_vtype ())
 {
 case VT_INT:
   {
     Vector<int> *col = new Vector<int>(1);
     col->append (v->i);
     table->append (col);
     break;
   }
 case VT_ADDRESS:
 case VT_ULLONG:
 case VT_LLONG:
   {
     Vector<long long> *col = new Vector<long long>(1);
     col->append (v->ll);
     table->append (col);
     break;
   }
 case VT_LABEL:
   {
     Vector<char *> *col = new Vector<char *>(1);
     col->append (dbe_strdup (v->l));
     table->append (col);
     break;
   }
 case VT_DOUBLE:
 default:
   {
     Vector<double> *col = new Vector<double>(1);
     col->append (v->d);
     table->append (col);
     break;
   }
 }
    }
  table->append (
# 4827 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 4827 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    );
  return table;
}


Vector<void*> *
dbeGetFuncList (int dbevindex, int type, int subtype)
{
  MetricList *mlist;
  Metric *mitem;
  int nitems, nvisible;
  int index, index2, nv;
  char *cell;
  Vector<int> *ji_list;
  Hist_data *data;
  Hist_data::HistItem *item;

  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 4845 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 4845 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();


  switch (type)
    {
    case DSP_FUNCTION:
      data = dbev->func_data;
      break;
    case DSP_LINE:
      data = dbev->line_data;
      break;
    case DSP_PC:
      data = dbev->pc_data;
      break;
    case DSP_SOURCE:
    case DSP_SOURCE_V2:
      data = dbev->src_data;
      break;
    case DSP_DISASM:
    case DSP_DISASM_V2:
      data = dbev->dis_data;
      break;
    case DSP_SELF:
      data = dbev->fitem_data;
      break;
    case DSP_CALLER:
      data = dbev->callers;
      break;
    case DSP_CALLEE:
      data = dbev->callees;
      break;
    case DSP_DLAYOUT:
      data = dbev->dlay_data;
      break;
    case DSP_DATAOBJ:
      data = dbev->dobj_data;
      break;
    case DSP_MEMOBJ:
    case DSP_INDXOBJ:
      data = dbev->get_indxobj_data (subtype);
      break;
    default:
      data = 
# 4888 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 4888 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
      break;
    }
  if (data == 
# 4891 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 4891 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || data->get_status () != Hist_data::SUCCESS)
    return 
# 4892 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 4892 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  mlist = data->get_metric_list ();


  nitems = data->size ();
  nvisible = 0;
  if (mlist->get_items () != 
# 4898 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 4898 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, mitem = ((mlist->get_items ())->size() > 0) ? (mlist->get_items ())->fetch(0) : (Metric*)0; index < (mlist->get_items ())->size(); mitem = (++index < (mlist->get_items ())->size()) ? (mlist->get_items ())->fetch(index) : (Metric*)0)
  {
    if (mitem->is_visible () || mitem->is_tvisible () || mitem->is_pvisible ())
      nvisible++;
  }


  Vector<void*> *table = new Vector<void*>(nvisible + 1);


  if (type == DSP_SOURCE || type == DSP_DISASM || type == DSP_DLAYOUT
      || type == DSP_SOURCE_V2 || type == DSP_DISASM_V2)
    {
      ji_list = new Vector<int>(nitems);

      if (dbev->marks->size () > 0)
 index = dbev->marks->fetch (0);
      else
 index = -1;
      int mindex = 0;
      for (index2 = 0; index2 < nitems; index2++)
 {
   item = data->fetch (index2);
   if (index2 == index)
     {
       ji_list->store (index2, -item->type);
       if (++mindex < dbev->marks->size ())
  index = dbev->marks->fetch (mindex);
       else
  index = -1;
     }
   else
     ji_list->store (index2, item->type);
 }
      table->store (nvisible, ji_list);
    }
  else
    table->store (nvisible, 
# 4935 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                           __null
# 4935 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                               );


  nv = 0;

  if (mlist->get_items () != 
# 4940 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 4940 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, mitem = ((mlist->get_items ())->size() > 0) ? (mlist->get_items ())->fetch(0) : (Metric*)0; index < (mlist->get_items ())->size(); mitem = (++index < (mlist->get_items ())->size()) ? (mlist->get_items ())->fetch(index) : (Metric*)0)
  {
    if (!mitem->is_visible () && !mitem->is_tvisible () &&
 !mitem->is_pvisible ())
      continue;


    switch (mitem->get_vtype ())
      {
      case VT_LABEL:
 {
   Vector<char*> *jobjects = new Vector<char*>(nitems);
   char *buf = 
# 4952 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 4952 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  ;
   size_t bufsz = 0;
   int lspace = 0;
   if (type == DSP_SOURCE || type == DSP_DISASM || type == DSP_SOURCE_V2
       || type == DSP_DISASM_V2)
     {




       bufsz = 1024;
       buf = (char *) malloc (bufsz);
       int max_lineno = 0;
       int hidx;
       Hist_data::HistItem *hitem;
       if (data != 
# 4967 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
      __null
# 4967 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
      ) for (hidx = 0, hitem = ((data)->size() > 0) ? (data)->fetch(0) : (Hist_data::HistItem*)0; hidx < (data)->size(); hitem = (++hidx < (data)->size()) ? (data)->fetch(hidx) : (Hist_data::HistItem*)0)
       {
  if (!hitem->obj)
    continue;
  if (hitem->obj->get_type () == Histable::LINE &&
      ((DbeLine*) hitem->obj)->lineno > max_lineno)
    max_lineno = ((DbeLine*) hitem->obj)->lineno;
  else if (hitem->obj->get_type () == Histable::INSTR
    && ((DbeInstr*) hitem->obj)->lineno > max_lineno)
    max_lineno = ((DbeInstr*) hitem->obj)->lineno;
       }



       lspace = snprintf (buf, bufsz, ((char *) ("%d")), max_lineno);
     }
   for (index2 = 0; index2 < nitems; index2++)
     {
       item = data->fetch (index2);
       if (type == DSP_DLAYOUT)
  cell = dbe_strdup (((DataObject*) (item->obj))->get_offset_name ());
       else if (type == DSP_SOURCE || type == DSP_DISASM || type == DSP_SOURCE_V2 || type == DSP_DISASM_V2)
  {



    switch (item->type)
      {
      case Module::AT_SRC_ONLY:
      case Module::AT_SRC:
        if (item->obj == 
# 4997 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 4997 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            )
   snprintf (buf, bufsz, ((char *) (" %*c. ")), lspace, ' ');
        else
   snprintf (buf, bufsz, ((char *) (" %*d. ")), lspace, ((DbeLine*) item->obj)->lineno);
        break;
      case Module::AT_FUNC:
      case Module::AT_QUOTE:
        snprintf (buf, bufsz, ((char *) ("%*c")), lspace + 3, ' ');
        break;
      case Module::AT_DIS:
      case Module::AT_DIS_ONLY:
        if (item->obj == 
# 5008 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null 
# 5008 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             || ((DbeInstr*) item->obj)->lineno == -1)
   snprintf (buf, bufsz, ((char *) ("%*c[%*s] ")), lspace + 3, ' ', lspace, ((char *) ("?")));
        else
   snprintf (buf, bufsz, ((char *) ("%*c[%*d] ")), lspace + 3, ' ', lspace,
      ((DbeInstr*) item->obj)->lineno);
        break;
      case Module::AT_COM:
      case Module::AT_EMPTY:
        *buf = (char) 0;
        break;
      }

    char *s = item->value[index].l;
    if (s != 
# 5021 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 5021 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
      {


        char *d = buf + strlen (buf);
        char c;
        size_t column = 0;
        do
   {
     c = *s++;
     if (c == '\t')
       {
         do
    {
      *d++ = ' ';
      column++;
    }
         while (column & 07);
       }
     else
       {
         *d++ = c;
         column++;
       }
     if (column + 32 > bufsz)
       {

         size_t curlen = d - buf;
         bufsz += 1024;
         char *buf_new = (char *) malloc (bufsz);
         strncpy (buf_new, buf, curlen);
         buf_new[curlen] = '\0';
         free (buf);
         buf = buf_new;
         d = buf + curlen;
       }
   }
        while (c != (char) 0);
      }
    cell = dbe_strdup (buf);
    free (item->value[index].l);
    item->value[index].l = 
# 5062 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                          __null
# 5062 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                              ;
  }
       else
  {

    Histable::NameFormat nfmt = dbev->get_name_format ();
    cell = dbe_strdup (item->obj->get_name (nfmt));
  }
       jobjects->store (index2, cell);
     }
   if (type == DSP_SOURCE || type == DSP_DISASM || type == DSP_SOURCE_V2
       || type == DSP_DISASM_V2)
     free (buf);
   table->store (nv++, jobjects);
   break;
 }
      default:
 table->store (nv++, dbeGetTableDataOneColumn (data, index));
 break;
      }
  }
  return table;
}

Vector<Obj> *
dbeGetComparableObjsV2 (int , Obj sel_obj, int type)
{
  long grsize = dbeSession->expGroups->size ();
  Vector<Obj> *res = new Vector<Obj> (grsize + 1);
  for (long j = 0; j < grsize; j++)
    res->append ((Obj) 
# 5092 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 5092 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          );
  res->append (sel_obj);
  Histable *obj = (Histable *) sel_obj;
  if (obj == 
# 5095 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 5095 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    return res;
  Function *func = (Function *) obj->convertto (Histable::FUNCTION);
  if (func == 
# 5098 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5098 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    return res;
  Vector<Histable *> *cmpObjs = func->get_comparable_objs ();
  if (cmpObjs == 
# 5101 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null 
# 5101 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     || cmpObjs->size () != grsize)
    return res;

  Histable::Type conv_type = (type == DSP_SOURCE || type == DSP_SOURCE_V2) ?
   Histable::LINE : Histable::INSTR;
  switch (obj->get_type ())
    {
    case Histable::FUNCTION:
      for (long j = 0; j < grsize; j++)
 res->store (j, (Obj) cmpObjs->get (j));
      return res;
    case Histable::INSTR:
    case Histable::LINE:
      {
 SourceFile *srcContext = (SourceFile *) obj->convertto (Histable::SOURCEFILE);
 char *bname = get_basename (srcContext->get_name ());
 for (long j = 0; j < grsize; j++)
   {
     Function *func1 = (Function *) cmpObjs->get (j);
     if (func == func1)
       {
  if (conv_type == Histable::LINE)
    res->store (j, (Obj) obj);
  else
    res->store (j, (Obj) obj->convertto (conv_type, srcContext));
  continue;
       }
     if (func1 == 
# 5128 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 5128 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
       continue;
     Vector<SourceFile*> *sources = func1->get_sources ();
     SourceFile *sf = 
# 5131 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 5131 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         ;
     for (long j1 = 0, sz1 = sources ? sources->size () : 0; j1 < sz1; j1++)
       {
  SourceFile *sf1 = sources->get (j1);
  if (sf1 == srcContext)
    {
      sf = srcContext;
      break;
    }
  else if (sf == 
# 5140 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 5140 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    {
      char *bname1 = get_basename (sf1->get_name ());
      if (dbe_strcmp (bname, bname1) == 0)
        sf = sf1;
    }
       }
     res->store (j, (Obj) func1->convertto (conv_type, srcContext));
   }
 break;
      }
    default:
      break;
    }
  return res;
}


Vector<void *> *
dbeGetFuncListV2 (int dbevindex, int mtype, Obj sel_obj, int type, int subtype)
{
  Metric *mitem;
  int nitems, nvisible;
  int index, index2, nv;
  char *cell;
  Hist_data::HistItem *item;
  DbeView *dbev = dbeSession->getView (dbevindex);
  dbev->error_msg = dbev->warning_msg = 
# 5167 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                       __null
# 5167 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                           ;
  MetricList *mlist = dbev->get_metric_list ((MetricType) (mtype & MTYPE_MASK),
          (mtype & COMPARE_BIT) != 0,
          mtype >> GROUP_ID_SHIFT);
  Histable *selObj = (Histable *) sel_obj;
  int old_compare_mode = dbev->get_compare_mode ();
  if ((mtype & COMPARE_BIT) != 0)
    dbev->reset_compare_mode (CMP_DISABLE);
  Hist_data *data = dbev->get_data (mlist, selObj, type, subtype);
  dbev->reset_compare_mode (old_compare_mode);
  if (data == 
# 5177 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 5177 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || data->get_status () != Hist_data::SUCCESS)
    return 
# 5178 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5178 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  nitems = data->size ();
  nvisible = mlist->get_items ()->size ();


  Vector<void*> *table = new Vector<void*>(nvisible + 3);

  if (type == DSP_SOURCE || type == DSP_DISASM || type == DSP_DLAYOUT
      || type == DSP_SOURCE_V2 || type == DSP_DISASM_V2)
    {
      Vector<int> *types = new Vector<int>(nitems);
      Vector<Obj> *ids = new Vector<Obj > (nitems);
      if (dbev->marks->size () > 0)
 index = dbev->marks->fetch (0);
      else
 index = -1;
      int mindex = 0;
      for (int i = 0; i < nitems; i++)
 {
   item = data->fetch (i);
   ids->store (i, (Obj) item->obj);
   if (i == index)
     {
       types->store (i, -item->type);
       if (++mindex < dbev->marks->size ())
  index = dbev->marks->fetch (mindex);
       else
  index = -1;
     }
   else
     types->store (i, item->type);
 }
      table->store (nvisible, types);
      table->store (nvisible + 1, ids);
    }
  else
    {
      table->store (nvisible, 
# 5215 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                             __null
# 5215 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                 );
      table->store (nvisible + 1, 
# 5216 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                 __null
# 5216 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                     );
    }


  nv = 0;
  if (mlist->get_items () != 
# 5221 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 5221 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, mitem = ((mlist->get_items ())->size() > 0) ? (mlist->get_items ())->fetch(0) : (Metric*)0; index < (mlist->get_items ())->size(); mitem = (++index < (mlist->get_items ())->size()) ? (mlist->get_items ())->fetch(index) : (Metric*)0)
  {
    if (!mitem->is_visible () && !mitem->is_tvisible () &&
 !mitem->is_pvisible ())
      continue;


    switch (mitem->get_vtype ())
      {
      default:
 table->store (nv++, dbeGetTableDataOneColumn (data, index));
 break;
      case VT_LABEL:
 Vector<char*> *jobjects = new Vector<char*>(nitems);
 char *buf = 
# 5235 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 5235 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
 size_t bufsz = 0;
 int lspace = 0;
 if (type == DSP_SOURCE || type == DSP_DISASM || type == DSP_SOURCE_V2
     || type == DSP_DISASM_V2)
   {




     bufsz = 1024;
     buf = (char *) malloc (bufsz);
     int max_lineno = 0;
     int hidx;
     Hist_data::HistItem *hitem;
     if (data != 
# 5250 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
    __null
# 5250 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
    ) for (hidx = 0, hitem = ((data)->size() > 0) ? (data)->fetch(0) : (Hist_data::HistItem*)0; hidx < (data)->size(); hitem = (++hidx < (data)->size()) ? (data)->fetch(hidx) : (Hist_data::HistItem*)0)
     {
       if (!hitem->obj)
  continue;
       if (hitem->obj->get_type () == Histable::LINE &&
    ((DbeLine*) hitem->obj)->lineno > max_lineno)
  max_lineno = ((DbeLine*) hitem->obj)->lineno;
       else if (hitem->obj->get_type () == Histable::INSTR
         && ((DbeInstr*) hitem->obj)->lineno > max_lineno)
  max_lineno = ((DbeInstr*) hitem->obj)->lineno;
     }



     lspace = snprintf (buf, bufsz, ((char *) ("%d")), max_lineno);
   }

 for (index2 = 0; index2 < nitems; index2++)
   {
     item = data->fetch (index2);
     if (type == DSP_DLAYOUT)
       cell = dbe_strdup (((DataObject*) (item->obj))->get_offset_name ());
     else if (type == DSP_SOURCE || type == DSP_DISASM || type == DSP_SOURCE_V2 || type == DSP_DISASM_V2)
       {



  switch (item->type)
    {
    case Module::AT_SRC_ONLY:
    case Module::AT_SRC:
      if (item->obj == 
# 5281 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 5281 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          )
        snprintf (buf, bufsz, ((char *) (" %*c. ")), lspace, ' ');
      else
        snprintf (buf, bufsz, ((char *) (" %*d. ")), lspace,
    ((DbeLine*) item->obj)->lineno);
      break;
    case Module::AT_FUNC:
    case Module::AT_QUOTE:
      snprintf (buf, bufsz, ((char *) ("%*c")), lspace + 3, ' ');
      break;
    case Module::AT_DIS:
    case Module::AT_DIS_ONLY:
      if (item->obj == 
# 5293 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null 
# 5293 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                           || ((DbeInstr*) item->obj)->lineno == -1)
        snprintf (buf, bufsz, ((char *) ("%*c[%*s] ")), lspace + 3, ' ',
    lspace, ((char *) ("?")));
      else
        snprintf (buf, bufsz, ((char *) ("%*c[%*d] ")), lspace + 3, ' ',
    lspace,
    ((DbeInstr*) item->obj)->lineno);
      break;
    case Module::AT_COM:
    case Module::AT_EMPTY:
      *buf = (char) 0;
      break;
    }

  char *s = item->value[index].l;
  if (s != 
# 5308 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5308 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              )
    {


      char *d = buf + strlen (buf);
      char c;
      size_t column = 0;
      do
        {
   c = *s++;
   if (c == '\t')
     {
       do
         {
    *d++ = ' ';
    column++;
         }
       while (column & 07);
     }
   else
     {
       *d++ = c;
       column++;
     }
   if (column + 32 > bufsz)
     {

       size_t curlen = d - buf;
       bufsz += 1024;
       char *buf_new = (char *) malloc (bufsz);
       strncpy (buf_new, buf, curlen);
       buf_new[curlen] = '\0';
       free (buf);
       buf = buf_new;
       d = buf + curlen;
     }
        }
      while (c != (char) 0);
    }
  cell = dbe_strdup (buf);
       }
     else
       {
  Histable::NameFormat nfmt = dbev->get_name_format ();
  cell = dbe_strdup (item->obj->get_name (nfmt));
       }
     jobjects->store (index2, cell);
   }

 if (type == DSP_SOURCE || type == DSP_DISASM || type == DSP_SOURCE_V2
     || type == DSP_DISASM_V2)
   free (buf);
 table->store (nv++, jobjects);
 break;
      }
  }
  table->append (dbeGetMetricList (mlist));
  return table;
}




Vector<void*> *
dbeGetTableDataV2 (int dbevindex, char *mlistStr, char *modeStr, char *typeStr,
     char *subtypeStr, Vector<uint64_t> *ids)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 5376 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5376 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();


  if (mlistStr == 
# 5380 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 5380 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
    return 
# 5381 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5381 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  bool met_call = false;
  MetricList *mlist = 
# 5383 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 5383 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         ;
  if (streq (mlistStr, ((char *) ("MET_NORMAL"))))
    mlist = dbev->get_metric_list (MET_NORMAL);
  else if (streq (mlistStr, ((char *) ("MET_CALL"))))
    {
      met_call = true;
      mlist = dbev->get_metric_list (MET_CALL);
    }
  else if (streq (mlistStr, ((char *) ("MET_CALL_AGR"))))
    mlist = dbev->get_metric_list (MET_CALL_AGR);
  else if (streq (mlistStr, ((char *) ("MET_DATA"))))
    mlist = dbev->get_metric_list (MET_DATA);
  else if (streq (mlistStr, ((char *) ("MET_INDX"))))
    mlist = dbev->get_metric_list (MET_INDX);
  else if (streq (mlistStr, ((char *) ("MET_IO"))))
    mlist = dbev->get_metric_list (MET_IO);
  else if (streq (mlistStr, ((char *) ("MET_HEAP"))))
    mlist = dbev->get_metric_list (MET_HEAP);
  else
    return 
# 5402 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5402 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  if (modeStr == 
# 5405 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 5405 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    return 
# 5406 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5406 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  Hist_data::Mode mode = (Hist_data::Mode)0;
  if (streq (modeStr, ((char *) ("CALLERS"))))
    mode = Hist_data::CALLERS;
  else if (streq (modeStr, ((char *) ("CALLEES"))))
    mode = Hist_data::CALLEES;
  else if (streq (modeStr, ((char *) ("SELF"))))
    mode = Hist_data::SELF;
  else if (streq (modeStr, ((char *) ("ALL"))))
    mode = Hist_data::ALL;
  else
    return 
# 5417 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5417 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  if (typeStr == 
# 5420 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 5420 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    return 
# 5421 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5421 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  Histable::Type type = Histable::OTHER;
  if (streq (typeStr, ((char *) ("FUNCTION"))))
    type = Histable::FUNCTION;
  else if (streq (typeStr, ((char *) ("INDEXOBJ"))))
    type = Histable::INDEXOBJ;
  else if (streq (typeStr, ((char *) ("IOACTFILE"))))
    type = Histable::IOACTFILE;
  else if (streq (typeStr, ((char *) ("IOACTVFD"))))
    type = Histable::IOACTVFD;
  else if (streq (typeStr, ((char *) ("IOCALLSTACK"))))
    type = Histable::IOCALLSTACK;
  else if (streq (typeStr, ((char *) ("HEAPCALLSTACK"))))
    type = Histable::HEAPCALLSTACK;
  else if (streq (typeStr, ((char *) ("LINE"))))
    type = Histable::LINE;
  else if (streq (typeStr, ((char *) ("INSTR"))))
    type = Histable::INSTR;
  else


    return 
# 5442 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5442 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  int subtype = 0;
  if (subtypeStr != 
# 5446 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null
# 5446 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       )
    subtype = atoi (subtypeStr);
  Vector<Histable*> *hobjs = 
# 5448 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                            __null
# 5448 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                ;
  if (ids != 
# 5449 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 5449 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    {
      hobjs = new Vector<Histable*>();
      for (int i = 0; i < ids->size (); ++i)
 {
   Histable::Type obj_type = type;
   if ((obj_type == Histable::LINE || obj_type == Histable::INSTR)
       && subtype == 0)
     obj_type = Histable::FUNCTION;
   Histable *hobj = dbeSession->findObjectById (obj_type, subtype, ids->fetch (i));
   if ((obj_type == Histable::LINE || obj_type == Histable::INSTR)
       && subtype == 0 && hobj == 
# 5460 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                 __null
# 5460 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                     )
     return 
# 5461 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
           __null
# 5461 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
               ;
   hobjs->append (hobj);
 }
    }

  PathTree::PtreeComputeOption flag = PathTree::COMPUTEOPT_NONE;
  if (dbev->isOmpDisMode () && type == Histable::FUNCTION
      && mode == Hist_data::CALLEES && met_call)
    flag = PathTree::COMPUTEOPT_OMP_CALLEE;

  Hist_data *data = dbev->get_hist_data (mlist, type, subtype, mode, hobjs, 
# 5471 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                                           __null
# 5471 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                               , 
# 5471 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                                                 __null
# 5471 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                                     , flag);
  return dbeGetTableDataV2Data (dbev, data);
}

static Vector<void*> *
dbeGetTableDataV2Data (DbeView * , Hist_data *data)
{
  if (data == 
# 5478 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 5478 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || data->get_status () != Hist_data::SUCCESS)
    return 
# 5479 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5479 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  MetricList *mlist;
  mlist = data->get_metric_list ();
  int nitems = data->size ();


  Vector<void*> *table = new Vector<void*>(mlist->size () + 1);


  for (long i = 0, sz = mlist->size (); i < sz; i++)
    {
      Metric *mitem = mlist->get (i);
      if (!mitem->is_visible () && !mitem->is_tvisible () &&
   !mitem->is_pvisible ())
 continue;
      table->append (dbeGetTableDataOneColumn (data, i));
    }


  Vector<uint64_t> *idList = new Vector<uint64_t>(nitems);
  for (int i = 0; i < nitems; ++i)
    {
      Hist_data::HistItem *item = data->fetch (i);
      if (item->obj->get_type () == Histable::LINE
   || item->obj->get_type () == Histable::INSTR)
 idList->store (i, (uint64_t) (item->obj));
      else
 idList->store (i, item->obj->id);
    }
  table->append (idList);
  return table;
}



static Vector<void*> *
dbeGetTableDataOneColumn (Hist_data *data, int met_ind)
{

  TValue res;
  Metric *m = data->get_metric_list ()->get (met_ind);
  if ((m->get_visbits () & VAL_RATIO) != 0)
    {
      Vector<double> *col = new Vector<double>(data->size ());
      for (long row = 0, sz_row = data->size (); row < sz_row; row++)
 {
   TValue *v = data->get_value (&res, met_ind, row);
   double d = (v->tag != VT_LABEL) ? v->to_double () : 100.;
   col->append (d);
 }
      return (Vector<void*> *) col;
    }

  switch (m->get_vtype ())
    {
    case VT_DOUBLE:
      {
 Vector<double> *col = new Vector<double>(data->size ());
 for (long row = 0, sz_row = data->size (); row < sz_row; row++)
   {
     TValue *v = data->get_value (&res, met_ind, row);
     col->append (v->d);
   }
 return (Vector<void*> *) col;
      }
    case VT_INT:
      {
 Vector<int> *col = new Vector<int>(data->size ());
 for (long row = 0, sz_row = data->size (); row < sz_row; row++)
   {
     TValue *v = data->get_value (&res, met_ind, row);
     col->append (v->i);
   }
 return (Vector<void*> *) col;
      }
    case VT_ULLONG:
    case VT_LLONG:
      {
 Vector<long long> *col = new Vector<long long>(data->size ());
 for (long row = 0, sz_row = data->size (); row < sz_row; row++)
   {
     TValue *v = data->get_value (&res, met_ind, row);
     col->append (v->ll);
   }
 return (Vector<void*> *) col;
      }
    case VT_ADDRESS:
      {
 Vector<long long> *col = new Vector<long long>(data->size ());
 for (long row = 0, sz_row = data->size (); row < sz_row; row++)
   {
     TValue *v = data->get_value (&res, met_ind, row);


     col->append (v->ll | 0x8000000000000000ULL);
   }
 return (Vector<void*> *) col;
      }
    case VT_LABEL:
      {
 Vector<char *> *col = new Vector<char *>(data->size ());
 for (long row = 0, sz_row = data->size (); row < sz_row; row++)
   {
     TValue *v = data->get_value (&res, met_ind, row);
     col->append (dbe_strdup (v->l));
   }
 return (Vector<void*> *) col;
      }
    default:
      return 
# 5588 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 5588 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
    }
}

static Vector<void*> *
dbeGetTableDataOneColumn (DbeView *dbev, Vector<Hist_data::HistItem*> *data,
     ValueTag vtype, int metricColumnNumber)

{
  Vector<void*> *column_data = 
# 5597 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                              __null
# 5597 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                  ;
  int nitems = data->size ();
  int index = metricColumnNumber;
  switch (vtype)
    {
    case VT_DOUBLE:
      {
 Vector<double> *jd_list = new Vector<double>(nitems);
 for (int index2 = 0; index2 < nitems; index2++)
   {
     Hist_data::HistItem *item = data->fetch (index2);
     jd_list->store (index2, item->value[index].d);
   }
 column_data = (Vector<void*> *)jd_list;
 break;
      }
    case VT_INT:
      {
 Vector<int> *ji_list = new Vector<int>(nitems);
 for (int index2 = 0; index2 < nitems; index2++)
   {
     Hist_data::HistItem *item = data->fetch (index2);
     ji_list->store (index2, item->value[index].i);
   }
 column_data = (Vector<void*> *)ji_list;
 break;
      }
    case VT_ULLONG:
    case VT_LLONG:
      {
 Vector<long long> *jl_list = new Vector<long long>(nitems);
 for (int index2 = 0; index2 < nitems; index2++)
   {
     Hist_data::HistItem *item = data->fetch (index2);
     jl_list->store (index2, item->value[index].ll);
   }
 column_data = (Vector<void*> *)jl_list;
 break;
      }
    case VT_ADDRESS:
      {
 Vector<long long> *jl_list = new Vector<long long>(nitems);
 for (int index2 = 0; index2 < nitems; index2++)
   {
     Hist_data::HistItem *item = data->fetch (index2);



     uint64_t addr = item->value[index].ll;
     addr |= 0x8000000000000000ULL;
     jl_list->store (index2, addr);
   }
 column_data = (Vector<void*> *)jl_list;
 break;
      }
    case VT_LABEL:
      {
 Vector<char*> *jobjects = new Vector<char*>(nitems);
 for (int index2 = 0; index2 < nitems; index2++)
   {
     Hist_data::HistItem *item = data->fetch (index2);


     Histable::NameFormat nfmt = dbev->get_name_format ();
     char *str = dbe_strdup (item->obj->get_name (nfmt));
     jobjects->store (index2, str);
   }
 column_data = (Vector<void*> *)jobjects;
 break;
      }
    default:
      abort ();
    }
  return column_data;
}

int
dbeGetCallTreeNumLevels (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 5677 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5677 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  PathTree * ptree = dbev->get_path_tree ();
  if (ptree == 
# 5680 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 5680 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
    return 0;
  return ptree->get_ftree_depth ();
}

Vector<void*>*
dbeGetCallTreeLevel (int dbevindex, char *mcmd, int level)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 5689 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5689 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  PathTree * ptree = dbev->get_path_tree ();
  if (ptree == 
# 5692 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 5692 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
    return 
# 5693 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5693 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  if (mcmd == 
# 5694 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5694 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    return 
# 5695 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5695 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  BaseMetric *bm = dbeSession->find_base_reg_metric (mcmd);
  if (bm == 
# 5697 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
           __null
# 5697 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
               )
    return 
# 5698 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5698 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  return ptree->get_ftree_level (bm, level);
}

Vector<void*>*
dbeGetCallTreeLevels (int dbevindex, char *mcmd)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 5706 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5706 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  PathTree * ptree = dbev->get_path_tree ();
  if (ptree == 
# 5709 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 5709 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
    return 
# 5710 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5710 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  if (mcmd == 
# 5711 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5711 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    return 
# 5712 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5712 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  BaseMetric *bm = dbeSession->find_base_reg_metric (mcmd);
  if (bm == 
# 5714 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
           __null
# 5714 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
               )
    return 
# 5715 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5715 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  int depth = ptree->get_ftree_depth ();
  Vector<void*> *results = new Vector<void*>(depth);
  for (int ii = 0; ii < depth; ii++)
    results->append (ptree->get_ftree_level (bm, ii));
  return results;
}

Vector<void*>*
dbeGetCallTreeLevelFuncs (int dbevindex, int start_level, int end_level)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 5728 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5728 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  PathTree * ptree = dbev->get_path_tree ();
  if (ptree == 
# 5731 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 5731 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
    return 
# 5732 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5732 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  int depth = ptree->get_ftree_depth ();
  if (start_level < 0)
    start_level = 0;
  if (end_level < 0 || end_level >= depth)
    end_level = depth - 1;

  Histable::NameFormat nfmt = dbev->get_name_format ();
  Vector<char*> *funcNames = new Vector<char*>();
  Vector<long long> *funcIds = new Vector<long long>();
  Vector<Obj> *funcObjs = new Vector<Obj>();

  if (start_level == 0 && end_level == depth - 1)
    return dbeGetCallTreeFuncs (dbevindex);
  else
    {
      for (int ii = start_level; ii <= end_level; ii++)
 {
   Vector<void*> *info = ptree->get_ftree_level (
# 5751 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                __null
# 5751 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                    , ii);
   if (!info)
     continue;
   Vector<long long> *fids = (Vector<long long> *)info->get (2);
   if (!fids)
     continue;
   int index;
   long long fid;
   if (fids != 
# 5759 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
  __null
# 5759 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
  ) for (index = 0, fid = ((fids)->size() > 0) ? (fids)->fetch(0) : (long long)0; index < (fids)->size(); fid = (++index < (fids)->size()) ? (fids)->fetch(index) : (long long)0)
   {
     funcIds->append (fid);
     Histable *obj = dbeSession->findObjectById (fid);
     char * fname = obj ? dbe_strdup (obj->get_name (nfmt)) : 
# 5763 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                             __null
# 5763 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                 ;
     funcNames->append (fname);
     funcObjs->append ((unsigned long) obj);
   }
   destroy (info);
 }
    }
  Vector<void*> *results = new Vector<void*>(3);
  results->append (funcIds);
  results->append (funcNames);
  results->append (funcObjs);
  return results;
}

Vector<void*> *
dbeGetCallTreeFuncs (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 5781 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5781 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  PathTree * ptree = dbev->get_path_tree ();
  if (ptree == 
# 5784 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 5784 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
    return 0;
  Vector<Function*>* funcs = ptree->get_funcs ();
  if (funcs == 
# 5787 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 5787 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
    return 
# 5788 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5788 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  long sz = funcs->size ();
  Vector<void*> *results = new Vector<void*>(3);
  Vector<long long> *funcIds = new Vector<long long>(sz);
  Vector<char*> *funcNames = new Vector<char*>(sz);
  Vector<Obj> *funcObjs = new Vector<Obj>(sz);

  int index;
  Function * func;
  Histable::NameFormat nfmt = dbev->get_name_format ();
  if (funcs != 
# 5799 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 5799 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, func = ((funcs)->size() > 0) ? (funcs)->fetch(0) : (Function *)0; index < (funcs)->size(); func = (++index < (funcs)->size()) ? (funcs)->fetch(index) : (Function *)0)
  {
    funcIds->append (func->id);
    char *fname = dbe_strdup (func->get_name (nfmt));
    funcNames->append (fname);
    funcObjs->append ((unsigned long) func);
  }
  results->put (0, funcIds);
  results->put (1, funcNames);
  results->put (2, funcObjs);
  destroy (funcs);
  return results;
}

Vector<void*>*
dbeGetCallTreeChildren (int dbevindex, char *mcmd, Vector<int >*node_idxs)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 5817 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5817 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  if (node_idxs == 
# 5819 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null 
# 5819 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       || node_idxs->size () == 0)
    return 
# 5820 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5820 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  long sz = node_idxs->size ();
  PathTree * ptree = dbev->get_path_tree ();
  if (ptree == 
# 5823 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 5823 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
    return 
# 5824 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5824 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  if (mcmd == 
# 5825 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5825 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    return 
# 5826 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5826 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  BaseMetric *bm = dbeSession->find_base_reg_metric (mcmd);
  if (bm == 
# 5828 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
           __null
# 5828 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
               )
    return 
# 5829 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5829 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  Vector<void*> *results = new Vector<void*>(sz);
  for (long ii = 0; ii < sz; ii++)
    {
      PathTree::NodeIdx nodeIdx = node_idxs->get (ii);
      results->append (ptree->get_ftree_node_children (bm, nodeIdx));
    }
  return results;
}

Vector<int> *
dbeGetGroupIds (int )
{
  Vector<ExpGroup*> *groups = dbeSession->expGroups;
  int sz = groups->size ();
  Vector<int> *grIds = new Vector<int>(sz);
  for (int i = 0; i < sz; i++)
    grIds->store (i, groups->fetch (i)->groupId);
  return grIds;
}




Vector<char*> *
dbeGetNames (int dbevindex, int type, Obj sel_obj)
{
  char *s0, *s1, *s2;
  bool need_strdup = true;
  switch (type)
    {
    case DSP_SOURCE_V2:
    case DSP_DISASM_V2:
    case DSP_SOURCE:
    case DSP_DISASM:
      {
 if (sel_obj)
   {
     Histable *selObj = (Histable*) sel_obj;
     Function *func = (Function *) selObj->convertto (Histable::FUNCTION);
     if (func)
       {
  char *names[3] = {
# 5872 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null
# 5872 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       , 
# 5872 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 5872 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             , 
# 5872 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                               __null
# 5872 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                   };
  set_file_names (func, names);
  s0 = names[0];
  s1 = names[1];
  s2 = names[2];
  need_strdup = false;
  break;
       }
   }
 DbeView *dbev = dbeSession->getView (dbevindex);
 char **names = type == DSP_SOURCE || type == DSP_SOURCE_V2 ? dbev->names_src : dbev->names_dis;
 s0 = names[0];
 s1 = names[1];
 s2 = names[2];
 break;
      }
    case DSP_LINE:
      s0 = gettext("Lines");
      s1 = gettext("Function, line # in \"sourcefile\"");
      s2 = ((char *) (""));
      break;
    case DSP_PC:
      s0 = gettext("PCs");
      s1 = gettext("Function + offset");
      s2 = ((char *) (""));
      break;
    case DSP_DLAYOUT:
      s0 = gettext("Name");
      s1 = gettext("* +offset .element");
      s2 = ((char *) (""));
      break;
    default:
      s0 = gettext("Name");
      s1 = s2 = ((char *) (""));
      break;
    }
  if (need_strdup)
    {
      s0 = dbe_strdup (s0);
      s1 = dbe_strdup (s1);
      s2 = dbe_strdup (s2);
    }
  Vector<char*> *table = new Vector<char*>(3);
  table->store (0, s0);
  table->store (1, s1);
  table->store (2, s2);
  return table;
}




Vector<void*> *
dbeGetTotalMax (int dbevindex, int type, int subtype)
{
  Hist_data *data;
  int index;
  Hist_data::HistItem *total_item, *maximum_item;
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 5931 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 5931 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();

  switch (type)
    {
    case DSP_LINE:
      data = dbev->line_data;
      break;
    case DSP_PC:
      data = dbev->pc_data;
      break;
    case DSP_CALLER:
      data = dbev->callers;
      break;
    case DSP_SELF:
    case DSP_CALLEE:
      data = dbev->callees;
      break;
    case DSP_DLAYOUT:
      data = dbev->dlay_data;
      break;
    case DSP_DATAOBJ:
      data = dbev->dobj_data;
      break;
    case DSP_MEMOBJ:
      data = dbev->get_indxobj_data (subtype);
      break;
    case DSP_INDXOBJ:
      data = dbev->get_indxobj_data (subtype);
      break;
    case DSP_FUNCTION:
    case DSP_SOURCE:
    case DSP_DISASM:
    case DSP_SOURCE_V2:
    case DSP_DISASM_V2:
      data = dbev->func_data;
      break;
    default:
      abort ();
    }
  if (data == 
# 5971 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null 
# 5971 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  || data->get_status () != Hist_data::SUCCESS)
    return 
# 5972 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 5972 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
# 5981 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
  MetricList *mlist2 = data->get_metric_list ();
  int size = mlist2->get_items ()->size ();


  Vector<void*> *total_max = new Vector<void*>(2);
  Vector<double> *total = new Vector<double>(size);
  Vector<double> *maximum = new Vector<double>(size);


  total_item = data->get_totals ();
  maximum_item = data->get_maximums ();

  for (index = 0; index < size; index++)
    {
      total->store (index, total_item->value[index].to_double ());
      maximum->store (index, maximum_item->value[index].to_double ());
    }
  total_max->store (0, total);
  total_max->store (1, maximum);
  return total_max;
}



Vector<void*> *
dbeGetStatisOverviewList (int dbevindex)
{
  int size;
  Ovw_data **data;
  Ovw_data::Ovw_item labels, *totals;
  int nitems;
  int index, index2;

  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 6015 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 6015 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->error_msg = dbev->warning_msg = 
# 6017 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                       __null
# 6017 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                           ;

  size = dbeSession->nexps ();
  totals = new Ovw_data::Ovw_item[size + 1];
  data = new Ovw_data*[size + 1];
  data[0] = new Ovw_data ();

  for (index = 1; index <= size; index++)
    {
      data[index] = dbev->get_ovw_data (index - 1);
      if (data[index] == 
# 6027 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 6027 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            )
 {
   Ovw_data::reset_item (&totals[index]);
   continue;
 }
      data[0]->sum (data[index]);
      totals[index] = data[index]->get_totals ();
    }
  totals[0] = data[0]->get_totals ();


  labels = data[0]->get_labels ();
  nitems = labels.size + 4;


  Vector<void*> *table = new Vector<void*>(size + 4);
  Vector<char*> *jobjects = new Vector<char*>(nitems);


  jobjects->store (0, dbe_strdup (gettext("Start Time (sec.)")));
  jobjects->store (1, dbe_strdup (gettext("End Time (sec.)")));
  jobjects->store (2, dbe_strdup (gettext("Duration (sec.)")));
  jobjects->store (3, dbe_strdup (gettext("Total Thread Time (sec.)")));
  jobjects->store (4, dbe_strdup (gettext("Average number of Threads")));

  for (index2 = 5; index2 < nitems; index2++)
    jobjects->store (index2, dbe_strdup (labels.values[index2 - 4].l));
  table->store (0, jobjects);


  for (index = 0; index <= size; index++)
    {
      Vector<double> *jd_list = new Vector<double>(nitems);
      jd_list->store (0, tstodouble (totals[index].start));
      jd_list->store (1, tstodouble (totals[index].end));
      jd_list->store (2, tstodouble (totals[index].duration));
      jd_list->store (3, tstodouble (totals[index].tlwp));
      jd_list->store (4, totals[index].nlwp);
      for (index2 = 5; index2 < nitems; index2++)
 jd_list->store (index2, tstodouble (totals[index].values[index2 - 4].t));
      table->store (index + 1, jd_list);
    }
  for (index = 0; index <= size; index++)
    delete data[index];
  delete[] data;
  delete[] totals;
  return table;
}


Vector<void*> *
dbeGetStatisList (int dbevindex)
{
  int size;
  Stats_data **data;
  int nitems;
  int index, index2;
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 6085 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 6085 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  dbev->error_msg = dbev->warning_msg = 
# 6087 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                       __null
# 6087 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                           ;
  if ((size = dbeSession->nexps ()) == 0)
    return 
# 6089 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 6089 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  data = (Stats_data **) malloc ((size + 1) * sizeof (Stats_data *));
  data[0] = new Stats_data ();
  for (index = 1; index <= size; index++)
    {
      data[index] = dbev->get_stats_data (index - 1);
      if (data[index] == 
# 6097 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 6097 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            )
 continue;
      data[0]->sum (data[index]);
    }


  nitems = data[0]->size ();


  Vector<void*> *table = new Vector<void*>(size + 2);
  Vector<char*> *jobjects = new Vector<char*>(nitems);


  for (index2 = 0; index2 < nitems; index2++)
    jobjects->store (index2, dbe_strdup (data[0]->fetch (index2).label));
  table->store (0, jobjects);


  for (index = 0; index <= size; index++)
    {
      Vector<double> *jd_list = new Vector<double>(nitems);
      for (index2 = 0; index2 < nitems; index2++)
 {
   double val = 0;
   if (data[index])
     val = data[index]->fetch (index2).value.to_double ();
   jd_list->store (index2, val);
 }
      table->store (index + 1, jd_list);
    }
  if (data)
    {
      for (index = 0; index <= size; index++)
 delete data[index];
      free (data);
    }
  return table;
}





static void
setSummary (Vector<Histable*> *objs, Vector<int> *saligns,
     Vector<char> *mnemonic, Vector<char*> *jlabels, Vector<char*> *jvalues)
{
  char *sname = 
# 6144 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 6144 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   , *oname = 
# 6144 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                              __null
# 6144 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                  , *lname = 
# 6144 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                             __null
# 6144 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                 , *alias = 
# 6144 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                            __null
# 6144 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                ,
   *mangle = 
# 6145 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 6145 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                , *address = 
# 6145 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                             __null
# 6145 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                 , *size = 
# 6145 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                           __null
# 6145 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                               ,
   *name_0 = 
# 6146 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 6146 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                , *sname_0 = 
# 6146 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                             __null
# 6146 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                 , *oname_0 = 
# 6146 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                              __null
# 6146 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                  , *lname_0 = 
# 6146 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                               __null
# 6146 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                   ,
   *alias_0 = 
# 6147 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 6147 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 , *mangle_0 = 
# 6147 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                               __null
# 6147 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                   ;
  Function *func, *last_func = 
# 6148 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                              __null
# 6148 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                  ;
  int one_func = 1;


  long long ll_size = 0;
  for (long i = 0; i < objs->size (); i++)
    {
      Histable *current_obj = objs->fetch (i);
      Histable::Type htype = current_obj->get_type ();
      if (htype == Histable::LOADOBJECT)
 lname = ((LoadObject *) current_obj)->dbeFile->get_location_info ();
      else if ((func = (Function*) current_obj->convertto (Histable::FUNCTION)) != 
# 6159 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                                                  __null
# 6159 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                                      )
 {
   if (one_func && last_func != 
# 6161 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                               __null 
# 6161 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                    && last_func != func)
     one_func = 0;
   last_func = func;
   sname = 
# 6164 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 6164 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
   DbeLine *dbeline = (DbeLine*) current_obj->convertto (Histable::LINE);
   if (dbeline)
     {
       SourceFile *sf;
       if (dbeline->lineno == 0 && dbeline->include != 
# 6169 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                      __null
# 6169 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                          )
  sf = dbeline->include;
       else if (dbeline->sourceFile != 
# 6171 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                      __null
# 6171 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                          )
  sf = dbeline->sourceFile;
       else
  sf = func->getDefSrc ();
       if (sf)
  sname = sf->dbeFile->get_location_info ();
     }
   char *func_name = func->get_name ();
   mangle = func->get_mangled_name ();
   if (mangle && streq (func_name, mangle))
     mangle = 
# 6181 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 6181 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 ;
   Module *module = func->module;
   if (module != 
# 6183 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 6183 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
     {
       module->read_stabs ();
       if (sname == 
# 6186 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                   __null 
# 6186 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        || strlen (sname) == 0)
  {
    SourceFile *sf = module->getMainSrc ();
    sname = sf->dbeFile->get_location_info ();
  }
       DbeFile *df = module->dbeFile;
       if (df == 
# 6192 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null 
# 6192 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     || (df->filetype & DbeFile::F_JAVACLASS) == 0)
  df = module->loadobject->dbeFile;
       lname = df->get_location_info ();
       oname = lname;
       if (module->dot_o_file)
  oname = module->dot_o_file->dbeFile->get_location_info ();
     }

   if (htype == Histable::INSTR && dbeSession->is_datamode_available ())
     alias = ((DbeInstr*) current_obj)->get_descriptor ();
 }

      char *name = current_obj->get_name ();
      if (i == 0)
 {
   name_0 = name;
   lname_0 = lname;
   sname_0 = sname;
   oname_0 = oname;
   mangle_0 = mangle;
   alias_0 = alias;
   if (objs->size () == 1)
     {
       uint64_t addr = current_obj->get_addr ();
       address = dbe_sprintf (((char *) ("%lld:0x%08llX")),
         (long long) ((unsigned int)(((addr)>>32) & 0xffffffff)),
         (long long) ((unsigned int)((addr) & 0xffffffff)));
     }
 }
      else
 {
   if (name_0 != name)
     name_0 = 
# 6224 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 6224 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 ;
   if (lname_0 != lname)
     lname_0 = 
# 6226 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 6226 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  ;
   if (sname_0 != sname)
     sname_0 = 
# 6228 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 6228 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  ;
   if (oname_0 != oname)
     oname_0 = 
# 6230 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 6230 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  ;
   if (mangle_0 != mangle)
     mangle_0 = 
# 6232 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 6232 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   ;
   if (alias_0 != alias)
     alias_0 = 
# 6234 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 6234 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  ;
 }
      if (current_obj->get_size () == -1)
 {
   if (size == 
# 6238 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 6238 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
     size = dbe_strdup (gettext("(Unknown)"));
 }
      else
 ll_size += current_obj->get_size ();
    }
  if (size == 
# 6244 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 6244 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    size = dbe_sprintf (((char *) ("%lld")), ll_size);
  if (name_0 == 
# 6246 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 6246 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
    {
      if (objs->size () > 1)
 {
   char *func_name = last_func == 
# 6250 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                 __null 
# 6250 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                      ? 
# 6250 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                        __null 
# 6250 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                             :
    (one_func == 0 ? 
# 6251 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null 
# 6251 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         : last_func->get_name ());
   name_0 = dbe_sprintf (((char *) ("%s%s%s (%lld %s)")),
    func_name == 
# 6253 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null 
# 6253 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     ? "" : func_name,
    func_name == 
# 6254 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null 
# 6254 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     ? "" : ": ",
    gettext("Multiple Selection"),
    (long long) objs->size (),
    gettext("objects"));
 }
    }
  else
    name_0 = dbe_strdup (name_0);


  saligns->store (0, TEXT_LEFT);
  mnemonic->store (0, 'N');
  jlabels->store (0, dbe_strdup (gettext("Name")));
  jvalues->store (0, name_0);

  saligns->store (1, TEXT_LEFT);
  mnemonic->store (1, 'P');
  jlabels->store (1, dbe_strdup (gettext("PC Address")));
  jvalues->store (1, address);

  saligns->store (2, TEXT_LEFT);
  mnemonic->store (2, 'z');
  jlabels->store (2, dbe_strdup (gettext("Size")));
  jvalues->store (2, size);

  saligns->store (3, TEXT_RIGHT);
  mnemonic->store (3, 'r');
  jlabels->store (3, dbe_strdup (gettext("Source File")));
  jvalues->store (3, dbe_strdup (sname_0));

  saligns->store (4, TEXT_RIGHT);
  mnemonic->store (4, 'b');
  jlabels->store (4, dbe_strdup (gettext("Object File")));
  jvalues->store (4, dbe_strdup (oname_0));

  saligns->store (5, TEXT_LEFT);
  mnemonic->store (5, 'j');
  jlabels->store (5, dbe_strdup (gettext("Load Object")));
  jvalues->store (5, dbe_strdup (lname_0));

  saligns->store (6, TEXT_LEFT);
  mnemonic->store (6, 'm');
  jlabels->store (6, dbe_strdup (gettext("Mangled Name")));
  jvalues->store (6, dbe_strdup (mangle_0));

  saligns->store (7, TEXT_LEFT);
  mnemonic->store (7, 'A');
  jlabels->store (7, dbe_strdup (gettext("Aliases")));
  jvalues->store (7, dbe_strdup (alias_0));
}



static void
setMemSummary (Vector<Histable*> *objs, Vector<int> *saligns,
        Vector<char> *mnemonic, Vector<char*> *jlabels,
        Vector<char*> *jvalues)
{
  saligns->store (0, TEXT_LEFT);
  mnemonic->store (0, 'M');
  jlabels->store (0, dbe_strdup (gettext("Memory Object")));
  if (objs->size () == 1)
    {
      Histable *current_obj = objs->fetch (0);
      jvalues->store (0, dbe_strdup (current_obj->get_name ()));
    }
  else
    {
      char *name = dbe_sprintf (((char *) ("%s (%lld %s)")),
    gettext("Multiple Selection"),
    (long long) objs->size (), gettext("objects"));
      jvalues->store (0, name);
    }
}



static void
setIndxSummary (Vector<Histable*> *objs, Vector<int> *saligns,
  Vector<char> *mnemonic, Vector<char*> *jlabels,
  Vector<char*> *jvalues)
{
  saligns->store (0, TEXT_LEFT);
  mnemonic->store (0, 'I');
  jlabels->store (0, dbe_strdup (gettext("Index Object")));

  if (objs->size () == 1)
    {
      Histable *current_obj = objs->fetch (0);
      jvalues->store (0, dbe_strdup (current_obj->get_name ()));
    }
  else
    {
      char *name = dbe_sprintf (((char *) ("%s (%lld %s)")), gettext("Multiple Selection"),
    (long long) objs->size (), gettext("objects"));
      jvalues->store (0, name);
    }
}



static void
setIOActivitySummary (Vector<Histable*> *objs, Vector<int> *saligns,
        Vector<char> *mnemonic, Vector<char*> *jlabels,
        Vector<char*> *jvalues)
{
  saligns->store (0, TEXT_LEFT);
  mnemonic->store (0, 'O');
  jlabels->store (0, dbe_strdup (gettext("I/O Activity")));
  if (objs->size () == 1)
    {
      Histable *current_obj = objs->fetch (0);
      jvalues->store (0, dbe_strdup (current_obj->get_name ()));
    }
  else
    {
      char *name = dbe_sprintf (((char *) ("%s (%lld %s)")), gettext("Multiple Selection"),
    (long long) objs->size (), gettext("objects"));
      jvalues->store (0, name);
    }
}



static void
setHeapActivitySummary (Vector<Histable*> *objs, Vector<int> *saligns,
   Vector<char> *mnemonic, Vector<char*> *jlabels,
   Vector<char*> *jvalues)
{
  saligns->store (0, TEXT_LEFT);
  mnemonic->store (0, 'O');
  jlabels->store (0, dbe_strdup (gettext("Heap Activity")));

  if (objs->size () == 1)
    {
      Histable *current_obj = objs->fetch (0);
      jvalues->store (0, dbe_strdup (current_obj->get_name ()));
    }
  else
    {
      char *name = dbe_sprintf (((char *) ("%s (%lld %s)")), gettext("Multiple Selection"),
    (long long) objs->size (), gettext("objects"));
      jvalues->store (0, name);
    }
}




static void
setDataSummary (Vector<Histable*> *objs, Vector<int> *saligns,
  Vector<char> *mnemonic, Vector<char*> *jlabels,
  Vector<char*> *jvalues)
{
  char *name, *type, *member, *elist;
  DataObject *dobj;
  Vector<DataObject *> *delem;
  Histable *scope;
  int index;
  char *size, *offset, *elements, *scopename;


  member = elist = type = size = offset = elements = scopename = 
# 6416 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                                __null
# 6416 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                    ;

  if (objs->size () == 1)
    {
      Histable *current_obj = objs->fetch (0);
      name = dbe_strdup (current_obj->get_name ());
      dobj = (DataObject *) current_obj;
      type = dobj->get_typename ();
      scope = dobj->get_scope ();
      delem = dbeSession->get_dobj_elements (dobj);
      if (type == 
# 6426 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 6426 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
 type = gettext("(Synthetic)");
      if (!scope)
 scopename = dbe_strdup (gettext("(Global)"));
      else
 {
   switch (scope->get_type ())
     {
     case Histable::FUNCTION:
       scopename = dbe_sprintf (((char *) ("%s(%s)")),
           ((Function*) scope)->module->get_name (),
           scope->get_name ());
       break;
     case Histable::LOADOBJECT:
     case Histable::MODULE:
     default:
       scopename = dbe_strdup (scope->get_name ());
       break;
     }
 }

      if (dobj->get_offset () != -1)
 {
   if (dobj->get_parent ())
     member = dbe_strdup (dobj->get_parent ()->get_name ());
   offset = dbe_sprintf (((char *) ("%lld")), (long long) dobj->get_offset ());
 }
      size = dbe_sprintf ("%lld", (long long) dobj->get_size ());

      if (delem->size () > 0)
 {
   elements = dbe_sprintf (((char *) ("%lld")), (long long) delem->size ());
   StringBuilder sb_tmp, sb;
   sb.append (gettext("Offset Size  Name\n"));
   for (index = 0; index < delem->size (); index++)
     {
       DataObject *ditem = delem->fetch (index);
       sb_tmp.sprintf (((char *) ("%6lld %5lld  %s\n")),
         (long long) ditem->get_offset (),
         (long long) ditem->get_size (), ditem->get_name ());
       sb.append (&sb_tmp);
     }
   if (sb.charAt (sb.length () - 1) == '\n')
     sb.setLength (sb.length () - 1);
   elist = sb.toString ();
 }
    }
  else
    name = dbe_sprintf (((char *) ("%s (%lld %s)")), gettext("Multiple Selection"),
   (long long) objs->size (), gettext("objects"));

  saligns->store (0, TEXT_LEFT);
  mnemonic->store (0, 'D');
  jlabels->store (0, dbe_strdup (gettext("Data Object")));
  jvalues->store (0, name);

  saligns->store (1, TEXT_LEFT);
  mnemonic->store (1, 'S');
  jlabels->store (1, dbe_strdup (gettext("Scope")));
  jvalues->store (1, scopename);

  saligns->store (2, TEXT_LEFT);
  mnemonic->store (2, 'T');
  jlabels->store (2, dbe_strdup (gettext("Type")));
  jvalues->store (2, dbe_strdup (type));

  saligns->store (3, TEXT_LEFT);
  mnemonic->store (3, 'M');
  jlabels->store (3, dbe_strdup (gettext("Member of")));
  jvalues->store (3, member);

  saligns->store (4, TEXT_LEFT);
  mnemonic->store (4, 'O');
  jlabels->store (4, dbe_strdup (gettext("Offset")));
  jvalues->store (4, offset);

  saligns->store (5, TEXT_LEFT);
  mnemonic->store (5, 'z');
  jlabels->store (5, dbe_strdup (gettext("Size")));
  jvalues->store (5, size);

  saligns->store (6, TEXT_LEFT);
  mnemonic->store (6, 'E');
  jlabels->store (6, dbe_strdup (gettext("Elements")));
  jvalues->store (6, elements);

  saligns->store (7, TEXT_LEFT);
  mnemonic->store (7, 'L');
  jlabels->store (7, dbe_strdup (gettext("List")));
  jvalues->store (7, elist);
}






Vector<void*> *
dbeGetSummaryV2 (int dbevindex, Vector<Obj> *sel_objs, int type, int subtype)
{
  if (sel_objs == 
# 6526 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null 
# 6526 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      || sel_objs->size () == 0)
    return 
# 6527 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 6527 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  DbeView *dbev = dbeSession->getView (dbevindex);
  Vector<Histable*>*objs = new Vector<Histable*>(sel_objs->size ());
  for (int i = 0; i < sel_objs->size (); i++)
    {
      Histable *obj = (Histable *) sel_objs->fetch (i);
      if (obj == 
# 6533 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 6533 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 continue;
      char *nm = obj->get_name ();
      if (streq (nm, ((char *) ("<Total>"))))
 {


   objs->reset ();
   objs->append (obj);
   break;
 }
      objs->append (obj);
    }
  if (objs->size () == 0)
    return 
# 6547 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 6547 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  int nname = 8;
  Vector<int> *saligns = new Vector<int>(nname);
  Vector<char>*mnemonic = new Vector<char>(nname);
  Vector<char*> *jlabels = new Vector<char*>(nname);
  Vector<char*> *jvalues = new Vector<char*>(nname);
  Vector<void*> *name_objs = new Vector<void*>(4);
  name_objs->store (0, saligns);
  name_objs->store (1, mnemonic);
  name_objs->store (2, jlabels);
  name_objs->store (3, jvalues);
  setSummary (objs, saligns, mnemonic, jlabels, jvalues);

  MetricList *prop_mlist = new MetricList (dbev->get_metric_ref (MET_NORMAL));
  if (prop_mlist && dbev->comparingExperiments ())
    prop_mlist = dbev->get_compare_mlist (prop_mlist, 0);

  int nitems = prop_mlist->get_items ()->size ();


  jlabels = new Vector<char*>(nitems);
  Vector<double> *clock_list = new Vector<double>(nitems);
  Vector<double> *excl_list = new Vector<double>(nitems);
  Vector<double> *ep_list = new Vector<double>(nitems);
  Vector<double> *incl_list = new Vector<double>(nitems);
  Vector<double> *ip_list = new Vector<double>(nitems);
  Vector<int> *vtype = new Vector<int>(nitems);


  Vector<void*> *metric_objs = new Vector<void*>(8);
  metric_objs->store (0, jlabels);
  metric_objs->store (1, clock_list);
  metric_objs->store (2, excl_list);
  metric_objs->store (3, ep_list);
  metric_objs->store (4, incl_list);
  metric_objs->store (5, ip_list);
  metric_objs->store (6, vtype);

  int last_init = -1;
  for (int i = 0; i < objs->size (); i++)
    {
      Histable *obj = objs->fetch (i);

      Hist_data *data = dbev->get_hist_data (prop_mlist, obj->get_type (), subtype,
          Hist_data::SELF, obj, dbev->sel_binctx, objs);

      if (data->get_status () != Hist_data::SUCCESS)
 {
   if (type != DSP_DLAYOUT)
     {
       delete data;
       continue;
     }
 }
      TValue *values = 
# 6603 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 6603 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          ;
      if (data->get_status () == Hist_data::SUCCESS)
 {
   Hist_data::HistItem *hi = data->fetch (0);
   if (hi)
     values = hi->value;
 }
      Hist_data::HistItem *total = data->get_totals ();
      int index2 = 0;
      char *tstr = gettext(" Time");
      char *estr = gettext("Exclusive ");
      size_t len = strlen (estr);


      MetricList *mlist = data->get_metric_list ();
      int index;
      Metric *mitem;
      double clock;
      if (mlist->get_items () != 
# 6621 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     __null
# 6621 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     ) for (index = 0, mitem = ((mlist->get_items ())->size() > 0) ? (mlist->get_items ())->fetch(0) : (Metric*)0; index < (mlist->get_items ())->size(); mitem = (++index < (mlist->get_items ())->size()) ? (mlist->get_items ())->fetch(index) : (Metric*)0)
      {
 if (mitem->get_subtype () == Metric::STATIC)
   continue;
 if (last_init < index2)
   {
     last_init = index2;
     jlabels->store (index2, 
# 6628 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                            __null
# 6628 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                );
     clock_list->store (index2, 0.0);
     excl_list->store (index2, 0.0);
     ep_list->store (index2, 0.0);
     incl_list->store (index2, 0.0);
     ip_list->store (index2, 0.0);
     vtype->store (index2, 0);
   }
 double dvalue = (values != 
# 6636 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                           __null
# 6636 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                               ) ? values[index].to_double () : 0.0;
 double dtotal = total->value[index].to_double ();
 if (mitem->is_time_val ())
   clock = 1.e+6 * dbeSession->get_clock (-1);
 else
   clock = 0.0;

 clock_list->store (index2, clock);
 if ((mitem->get_subtype () == Metric::EXCLUSIVE) ||
     (mitem->get_subtype () == Metric::DATASPACE))
   {
     if (i == 0)
       {
  char *sstr = mitem->get_name ();
  if (!strncmp (sstr, estr, len))
    sstr += len;
  char *buf, *lstr = strstr (sstr, tstr);
  if (lstr)
    buf = dbe_strndup (sstr, lstr - sstr);
  else
    buf = dbe_strdup (sstr);
  jlabels->store (index2, buf);
  vtype->store (index2, mitem->get_vtype ());
       }
     dvalue += excl_list->fetch (index2);
     double percent = dtotal == 0.0 ? dtotal : (dvalue / dtotal) * 100;
     excl_list->store (index2, dvalue);
     ep_list->store (index2, percent);
   }
 else
   {
     dvalue += incl_list->fetch (index2);
     if (dvalue > dtotal)
       dvalue = dtotal;
     double percent = dtotal == 0.0 ? dtotal : (dvalue / dtotal) * 100;
     incl_list->store (index2, dvalue);
     ip_list->store (index2, percent);
     index2++;
   }
      }
      delete data;
    }
  delete prop_mlist;
  Vector<void*> *summary = new Vector<void*>(2);
  summary->store (0, name_objs);
  summary->store (1, metric_objs);
  return summary;
}


Vector<void*> *
dbeGetSummary (int dbevindex, Vector<Obj> *sel_objs, int type, int subtype)
{
  bool is_data, is_mem, is_indx, is_iodata, is_heapdata;
  Hist_data::HistItem *total;
  MetricList *prop_mlist;
  MetricList *mlist;
  Metric *mitem;
  int i, nname, nitems, index, index2;
  TValue *values;
  double dvalue, clock;
  Hist_data *data;
  Vector<double> *percent_scale;

  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 6701 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 6701 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  if (sel_objs == 
# 6703 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null 
# 6703 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      || sel_objs->size () == 0)
    return 
# 6704 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 6704 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  is_mem = false;
  is_data = false;
  is_indx = false;
  is_iodata = false;
  is_heapdata = false;
  nname = 8;
  Vector<Histable*>*objs = new Vector<Histable*>(sel_objs->size ());
  if (type == DSP_TIMELINE)
    objs->append ((Histable *) sel_objs->fetch (0));
  else
    {
      switch (type)
 {
 case DSP_FUNCTION:
   data = dbev->func_data;
   break;
 case DSP_LINE:
   data = dbev->line_data;
   break;
 case DSP_PC:
   data = dbev->pc_data;
   break;
 case DSP_SELF:
   data = dbev->fitem_data;
   break;
 case DSP_SOURCE:
 case DSP_SOURCE_V2:
   data = dbev->src_data;
   break;
 case DSP_DISASM:
 case DSP_DISASM_V2:
   data = dbev->dis_data;
   break;
 case DSP_DLAYOUT:
   is_data = true;
   nname = 7;
   data = dbev->dlay_data;
   break;
 case DSP_DATAOBJ:
   is_data = true;
   nname = 8;
   data = dbev->dobj_data;
   break;
 case DSP_MEMOBJ:
   is_data = true;
   is_mem = true;
   nname = 1;
   data = dbev->get_indxobj_data (subtype);
   break;
 case DSP_INDXOBJ:
   is_indx = true;
   nname = 1;
   data = dbev->get_indxobj_data (subtype);
   break;
 case DSP_IOACTIVITY:
   is_iodata = true;
   nname = 1;
   data = dbev->iofile_data;
   break;
 case DSP_IOVFD:
   is_iodata = true;
   nname = 1;
   data = dbev->iovfd_data;
   break;
 case DSP_IOCALLSTACK:
   is_iodata = true;
   nname = 1;
   data = dbev->iocs_data;
   break;
 case DSP_HEAPCALLSTACK:
   is_heapdata = true;
   nname = 1;
   data = dbev->heapcs_data;
   break;
 default:
   data = 
# 6781 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
         __null
# 6781 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
             ;
   break;
 }
      if (data == 
# 6784 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null 
# 6784 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      || data->get_status () != Hist_data::SUCCESS)
 return 
# 6785 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
       __null
# 6785 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
           ;

      Hist_data::HistItem *current_item;
      for (i = 0; i < sel_objs->size (); i++)
 {
   int sel_index = (int) sel_objs->fetch (i);
   if (type != DSP_IOACTIVITY && type != DSP_IOVFD &&
       type != DSP_IOCALLSTACK && type != DSP_HEAPCALLSTACK)
     {
       if (sel_index < 0 || sel_index >= data->size ())
  continue;
       current_item = data->fetch (sel_index);
       if (current_item->obj == 
# 6797 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                               __null
# 6797 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                   )
  continue;
     }
   else
     {
       if (sel_index < 0)
  continue;
       bool found = false;
       for (int j = 0; j < data->size (); j++)
  {
    current_item = data->fetch (j);
    if ((current_item->obj != 
# 6808 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                             __null
# 6808 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                 ) && (current_item->obj->id == sel_index))
      {
        found = true;
        break;
      }
  }
       if (!found)
  continue;
     }
   char *nm = current_item->obj->get_name ();
   if (streq (nm, ((char *) ("<Total>"))))
     {


       objs->reset ();
       objs->append (current_item->obj);
       break;
     }
   objs->append (current_item->obj);
 }
    }
  if (objs->size () == 0)
    return 
# 6830 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 6830 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  Vector<int> *saligns = new Vector<int>(nname);
  Vector<char>*mnemonic = new Vector<char>(nname);
  Vector<char*> *jlabels = new Vector<char*>(nname);
  Vector<char*> *jvalues = new Vector<char*>(nname);
  Vector<void*> *name_objs = new Vector<void*>(4);
  name_objs->store (0, saligns);
  name_objs->store (1, mnemonic);
  name_objs->store (2, jlabels);
  name_objs->store (3, jvalues);
  if (is_mem)
    setMemSummary (objs, saligns, mnemonic, jlabels, jvalues);
  else if (is_indx)
    setIndxSummary (objs, saligns, mnemonic, jlabels, jvalues);
  else if (is_data)
    setDataSummary (objs, saligns, mnemonic, jlabels, jvalues);
  else if (is_iodata)
    setIOActivitySummary (objs, saligns, mnemonic, jlabels, jvalues);
  else if (is_heapdata)
    setHeapActivitySummary (objs, saligns, mnemonic, jlabels, jvalues);
  else
    setSummary (objs, saligns, mnemonic, jlabels, jvalues);


  if (is_data)
    prop_mlist = new MetricList (dbev->get_metric_ref (MET_DATA));
  else if (is_indx)
    prop_mlist = new MetricList (dbev->get_metric_ref (MET_INDX));
  else if (is_iodata)
    prop_mlist = new MetricList (dbev->get_metric_ref (MET_IO));
  else if (is_heapdata)
    prop_mlist = new MetricList (dbev->get_metric_ref (MET_HEAP));
  else
    prop_mlist = new MetricList (dbev->get_metric_ref (MET_NORMAL));


  if (prop_mlist && dbev->comparingExperiments ())
    prop_mlist = dbev->get_compare_mlist (prop_mlist, 0);
  nitems = prop_mlist->get_items ()->size ();


  jlabels = new Vector<char*>(nitems);
  Vector<double> *clock_list = new Vector<double>(nitems);
  Vector<double> *excl_list = new Vector<double>(nitems);
  Vector<double> *ep_list = new Vector<double>(nitems);
  Vector<double> *incl_list = new Vector<double>(nitems);
  Vector<double> *ip_list = new Vector<double>(nitems);
  Vector<int> *vtype = new Vector<int>(nitems);


  Vector<void*> *metric_objs = new Vector<void*>(8);
  metric_objs->store (0, jlabels);
  metric_objs->store (1, clock_list);
  metric_objs->store (2, excl_list);
  metric_objs->store (3, ep_list);
  metric_objs->store (4, incl_list);
  metric_objs->store (5, ip_list);
  metric_objs->store (6, vtype);
  percent_scale = new Vector<double>();
  int last_init = -1;
  for (i = 0; i < objs->size (); i++)
    {
      Histable *current_obj = objs->fetch (i);

      data = dbev->get_hist_data (prop_mlist, current_obj->get_type (), subtype,
      Hist_data::SELF, current_obj, dbev->sel_binctx, objs);
      if (data->get_status () != Hist_data::SUCCESS)
 {
   if (type != DSP_DLAYOUT)
     {
       delete data;
       continue;
     }
 }
      Hist_data::HistItem *hi = data->fetch (0);
      values = hi ? hi->value : 
# 6907 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                               __null
# 6907 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                   ;
      total = data->get_totals ();
      index2 = 0;


      mlist = data->get_metric_list ();
# 6923 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
      if (mlist->get_items () != 
# 6923 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     __null
# 6923 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     ) for (index = 0, mitem = ((mlist->get_items ())->size() > 0) ? (mlist->get_items ())->fetch(0) : (Metric*)0; index < (mlist->get_items ())->size(); mitem = (++index < (mlist->get_items ())->size()) ? (mlist->get_items ())->fetch(index) : (Metric*)0)
      {
 if (mitem->get_subtype () == Metric::STATIC)
   continue;
 if (last_init < index2)
   {
     last_init = index2;
     jlabels->store (index2, 
# 6930 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                            __null
# 6930 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                );
     clock_list->store (index2, 0.0);
     excl_list->store (index2, 0.0);
     ep_list->store (index2, 0.0);
     incl_list->store (index2, 0.0);
     ip_list->store (index2, 0.0);
     vtype->store (index2, 0);
   }
 dvalue = (values != 
# 6938 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null
# 6938 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        ) ? values[index].to_double () : 0.0;
 double dtotal = total->value[index].to_double ();
 percent_scale->store (index, dtotal == 0. ? 0. : 100. / dtotal);
 if (mitem->is_time_val ())
   clock = 1.e+6 * dbeSession->get_clock (-1);
 else
   clock = 0.0;

 clock_list->store (index2, clock);
 if (mitem->get_subtype () == Metric::EXCLUSIVE ||
     mitem->get_subtype () == Metric::DATASPACE)
   {
     if (i == 0)
       {
  char *sstr = mitem->get_username ();
  char *buf = dbe_strdup (sstr);
  jlabels->store (index2, buf);
  vtype->store (index2, mitem->get_vtype ());
       }
     dvalue += excl_list->fetch (index2);
     double percent = dvalue * percent_scale->fetch (index);
     excl_list->store (index2, dvalue);
     ep_list->store (index2, percent);
     if (is_data || is_indx || is_iodata || is_heapdata)

       index2++;
   }
 else
   {
     dvalue += incl_list->fetch (index2);
     if (dvalue > dtotal && mitem->get_type () != BaseMetric::DERIVED)
       dvalue = dtotal;
     double percent = dvalue * percent_scale->fetch (index);
     incl_list->store (index2, dvalue);
     ip_list->store (index2, percent);
     index2++;
   }
      }
      delete data;
    }


  if (objs->size () > 1 &&
      dbev->get_derived_metrics () != 
# 6981 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                     __null 
# 6981 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                          &&
      dbev->get_derived_metrics ()->get_items () != 
# 6982 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                   __null 
# 6982 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                        &&
      dbev->get_derived_metrics ()->get_items ()->size () > 0)
    {

      Vector<Metric*> *mvec = new Vector<Metric*>(nitems);
      index2 = 0;
      if (prop_mlist->get_items () != 
# 6988 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     __null
# 6988 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     ) for (index = 0, mitem = ((prop_mlist->get_items ())->size() > 0) ? (prop_mlist->get_items ())->fetch(0) : (Metric*)0; index < (prop_mlist->get_items ())->size(); mitem = (++index < (prop_mlist->get_items ())->size()) ? (prop_mlist->get_items ())->fetch(index) : (Metric*)0)
      {
 if (mitem->get_subtype () == Metric::STATIC)
   continue;
 if (mitem->get_subtype () == Metric::EXCLUSIVE ||
     mitem->get_subtype () == Metric::DATASPACE)
   {
     mvec->store (index2, mitem);
     if (is_data || is_indx || is_iodata || is_heapdata)
       index2++;
   }
 else
   {
     
# 7001 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
    (static_cast <bool> (
# 7001 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
    strcmp (mvec->fetch (index2)->get_cmd (), mitem->get_cmd ()) == 0
# 7001 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
    ) ? void (0) : __assert_fail (
# 7001 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
    "strcmp (mvec->fetch (index2)->get_cmd (), mitem->get_cmd ()) == 0"
# 7001 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
    , "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc", 7001, __extension__ __PRETTY_FUNCTION__))
# 7001 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                              ;
     index2++;
   }
      }
      int *map = dbev->get_derived_metrics ()->construct_map (mvec, BaseMetric::EXCLUSIVE, mvec->fetch (0)->get_expr_spec ());
      if (map != 
# 7006 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 7006 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 {
   int nmetrics = mvec->size ();
   double *evalues = (double *) malloc (nmetrics * sizeof (double));
   double *ivalues = (double *) malloc (nmetrics * sizeof (double));
   for (index2 = 0; index2 < nmetrics; index2++)
     {
       evalues[index2] = excl_list->fetch (index2);
       ivalues[index2] = incl_list->fetch (index2);
     }


   dbev->get_derived_metrics ()->eval (map, evalues);
   dbev->get_derived_metrics ()->eval (map, ivalues);
   for (index2 = 0; index2 < nmetrics; index2++)
     {
       excl_list->store (index2, evalues[index2]);
       incl_list->store (index2, ivalues[index2]);
     }



   index2 = 0;
   if (prop_mlist->get_items () != 
# 7029 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
  __null
# 7029 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
  ) for (index = 0, mitem = ((prop_mlist->get_items ())->size() > 0) ? (prop_mlist->get_items ())->fetch(0) : (Metric*)0; index < (prop_mlist->get_items ())->size(); mitem = (++index < (prop_mlist->get_items ())->size()) ? (prop_mlist->get_items ())->fetch(index) : (Metric*)0)
   {
     if (mitem->get_subtype () == Metric::STATIC)
       continue;
     if (mitem->get_subtype () == Metric::EXCLUSIVE ||
  mitem->get_subtype () == Metric::DATASPACE)
       {
  if (mitem->get_type () == BaseMetric::DERIVED)
    ep_list->store (index2, excl_list->fetch (index2) * percent_scale->fetch (index));
  if (is_data || is_indx || is_iodata || is_heapdata)
    index2++;
       }
     else
       {
  if (mitem->get_type () == BaseMetric::DERIVED)
    ip_list->store (index2, incl_list->fetch (index2) * percent_scale->fetch (index));
  index2++;
       }
   }
   free (evalues);
   free (ivalues);
   free (map);
 }
      delete mvec;
    }
  delete prop_mlist;
  Vector<void*> *summary = new Vector<void*>(2);
  summary->store (0, name_objs);
  summary->store (1, metric_objs);
  delete objs;
  delete percent_scale;
  return summary;
}

char *
dbeGetExpName (int , char *dir_name)
{
  char *ret;
  char *warn;
  if (col_ctr == 
# 7068 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 7068 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    col_ctr = new Coll_Ctrl (1);
  if (dir_name != 
# 7070 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 7070 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
    {
      ret = col_ctr->set_directory (dir_name, &warn);

      if (warn != 
# 7074 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 7074 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
 fprintf (
# 7075 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
         stderr
# 7075 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
               , ((char *) ("%s")), warn);
      if (ret != 
# 7076 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 7076 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
 fprintf (
# 7077 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
         stderr
# 7077 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
               , ((char *) ("%s")), ret);
    }
  return dbe_strdup (col_ctr->get_expt ());
}



Vector<Vector<char*>*> *
dbeGetHwcSets (int , bool forKernel)
{
  Vector<Vector<char*>*> *list = new Vector<Vector<char*>*>(2);
  char * defctrs = hwc_get_default_cntrs2 (forKernel, 1);
  Vector<char*> *i18n = new Vector<char*>(1);
  Vector<char*> *name = new Vector<char*>(1);
  if (
# 7091 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     __null 
# 7091 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
          != defctrs)
    {
      i18n->store (0, strdup (defctrs));
      name->store (0, strdup (((char *) ("default"))));
    }
  list->store (0, i18n);
  list->store (1, name);
  return list;
}

static Vector<void*> *
dbeGetHwcs (Hwcentry **hwcs)
{
  int sz;
  for (sz = 0; hwcs && hwcs[sz]; sz++)
    ;
  Vector<void*> *list = new Vector<void*>(9);
  Vector<char*> *i18n = new Vector<char*>(sz);
  Vector<char*> *name = new Vector<char*>(sz);
  Vector<char*> *int_name = new Vector<char*>(sz);
  Vector<char*> *metric = new Vector<char*>(sz);
  Vector<long long> *val = new Vector<long long>(sz);
  Vector<int> *timecvt = new Vector<int>(sz);
  Vector<int> *memop = new Vector<int>(sz);
  Vector<char*> *short_desc = new Vector<char*>(sz);
  Vector<Vector<int>*> *reglist_v = new Vector<Vector<int>*>(sz);
  Vector<bool> *supportsAttrs = new Vector<bool>(sz);
  Vector<bool> *supportsMemspace = new Vector<bool>(sz);

  for (int i = 0; i < sz; i++)
    {
      Hwcentry *ctr = hwcs[i];
      Vector<int> *registers = new Vector<int>(20);
      regno_t *reglist = ctr->reg_list;
      for (int k = 0; !((reglist[k])==((regno_t)-1)) && k < 20; k++)
 registers->store (k, reglist[k]);

      i18n->store (i, dbe_strdup (hwc_i18n_metric (ctr)));
      name->store (i, dbe_strdup (ctr->name));
      int_name->store (i, dbe_strdup (ctr->int_name));
      metric->store (i, dbe_strdup (ctr->metric));
      val->store (i, ctr->val);
      timecvt->store (i, ctr->timecvt);
      memop->store (i, ctr->memop);
      reglist_v->store (i, registers);
      short_desc->store (i, dbe_strdup (ctr->short_desc));
      supportsAttrs->store (i, true);
      supportsMemspace->store (i, ((ctr->memop)!=ABST_NONE && (ctr->memop)!=ABST_NOPC && (ctr->memop)!=ABST_COUNT));
    }
  list->store (0, i18n);
  list->store (1, name);
  list->store (2, int_name);
  list->store (3, metric);
  list->store (4, val);
  list->store (5, timecvt);
  list->store (6, memop);
  list->store (7, short_desc);
  list->store (8, reglist_v);
  list->store (9, supportsAttrs);
  list->store (10, supportsMemspace);
  return list;
}

Vector<void *> *
dbeGetHwcsAll (int , bool forKernel)
{
  Vector<void*> *list = new Vector<void*>(2);
  list->store (0, dbeGetHwcs (hwc_get_std_ctrs (forKernel)));
  list->store (1, dbeGetHwcs (hwc_get_raw_ctrs (forKernel)));
  return list;
}

Vector<char*> *
dbeGetHwcHelp (int , bool forKernel)
{
  Vector<char*> *strings = new Vector<char*>(32);
  FILE *f = tmpfile ();
  hwc_usage_f (forKernel, f, "", 0, 0, 1);
  fflush (f);
  fseek (f, 0, 
# 7170 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              0
# 7170 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      );

  char buff[2048];
  int ii = 0;
  while (fgets (buff, 2048, f))
    strings->store (ii++, dbe_strdup (buff));
  fclose (f);
  return strings;
}

Vector<char*> *
dbeGetHwcAttrList (int , bool forKernel)
{
  char ** attr_list = hwc_get_attrs (forKernel);
  int size;
  for (size = 0; attr_list && attr_list[size]; size++)
    ;

  Vector<char*> *name = new Vector<char*>(size);
  for (int i = 0; i < size; i++)
    name->store (i, dbe_strdup (attr_list[i]));
  return name;
}


int
dbeGetHwcMaxConcurrent (int , bool forKernel)
{
  return hwc_get_max_concurrent (forKernel);
}





Vector<char*> *
dbeGetIfreqData (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 7209 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 7209 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  if (!dbeSession->is_ifreq_available ())
    return 
# 7212 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7212 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  int size = dbeSession->nexps ();
  if (size == 0)
    return 
# 7215 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7215 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  Vector<char*> *list = new Vector<char*>();
  for (int i = 0; i < size; i++)
    {
      Experiment *exp = dbeSession->get_exp (i);
      if (exp->broken || !dbev->get_exp_enable (i) || !exp->ifreqavail)
 continue;

      list->append (dbe_sprintf (gettext("Instruction frequency data from experiment %s\n\n"),
     exp->get_expt_name ()));

      char *ifreq = pr_mesgs (exp->fetch_ifreq (), ((char *) ("")), ((char *) ("")));
      list->append (ifreq);
    }
  return list;
}



Vector<void*> *
dbeGetLeakListInfo (int dbevindex, bool leakflag)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 7240 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 7240 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  MetricList *origmlist = dbev->get_metric_list (MET_NORMAL);
  MetricList *nmlist = new MetricList (origmlist);
  if (leakflag)
    nmlist->set_metrics (((char *) ("e.heapleakbytes:e.heapleakcnt:name")), true,
    dbev->get_derived_metrics ());
  else
    nmlist->set_metrics (((char *) ("e.heapallocbytes:e.heapalloccnt:name")), true,
    dbev->get_derived_metrics ());
  MetricList *mlist = new MetricList (nmlist);
  delete nmlist;

  CStack_data *lam = dbev->get_cstack_data (mlist);
  if (lam == 
# 7254 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null 
# 7254 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 || lam->size () == 0)
    {
      delete lam;
      delete mlist;
      return 
# 7258 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 7258 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                ;
    }
  Vector<Vector<Obj>*> *evalue = new Vector<Vector<Obj>*>(lam->size ());
  Vector<Vector<Obj>*> *pcstack = new Vector<Vector<Obj>*>(lam->size ());
  Vector<Vector<Obj>*> *offstack = new Vector<Vector<Obj>*>(lam->size ());
  Vector<Vector<Obj>*> *fpcstack = new Vector<Vector<Obj>*>(lam->size ());
  Vector<Vector<Obj>*> *sumval = new Vector<Vector<Obj>*>(lam->size ());

  int index;
  CStack_data::CStack_item *lae;
  if (lam->cstack_items != 
# 7268 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null
# 7268 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 ) for (index = 0, lae = ((lam->cstack_items)->size() > 0) ? (lam->cstack_items)->fetch(0) : (CStack_data::CStack_item*)0; index < (lam->cstack_items)->size(); lae = (++index < (lam->cstack_items)->size()) ? (lam->cstack_items)->fetch(index) : (CStack_data::CStack_item*)0)
  {
    Vector<Obj> *jivals = 
# 7270 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 7270 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             ;
    if (lae != 
# 7271 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 7271 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
      {
 jivals = new Vector<Obj>(4);
 jivals->store (0, (Obj) (index + 1));
 jivals->store (1, (Obj) lae->value[1].ll);
 jivals->store (2, (Obj) lae->value[0].ll);
 jivals->store (3, (Obj) (leakflag ? 1 : 2));
      }
    evalue->store (index, jivals);
    int snum = lae->stack->size ();
    Vector<Obj> *jivals1 = new Vector<Obj>(snum);
    Vector<Obj> *jivals2 = new Vector<Obj>(snum);
    Vector<Obj> *jivals3 = new Vector<Obj>(snum);
    if (lae->stack != 
# 7284 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 7284 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         )
      {
 for (int i = lae->stack->size () - 1; i >= 0; i--)
   {
     DbeInstr *instr = lae->stack->fetch (i);
     jivals1->store (i, (Obj) instr);
     jivals2->store (i, (Obj) instr->func);
     jivals3->store (i, (Obj) instr->addr);
   }
      }
    fpcstack->store (index, jivals1);
    pcstack->store (index, jivals2);
    offstack->store (index, jivals3);
    lae++;
  }
  Vector<Obj> *jivals4 = new Vector<Obj>(3);
  jivals4->store (0, (Obj) lam->size ());
  jivals4->store (1, (Obj) lam->total->value[1].ll);
  jivals4->store (2, (Obj) lam->total->value[0].ll);
  sumval->store (0, jivals4);
  delete lam;
  delete mlist;
  Vector<void*> *earray = new Vector<void*>(5);
  earray->store (0, evalue);
  earray->store (1, pcstack);
  earray->store (2, offstack);
  earray->store (3, fpcstack);
  earray->store (4, sumval);
  return earray;
}



Obj
dbeGetObject (int dbevindex, Obj sel_func, Obj sel_pc)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 7321 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 7321 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
   abort ();
  if (sel_pc)
    return sel_pc;
  return sel_func;
}

char *
dbeGetName (int , int exp_id)





{
  int id = (exp_id < 0) ? 0 : exp_id;
  Experiment *exp = dbeSession->get_exp (id);
  if (exp == 
# 7338 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 7338 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    return 
# 7339 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7339 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  char *buf =
   dbe_sprintf (((char *) ("%s [%s, PID %d]")),
         exp->get_expt_name (),
         exp->utargname != 
# 7343 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                          __null 
# 7343 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                               ? exp->utargname : gettext("(unknown)"),
         exp->getPID ());
  return buf;
}

Vector<char*> *
dbeGetExpVerboseName (Vector<int> *exp_ids)
{
  int len = exp_ids->size ();
  Vector<char*> *list = new Vector<char*>(len);
  for (int i = 0; i < len; i++)
    {
      char * verboseName = dbeGetName (0, exp_ids->fetch (i));
      list->store (i, verboseName);
    }
  return list;
}

long long
dbeGetStartTime (int , int exp_id)
{
  int id = (exp_id < 0) ? 0 : exp_id;
  Experiment *exp = dbeSession->get_exp (id);
  return exp ? exp->getStartTime () : (long long) 0;
}

long long
dbeGetRelativeStartTime (int , int exp_id)
{
  int id = (exp_id < 0) ? 0 : exp_id;
  Experiment *exp = dbeSession->get_exp (id);
  return exp ? exp->getRelativeStartTime () : (long long) 0;
}

long long
dbeGetEndTime (int , int exp_id)
{
  int id = (exp_id < 0) ? 0 : exp_id;
  Experiment *exp = dbeSession->get_exp (id);




  return exp ? exp->getLastEvent () : (long long) 0;
}

int
dbeGetClock (int , int exp_id)
{
  return dbeSession->get_clock (exp_id);
}

long long
dbeGetWallStartSec (int , int exp_id)
{
  int id = (exp_id < 0) ? 0 : exp_id;
  Experiment *exp = dbeSession->get_exp (id);
  return exp ? exp->getWallStartSec () : 0ll;
}

char *
dbeGetHostname (int , int exp_id)
{
  int id = (exp_id < 0) ? 0 : exp_id;
  Experiment *exp = dbeSession->get_exp (id);
  return exp ? dbe_strdup (exp->hostname) : 
# 7408 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                           __null
# 7408 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                               ;
}

static DataView *
getTimelinePackets (int dbevindex, int exp_id, int data_id, int entity_prop_id)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 7415 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 7415 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  const int sortprop_count = 3;
  const int sortprops[sortprop_count] = {
    PROP_HWCTAG,
    entity_prop_id,
    PROP_TSTAMP
  };
  DataView *packets = dbev->get_filtered_events (exp_id, data_id,
       sortprops, sortprop_count);
  return packets;
}

static long
getIdxByVals (DataView * packets, int aux, int entity_prop_val,
       uint64_t time, DataView::Relation rel)
{
  const int sortprop_count = 3;
  Datum tval[sortprop_count];
  tval[0].setUINT32 (aux);
  tval[1].setUINT32 (entity_prop_val);
  tval[2].setUINT64 (time);
  long idx = packets->getIdxByVals (tval, rel);
  return idx;
}

static bool
isValidIdx (DataView * packets, int entity_prop_id,
     int aux, int entity_prop_val, long idx)
{
  if (idx < 0 || idx >= packets->getSize ())
    return false;
  int pkt_aux = packets->getIntValue (PROP_HWCTAG, idx);
  if (pkt_aux != aux)
    return false;
  if (entity_prop_id == PROP_EXPID)
    return true;
  if (entity_prop_id == PROP_NONE)
    return true;
  int pkt_ent = packets->getIntValue (entity_prop_id, idx);
  if (pkt_ent != entity_prop_val)
    return false;
  return true;
}

static bool
hasInvisbleTLEvents (Experiment *exp, VMode view_mode)
{
  if (exp->has_java && view_mode == VMODE_USER)
    return true;
  return false;
}

static bool
isVisibleTLEvent (Experiment *exp, VMode view_mode, DataView* packets, long idx)
{
  if (hasInvisbleTLEvents (exp, view_mode))
    {
      JThread *jthread = (JThread*) packets->getObjValue (PROP_JTHREAD, idx);
      if (jthread == ((JThread*)-1) || (jthread != 
# 7474 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                __null 
# 7474 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                     && jthread->is_system ()))
 return false;
    }
  return true;
}

static long
getTLVisibleIdxByStepping (Experiment *exp, VMode view_mode, int entity_prop_id,
      DataView * packets, int aux, int entity_prop_val,
      long idx, long move_count, int direction)
{
  
# 7485 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 (static_cast <bool> (
# 7485 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 move_count >= 0
# 7485 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 ) ? void (0) : __assert_fail (
# 7485 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 "move_count >= 0"
# 7485 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc", 7485, __extension__ __PRETTY_FUNCTION__))
# 7485 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         ;
  
# 7486 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 (static_cast <bool> (
# 7486 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 direction == 1 || direction == -1 || direction == 0
# 7486 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 ) ? void (0) : __assert_fail (
# 7486 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 "direction == 1 || direction == -1 || direction == 0"
# 7486 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc", 7486, __extension__ __PRETTY_FUNCTION__))
# 7486 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                             ;
  if (direction == 0 )
    move_count = 0;
  do
    {
      if (!isValidIdx (packets, entity_prop_id, aux, entity_prop_val, idx))
 return -1;
      if (isVisibleTLEvent (exp, view_mode, packets, idx))
 {
   if (move_count <= 0)
     break;
   move_count--;
 }
      if (direction == 0)
 return -1;
      idx += direction;
    }
  while (1);
  return idx;
}

static long
getTLVisibleIdxByVals (Experiment *exp, VMode view_mode, int entity_prop_id,
         DataView * packets,
         int aux, int entity_prop_val, uint64_t time, DataView::Relation rel)
{
  long idx = getIdxByVals (packets, aux, entity_prop_val, time, rel);
  if (!hasInvisbleTLEvents (exp, view_mode))
    return idx;
  if (idx < 0)
    return idx;
  if (rel == DataView::REL_EQ)
    return -1;
  int direction = (rel == DataView::REL_LT || rel == DataView::REL_LTEQ) ? -1 : 1;
  idx = getTLVisibleIdxByStepping (exp, view_mode, entity_prop_id, packets,
       aux, entity_prop_val,
       idx, 0 , direction);
  return idx;
}



static char*
getThreadRootFuncName (int, int, int, int, VMode)
{
  return 
# 7531 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
        __null
# 7531 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
            ;
}

Vector<void*> *
dbeGetEntityProps (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 7538 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 7538 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Vector<int> *prop_id = new Vector<int>();
  Vector<char*> *prop_name = new Vector<char*>();
  Vector<char*> *prop_uname = new Vector<char*>();
  Vector<char*> *prop_cname = new Vector<char*>();

  prop_id->append (PROP_NONE);
  prop_name->append (dbe_strdup (gettext("NONE")));
  prop_uname->append (dbe_strdup (gettext("Unknown")));
  prop_cname->append (dbe_strdup (((char *) ("unknown"))));

  prop_id->append (PROP_LWPID);
  prop_name->append (dbe_strdup (gettext("LWPID")));
  prop_uname->append (dbe_strdup (gettext("LWP")));
  prop_cname->append (dbe_strdup (((char *) ("lwp"))));

  prop_id->append (PROP_THRID);
  prop_name->append (dbe_strdup (gettext("THRID")));
  prop_uname->append (dbe_strdup (gettext("Thread")));
  prop_cname->append (dbe_strdup (((char *) ("thread"))));

  prop_id->append (PROP_CPUID);
  prop_name->append (dbe_strdup (gettext("CPUID")));
  prop_uname->append (dbe_strdup (gettext("CPU")));
  prop_cname->append (dbe_strdup (((char *) ("cpu"))));

  prop_id->append (PROP_EXPID);
  prop_name->append (dbe_strdup (gettext("EXPID")));
  prop_uname->append (dbe_strdup (gettext("Process")));

  prop_cname->append (dbe_strdup (((char *) ("experiment"))));
  Vector<void*> *darray = new Vector<void*>();
  darray->store (0, prop_id);
  darray->store (1, prop_name);
  darray->store (2, prop_uname);
  darray->store (3, prop_cname);
  return darray;
}

Vector<void*> *
dbeGetEntities (int dbevindex, int exp_id, int entity_prop_id)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 7582 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 7582 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Experiment *exp = dbeSession->get_exp (exp_id);
  if (exp == 
# 7585 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 7585 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    return 
# 7586 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7586 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;


  if (exp->timelineavail == false)
    return 
# 7590 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7590 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  Vector<Histable*> *tagObjs = exp->getTagObjs ((Prop_type) entity_prop_id);
  int total_nelem;
  if (tagObjs)
    total_nelem = (int) tagObjs->size ();
  else
    total_nelem = 0;
  const VMode view_mode = dbev->get_view_mode ();
  bool show_java_threadnames = (entity_prop_id == PROP_THRID &&
    view_mode != VMODE_MACHINE);

  Vector<int> *entity_prop_vals = new Vector<int>();
  Vector<char*> *jthr_names = new Vector<char*>();
  Vector<char*> *jthr_g_names = new Vector<char*>();
  Vector<char*> *jthr_p_names = new Vector<char*>();


  for (int tagObjsIdx = 0; tagObjsIdx < total_nelem; tagObjsIdx++)
    {
      int entity_prop_val = (int) ((Other *) tagObjs->fetch (tagObjsIdx))->tag;
      entity_prop_vals->append (entity_prop_val);
      char *jname, *jgname, *jpname;
      JThread *jthread = 
# 7612 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 7612 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            ;
      bool has_java_threadnames = false;
      if (show_java_threadnames)
 {
   jthread = exp->get_jthread (entity_prop_val);
   has_java_threadnames = (jthread != ((JThread*)0)
      && jthread != ((JThread*)-1));
 }
      if (!has_java_threadnames)
 {
   jname = jgname = jpname = 
# 7622 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                            __null
# 7622 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                ;
   if (entity_prop_id == PROP_THRID || entity_prop_id == PROP_LWPID)


     jname = getThreadRootFuncName (dbevindex, exp_id, entity_prop_id,
        entity_prop_val, view_mode);
 }
      else
 {
   jname = dbe_strdup (jthread->name);
   jgname = dbe_strdup (jthread->group_name);
   jpname = dbe_strdup (jthread->parent_name);
 }
      jthr_names->append (jname);
      jthr_g_names->append (jgname);
      jthr_p_names->append (jpname);
    }
  Vector<char*> *entity_prop_name_v = new Vector<char*>();
  char* entity_prop_name = dbeSession->getPropName (entity_prop_id);
  entity_prop_name_v->append (entity_prop_name);
  Vector<void*> *darray = new Vector<void*>(5);
  darray->store (0, entity_prop_vals);
  darray->store (1, jthr_names);
  darray->store (2, jthr_g_names);
  darray->store (3, jthr_p_names);
  darray->store (4, entity_prop_name_v);
  return darray;
}


Vector<void*> *
dbeGetEntitiesV2 (int dbevindex, Vector<int> *exp_ids, int entity_prop_id)
{
  int sz = exp_ids->size ();
  Vector<void*> *res = new Vector<void*>(sz);
  for (int ii = 0; ii < sz; ii++)
    {
      int expIdx = exp_ids->fetch (ii);
      Vector<void*>* ents = dbeGetEntities (dbevindex, expIdx, entity_prop_id);
      res->store (ii, ents);
    }
  return res;
}


static Vector<void*> *
getTLDetailValues (int dbevindex, Experiment * exp, int data_id,
     VMode view_mode, DataView *packets, long idx)
{
  Vector<long long> *value = new Vector<long long>(15);
  long i = idx;
  if (data_id == DATA_SAMPLE || data_id == DATA_GCEVENT)
    {

    }
  Obj stack = (unsigned long) getStack (view_mode, packets, i);
  Vector<Obj> *funcs = stack ? dbeGetStackFunctions (dbevindex, stack) : 
# 7678 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                                        __null
# 7678 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                            ;
  Function *func = (Function*)
   getStackPC (0, view_mode, packets, i)->convertto (Histable::FUNCTION);

  value->store (0, packets->getIntValue (PROP_LWPID, i));
  value->store (1, packets->getIntValue (PROP_THRID, i));
  value->store (2, packets->getIntValue (PROP_CPUID, i));
  value->store (3, packets->getLongValue (PROP_TSTAMP, i));
  value->store (4, (unsigned long) stack);
  value->store (5, (unsigned long) func);


  switch (data_id)
    {
    case DATA_CLOCK:
      value->store (6, packets->getIntValue (PROP_MSTATE, i));
      {
 hrtime_t interval = exp->get_params ()->ptimer_usec * 1000LL
  * packets->getLongValue (PROP_NTICK, i);
 value->store (7, interval);
      }
      value->store (8, packets->getIntValue (PROP_OMPSTATE, i));
      value->store (9, packets->getLongValue (PROP_EVT_TIME, i));
      break;
    case DATA_SYNCH:
      value->store (6, packets->getLongValue (PROP_EVT_TIME, i));
      value->store (7, packets->getLongValue (PROP_SOBJ, i));
      break;
    case DATA_HWC:
      value->store (6, packets->getLongValue (PROP_HWCINT, i));
      value->store (7, packets->getLongValue (PROP_VADDR, i));
      value->store (8, packets->getLongValue (PROP_PADDR, i));
      value->store (9, packets->getLongValue (PROP_VIRTPC, i));
      value->store (10, packets->getLongValue (PROP_PHYSPC, i));
      break;
    case DATA_RACE:
      value->store (6, packets->getIntValue (PROP_RTYPE, i));
      value->store (7, packets->getIntValue (PROP_RID, i));
      value->store (8, packets->getLongValue (PROP_RVADDR, i));
      break;
    case DATA_DLCK:
      value->store (6, packets->getIntValue (PROP_DTYPE, i));
      value->store (7, packets->getIntValue (PROP_DLTYPE, i));
      value->store (8, packets->getIntValue (PROP_DID, i));
      value->store (9, packets->getLongValue (PROP_DVADDR, i));
      break;
    case DATA_HEAP:
    case DATA_HEAPSZ:
      value->store (6, packets->getIntValue (PROP_HTYPE, i));
      value->store (7, packets->getLongValue (PROP_HSIZE, i));
      value->store (8, packets->getLongValue (PROP_HVADDR, i));
      value->store (9, packets->getLongValue (PROP_HOVADDR, i));
      value->store (10, packets->getLongValue (PROP_HLEAKED, i));
      value->store (11, packets->getLongValue (PROP_HFREED, i));
      value->store (12, packets->getLongValue (PROP_HCUR_ALLOCS, i));
      value->store (13, packets->getLongValue (PROP_HCUR_LEAKS, i));
      break;
    case DATA_IOTRACE:
      value->store (6, packets->getIntValue (PROP_IOTYPE, i));
      value->store (7, packets->getIntValue (PROP_IOFD, i));
      value->store (8, packets->getLongValue (PROP_IONBYTE, i));
      value->store (9, packets->getLongValue (PROP_EVT_TIME, i));
      value->store (10, packets->getIntValue (PROP_IOVFD, i));
      break;
    }
  Vector<void*> *result = new Vector<void*>(5);
  result->store (0, value);
  result->store (1, funcs);
  result->store (2, funcs ? dbeGetFuncNames (dbevindex, funcs) : 0);
  result->store (3, stack ? dbeGetStackPCs (dbevindex, stack) : 0);
  result->store (4, stack ? dbeGetStackNames (dbevindex, stack) : 0);
  return result;
}

Vector<void*> *
dbeGetTLDetails (int dbevindex, int exp_id, int data_id,
   int entity_prop_id, Obj event_id)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 7757 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 7757 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Experiment *exp = dbeSession->get_exp (exp_id < 0 ? 0 : exp_id);
  if (exp == 
# 7760 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 7760 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    return 
# 7761 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7761 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  DataView *packets =
   getTimelinePackets (dbevindex, exp_id, data_id, entity_prop_id);
  if (!packets)
    return 
# 7765 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7765 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  VMode view_mode = dbev->get_view_mode ();
  long idx = (long) event_id;
  Vector<void*> *values = getTLDetailValues (dbevindex, exp, data_id, view_mode, packets, idx);
  return values;
}

Vector<Obj> *
dbeGetStackFunctions (int dbevindex, Obj stack)
{
  Vector<Obj> *instrs = dbeGetStackPCs (dbevindex, stack);
  if (instrs == 
# 7777 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 7777 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
    return 
# 7778 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7778 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  int stsize = instrs->size ();
  Vector<Obj> *jivals = new Vector<Obj>(stsize);
  for (int i = 0; i < stsize; i++)
    {
      Histable *obj = (Histable*) instrs->fetch (i);



      obj = obj->convertto (Histable::FUNCTION);
      jivals->store (i, (Obj) obj);
    }
  delete instrs;
  return jivals;
}

Vector<void*> *
dbeGetStacksFunctions (int dbevindex, Vector<Obj> *stacks)
{
  long sz = stacks->size ();
  Vector<void*> *res = new Vector<void*>(sz);
  for (int ii = 0; ii < sz; ii++)
    {
      Obj stack = stacks->fetch (ii);
      Vector<Obj> *jivals = dbeGetStackFunctions (dbevindex, stack);
      res->store (ii, jivals);
    }
  return res;
}

Vector<Obj> *
dbeGetStackPCs (int dbevindex, Obj stack)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 7812 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 7812 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  if (stack == 0)
    return 
# 7815 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7815 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  bool show_all = dbev->isShowAll ();
  Vector<Histable*> *instrs = CallStack::getStackPCs ((void *) stack, !show_all);
  int stsize = instrs->size ();
  int istart = 0;
  bool showAll = dbev->isShowAll ();
  for (int i = 0; i < stsize - 1; i++)
    {
      Function *func = (Function*) instrs->fetch (i)->convertto (Histable::FUNCTION);
      int ix = func->module->loadobject->seg_idx;
      if (showAll && dbev->get_lo_expand (ix) == LIBEX_API)

 istart = i;
    }
  stsize = stsize - istart;
  Vector<Obj> *jlvals = new Vector<Obj>(stsize);
  for (int i = 0; i < stsize; i++)
    {
      Histable *instr = instrs->fetch (i + istart);
      jlvals->store (i, (Obj) instr);
    }
  delete instrs;
  return jlvals;
}

Vector<char*> *
dbeGetStackNames (int dbevindex, Obj stack)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  Vector<Obj> *instrs = dbeGetStackPCs (dbevindex, stack);
  if (instrs == 
# 7846 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 7846 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
    return 
# 7847 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7847 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  int stsize = instrs->size ();
  Vector<char*> *list = new Vector<char*>(stsize);
  bool showAll = dbev->isShowAll ();
  for (int i = 0; i < stsize; i++)
    {
      Histable* instr = (Histable*) instrs->fetch (i);
      if (!showAll)
 {

   Function *func = (Function*) instr->convertto (Histable::FUNCTION);
   LoadObject *lo = ((Function*) func)->module->loadobject;
   if (dbev->get_lo_expand (lo->seg_idx) == LIBEX_HIDE)
     {
       list->store (i, dbe_strdup (lo->get_name ()));
       continue;
     }
 }
      list->store (i, dbe_strdup (instr->get_name (dbev->get_name_format ())));
    }
  delete instrs;
  return list;
}

Vector<void*> *
dbeGetSamples (int dbevindex, int exp_id, int64_t lo_idx, int64_t hi_idx)
{
  DataView * packets =
   getTimelinePackets (dbevindex, exp_id, DATA_SAMPLE, PROP_EXPID);
  if (packets == 
# 7876 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null 
# 7876 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     || packets->getSize () == 0)
    return 
# 7877 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7877 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  long lo;
  if (lo_idx < 0)
    lo = 0;
  else
    lo = (long) lo_idx;

  long long max = packets->getSize () - 1;
  long hi;
  if (hi_idx < 0 || hi_idx > max)
    hi = (long) max;
  else
    hi = (long) hi_idx;

  Vector<Vector<long long>*> *sarray = new Vector<Vector<long long>*>;
  Vector<long long>* starts = new Vector<long long>;
  Vector<long long>* ends = new Vector<long long>;
  Vector<long long>* rtimes = new Vector<long long>;
  Vector<char*> *startNames = new Vector<char*>;
  Vector<char*> *endNames = new Vector<char*>;
  Vector<int> *sampId = new Vector<int>;

  for (long index = lo; index <= hi; index++)
    {
      Sample *sample = (Sample*) packets->getObjValue (PROP_SMPLOBJ, index);
      PrUsage *prusage = sample->get_usage ();
      if (prusage == 
# 7903 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null
# 7903 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        )
 prusage = new PrUsage;
      Vector<long long> *states = prusage->getMstateValues ();
      sarray->append (states);
      starts->append (sample->get_start_time ());
      ends->append (sample->get_end_time ());
      rtimes->append (prusage->pr_rtime);
      startNames->append (dbe_strdup (sample->get_start_label ()));
      endNames->append (dbe_strdup (sample->get_end_label ()));
      sampId->append (sample->get_number ());
    }
  Vector<void *> *res = new Vector<void*>(6);
  res->store (0, sarray);
  res->store (1, starts);
  res->store (2, ends);
  res->store (3, rtimes);
  res->store (4, startNames);
  res->store (5, endNames);
  res->store (6, sampId);
  return res;
}

Vector<void*> *
dbeGetGCEvents (int dbevindex, int exp_id, int64_t lo_idx, int64_t hi_idx)
{
  DataView *packets =
   getTimelinePackets (dbevindex, exp_id, DATA_GCEVENT, PROP_EXPID);
  if (packets == 
# 7930 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null 
# 7930 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     || packets->getSize () == 0)
    return 
# 7931 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7931 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  long lo;
  if (lo_idx < 0)
    lo = 0;
  else
    lo = (long) lo_idx;
  long long max = packets->getSize () - 1;
  long hi;
  if (hi_idx < 0 || hi_idx > max)
    hi = (long) max;
  else
    hi = (long) hi_idx;

  Vector<long long>* starts = new Vector<long long>;
  Vector<long long>* ends = new Vector<long long>;
  Vector<int> *eventId = new Vector<int>;
  for (long index = lo; index <= hi; index++)
    {
      GCEvent *gcevent = (GCEvent*) packets->getObjValue (PROP_GCEVENTOBJ, index);
      if (gcevent)
 {
   starts->append (gcevent->start);
   ends->append (gcevent->end);
   eventId->append (gcevent->id);
 }
    }
  Vector<void *> *res = new Vector<void*>(3);
  res->store (0, starts);
  res->store (1, ends);
  res->store (2, eventId);
  return res;
}

Vector<Vector<char*>*>*
dbeGetIOStatistics (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  Hist_data *hist_data;
  Hist_data::HistItem *hi;
  FileData *fDataTotal;

  hist_data = dbev->iofile_data;
  if (hist_data == 
# 7974 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 7974 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
    return 
# 7975 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 7975 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  hi = hist_data->fetch (0);
  fDataTotal = (FileData*) hi->obj;

  Vector<char*> *writeStat = new Vector<char*>;
  Vector<char*> *readStat = new Vector<char*>;
  Vector<char*> *otherStat = new Vector<char*>;
  Vector<char*> *errorStat = new Vector<char*>;

  writeStat->append (dbe_strdup (gettext("Write Statistics")));
  readStat->append (dbe_strdup (gettext("Read Statistics")));
  otherStat->append (dbe_strdup (gettext("Other I/O Statistics")));
  errorStat->append (dbe_strdup (gettext("I/O Error Statistics")));

  StringBuilder sb;
  if (fDataTotal->getWriteCnt () > 0)
    {
      if (fDataTotal->getW0KB1KBCnt () > 0)
 {
   sb.sprintf (gettext("0KB - 1KB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW0KB1KBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW1KB8KBCnt () > 0)
 {
   sb.sprintf (gettext("1KB - 8KB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW1KB8KBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW8KB32KBCnt () > 0)
 {
   sb.sprintf (gettext("8KB - 32KB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW8KB32KBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW32KB128KBCnt () > 0)
 {
   sb.sprintf (gettext("32KB - 128KB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW32KB128KBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW128KB256KBCnt () > 0)
 {
   sb.sprintf (gettext("128KB - 256KB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW128KB256KBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW256KB512KBCnt () > 0)
 {
   sb.sprintf (gettext("256KB - 512KB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW256KB512KBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW512KB1000KBCnt () > 0)
 {
   sb.sprintf (gettext("512KB - 1000KB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW512KB1000KBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW1000KB10MBCnt () > 0)
 {
   sb.sprintf (gettext("1000KB - 10MB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW1000KB10MBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW10MB100MBCnt () > 0)
 {
   sb.sprintf (gettext("10MB - 100MB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW10MB100MBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW100MB1GBCnt () > 0)
 {
   sb.sprintf (gettext("100MB - 1GB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW100MB1GBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW1GB10GBCnt () > 0)
 {
   sb.sprintf (gettext("1GB - 10GB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW1GB10GBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW10GB100GBCnt () > 0)
 {
   sb.sprintf (gettext("10GB - 100GB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW10GB100GBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW100GB1TBCnt () > 0)
 {
   sb.sprintf (gettext("100GB - 1TB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW100GB1TBCnt ());
   writeStat->append (sb.toString ());
 }
      if (fDataTotal->getW1TB10TBCnt () > 0)
 {
   sb.sprintf (gettext("1TB - 10TB"));
   writeStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getW1TB10TBCnt ());
   writeStat->append (sb.toString ());
 }

      sb.sprintf (gettext("Longest write"));
      writeStat->append (sb.toString ());
      sb.sprintf (((char *) ("%.6f (secs.)")),
    (double) (fDataTotal->getWSlowestBytes () / (double) 1000000000));
      writeStat->append (sb.toString ());

      sb.sprintf (gettext("Smallest write bytes"));
      writeStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (fDataTotal->getWSmallestBytes ()));
      writeStat->append (sb.toString ());

      sb.sprintf (gettext("Largest write bytes"));
      writeStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (fDataTotal->getWLargestBytes ()));
      writeStat->append (sb.toString ());

      sb.sprintf (gettext("Total time"));
      writeStat->append (sb.toString ());
      sb.sprintf (((char *) ("%.6f (secs.)")),
    (double) (fDataTotal->getWriteTime () / (double) 1000000000));
      writeStat->append (sb.toString ());

      sb.sprintf (gettext("Total calls"));
      writeStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (fDataTotal->getWriteCnt ()));
      writeStat->append (sb.toString ());

      sb.sprintf (gettext("Total bytes"));
      writeStat->append (sb.toString ());
      sb.sprintf (((char *) ("%lld")), (long long) (fDataTotal->getWriteBytes ()));
      writeStat->append (sb.toString ());
    }

  if (fDataTotal->getReadCnt () > 0)
    {
      if (fDataTotal->getR0KB1KBCnt () > 0)
 {
   sb.sprintf (gettext("0KB - 1KB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR0KB1KBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR1KB8KBCnt () > 0)
 {
   sb.sprintf (gettext("1KB - 8KB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR1KB8KBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR8KB32KBCnt () > 0)
 {
   sb.sprintf (gettext("8KB - 32KB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR8KB32KBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR32KB128KBCnt () > 0)
 {
   sb.sprintf (gettext("32KB - 128KB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR32KB128KBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR128KB256KBCnt () > 0)
 {
   sb.sprintf (gettext("128KB - 256KB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR128KB256KBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR256KB512KBCnt () > 0)
 {
   sb.sprintf (gettext("256KB - 512KB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR256KB512KBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR512KB1000KBCnt () > 0)
 {
   sb.sprintf (gettext("512KB - 1000KB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR512KB1000KBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR1000KB10MBCnt () > 0)
 {
   sb.sprintf (gettext("1000KB - 10MB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR1000KB10MBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR10MB100MBCnt () > 0)
 {
   sb.sprintf (gettext("10MB - 100MB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR10MB100MBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR100MB1GBCnt () > 0)
 {
   sb.sprintf (gettext("100MB - 1GB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR100MB1GBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR1GB10GBCnt () > 0)
 {
   sb.sprintf (gettext("1GB - 10GB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR1GB10GBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR10GB100GBCnt () > 0)
 {
   sb.sprintf (gettext("10GB - 100GB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR10GB100GBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR100GB1TBCnt () > 0)
 {
   sb.sprintf (gettext("100GB - 1TB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR100GB1TBCnt ());
   readStat->append (sb.toString ());
 }
      if (fDataTotal->getR1TB10TBCnt () > 0)
 {
   sb.sprintf (gettext("1TB - 10TB"));
   readStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), fDataTotal->getR1TB10TBCnt ());
   readStat->append (sb.toString ());
 }

      sb.sprintf (gettext("Longest read"));
      readStat->append (sb.toString ());
      sb.sprintf (((char *) ("%.6f (secs.)")),
    (double) (fDataTotal->getRSlowestBytes () / (double) 1000000000));
      readStat->append (sb.toString ());

      sb.sprintf (gettext("Smallest read bytes"));
      readStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (fDataTotal->getRSmallestBytes ()));
      readStat->append (sb.toString ());

      sb.sprintf (gettext("Largest read bytes"));
      readStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (fDataTotal->getRLargestBytes ()));
      readStat->append (sb.toString ());

      sb.sprintf (gettext("Total time"));
      readStat->append (sb.toString ());
      sb.sprintf (((char *) ("%.6f (secs.)")),
    (double) (fDataTotal->getReadTime () / (double) 1000000000));
      readStat->append (sb.toString ());

      sb.sprintf (gettext("Total calls"));
      readStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (fDataTotal->getReadCnt ()));
      readStat->append (sb.toString ());

      sb.sprintf (gettext("Total bytes"));
      readStat->append (sb.toString ());
      sb.sprintf (((char *) ("%lld")), (long long) (fDataTotal->getReadBytes ()));
      readStat->append (sb.toString ());
    }

  if (fDataTotal->getOtherCnt () > 0)
    {
      sb.sprintf (gettext("Total time"));
      otherStat->append (sb.toString ());
      sb.sprintf (((char *) ("%.6f (secs.)")),
    (double) (fDataTotal->getOtherTime () / (double) 1000000000));
      otherStat->append (sb.toString ());

      sb.sprintf (gettext("Total calls"));
      otherStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (fDataTotal->getOtherCnt ()));
      otherStat->append (sb.toString ());
    }

  if (fDataTotal->getErrorCnt () > 0)
    {
      sb.sprintf (gettext("Total time"));
      errorStat->append (sb.toString ());
      sb.sprintf (((char *) ("%.6f (secs.)")),
    (double) (fDataTotal->getErrorTime () / (double) 1000000000));
      errorStat->append (sb.toString ());

      sb.sprintf (gettext("Total calls"));
      errorStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (fDataTotal->getErrorCnt ()));
      errorStat->append (sb.toString ());
    }
  Vector<Vector<char*>*>* statisticsData = new Vector<Vector<char*>*>(4);
  statisticsData->store (0, writeStat);
  statisticsData->store (1, readStat);
  statisticsData->store (2, otherStat);
  statisticsData->store (3, errorStat);
  return statisticsData;
}

Vector<Vector<char*>*>*
dbeGetHeapStatistics (int dbevindex)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  Hist_data *hist_data;
  Hist_data::HistItem *hi;
  HeapData *hDataTotal;
  hist_data = dbev->heapcs_data;
  if (hist_data == 
# 8301 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 8301 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
    return 
# 8302 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8302 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  hi = hist_data->fetch (0);
  hDataTotal = (HeapData*) hi->obj;
  Vector<char*> *memoryUsage = new Vector<char*>;
  Vector<char*> *allocStat = new Vector<char*>;
  Vector<char*> *leakStat = new Vector<char*>;

  memoryUsage->append (dbe_strdup (gettext("Process With Highest Peak Memory Usage")));
  allocStat->append (dbe_strdup (gettext("Memory Allocations Statistics")));
  leakStat->append (dbe_strdup (gettext("Memory Leaks Statistics")));
  StringBuilder sb;
  if (hDataTotal->getPeakMemUsage () > 0)
    {
      sb.sprintf (gettext("Heap size bytes"));
      memoryUsage->append (sb.toString ());
      sb.sprintf (((char *) ("%lld")), (long long) (hDataTotal->getPeakMemUsage ()));
      memoryUsage->append (sb.toString ());

      sb.sprintf (gettext("Experiment Id"));
      memoryUsage->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (hDataTotal->getUserExpId ()));
      memoryUsage->append (sb.toString ());

      sb.sprintf (gettext("Process Id"));
      memoryUsage->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (hDataTotal->getPid ()));
      memoryUsage->append (sb.toString ());

      Vector<hrtime_t> *pTimestamps;
      pTimestamps = hDataTotal->getPeakTimestamps ();
      if (pTimestamps != 
# 8333 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 8333 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            )
 {
   for (int i = 0; i < pTimestamps->size (); i++)
     {
       sb.sprintf (gettext("Time of peak"));
       memoryUsage->append (sb.toString ());
       sb.sprintf (((char *) ("%.3f (secs.)")), (double) (pTimestamps->fetch (i) / (double) 1000000000));
       memoryUsage->append (sb.toString ());
     }
 }
    }

  if (hDataTotal->getAllocCnt () > 0)
    {
      if (hDataTotal->getA0KB1KBCnt () > 0)
 {
   sb.sprintf (gettext("0KB - 1KB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA0KB1KBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA1KB8KBCnt () > 0)
 {
   sb.sprintf (gettext("1KB - 8KB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA1KB8KBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA8KB32KBCnt () > 0)
 {
   sb.sprintf (gettext("8KB - 32KB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA8KB32KBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA32KB128KBCnt () > 0)
 {
   sb.sprintf (gettext("32KB - 128KB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA32KB128KBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA128KB256KBCnt () > 0)
 {
   sb.sprintf (gettext("128KB - 256KB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA128KB256KBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA256KB512KBCnt () > 0)
 {
   sb.sprintf (gettext("256KB - 512KB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA256KB512KBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA512KB1000KBCnt () > 0)
 {
   sb.sprintf (gettext("512KB - 1000KB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA512KB1000KBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA1000KB10MBCnt () > 0)
 {
   sb.sprintf (gettext("1000KB - 10MB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA1000KB10MBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA10MB100MBCnt () > 0)
 {
   sb.sprintf (gettext("10MB - 100MB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA10MB100MBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA100MB1GBCnt () > 0)
 {
   sb.sprintf (gettext("100MB - 1GB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA100MB1GBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA1GB10GBCnt () > 0)
 {
   sb.sprintf (gettext("1GB - 10GB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA1GB10GBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA10GB100GBCnt () > 0)
 {
   sb.sprintf (gettext("10GB - 100GB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA10GB100GBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA100GB1TBCnt () > 0)
 {
   sb.sprintf (gettext("100GB - 1TB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA100GB1TBCnt ());
   allocStat->append (sb.toString ());
 }
      if (hDataTotal->getA1TB10TBCnt () > 0)
 {
   sb.sprintf (gettext("1TB - 10TB"));
   allocStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getA1TB10TBCnt ());
   allocStat->append (sb.toString ());
 }

      sb.sprintf (gettext("Smallest allocation bytes"));
      allocStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (hDataTotal->getASmallestBytes ()));
      allocStat->append (sb.toString ());

      sb.sprintf (gettext("Largest allocation bytes"));
      allocStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (hDataTotal->getALargestBytes ()));
      allocStat->append (sb.toString ());

      sb.sprintf (gettext("Total allocations"));
      allocStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (hDataTotal->getAllocCnt ()));
      allocStat->append (sb.toString ());

      sb.sprintf (gettext("Total bytes"));
      allocStat->append (sb.toString ());
      sb.sprintf (((char *) ("%lld")), (long long) (hDataTotal->getAllocBytes ()));
      allocStat->append (sb.toString ());
    }

  if (hDataTotal->getLeakCnt () > 0)
    {
      if (hDataTotal->getL0KB1KBCnt () > 0)
 {
   sb.sprintf (gettext("0KB - 1KB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL0KB1KBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL1KB8KBCnt () > 0)
 {
   sb.sprintf (gettext("1KB - 8KB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL1KB8KBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL8KB32KBCnt () > 0)
 {
   sb.sprintf (gettext("8KB - 32KB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL8KB32KBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL32KB128KBCnt () > 0)
 {
   sb.sprintf (gettext("32KB - 128KB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL32KB128KBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL128KB256KBCnt () > 0)
 {
   sb.sprintf (gettext("128KB - 256KB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL128KB256KBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL256KB512KBCnt () > 0)
 {
   sb.sprintf (gettext("256KB - 512KB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL256KB512KBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL512KB1000KBCnt () > 0)
 {
   sb.sprintf (gettext("512KB - 1000KB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL512KB1000KBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL1000KB10MBCnt () > 0)
 {
   sb.sprintf (gettext("1000KB - 10MB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL1000KB10MBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL10MB100MBCnt () > 0)
 {
   sb.sprintf (gettext("10MB - 100MB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL10MB100MBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL100MB1GBCnt () > 0)
 {
   sb.sprintf (gettext("100MB - 1GB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL100MB1GBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL1GB10GBCnt () > 0)
 {
   sb.sprintf (gettext("1GB - 10GB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL1GB10GBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL10GB100GBCnt () > 0)
 {
   sb.sprintf (gettext("10GB - 100GB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL10GB100GBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL100GB1TBCnt () > 0)
 {
   sb.sprintf (gettext("100GB - 1TB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL100GB1TBCnt ());
   leakStat->append (sb.toString ());
 }
      if (hDataTotal->getL1TB10TBCnt () > 0)
 {
   sb.sprintf (gettext("1TB - 10TB"));
   leakStat->append (sb.toString ());
   sb.sprintf (((char *) ("%d")), hDataTotal->getL1TB10TBCnt ());
   leakStat->append (sb.toString ());
 }

      sb.sprintf (gettext("Smallest leaked bytes"));
      leakStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (hDataTotal->getLSmallestBytes ()));
      leakStat->append (sb.toString ());

      sb.sprintf (gettext("Largest leaked bytes"));
      leakStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (hDataTotal->getLLargestBytes ()));
      leakStat->append (sb.toString ());

      sb.sprintf (gettext("Total leaked"));
      leakStat->append (sb.toString ());
      sb.sprintf (((char *) ("%d")), (int) (hDataTotal->getLeakCnt ()));
      leakStat->append (sb.toString ());

      sb.sprintf (gettext("Total bytes"));
      leakStat->append (sb.toString ());
      sb.sprintf (((char *) ("%lld")), (long long) (hDataTotal->getLeakBytes ()));
      leakStat->append (sb.toString ());
    }
  Vector<Vector<char*>*>* statisticsData = new Vector<Vector<char*>*>(3);
  statisticsData->store (0, memoryUsage);
  statisticsData->store (1, allocStat);
  statisticsData->store (2, leakStat);
  return statisticsData;
}

Vector<char*> *
dbeGetFuncNames (int dbevindex, Vector<Obj> *funcs)
{
  int len = funcs->size ();
  Vector<char*> *list = new Vector<char*>(len);
  for (int i = 0; i < len; i++)
    list->store (i, dbeGetFuncName (dbevindex, funcs->fetch (i)));
  return list;
}

Vector<char*> *
dbeGetObjNamesV2 (int dbevindex, Vector<uint64_t> *ids)
{
  int len = ids->size ();
  Vector<char*> *list = new Vector<char*>(len);
  for (int i = 0; i < len; i++)
    list->store (i, dbeGetObjNameV2 (dbevindex, ids->fetch (i)));
  return list;
}

char *
dbeGetFuncName (int dbevindex, Obj func)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 8619 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 8619 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  if (func == 0)
    return 
# 8622 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8622 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  char *fname;
  fname = ((Histable *) func)->get_name (dbev->get_name_format ());
  return fname ? dbe_strdup (fname) : 
# 8625 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                     __null
# 8625 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                         ;
}

Vector<uint64_t> *
dbeGetFuncIds (int dbevindex, Vector<Obj> *funcs)
{
  int len = funcs->size ();
  Vector<uint64_t> *list = new Vector<uint64_t>(len);
  for (int i = 0; i < len; i++)
    list->store (i, dbeGetFuncId (dbevindex, funcs->fetch (i)));
  return list;
}

uint64_t
dbeGetFuncId (int dbevindex, Obj func)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 8642 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 8642 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  if (func == 0)
    return 0;
  uint64_t id = ((Histable *) func)->id;
  return id;
}

char *
dbeGetObjNameV2 (int dbevindex, uint64_t id)
{
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 8654 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 8654 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Histable *obj = dbeSession->findObjectById (id);
  if (obj == 
# 8657 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 8657 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    return 
# 8658 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8658 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  char *fname = obj->get_name (dbev->get_name_format ());
  return fname ? dbe_strdup (fname) : 
# 8660 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                     __null
# 8660 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                         ;
}

char *
dbeGetDataspaceTypeDesc (int , Obj stack)
{
  if (stack == 0)
    return 
# 8667 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8667 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  Histable *hist = CallStack::getStackPC ((void *) stack, 0);
  DbeInstr *instr;
  Histable::Type type = hist->get_type ();
  if (type != Histable::INSTR)
    return 
# 8672 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8672 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  else
    instr = (DbeInstr *) hist;
  char *descriptor = instr->get_descriptor ();
  return descriptor ? dbe_strdup (descriptor) : 
# 8676 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                               __null
# 8676 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                   ;
}

Vector<void*> *
dbeGetDataDescriptorsV2 (int exp_id)
{
  Experiment *exp = dbeSession->get_exp (exp_id);
  if (exp == 
# 8683 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 8683 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    return 
# 8684 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8684 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  Vector<int> *dataId = new Vector<int>;
  Vector<char*> *dataName = new Vector<char*>;
  Vector<char*> *dataUName = new Vector<char*>;
  Vector<int> *auxProp = new Vector<int>;
  Vector<DataDescriptor*> *ddscr = exp->getDataDescriptors ();
  for (int i = 0; i < ddscr->size (); i++)
    {
      DataDescriptor *dataDscr = ddscr->fetch (i);
      if (dataDscr->getFlags () & DDFLAG_NOSHOW)
 continue;
      int data_id = dataDscr->getId ();
      int aux_prop_id = (data_id == DATA_HWC) ? PROP_HWCTAG : PROP_NONE;
      dataId->append (data_id);
      dataName->append (strdup (dataDscr->getName ()));
      dataUName->append (strdup (dataDscr->getUName ()));
      auxProp->append (aux_prop_id);
    }
  delete ddscr;
  Vector<void*> *res = new Vector<void*>(3);
  res->store (0, dataId);
  res->store (1, dataName);
  res->store (2, dataUName);
  res->store (3, auxProp);
  return res;
}

Vector<void*> *
dbeGetDataPropertiesV2 (int exp_id, int data_id)
{
  Experiment *exp = dbeSession->get_exp (exp_id);
  if (exp == 
# 8715 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 8715 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    return 
# 8716 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8716 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  DataDescriptor *dataDscr = exp->get_raw_events (data_id);
  if (dataDscr == 
# 8718 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 8718 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
    return 
# 8719 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8719 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  Vector<PropDescr*> *props = dataDscr->getProps ();
  Vector<int> *propId = new Vector<int>(props->size ());
  Vector<char*> *propUName = new Vector<char*>(props->size ());
  Vector<int> *propTypeId = new Vector<int>(props->size ());
  Vector<char*> *propTypeName = new Vector<char*>(props->size ());
  Vector<int> *propFlags = new Vector<int>(props->size ());
  Vector<char*> *propName = new Vector<char*>(props->size ());
  Vector<void*> *propStateNames = new Vector<void*>(props->size ());
  Vector<void*> *propStateUNames = new Vector<void*>(props->size ());

  for (int i = 0; i < props->size (); i++)
    {
      PropDescr *prop = props->fetch (i);
      char *pname = prop->name;
      if (pname == 
# 8734 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 8734 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
 pname = ((char *) (""));
      char *uname = prop->uname;
      if (uname == 
# 8737 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 8737 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
 uname = pname;
      int vtypeNum = prop->vtype;
      if (vtypeNum < 0 || vtypeNum >= TYPE_LAST)
 vtypeNum = TYPE_NONE;
      const char * vtypeNames[] = { ((char *) ("NONE")), ((char *) ("INT32")), ((char *) ("UINT32")), ((char *) ("INT64")), ((char *) ("UINT64")), ((char *) ("STRING")), ((char *) ("DOUBLE")), ((char *) ("OBJECT")), ((char *) ("DATE")), ((char *) ("BOOL")), ((char *) ("ENUM")) };
      const char *vtype = vtypeNames[prop->vtype];
      Vector<char*> *stateNames = 
# 8744 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                 __null
# 8744 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                     ;
      Vector<char*> *stateUNames = 
# 8745 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                  __null
# 8745 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                      ;
      int nStates = prop->getMaxState ();
      if (nStates > 0)
 {
   stateNames = new Vector<char*>(nStates);
   stateUNames = new Vector<char*>(nStates);
   for (int kk = 0; kk < nStates; kk++)
     {
       const char * stateName = prop->getStateName (kk);
       stateNames->store (kk, dbe_strdup (stateName));
       const char * Uname = prop->getStateUName (kk);
       stateUNames->store (kk, dbe_strdup (Uname));
     }
 }
      propId->store (i, prop->propID);
      propUName->store (i, dbe_strdup (uname));
      propTypeId->store (i, prop->vtype);
      propTypeName->store (i, dbe_strdup (vtype));
      propFlags->store (i, prop->flags);
      propName->store (i, dbe_strdup (pname));
      propStateNames->store (i, stateNames);
      propStateUNames->store (i, stateUNames);
    }
  Vector<void*> *res = new Vector<void*>(7);
  res->store (0, propId);
  res->store (1, propUName);
  res->store (2, propTypeId);
  res->store (3, propTypeName);
  res->store (4, propFlags);
  res->store (5, propName);
  res->store (6, propStateNames);
  res->store (7, propStateUNames);
  return res;
}

Vector<void *> *
dbeGetExperimentTimeInfo (Vector<int> *exp_ids)
{
  int sz = exp_ids->size ();
  Vector<long long> *offset_time = new Vector<long long> (sz);
  Vector<long long> *start_time = new Vector<long long> (sz);
  Vector<long long> *end_time = new Vector<long long> (sz);
  Vector<long long> *start_wall_sec = new Vector<long long> (sz);
  Vector<char* > *hostname = new Vector<char*> (sz);
  Vector<int> *cpu_freq = new Vector<int> (sz);
  for (int ii = 0; ii < sz; ii++)
    {
      int expIdx = exp_ids->fetch (ii);
      {

 int id = (expIdx < 0) ? 0 : expIdx;
 Experiment *exp = dbeSession->get_exp (id);
 if (exp)
   {
     Vector<DataDescriptor*> *ddscr = exp->getDataDescriptors ();
     delete ddscr;
   }
      }
      offset_time->store (ii, dbeGetRelativeStartTime (0, expIdx));
      start_time->store (ii, dbeGetStartTime (0, expIdx));
      end_time->store (ii, dbeGetEndTime (0, expIdx));
      start_wall_sec->store (ii, dbeGetWallStartSec (0, expIdx));
      hostname->store (ii, dbeGetHostname (0, expIdx));
      cpu_freq->store (ii, dbeGetClock (0, expIdx));
    }
  Vector<void*> *res = new Vector<void*>(4);
  res->store (0, offset_time);
  res->store (1, start_time);
  res->store (2, end_time);
  res->store (3, start_wall_sec);
  res->store (4, hostname);
  res->store (5, cpu_freq);
  return res;
}

Vector<void *> *
dbeGetExperimentDataDescriptors (Vector<int> *exp_ids)
{
  int sz = exp_ids->size ();
  Vector<void*> *exp_dscr_info = new Vector<void*> (sz);
  Vector<void*> *exp_dscr_props = new Vector<void*> (sz);

  for (int ii = 0; ii < sz; ii++)
    {
      int expIdx = exp_ids->fetch (ii);
      Vector<void*> *ddscrInfo = dbeGetDataDescriptorsV2 (expIdx);
      Vector<void*> *ddscrProps = new Vector<void*> ();
      if (ddscrInfo)
 {
   Vector<int> *dataId = (Vector<int>*)ddscrInfo->fetch (0);
   if (dataId)
     {

       int ndata = dataId->size ();
       for (int j = 0; j < ndata; ++j)
  {
    Vector<void*> *props = dbeGetDataPropertiesV2 (expIdx, dataId->fetch (j));
    ddscrProps->store (j, props);
  }
     }
 }
      exp_dscr_info->store (ii, ddscrInfo);
      exp_dscr_props->store (ii, ddscrProps);
    }
  Vector<void*> *res = new Vector<void*>(2);
  res->store (0, exp_dscr_info);
  res->store (1, exp_dscr_props);
  return res;
}

static Vector<void *> *
dbeGetTLDataRepVals (VMode view_mode, hrtime_t start_ts, hrtime_t delta,
       int numDeltas, DataView*packets,
       Vector<long> *representativeEvents, bool showDuration);

static bool
dbeHasTLData (int dbevindex, int exp_id, int data_id, int entity_prop_id,
       int entity_prop_value, int aux)
{
  DataView *packets =
   getTimelinePackets (dbevindex, exp_id, data_id, entity_prop_id);
  if (!packets || packets->getSize () == 0)
    return false;
  long start_ind = getIdxByVals (packets, aux, entity_prop_value,
     0, DataView::REL_GTEQ);
  if (start_ind < 0)
    return false;

  DbeView *dbev = dbeSession->getView (dbevindex);
  VMode view_mode = dbev->get_view_mode ();
  Experiment *exp = dbeSession->get_exp (exp_id);
  if (!hasInvisbleTLEvents (exp, view_mode))
    return true;
  long end_ind = getIdxByVals (packets, aux, entity_prop_value,
          MAX_TIME, DataView::REL_LTEQ);
  for (long ii = start_ind; ii <= end_ind; ii++)
    {
      if (!isVisibleTLEvent (exp, view_mode, packets, ii))
 continue;
      return true;
    }
  return false;
}

Vector<bool> *
dbeHasTLData (int dbev_index, Vector<int> *exp_ids, Vector<int> *data_ids,
       Vector<int> *entity_prop_ids,
       Vector<int> *entity_prop_values, Vector<int> *auxs)
{
  DbeView *dbev = dbeSession->getView (dbev_index);
  if (!dbev->isShowAll () && (dbev->isShowHideChanged ()
         || dbev->isNewViewMode ()))
    {

      dbev->resetAndConstructShowHideStacks ();
      if (dbev->isNewViewMode ())
 dbev->resetNewViewMode ();
      if (dbev->isShowHideChanged ())
 dbev->resetShowHideChanged ();
    }

  int sz = exp_ids->size ();
  Vector<bool> *hasVec = new Vector<bool>(sz);
  for (int ii = 0; ii < sz; ii++)
    {
      bool hasData = dbeHasTLData (dbev_index, exp_ids->fetch (ii),
       data_ids->fetch (ii),
       entity_prop_ids->fetch (ii),
       entity_prop_values->fetch (ii),
       auxs->fetch (ii));
      hasVec->store (ii, hasData);
    }
  return hasVec;
}
# 8930 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
Vector<void *> *
dbeGetTLData (
       int dbevindex,
       int exp_id,
       int data_id,
       int entity_prop_id,
       int entity_prop_value,
       int aux,
       hrtime_t param_start_ts,
       hrtime_t param_delta,
       int param_numDeltas,
       bool getRepresentatives,
       Vector<char *> *chartProps)
{
  const hrtime_t start_ts = param_start_ts;
  const hrtime_t delta = param_delta;
  const int numDeltas = param_numDeltas;
  DbeView *dbev = dbeSession->getView (dbevindex);
  if (dbev == 
# 8948 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
             __null
# 8948 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 )
    abort ();
  Experiment *exp = dbeSession->get_exp (exp_id);
  if (exp == 
# 8951 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 8951 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    return 
# 8952 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8952 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  if (getRepresentatives == false && chartProps == 
# 8953 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                  __null
# 8953 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                      )
    return 
# 8954 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8954 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  if (delta <= 0)
    return 
# 8956 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8956 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  hrtime_t tmp_ts = start_ts + delta * numDeltas;
  if (tmp_ts < start_ts)
    tmp_ts = MAX_TIME;
  const hrtime_t end_ts = tmp_ts;
  if (exp->get_status () == Experiment::INCOMPLETE &&
      exp->getLastEvent () < end_ts)
    exp->update ();
  DataView *packets =
   getTimelinePackets (dbevindex, exp_id, data_id, entity_prop_id);
  if (packets == 
# 8967 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 8967 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    return 
# 8968 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 8968 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;

  VMode view_mode = dbev->get_view_mode ();


  Vector<long> *representativeEvents = 
# 8973 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                      __null
# 8973 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                          ;

  Vector<int> *binRepIdx = 
# 8975 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                          __null
# 8975 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                              ;

  Vector<void*> *representativeVals = 
# 8977 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                     __null
# 8977 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                         ;



  Vector<int> *propIds = 
# 8981 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 8981 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            ;
  Vector<void*> *propVals = 
# 8982 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                           __null
# 8982 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                               ;
  Vector<int> *propNumStates = 
# 8983 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                              __null
# 8983 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                  ;
  Vector<bool> *propCumulativeChart = 
# 8984 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                     __null
# 8984 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                         ;
  Vector<long long> *propCumulativeRecentBinLastVal = 
# 8985 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                     __null
# 8985 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                         ;
  Vector<long long> *propCumulativeRecentBinHighVal = 
# 8986 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                     __null
# 8986 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                         ;
  Vector<int> *propCumulativeRecentBin = 
# 8987 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                        __null
# 8987 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                            ;


  bool tmp_repsShowDuration = false;
  bool tmp_statesUseDuration = false;
  bool tmp_extendMicrostates = false;
  const hrtime_t ptimerTickDuration = exp->get_params ()->ptimer_usec * 1000LL;
  const bool hasDuration = packets->getProp (PROP_EVT_TIME) ? true : false;
  if (hasDuration)
    {
      switch (entity_prop_id)
 {
 case PROP_CPUID:
   tmp_repsShowDuration = false;
   tmp_statesUseDuration = false;
   break;
 case PROP_THRID:
 case PROP_LWPID:
   tmp_repsShowDuration = true;
   tmp_statesUseDuration = true;
   tmp_extendMicrostates = (DATA_CLOCK == data_id) && (ptimerTickDuration < param_delta);
   break;
 case PROP_EXPID:
 case PROP_NONE:
 default:
   if (DATA_SAMPLE == data_id)
     {
       tmp_repsShowDuration = true;
       tmp_statesUseDuration = true;
     }
   else if (DATA_GCEVENT == data_id)
     {
       tmp_repsShowDuration = true;
       tmp_statesUseDuration = true;
     }
   else if (DATA_CLOCK == data_id)
     {
       tmp_repsShowDuration = false;
       tmp_statesUseDuration = true;
       tmp_extendMicrostates = true;
     }
   else
     {
       tmp_repsShowDuration = false;
       tmp_statesUseDuration = true;
     }
   break;
 }
    }
  const bool repsShowDuration = tmp_repsShowDuration;
  const bool statesUseDuration = tmp_statesUseDuration;
  const bool extendMicrostates = tmp_extendMicrostates;



  const bool reverseScan = repsShowDuration || extendMicrostates;


  long lo_pkt_idx, hi_pkt_idx;
  if (extendMicrostates && !(entity_prop_id == PROP_THRID || entity_prop_id == PROP_LWPID))
    {

      hrtime_t exp_end_time = exp->getLastEvent () + 1;
      hi_pkt_idx = getIdxByVals (packets, aux, entity_prop_value,
     exp_end_time, DataView::REL_LT);
    }
  else
    hi_pkt_idx = getIdxByVals (packets, aux, entity_prop_value,
          end_ts, DataView::REL_LT);
  if (repsShowDuration)
    {
# 9086 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
      long idx;
      if (hi_pkt_idx >= 0)

 idx = hi_pkt_idx + 1;
      else
 idx = getIdxByVals (packets, aux, entity_prop_value,
       end_ts, DataView::REL_GTEQ);
      if (isValidIdx (packets, entity_prop_id, aux, entity_prop_value, idx))
 {
   int64_t pkt_ts = packets->getLongValue (PROP_TSTAMP, idx);
   int64_t duration = packets->getLongValue (PROP_EVT_TIME, idx);
   pkt_ts -= duration;
   if (pkt_ts < end_ts)
     hi_pkt_idx = idx;
 }
    }
  lo_pkt_idx = getIdxByVals (packets, aux, entity_prop_value,
        start_ts, DataView::REL_GTEQ);


  bool hasCumulativeCharts = false;
  if (chartProps && chartProps->size () > 0)
    {
      int nprops = chartProps->size ();

      propIds = new Vector<int> (nprops);
      propVals = new Vector<void*>(nprops);
      propNumStates = new Vector<int> (nprops);
      propCumulativeChart = new Vector<bool>(nprops);
      propCumulativeRecentBinLastVal = new Vector<long long>(nprops);
      propCumulativeRecentBinHighVal = new Vector<long long>(nprops);
      propCumulativeRecentBin = new Vector<int>(nprops);
      for (int propNum = 0; propNum < nprops; propNum++)
 {
   const char* propStr = chartProps->fetch (propNum);
   int items_per_prop = 0;
   int prop_id = PROP_NONE;
   if (!strcmp (propStr, "EVT_COUNT"))
     items_per_prop = 1;
   else
     {
       int lookup_prop_id = dbeSession->getPropIdByName (propStr);
       PropDescr *propDscr = packets->getProp (lookup_prop_id);
       if (propDscr != 
# 9129 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 9129 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          )
  {
    switch (propDscr->vtype)
      {
      case TYPE_INT32:
      case TYPE_UINT32:
      case TYPE_INT64:
      case TYPE_UINT64:
        items_per_prop = propDscr->getMaxState () + 1;

        prop_id = lookup_prop_id;
        break;
      case TYPE_DOUBLE:
        break;
      case TYPE_STRING:
      case TYPE_OBJ:
      case TYPE_DATE:
      default:
        break;
      }
  }
     }
   void *vals;
   if (!items_per_prop)
     vals = 
# 9153 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
           __null
# 9153 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
               ;
   else if (items_per_prop == 1)
     {
       Vector<long long> *longVals = new Vector<long long> ();
       longVals->store (numDeltas - 1, 0);
       vals = longVals;
     }
   else
     {
       Vector<Vector<long long>*> *stateVals =
        new Vector<Vector<long long>*> ();
       vals = stateVals;

     }

   bool isCumulativeChart;


   isCumulativeChart = (prop_id == PROP_HCUR_LEAKS || prop_id == PROP_HCUR_ALLOCS);

   if (isCumulativeChart)
     hasCumulativeCharts = true;
   propIds->store (propNum, prop_id);
   propVals->store (propNum, vals);
   propNumStates->store (propNum, items_per_prop);
   propCumulativeRecentBinLastVal->store (propNum, 0);
   propCumulativeRecentBinHighVal->store (propNum, 0);
   propCumulativeRecentBin->store (propNum, 0);
   propCumulativeChart->store (propNum, isCumulativeChart);
 }
    }


  if (hasCumulativeCharts)
    {

      long lo_idx;
      if (lo_pkt_idx >= 0)

 lo_idx = lo_pkt_idx - 1;
      else

 lo_idx = getIdxByVals (packets, aux, entity_prop_value,
          start_ts, DataView::REL_LT);
      if (isValidIdx (packets, entity_prop_id, aux, entity_prop_value, lo_idx))
 {


   int nprops = propCumulativeChart->size ();
   for (int propNum = 0; propNum < nprops; propNum++)
     {
       if (!propCumulativeChart->fetch (propNum))
  continue;
       int propId = propIds->fetch (propNum);
       long long value = packets->getLongValue (propId, lo_idx);
       propCumulativeRecentBinLastVal->store (propNum, value);
       propCumulativeRecentBinHighVal->store (propNum, value);
     }

   lo_pkt_idx = lo_idx;
   if (hi_pkt_idx < lo_pkt_idx)
     hi_pkt_idx = lo_pkt_idx;
 }
    }
  if (lo_pkt_idx < 0 || hi_pkt_idx < 0)
    goto dbeGetTLData_done;


  if (getRepresentatives)
    {
      representativeEvents = new Vector<long>(numDeltas);

      binRepIdx = new Vector<int>(numDeltas);
      for (int ii = 0; ii < numDeltas; ++ii)
 binRepIdx->append (-1);
    }





  long start_idx, idx_inc;
  if (!reverseScan)
    {
      start_idx = lo_pkt_idx;
      idx_inc = 1;
    }
  else
    {
      start_idx = hi_pkt_idx;
      idx_inc = -1;
    }
  for (long ii = start_idx; ii >= lo_pkt_idx && ii <= hi_pkt_idx; ii += idx_inc)
    {
      if (!isVisibleTLEvent (exp, view_mode, packets, ii) && !hasCumulativeCharts)
 continue;


      int tmp_start_bin;
      int tmp_end_bin;
      const hrtime_t pkt_end_ts = packets->getLongValue (PROP_TSTAMP, ii);
      const hrtime_t pkt_dur = packets->getLongValue (PROP_EVT_TIME, ii);
      const hrtime_t pkt_start_ts = pkt_end_ts - pkt_dur;
      if (pkt_end_ts < start_ts && !hasCumulativeCharts)
 continue;
      if (pkt_start_ts >= end_ts)
 continue;
      hrtime_t bin_end_ts = pkt_end_ts;
      if (bin_end_ts >= end_ts)
 bin_end_ts = end_ts - 1;
      tmp_end_bin = (int) ((bin_end_ts - start_ts) / delta);
      hrtime_t bin_start_ts = pkt_start_ts;
      if (bin_start_ts < start_ts)
 bin_start_ts = start_ts;
      tmp_start_bin = (int) ((bin_start_ts - start_ts) / delta);
# 9276 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
      
# 9276 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     (static_cast <bool> (
# 9276 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     tmp_end_bin < numDeltas
# 9276 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     ) ? void (0) : __assert_fail (
# 9276 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     "tmp_end_bin < numDeltas"
# 9276 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     , "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc", 9276, __extension__ __PRETTY_FUNCTION__))
# 9276 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                     ;
      
# 9277 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     (static_cast <bool> (
# 9277 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     tmp_start_bin < numDeltas
# 9277 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     ) ? void (0) : __assert_fail (
# 9277 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     "tmp_start_bin < numDeltas"
# 9277 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     , "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc", 9277, __extension__ __PRETTY_FUNCTION__))
# 9277 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                       ;
      const bool is_offscreen = tmp_end_bin < 0 ? true : false;
      if (tmp_end_bin < 0)
 tmp_end_bin = 0;
      const int pkt_end_bin = tmp_end_bin;
      const int pkt_start_bin = tmp_start_bin;
      if (getRepresentatives && !is_offscreen)
 {





   const int bin = reverseScan ? pkt_start_bin : pkt_end_bin;
   int eventIdx = binRepIdx->fetch (bin);
   if (eventIdx == -1)
     {
       eventIdx = representativeEvents->size ();
       representativeEvents->append (ii);
       binRepIdx->store (bin, eventIdx);
     }
 }
      if (propIds)
 {
   for (int propNum = 0; propNum < propIds->size (); propNum++)
     {
       void *thisProp = propVals->fetch (propNum);
       if (thisProp == 
# 9304 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                      __null
# 9304 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                          )
  continue;
       if (is_offscreen && !propCumulativeChart->fetch (propNum))
  continue;
       int propId = propIds->fetch (propNum);
       long long val;
       if (propId == PROP_NONE)
  val = 1;
       else
  val = packets->getLongValue (propId, ii);
       long nitems = propNumStates->fetch (propNum);
       if (nitems < 1)
  continue;
       else if (nitems == 1)
  {

    Vector<long long>* thisPropVals =
     (Vector<long long>*)thisProp;
    if (thisPropVals->size () == 0)
      thisPropVals->store (numDeltas - 1, 0);
    const int bin = statesUseDuration ? pkt_start_bin : pkt_end_bin;
    if (!propCumulativeChart->fetch (propNum))
      {
        val += thisPropVals->fetch (bin);
        thisPropVals->store (bin, val);
      }
    else
      {

        long long high_value = propCumulativeRecentBinHighVal->fetch (propNum);
        int last_bin = propCumulativeRecentBin->fetch (propNum);
        if (last_bin < bin)
   {


     thisPropVals->store (last_bin, high_value);

     long long last_value = propCumulativeRecentBinLastVal->fetch (propNum);
     for (int kk = last_bin + 1; kk < bin; kk++)
       thisPropVals->store (kk, last_value);

     high_value = 0;
     propCumulativeRecentBinHighVal->store (propNum, high_value);
     propCumulativeRecentBin->store (propNum, bin);
   }
        long long this_value = packets->getLongValue (propId, ii);
        propCumulativeRecentBinLastVal->store (propNum, this_value);
        if (high_value < this_value)
   {

     high_value = this_value;
     propCumulativeRecentBinHighVal->store (propNum, high_value);
   }
        if (ii == hi_pkt_idx)
   {

     thisPropVals->store (bin, high_value);

     for (int kk = bin + 1; kk < numDeltas; kk++)
       thisPropVals->store (kk, this_value);
   }
      }
  }
       else
  {

    Vector<Vector<long long>*>* thisPropStateVals =
     (Vector<Vector<long long>*>*)thisProp;
    if (thisPropStateVals->size () == 0)
      thisPropStateVals->store (numDeltas - 1, 0);
    long stateNum;
    if (val >= 0 && val < nitems)
      stateNum = (long) val;
    else
      stateNum = nitems - 1;
    hrtime_t graph_pkt_dur = pkt_dur;
    hrtime_t graph_pkt_start_ts = pkt_start_ts;
    int tmp2_start_bin = pkt_start_bin;
    if (propId == PROP_MSTATE)
      {
        if (statesUseDuration && extendMicrostates)
   {


     graph_pkt_dur += ptimerTickDuration;
     graph_pkt_start_ts -= ptimerTickDuration;
     hrtime_t bin_start_ts = graph_pkt_start_ts;
     if (bin_start_ts < start_ts)
       bin_start_ts = start_ts;
     tmp2_start_bin = (int) ((bin_start_ts - start_ts) / delta);
   }
      }
    const int graph_pkt_start_bin = statesUseDuration ? tmp2_start_bin : pkt_end_bin;



    long long value_per_bin;
    {
      long long weight;
      if (propId == PROP_MSTATE)
        weight = packets->getLongValue (PROP_NTICK, ii) * ptimerTickDuration;
      else if (graph_pkt_dur)
        weight = graph_pkt_dur;
      else
        weight = 1;
      if (graph_pkt_start_bin != pkt_end_bin)
        {

   double nbins = (double) graph_pkt_dur / delta;
   value_per_bin = weight / nbins;
        }
      else
        value_per_bin = weight;
    }
    for (int evtbin = graph_pkt_start_bin; evtbin <= pkt_end_bin; evtbin++)
      {
        Vector<long long>* stateValues =
         (Vector<long long>*) thisPropStateVals->fetch (evtbin);
        if (stateValues == 
# 9422 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                          __null
# 9422 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                              )
   {

     stateValues = new Vector<long long>(nitems);
     stateValues->store (nitems - 1, 0);
     thisPropStateVals->store (evtbin, stateValues);
   }
        long long new_val = stateValues->fetch (stateNum);
        if (graph_pkt_start_bin == pkt_end_bin ||
     (evtbin > graph_pkt_start_bin && evtbin < pkt_end_bin))
   {
     new_val += value_per_bin;
   }
        else
   {

     const hrtime_t bin_start = start_ts + evtbin * delta;
     const hrtime_t bin_end = start_ts + (evtbin + 1) * delta - 1;
     if (evtbin == graph_pkt_start_bin)
       {

         if (graph_pkt_start_ts < bin_start)
    new_val += value_per_bin;
         else
    {
      double percent = (double) (bin_end - graph_pkt_start_ts) / delta;
      new_val += value_per_bin*percent;
    }
       }
     else
       {

         if (pkt_end_ts > bin_end)
    new_val += value_per_bin;
         else
    {
      double percent = (double) (pkt_end_ts - bin_start) / delta;
      new_val += value_per_bin*percent;
    }
       }
   }
        stateValues->store (stateNum, new_val);
      }
  }
     }
 }
    }
  delete binRepIdx;
  delete propIds;
  delete propCumulativeChart;
  delete propCumulativeRecentBinLastVal;
  delete propCumulativeRecentBinHighVal;
  delete propCumulativeRecentBin;
  if (representativeEvents != 
# 9475 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                             __null 
# 9475 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                  && reverseScan)
    {
      if (repsShowDuration)
 {



   Vector<long> *prunedEvents = new Vector<long>(numDeltas);
   hrtime_t prev_start_ts = MAX_TIME;
   long repCnt = representativeEvents->size ();
   for (long kk = 0; kk < repCnt; kk++)
     {
       long ii = representativeEvents->fetch (kk);
       hrtime_t tmp_end_ts = packets->getLongValue (PROP_TSTAMP, ii);
       hrtime_t tmp_dur = packets->getLongValue (PROP_EVT_TIME, ii);
       hrtime_t tmp_start_ts = tmp_end_ts - tmp_dur;
       if (tmp_start_ts >= prev_start_ts)


  continue;
       prev_start_ts = tmp_start_ts;
       prunedEvents->append (ii);
     }

   representativeEvents->reset ();
   for (long kk = prunedEvents->size () - 1; kk >= 0; kk--)
     {
       long packet_idx = prunedEvents->fetch (kk);
       representativeEvents->append (packet_idx);
     }
   delete prunedEvents;
 }
      else
 {


   long hi_idx = representativeEvents->size () - 1;
   long lo_idx = 0;
   while (hi_idx > lo_idx)
     {

       long lo = representativeEvents->fetch (lo_idx);
       long hi = representativeEvents->fetch (hi_idx);
       representativeEvents->store (lo_idx, hi);
       representativeEvents->store (hi_idx, lo);
       hi_idx--;
       lo_idx++;
     }
 }
    }

dbeGetTLData_done:
  if (getRepresentatives)
    {
      representativeVals = dbeGetTLDataRepVals (view_mode, start_ts, delta,
      numDeltas, packets, representativeEvents, repsShowDuration);
      delete representativeEvents;
    }
  Vector<void*> *results = new Vector<void*> (2);
  results->store (0, representativeVals);
  results->store (1, propVals);
  return results;
}



static Vector<void *> *
dbeGetTLDataRepVals (VMode view_mode, hrtime_t start_ts, hrtime_t delta,
       int numDeltas, DataView*packets,
       Vector<long> *representativeEvents, bool showDuration)
{
  int numrecs = representativeEvents ? representativeEvents->size () : 0;

  Vector<int> *startBins = new Vector<int>(numrecs);
  Vector<int> *numBins = new Vector<int>(numrecs);
  Vector<Obj> *eventIdxs = new Vector<Obj>(numrecs);
  Vector<Obj> *stackIds = 
# 9551 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 9551 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             ;
  if (packets->getProp (PROP_FRINFO))
    stackIds = new Vector<Obj>(numrecs);
  Vector<int> *mstates = 
# 9554 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 9554 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            ;
  if (packets->getProp (PROP_MSTATE))
    mstates = new Vector<int>(numrecs);
  Vector<Vector<long long>*> *sampleVals = 
# 9557 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                          __null
# 9557 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                              ;
  if (packets->getProp (PROP_SMPLOBJ))
    sampleVals = new Vector<Vector<long long>*>(numrecs);
  Vector<long long> *timeStart = new Vector<long long>(numrecs);
  Vector<long long> *timeEnd = new Vector<long long>(numrecs);
  int prevEndBin = -1;
  for (int eventIdx = 0; eventIdx < numrecs; eventIdx++)
    {
      long packetIdx = representativeEvents->fetch (eventIdx);

      const hrtime_t pkt_tstamp = packets->getLongValue (PROP_TSTAMP, packetIdx);
      const hrtime_t pkt_dur = showDuration ? packets->getLongValue (PROP_EVT_TIME, packetIdx) : 0;
      timeStart->store (eventIdx, pkt_tstamp - pkt_dur);
      timeEnd->store (eventIdx, pkt_tstamp);


      int startBin = (int) ((pkt_tstamp - pkt_dur - start_ts) / delta);
      if (startBin <= prevEndBin)
 startBin = prevEndBin + 1;

      int endBin = (int) ((pkt_tstamp - start_ts) / delta);
      if (endBin >= numDeltas)
 endBin = numDeltas - 1;
      int binCnt = endBin - startBin + 1;
      prevEndBin = endBin;
      startBins->store (eventIdx, startBin);
      numBins->store (eventIdx, binCnt);
      eventIdxs->store (eventIdx, packetIdx);
      if (stackIds != 
# 9585 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 9585 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         )
 {
   void* stackId = getStack (view_mode, packets, packetIdx);
   stackIds->store (eventIdx, (Obj) (unsigned long) stackId);
 }
      if (mstates != 
# 9590 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                    __null
# 9590 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                        )
 {
   int mstate = packets->getIntValue (PROP_MSTATE, packetIdx);
   mstates->store (eventIdx, mstate);
 }
      if (sampleVals != 
# 9595 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                       __null
# 9595 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                           )
 {
   Sample* sample = (Sample*) packets->getObjValue (PROP_SMPLOBJ, packetIdx);
   if (!sample || !sample->get_usage ())
     sample = sample;
   else
     {
       PrUsage* prusage = sample->get_usage ();
       Vector<long long> *mstateVals = prusage->getMstateValues ();
       sampleVals->store (eventIdx, mstateVals);
     }
 }
    }

  Vector<void*> *results = new Vector<void*> (8);
  results->store (0, startBins);
  results->store (1, numBins);
  results->store (2, eventIdxs);
  results->store (3, stackIds);
  results->store (4, mstates);
  results->store (5, sampleVals);
  results->store (6, timeStart);
  results->store (7, timeEnd);
  return results;
}



Vector<long long> *
dbeGetTLEventCenterTime (int dbevindex, int exp_id, int data_id,
    int entity_prop_id, int entity_prop_val, int aux,
    long long event_id, long long move_count)
{
  DataView *packets = getTimelinePackets (dbevindex, exp_id, data_id,
       entity_prop_id);
  if (packets == 
# 9630 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 9630 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    return 
# 9631 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 9631 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  long idx = (long) event_id;

  DbeView *dbev = dbeSession->getView (dbevindex);
  VMode view_mode = dbev->get_view_mode ();
  Experiment *exp = dbeSession->get_exp (exp_id);
  int direction;
  if (move_count == 0)
    direction = 0;
  else if (move_count < 0)
    {
      move_count = -move_count;
      direction = -1;
    }
  else
    direction = 1;
  idx = getTLVisibleIdxByStepping (exp, view_mode, entity_prop_id, packets, aux,
       entity_prop_val, idx, move_count, direction);
  if (idx >= 0)
    {
      long long ts = packets->getLongValue (PROP_TSTAMP, idx);
      long long dur = packets->getLongValue (PROP_EVT_TIME, idx);
      long long center = ts - dur / 2;
      Vector<long long> *results = new Vector<long long> (2);
      results->store (0, idx);
      results->store (1, center);
      return results;
    }
  return 
# 9659 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
        __null
# 9659 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
            ;
}

long long
dbeGetTLEventIdxNearTime (int dbevindex, int exp_id, int data_id,
     int entity_prop_id, int entity_prop_val, int aux,
     int searchDirection, long long tstamp)
{
  DataView *packets = getTimelinePackets (dbevindex, exp_id, data_id,
       entity_prop_id);
  if (packets == 
# 9669 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 9669 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    return -1;
  DbeView *dbev = dbeSession->getView (dbevindex);
  VMode view_mode = dbev->get_view_mode ();
  Experiment *exp = dbeSession->get_exp (exp_id);
  if (searchDirection < 0)
    {
      int idx = getTLVisibleIdxByVals (exp, view_mode, entity_prop_id,
           packets, aux, entity_prop_val, tstamp,
           DataView::REL_LTEQ);
      if (idx != -1)
 return idx;
      searchDirection = 1;
    }
  if (searchDirection > 0)
    {
      int idx = getTLVisibleIdxByVals (exp, view_mode, entity_prop_id,
           packets, aux, entity_prop_val, tstamp,
           DataView::REL_GTEQ);
      if (idx != -1)
 return idx;

    }

  long idx1, idx2;
  idx1 = getTLVisibleIdxByVals (exp, view_mode, entity_prop_id,
    packets, aux, entity_prop_val, tstamp,
    DataView::REL_LT);
  idx2 = getTLVisibleIdxByVals (exp, view_mode, entity_prop_id,
    packets, aux, entity_prop_val, tstamp,
    DataView::REL_GTEQ);
  if (idx1 == -1)
    return idx2;
  else if (idx2 == -1)
    return idx1;


  long long t1 = packets->getLongValue (PROP_TSTAMP, idx1);
  long long t2 = packets->getLongValue (PROP_TSTAMP, idx2);
  long long t2dur = packets->getLongValue (PROP_EVT_TIME, idx2);
  long long delta1 = tstamp - t1;
  long long delta2 = (t2 - t2dur) - tstamp;
  if (delta1 > delta2)
    return idx2;
  else
    return idx1;
}

enum Aggr_type
{
  AGGR_NONE,
  AGGR_FAIR,
  AGGR_MAX,
  AGGR_MIN,
  AGGR_CNT,
  AGGR_SUM,
  AGGR_AVG
};

static Aggr_type
getAggrFunc (char *aname)
{
  Aggr_type agrfn = AGGR_NONE;
  if (aname == 
# 9732 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 9732 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
    return agrfn;
  if (strcmp (aname, ((char *) ("FAIR"))) == 0)
    agrfn = AGGR_FAIR;
  else if (strcmp (aname, ((char *) ("MAX"))) == 0)
    agrfn = AGGR_MAX;
  else if (strcmp (aname, ((char *) ("MIN"))) == 0)
    agrfn = AGGR_MIN;
  else if (strcmp (aname, ((char *) ("CNT"))) == 0)
    agrfn = AGGR_CNT;
  else if (strcmp (aname, ((char *) ("SUM"))) == 0)
    agrfn = AGGR_SUM;
  else if (strcmp (aname, ((char *) ("AVG"))) == 0)
    agrfn = AGGR_AVG;
  return agrfn;
}

static long long
computeAggrVal (DefaultMap<long long, long long> *fval_map, Aggr_type agrfn)
{
  long long aval = 0;
  long cnt = 0;
  Vector<long long> *fvals = fval_map->values ();
  long nvals = fvals->size ();
  for (int i = 0; i < nvals; ++i)
    {
      long long val = fvals->fetch (i);
      switch (agrfn)
 {
 case AGGR_FAIR:
   aval = val;
   break;
 case AGGR_MAX:
   if (aval < val || cnt == 0)
     aval = val;
   break;
 case AGGR_MIN:
   if (aval > val || cnt == 0)
     aval = val;
   break;
 case AGGR_CNT:
   aval = cnt + 1;
   break;
 case AGGR_SUM:
 case AGGR_AVG:
   aval += val;
   break;
 case AGGR_NONE:
   break;
 }
      if (agrfn == AGGR_FAIR)
 break;
      cnt += 1;
    }


  if (agrfn == AGGR_AVG)
    if (cnt > 0)
      aval = (aval + cnt / 2) / cnt;
  delete fvals;
  return aval;
}

Vector<long long> *
dbeGetAggregatedValue (int data_id,
         char *lfilter,
         char *fexpr,
         char *pname_ts,
         hrtime_t start_ts,
         hrtime_t delta,
         int num,
         char *pname_key,
         char *aggr_func)
{
  Vector<long long> *res = new Vector<long long>;
  Experiment *exp = dbeSession->get_exp (0);
  if (exp == 
# 9808 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 9808 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    return res;
  hrtime_t end_ts = start_ts + delta * num;
  if (end_ts < start_ts)
    end_ts = MAX_TIME;

  if (exp->get_status () == Experiment::INCOMPLETE
      && exp->getLastEvent () < end_ts)
    exp->update ();

  DataDescriptor *dataDscr = exp->get_raw_events (data_id);
  if (dataDscr == 
# 9819 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 9819 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
    return res;


  int prop_ts = dbeSession->getPropIdByName (pname_ts);
  if (prop_ts == PROP_NONE)
    return res;
  
# 9826 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 (static_cast <bool> (
# 9826 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 prop_ts == -1
# 9826 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 ) ? void (0) : __assert_fail (
# 9826 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 "prop_ts == -1"
# 9826 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc", 9826, __extension__ __PRETTY_FUNCTION__))
# 9826 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                       ;


  Expression *flt_expr = 
# 9829 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 9829 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            ;
  if (lfilter != 
# 9830 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 9830 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    flt_expr = dbeSession->ql_parse (lfilter);
  Expression *func_expr = 
# 9832 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                         __null
# 9832 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                             ;
  if (fexpr != 
# 9833 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 9833 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
    func_expr = dbeSession->ql_parse (fexpr);
  if (func_expr == 
# 9835 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 9835 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
    return res;


  int prop_key = PROP_NONE;
  Data *data_key = 
# 9840 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 9840 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      ;
  if (pname_key != 
# 9841 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 9841 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
    {
      prop_key = dbeSession->getPropIdByName (pname_key);
      data_key = dataDscr->getData (prop_key);
      if (data_key == 
# 9845 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 9845 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         )
 return res;
    }


  Aggr_type agrfn = AGGR_FAIR;
  if (aggr_func != 
# 9851 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 9851 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
    {
      agrfn = getAggrFunc (aggr_func);
      if (agrfn == AGGR_NONE)
 return res;
    }
  DefaultMap<long long, long long> *
 fval_map = new DefaultMap<long long, long long>;
  Vector<long long> *key_set = 
# 9859 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                              __null
# 9859 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                  ;
  
# 9860 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 (static_cast <bool> (
# 9860 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 key_set != 
# 9860 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 __null) ? void (0) : __assert_fail (
# 9860 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
 "key_set != NULL"
# 9860 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
 , "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc", 9860, __extension__ __PRETTY_FUNCTION__))
# 9860 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         ;
  if (key_set == 
# 9861 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 9861 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    {
      key_set = new Vector<long long>;
      key_set->append (0L);
    }
  DefaultMap<long long, int> *key_seen = new DefaultMap<long long, int>;
  long idx_prev = -1;
  for (int tidx = 0; tidx < num; ++tidx)
    {
      long idx_cur = -1;
      
# 9871 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     (static_cast <bool> (
# 9871 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     idx_cur != -1
# 9871 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     ) ? void (0) : __assert_fail (
# 9871 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     "idx_cur != -1"
# 9871 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
     , "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc", 9871, __extension__ __PRETTY_FUNCTION__))
# 9871 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                           ;
      int left = key_set->size ();
      key_seen->clear ();
      for (long idx = idx_cur; idx > idx_prev; --idx)
 {
   long id = 0;
   
# 9877 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
  (static_cast <bool> (
# 9877 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
  id != 0
# 9877 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
  ) ? void (0) : __assert_fail (
# 9877 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
  "id != 0"
# 9877 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
  , "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc", 9877, __extension__ __PRETTY_FUNCTION__))
# 9877 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  ;


   Expression::Context ctx (dbeSession->getView (0), exp, 
# 9880 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                         __null
# 9880 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                             , id);

   if (flt_expr != 
# 9882 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 9882 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
     if (flt_expr->eval (&ctx) == 0)
       continue;



   long long key = 0;
   if (data_key != 
# 9889 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 9889 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
     key = data_key->fetchLong (id);


   if (key_seen->get (key) == 1)
     continue;
   key_seen->put (key, 1);
   left -= 1;



   long long fval = func_expr->eval (&ctx);
   fval_map->put (key, fval);
   if (left == 0)
     break;
 }
      idx_prev = idx_cur;
      long long aval = computeAggrVal (fval_map, agrfn);
      res->store (tidx, aval);
    }
  delete key_seen;
  delete fval_map;
  delete flt_expr;
  delete func_expr;
  return res;
}

Vector<char*> *
dbeGetLineInfo (Obj pc)
{
  DbeInstr *instr = (DbeInstr*) pc;
  if (instr == 
# 9920 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null 
# 9920 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   || instr->get_type () != Histable::INSTR)
    return 
# 9921 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 9921 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  DbeLine *dbeline = (DbeLine*) instr->convertto (Histable::LINE);
  const char *fname = dbeline ? dbeline->sourceFile->get_name () : ((char *) (""));
  char lineno[16];
  *lineno = '\0';
  if (dbeline != 
# 9926 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 9926 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    snprintf (lineno, sizeof (lineno), ((char *) ("%d")), dbeline->lineno);
  Vector<char*> *res = new Vector<char*>(2);
  res->store (0, strdup (fname));
  res->store (1, strdup (lineno));
  return res;
}

int
dbeSetAlias (char *name, char *uname, char *expr)
{
  char *res = dbeSession->indxobj_define (name, uname, expr, 
# 9937 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                            __null
# 9937 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                , 
# 9937 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                                  __null
# 9937 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                      );
  return res == 
# 9938 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null 
# 9938 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    ? 0 : 1;
}

Vector<char*> *
dbeGetAlias (char *name)
{
  Vector<char*> *res = new Vector<char*>;
  int idx = dbeSession->findIndexSpaceByName (name);
  if (idx >= 0)
    {
      char *str = dbeSession->getIndexSpaceDescr (idx);
      res->append (dbe_strdup (str));
      str = dbeSession->getIndexSpaceExprStr (idx);
      res->append (dbe_strdup (str));
    }
  return res;
}

static int
key_cmp (const void *p1, const void *p2)
{
  long long ll1 = *(long long*) p1;
  long long ll2 = *(long long*) p2;
  return ll1 < ll2 ? -1 : ll1 > ll2 ? 1 : 0;
}

Vector<Vector<long long>*> *
dbeGetXYPlotData (
    int data_id,
    char *lfilter,
    char *arg,
    char *func1,
    char *aggr1,
    char *func2,
    char *aggr2,
    char *func3,
    char *aggr3)
{
  Vector<Vector<long long>*> *res = new Vector<Vector<long long>*>;
  Experiment *exp = dbeSession->get_exp (0);
  if (exp == 
# 9978 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 9978 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    return res;
  if (exp->get_status () == Experiment::INCOMPLETE)
    exp->update ();

  DataDescriptor *dataDscr = exp->get_raw_events (data_id);
  if (dataDscr == 
# 9984 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 9984 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
    return res;


  Vector<Expression*> *funcs = new Vector<Expression*>;
  Vector<Aggr_type> *aggrs = new Vector<Aggr_type>;
  Vector<DefaultMap<long long, long long>*> *fval_maps =
   new Vector<DefaultMap<long long, long long>*>;
  Vector<DefaultMap<long long, long>*> *cnt_maps =
   new Vector<DefaultMap<long long, long>*>;
  if (func1 != 
# 9994 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
              __null
# 9994 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  )
    {
      Expression *expr = dbeSession->ql_parse (func1);
      funcs->append (expr);
      aggrs->append (getAggrFunc (aggr1));
      fval_maps->append (new DefaultMap<long long, long long>);
      cnt_maps->append (new DefaultMap<long long, long>);
      res->append (new Vector<long long>);
      if (func2 != 
# 10002 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                  __null
# 10002 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                      )
 {
   expr = dbeSession->ql_parse (func2);
   funcs->append (expr);
   aggrs->append (getAggrFunc (aggr2));
   fval_maps->append (new DefaultMap<long long, long long>);
   cnt_maps->append (new DefaultMap<long long, long>);
   res->append (new Vector<long long>);
   if (func3 != 
# 10010 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 10010 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
     {
       expr = dbeSession->ql_parse (func3);
       funcs->append (expr);
       aggrs->append (getAggrFunc (aggr3));
       fval_maps->append (new DefaultMap<long long, long long>);
       cnt_maps->append (new DefaultMap<long long, long>);
       res->append (new Vector<long long>);
     }
 }
    }
  if (funcs->size () == 0)
    {
      funcs->destroy ();
      delete funcs;
      fval_maps->destroy ();
      delete fval_maps;
      cnt_maps->destroy ();
      delete cnt_maps;
      delete aggrs;
      return res;
    }
  Expression *arg_expr = 
# 10032 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 10032 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            ;
  if (arg != 
# 10033 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 10033 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    arg_expr = dbeSession->ql_parse (arg);
  if (arg_expr == 
# 10035 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                 __null
# 10035 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                     )
    {
      funcs->destroy ();
      delete funcs;
      fval_maps->destroy ();
      delete fval_maps;
      cnt_maps->destroy ();
      delete cnt_maps;
      delete aggrs;
      return res;
    }
  Expression *flt_expr = 
# 10046 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                        __null
# 10046 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                            ;
  if (lfilter != 
# 10047 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 10047 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    flt_expr = dbeSession->ql_parse (lfilter);
  Vector<long long> *kidx_map = new Vector<long long>();
  for (long i = 0; i < dataDscr->getSize (); i++)
    {
      Expression::Context ctx (dbeSession->getView (0), exp, 
# 10052 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                                            __null
# 10052 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                                                , i);

      if (flt_expr != 
# 10054 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                     __null
# 10054 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                         )
 if (flt_expr->eval (&ctx) == 0)
   continue;


      long long key = arg_expr->eval (&ctx);
      if (kidx_map->find (key) == -1)
 kidx_map->append (key);
      for (long j = 0; j < funcs->size (); ++j)
 {
   Expression *func = funcs->fetch (j);
   Aggr_type aggr = aggrs->fetch (j);
   DefaultMap<long long, long long> *fval_map = fval_maps->fetch (j);
   DefaultMap<long long, long> *cnt_map = cnt_maps->fetch (j);
   long long fval = func->eval (&ctx);
   long long aval = fval_map->get (key);
   long cnt = cnt_map->get (key);
   switch (aggr)
     {
     case AGGR_NONE:
     case AGGR_FAIR:
       if (cnt == 0)
  aval = fval;
       break;
     case AGGR_MAX:
       if (aval < fval || cnt == 0)
  aval = fval;
       break;
     case AGGR_MIN:
       if (aval > fval || cnt == 0)
  aval = fval;
       break;
     case AGGR_CNT:
       aval = cnt + 1;
       break;
     case AGGR_SUM:
     case AGGR_AVG:
       aval += fval;
       break;
     }
   cnt_map->put (key, cnt + 1);
   fval_map->put (key, aval);
 }
    }
  kidx_map->sort (key_cmp);


  for (long j = 0; j < funcs->size (); ++j)
    {
      Aggr_type aggr = aggrs->fetch (j);
      Vector<long long> *resj = res->fetch (j);
      DefaultMap<long long, long long> *
       fval_map = fval_maps->fetch (j);
      DefaultMap<long long, long> *
       cnt_map = cnt_maps->fetch (j);
      for (int kidx = 0; kidx < kidx_map->size (); ++kidx)
 {
   long long key = kidx_map->fetch (kidx);
   long long aval = fval_map->get (key);
   if (aggr == AGGR_AVG)
     {
       long cnt = cnt_map->get (key);
       if (cnt > 0)
  aval = (aval + cnt / 2) / cnt;
     }
   resj->append (aval);
 }
    }
  delete flt_expr;
  funcs->destroy ();
  delete funcs;
  delete aggrs;
  delete arg_expr;
  delete kidx_map;
  fval_maps->destroy ();
  delete fval_maps;
  cnt_maps->destroy ();
  delete cnt_maps;
  return res;
}
# 10142 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
int
dbeGetSignalValue (char *signal)
{
  int ret = -1;
  if (signal == 
# 10146 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null
# 10146 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                   )
    return ret;
  if (strcmp (signal, "SIGUSR1") == 0)
    return (
# 10149 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
           10
# 10149 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  );
  if (strcmp (signal, "SIGUSR2") == 0)
    return (
# 10151 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
           12
# 10151 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  );
  if (strcmp (signal, "SIGPROF") == 0)
    return (
# 10153 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
           27
# 10153 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                  );
  return ret;
}

char *
dbeSendSignal (pid_t p, int signum)
{
  int ret = kill (p, signum);
  if (p == 0 || p == -1)
    return (dbe_sprintf (gettext("kill of process %d not supported\n"), p));
  if (ret == 0)
    return 
# 10164 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 10164 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  char *msg = dbe_sprintf (gettext("kill(%d, %d) failed: %s\n"), p, signum,
      strerror (
# 10166 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               (*__errno_location ())
# 10166 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    ));
  return msg;
}

char *
dbeGetCollectorControlValue (char *control)
{
  if (control == 
# 10173 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 10173 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    return 
# 10174 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 10174 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  if (col_ctr == 
# 10175 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 10175 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    col_ctr = new Coll_Ctrl (1);
  char *msg = col_ctr->get (control);
  return msg;
}

char *
dbeSetCollectorControlValue (char *control, char * value)
{
  if (control == 
# 10184 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 10184 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    return 
# 10185 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 10185 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  if (col_ctr == 
# 10186 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 10186 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    col_ctr = new Coll_Ctrl (1);
  char *msg = col_ctr->set (control, value);
  return msg;
}

char *
dbeUnsetCollectorControlValue (char *control)
{
  if (control == 
# 10195 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 10195 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    return 
# 10196 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
          __null
# 10196 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
              ;
  if (col_ctr == 
# 10197 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                __null
# 10197 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    )
    col_ctr = new Coll_Ctrl (1);
  char *msg = col_ctr->unset (control);
  return msg;
}

void
dbeSetLocation (const char *fname, const char *location)
{
  Vector<SourceFile*> *sources = dbeSession->get_sources ();
  for (long i = 0, sz = sources ? sources->size () : 0; i < sz; i++)
    {
      SourceFile *src = sources->get (i);
      DbeFile *df = src->dbeFile;
      if (df && (strcmp (fname, df->get_name ()) == 0))
 {
   df->find_file ((char *) location);
   break;
 }
    }
}

void
dbeSetLocations (Vector<const char *> *fnames, Vector<const char *> *locations)
{
  if (fnames == 
# 10222 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null 
# 10222 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    || locations == 
# 10222 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                    __null
      
# 10223 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
     || fnames->size () != locations->size ())
    return;
  for (long i = 0, sz = fnames->size (); i < sz; i++)
    dbeSetLocation (fnames->get (i), locations->get (i));
}

Vector<void*> *
dbeResolvedWith_setpath (const char *path)
{
  Vector<char*> *names = new Vector<char*>();
  Vector<char*> *pathes = new Vector<char*>();
  Vector<long long> *ids = new Vector<long long>();
  Vector<SourceFile*> *sources = dbeSession->get_sources ();
  for (long i = 0, sz = sources ? sources->size () : 0; i < sz; i++)
    {
      SourceFile *src = sources->get (i);
      DbeFile *df = src->dbeFile;
      if (df == 
# 10240 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null 
# 10240 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    || (df->filetype & DbeFile::F_FICTION) != 0)
 continue;
      char *fnm = df->get_name ();
      if ((df->filetype & (DbeFile::F_JAVACLASS | DbeFile::F_JAVA_SOURCE)) != 0)
 {
   char *jnm = dbe_sprintf (((char *) ("%s/%s")), path, fnm);
   if (df->check_access (jnm) == DbeFile::F_FILE)
     {
       names->append (dbe_strdup (fnm));
       pathes->append (jnm);
       ids->append (src->id);
       continue;
     }
   free (jnm);
 }
      char *nm = dbe_sprintf (((char *) ("%s/%s")), path, get_basename (fnm));
      if (df->check_access (nm) == DbeFile::F_FILE)
 {
   names->append (dbe_strdup (fnm));
   pathes->append (nm);
   ids->append (src->id);
   continue;
 }
      free (nm);
    }
  if (names->size () != 0)
    {
      Vector<void*> *data = new Vector<void*>(3);
      data->append (names);
      data->append (pathes);
      data->append (ids);
      return data;
    }
  return 
# 10273 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
        __null
# 10273 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
            ;
}

Vector<void*> *
dbeResolvedWith_pathmap (const char *old_prefix, const char *new_prefix)
{
  size_t len = strlen (old_prefix);
  Vector<char*> *names = new Vector<char*>();
  Vector<char*> *pathes = new Vector<char*>();
  Vector<long long> *ids = new Vector<long long>();
  Vector<SourceFile*> *sources = dbeSession->get_sources ();
  for (long i = 0, sz = sources ? sources->size () : 0; i < sz; i++)
    {
      SourceFile *src = sources->get (i);
      DbeFile *df = src->dbeFile;
      if (df == 
# 10288 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
               __null 
# 10288 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                    || (df->filetype & DbeFile::F_FICTION) != 0)
 continue;
      char *fnm = df->get_name ();
      if (strncmp (old_prefix, fnm, len) == 0
   && (fnm[len] == '/' || fnm[len] == '\0'))
 {
   char *nm = dbe_sprintf (((char *) ("%s/%s")), new_prefix, fnm + len);
   if (df->check_access (nm) == DbeFile::F_FILE)
     {
       names->append (dbe_strdup (fnm));
       pathes->append (nm);
       ids->append (src->id);
       continue;
     }
   if ((df->filetype & DbeFile::F_JAVA_SOURCE) != 0)
     {
       free (nm);
       nm = dbe_sprintf (((char *) ("%s/%s")), new_prefix, fnm);
       if (df->check_access (nm) == DbeFile::F_FILE)
  {
    names->append (dbe_strdup (fnm));
    pathes->append (nm);
    ids->append (src->id);
    continue;
  }
     }
   free (nm);
 }
    }
  if (names->size () != 0)
    {
      Vector<void*> *data = new Vector<void*>(3);
      data->append (names);
      data->append (pathes);
      data->append (ids);
      return data;
    }
  return 
# 10325 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
        __null
# 10325 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
            ;
}

void
dbe_archive (Vector<long long> *ids, Vector<const char *> *locations)
{
  if (ids == 
# 10331 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null 
# 10331 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                 || locations == 
# 10331 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
                                 __null 
# 10331 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                                      || ids->size () != locations->size ())
    return;
  Experiment *exp = dbeSession->get_exp (0);
  if (exp == 
# 10334 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc" 3 4
            __null
# 10334 "/doner/binutils/binutils-515f23e/gprofng/src/Dbe.cc"
                )
    return;
  Vector<SourceFile*> *sources = dbeSession->get_sources ();
  for (long i1 = 0, sz1 = ids->size (); i1 < sz1; i1++)
    {
      long long id = ids->get (i1);
      for (long i = 0, sz = sources ? sources->size () : 0; i < sz; i++)
 {
   SourceFile *src = sources->get (i);
   if (src->id == id)
     {
       DbeFile *df = src->dbeFile;
       if (df)
  {
    char *fnm = df->find_file ((char *) locations->get (i1));
    if (fnm)
      {
        char *nm = df->get_name ();
        char *anm = exp->getNameInArchive (nm, false);
        exp->copy_file (fnm, anm, true);
        free (anm);
      }
  }
     }
 }
    }
}




char *
dbeCheckConnection (char *str)
{
  return dbe_strdup (str);
}
